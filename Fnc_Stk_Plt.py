import matplotlib as mpl
mpl.use('Agg')
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec
import matplotlib.patches as patches
from matplotlib import colors as mcolors
import matplotlib.ticker as mticker
from numpy import mean,median

from decimal import *
from progressbar import *               # just a simple progress bar

from Fnc_Stk_Spc import *
from Fnc_Stk_Fts import *
from Fnc_Stk_Mth import *
from Fnc_Stk_Utl import *
from Fnc_Stk_Dir import *
from Fnc_Stk_Utl import *
from Fnc_Stk_Tbl import *

import Lines_Dictionary
LINES = Lines_Dictionary.LINES_PLT_FG
####Fnc_Stk_Plt####
def align_yaxis(ax1, v1, ax2, v2):
	"""adjust ax2 ylimit so that v2 in ax2 is aligned to v1 in ax1"""
	_, y1 = ax1.transData.transform((0, v1))
	_, y2 = ax2.transData.transform((0, v2))
	inv = ax2.transData.inverted()
	_, dy = inv.transform((0, 0)) - inv.transform((0, y1-y2))
	miny, maxy = ax2.get_ylim()
	ax2.set_ylim(miny+dy, maxy+dy)

def Plot_4Spc(specfile1,specfile2,specfile3,specfile4,*args, **kwargs):
	dest_dir  = kwargs.get('dest_dir',None)
	autoaxis  = kwargs.get('autoaxis',False)
	verbose   = kwargs.get('verbose' , False)
	epssave   = kwargs.get('epssave' , False)
	showplot  = kwargs.get('showplot', False)

	lmb_min = kwargs.get('lmb_min',1200)
	lmb_max = kwargs.get('lmb_max',1700)

	if dest_dir != None:
		PLOTFILENAME  = str(dest_dir)  + '/' + (str(specfile1).split('.fits')[0]).split('/')[-1] + '-pre-pst.pdf'
		PLOTFILENAME2 = str(dest_dir)  + '/' + (str(specfile1).split('.fits')[0]).split('/')[-1] + '-pre-pst.eps'
	elif dest_dir == None:
		PLOTFILENAME  = ind_plt_res    + '/' + (str(specfile1).split('.fits')[0]).split('/')[-1] + '-pre-pst.pdf'
		PLOTFILENAME2 = ind_plt_res    + '/' + (str(specfile1).split('.fits')[0]).split('/')[-1] + '-pre-pst.eps'

	try:
		label_1 = str((specfile1.split('sc_',1)[-1]).split('_',1)[0]) + ', z: ' + str(Header_Get(specfile1,'Z_0'))+ '; glx_ref_id:  ' + str(Header_Get(specfile1,'ID_REF')) + ' z_glx_ref: ' + str(Header_Get(specfile1,'Z_REF'))
		clr1      = 'black'
		clr_tag_1 = 'red'
		clr_tag_2 = 'blue'
		clr_tag_3 = 'blue'
		clr_tag_4 = 'blue'
	except KeyError:
		label_1   = (str(specfile1).split('.fits')[0]).split('/')[-1]
		clr1      = 'red'
		clr_tag_1 = 'black'
		clr_tag_2 = 'black'
		clr_tag_3 = 'black'
		clr_tag_4 = 'black'
	try:
		label_2 = str((specfile2.split('sc_',1)[-1]).split('_',1)[0]) + ', z: ' + str(Header_Get(specfile2,'Z_0'))+ '; glx_ref_id:  ' + str(Header_Get(specfile2,'ID_REF')) + ' z_glx_ref: ' + str(Header_Get(specfile2,'Z_REF'))
		clr2      = 'black'
		clr_tag_1 = 'red'
		clr_tag_2 = 'blue'
		clr_tag_3 = 'blue'
		clr_tag_4 = 'blue'
	except KeyError:
		label_2   = (str(specfile2).split('.fits')[0]).split('/')[-1]
		clr2      = 'blue'
		clr_tag_1 = 'black'
		clr_tag_2 = 'black'
		clr_tag_3 = 'black'
		clr_tag_4 = 'black'
	try:
		label_3 = str((specfile3.split('sc_',1)[-1]).split('_',1)[0]) + ', z: ' + str(Header_Get(specfile3,'Z_0'))+ '; glx_ref_id:  ' + str(Header_Get(specfile3,'ID_REF')) + ' z_glx_ref: ' + str(Header_Get(specfile3,'Z_REF'))
		clr3      = 'black'
		clr_tag_1 = 'red'
		clr_tag_2 = 'blue'
		clr_tag_3 = 'blue'
		clr_tag_4 = 'blue'
	except KeyError:
		label_3   = (str(specfile3).split('.fits')[0]).split('/')[-1]
		clr3      = 'magenta'
		clr_tag_1 = 'black'
		clr_tag_2 = 'black'
		clr_tag_3 = 'black'
		clr_tag_4 = 'black'

	try:
		label_4 = str((specfile4.split('sc_',1)[-1]).split('_',1)[0]) + ', z: ' + str(Header_Get(specfile4,'Z_0'))+ '; glx_ref_id:  ' + str(Header_Get(specfile4,'ID_REF')) + ' z_glx_ref: ' + str(Header_Get(specfile4,'Z_REF'))
		clr4      = 'black'
		clr_tag_1 = 'red'
		clr_tag_2 = 'blue'
		clr_tag_3 = 'blue'
		clr_tag_4 = 'blue'
	except KeyError:
		label_4   = (str(specfile4).split('.fits')[0]).split('/')[-1]
		clr4      = 'green'
		clr_tag_1 = 'black'
		clr_tag_2 = 'black'
		clr_tag_3 = 'black'
		clr_tag_4 = 'black'

	print
	print label_1
	print label_2
	print label_3
	print label_4
	print
	lambda_sp_1,inten_sp_1,crval_sp_1,cdel1_sp_1 = Spectra_x_y(specfile1)[0], Spectra_x_y(specfile1)[1],Spectra_x_y(specfile1)[2],Spectra_x_y(specfile1)[3]
	lambda_sp_2,inten_sp_2,crval_sp_2,cdel1_sp_2 = Spectra_x_y(specfile2)[0], Spectra_x_y(specfile2)[1],Spectra_x_y(specfile2)[2],Spectra_x_y(specfile2)[3]
	lambda_sp_3,inten_sp_3,crval_sp_3,cdel1_sp_3 = Spectra_x_y(specfile3)[0], Spectra_x_y(specfile3)[1],Spectra_x_y(specfile3)[2],Spectra_x_y(specfile3)[3]
	lambda_sp_4,inten_sp_4,crval_sp_4,cdel1_sp_4 = Spectra_x_y(specfile4)[0], Spectra_x_y(specfile4)[1],Spectra_x_y(specfile4)[2],Spectra_x_y(specfile4)[3]

	try:
		z_glx_ref_1 = Header_Get(specfile1,'Z_REF')
	except KeyError:
		z_glx_ref_1 = 0
	try:
		z_glx_zro_1 = Header_Get(specfile1,'Z_0')
	except KeyError:
		z_glx_zro_1 = 0

	try:
		z_glx_ref_2 = Header_Get(specfile2,'Z_REF')
	except KeyError:
		z_glx_ref_2 = 0
	try:
		z_glx_zro_2 = Header_Get(specfile2,'Z_0')
	except KeyError:
		z_glx_zro_2 = 0

	try:
		z_glx_ref_3 = Header_Get(specfile3,'Z_REF')
	except KeyError:
		z_glx_ref_3 = 0
	try:
		z_glx_zro_3 = Header_Get(specfile3,'Z_0')
	except KeyError:
		z_glx_zro_3 = 0

	try:
		z_glx_ref_4 = Header_Get(specfile4,'Z_REF')
	except KeyError:
		z_glx_ref_4 = 0
	try:
		z_glx_zro_4 = Header_Get(specfile4,'Z_0')
	except KeyError:
		z_glx_zro_4 = 0

	fxsize=11
	fysize=8
	f = plt.figure(num=None, figsize=(11, 8), dpi=180, facecolor='w',
		edgecolor='k')
	plt.subplots_adjust(
		left 	= (16/25.4)/fxsize,                   #-26 bigger 22-def 
		bottom 	= (12/25.4)/fysize,                   #20 bigger  19-def 
		right 	= 1 - (6/25.4)/fxsize,                #            2-def  
		top 	= 1 - (15/25.4)/fysize)               #            4-def
	plt.subplots_adjust(hspace=0)#,wspace=0)

	gs0 = gridspec.GridSpec(4, 1)

	##########################################SPEC-1###################################

	gs11 = gridspec.GridSpecFromSubplotSpec(1, 1, subplot_spec=gs0[0])
		
	ax110 = plt.Subplot(f, gs11[0,0])
	f.add_subplot(ax110)

	ax110.set_rasterization_zorder(1)
	plt.autoscale(enable=True, axis='y', tight=False)
	ax110.xaxis.set_tick_params(labelsize=16)
	ax110.yaxis.set_tick_params(labelsize=16)
	#ax110.set_title('Teste')
	xticklabels = ax110.get_xticklabels()
	plt.setp(xticklabels, visible=False,family='serif')
	yticklabels = ax110.get_yticklabels()
	plt.setp(yticklabels, visible=True,family='serif')

	minorLocator_x   = plt.MultipleLocator()
	majorLocator_x   = plt.MultipleLocator(50)
	#minorLocator_y   = plt.MultipleLocator(0.1)
	#majorLocator_y   = plt.MultipleLocator(0.5)
	ax110.xaxis.set_minor_locator(minorLocator_x)
	ax110.xaxis.set_major_locator(majorLocator_x)
	#ax110.yaxis.set_minor_locator(minorLocator_y)
	#ax110.yaxis.set_major_locator(majorLocator_y)
	plt.tick_params(which='both', width=0.7)
	plt.tick_params(which='major', length=5)
	plt.tick_params(which='minor', length=2)
	ax110.minorticks_on()

	ax110.yaxis.set_tick_params(which='both',labelsize=16,direction='in',color='black',bottom=True,top=True,left=True,right=True)
	ax110.xaxis.set_tick_params(which='both',labelsize=16,direction='in',color='black',bottom=True,top=True,left=True,right=True)

	plt.ylabel('F$_\lambda$ (ergs/sec/cm$^{2}/\AA$)',fontsize=16, family = 'serif')

	mask = (lambda_sp_1 >= lmb_min) & (lambda_sp_1 <= lmb_max)
	plt.plot(lambda_sp_1[mask], inten_sp_1[mask],color=clr1,label=label_1)
	lg=plt.legend(loc=1,prop={'size':14})
	lg.draw_frame(False)

	plt.xlim([lmb_min,lmb_max])
	xmin, xmax = plt.xlim()
	plt.xlim((xmin,xmax))

	plt.plot([lmb_min, lmb_max], [1, 1], color='black', lw=1, alpha=0.5)

	if autoaxis == False:
		nmin  = int(abs(lmb_min - crval_sp_1) / cdel1_sp_1)
		nmax  = int(abs(lmb_max - crval_sp_1) / cdel1_sp_1)
		min_y = bn.nanmin(inten_sp_1[mask])#min(inten_sp_1[nmin:nmax])
		max_y = bn.nanmax(inten_sp_1[mask])#max(inten_sp_1[nmin:nmax])
		plt.ylim([min_y,max_y])
		ymin, ymax = plt.ylim()
		plt.ylim((ymin,ymax))
	elif autoaxis == True:
		min_y, max_y = ax110.get_ylim()

	#################LINE ID-4-SPEC#################
	z_glx_rsf=0
	for lines in range(len(LINES[0])):
		if (lmb_min < LINES[0][lines]*(1+z_glx_rsf) < lmb_max):
			plt.plot([LINES[0][lines]*(1+z_glx_rsf),LINES[0][lines]*(1+z_glx_rsf)],[min_y,max_y],color=clr_tag_1, ls=':',lw=1.5)
			ax110.text(LINES[0][lines]*(1+z_glx_rsf),min_y,LINES[4][lines],rotation=90,va='bottom',fontsize=16,style='oblique',color=clr_tag_1)
		elif LINES[0][lines]*(1+z_glx_rsf) > 6700 :
			break
		if (lmb_min<LINES[0][lines]*((1+z_glx_zro_1)/(1+z_glx_ref_1))<lmb_max):
			plt.plot([LINES[0][lines]*((1+z_glx_zro_1)/(1+z_glx_ref_1)),LINES[0][lines]*((1+z_glx_zro_1)/(1+z_glx_ref_1))],[min_y,max_y],color=clr_tag_1, ls=':',lw=1.5)
			ax110.text(LINES[0][lines]*((1+z_glx_zro_1)/(1+z_glx_ref_1)),min_y,LINES[4][lines],rotation=90,va='bottom',fontsize=16,style='oblique',color=clr_tag_1)
		elif LINES[0][lines]*(1+z_glx_ref_1) > 6700 :
			break
	#################LINE ID-4-SPEC#################


	##########################################SPEC-2###################################

	gs21 = gridspec.GridSpecFromSubplotSpec(1, 1, subplot_spec=gs0[1])
		
	ax210 = plt.Subplot(f, gs21[999999.99999,999999.99999])
	f.add_subplot(ax210)

	ax210.set_rasterization_zorder(1)
	plt.autoscale(enable=True, axis='y', tight=False)
	ax210.xaxis.set_tick_params(labelsize=16)
	ax210.yaxis.set_tick_params(labelsize=16)
	#ax210.set_title('Teste')
	xticklabels = ax210.get_xticklabels()
	plt.setp(xticklabels, visible=False,family='serif')
	yticklabels = ax210.get_yticklabels()
	plt.setp(yticklabels, visible=True,family='serif')

	minorLocator_x   = plt.MultipleLocator()
	majorLocator_x   = plt.MultipleLocator(50)
	#minorLocator_y   = plt.MultipleLocator(0.1)
	#majorLocator_y   = plt.MultipleLocator(0.5)
	ax210.xaxis.set_minor_locator(minorLocator_x)
	ax210.xaxis.set_major_locator(majorLocator_x)
	#ax210.yaxis.set_minor_locator(minorLocator_y)
	#ax210.yaxis.set_major_locator(majorLocator_y)
	plt.tick_params(which='both', width=0.7)
	plt.tick_params(which='major', length=5)
	plt.tick_params(which='minor', length=2)
	ax210.minorticks_on()

	ax210.yaxis.set_tick_params(which='both',labelsize=16,direction='in',color='black',bottom=True,top=True,left=True,right=True)
	ax210.xaxis.set_tick_params(which='both',labelsize=16,direction='in',color='black',bottom=True,top=True,left=True,right=True)

	plt.ylabel('F$_\lambda$ (ergs/sec/cm$^{2}/\AA$)',fontsize=16, family = 'serif')
	#plt.ylabel('Intensity',fontsize=16, family = 'serif')

	mask = (lambda_sp_2 >= lmb_min) & (lambda_sp_2 <= lmb_max)
	plt.plot(lambda_sp_2[mask], inten_sp_2[mask],color=clr2,label=label_2)
	lg=plt.legend(loc=1,prop={'size':14})
	lg.draw_frame(False)

	plt.xlim([lmb_min,lmb_max])
	xmin, xmax = plt.xlim()
	plt.xlim((xmin,xmax))

	plt.plot([lmb_min, lmb_max], [1, 1], color='black', lw=1, alpha=0.5)

	if autoaxis == False:
		nmin  = int(abs(lmb_min - crval_sp_2) / cdel1_sp_2)
		nmax  = int(abs(lmb_max - crval_sp_2) / cdel1_sp_2)
		min_y = bn.nanmin(inten_sp_2[mask])#min(inten_sp_2[nmin:nmax])
		max_y = bn.nanmax(inten_sp_2[mask])#max(inten_sp_2[nmin:nmax])
		plt.ylim([min_y,max_y])
		ymin, ymax = plt.ylim()
		plt.ylim((ymin,ymax))
	elif autoaxis == True:
		min_y, max_y = ax210.get_ylim()

	#################LINE ID-4-SPEC#################
	z_glx_rsf=0
	for lines in range(len(LINES[0])):
		if (lmb_min < LINES[0][lines]*(1+z_glx_rsf) < lmb_max):
			plt.plot([LINES[0][lines]*(1+z_glx_rsf),LINES[0][lines]*(1+z_glx_rsf)],[min_y,max_y],color=clr_tag_2, ls=':',lw=1.5)
			ax210.text(LINES[0][lines]*(1+z_glx_rsf),min_y,LINES[4][lines],rotation=90,va='bottom',fontsize=16,style='oblique',color=clr_tag_2)
		elif LINES[0][lines]*(1+z_glx_rsf) > 6700 :
			break
		if (lmb_min<LINES[0][lines]*((1+z_glx_zro_2)/(1+z_glx_ref_2))<lmb_max):
			plt.plot([LINES[0][lines]*((1+z_glx_zro_2)/(1+z_glx_ref_2)),LINES[0][lines]*((1+z_glx_zro_2)/(1+z_glx_ref_2))],[min_y,max_y],color=clr_tag_2, ls=':',lw=1.5)
			ax210.text(LINES[0][lines]*((1+z_glx_zro_2)/(1+z_glx_ref_2)),min_y,LINES[4][lines],rotation=90,va='bottom',fontsize=16,style='oblique',color=clr_tag_2)
		elif LINES[0][lines]*(1+z_glx_ref_2) > 6700 :
			break
	#################LINE ID-4-SPEC#################




	##########################################SPEC-3###################################

	gs31 = gridspec.GridSpecFromSubplotSpec(1, 1, subplot_spec=gs0[2])
		
	ax310 = plt.Subplot(f, gs31[999999.99999,999999.99999])
	f.add_subplot(ax310)

	ax310.set_rasterization_zorder(1)
	plt.autoscale(enable=True, axis='y', tight=False)
	ax310.xaxis.set_tick_params(labelsize=16)
	ax310.yaxis.set_tick_params(labelsize=16)
	#ax310.set_title('Teste')
	xticklabels = ax310.get_xticklabels()
	plt.setp(xticklabels, visible=False,family='serif')
	yticklabels = ax310.get_yticklabels()
	plt.setp(yticklabels, visible=True,family='serif')

	minorLocator_x   = plt.MultipleLocator()
	majorLocator_x   = plt.MultipleLocator(50)
	#minorLocator_y   = plt.MultipleLocator(0.1)
	#majorLocator_y   = plt.MultipleLocator(0.5)
	ax310.xaxis.set_minor_locator(minorLocator_x)
	ax310.xaxis.set_major_locator(majorLocator_x)
	#ax310.yaxis.set_minor_locator(minorLocator_y)
	#ax310.yaxis.set_major_locator(majorLocator_y)
	plt.tick_params(which='both', width=0.7)
	plt.tick_params(which='major', length=5)
	plt.tick_params(which='minor', length=2)
	ax310.minorticks_on()

	ax310.yaxis.set_tick_params(which='both',labelsize=16,direction='in',color='black',bottom=True,top=True,left=True,right=True)
	ax310.xaxis.set_tick_params(which='both',labelsize=16,direction='in',color='black',bottom=True,top=True,left=True,right=True)

	plt.ylabel('F$_\lambda$ (ergs/sec/cm$^{2}/\AA$)',fontsize=16, family = 'serif')
	#plt.ylabel('Intensity',fontsize=16, family = 'serif')

	mask = (lambda_sp_3 >= lmb_min) & (lambda_sp_3 <= lmb_max)
	plt.plot(lambda_sp_3[mask], inten_sp_3[mask],color=clr3,label=label_3)
	lg=plt.legend(loc=1,prop={'size':14})
	lg.draw_frame(False)

	plt.xlim([lmb_min,lmb_max])
	xmin, xmax = plt.xlim()
	plt.xlim((xmin,xmax))

	plt.plot([lmb_min, lmb_max], [1, 1], color='black', lw=1, alpha=0.5)

	if autoaxis == False:
		nmin  = int(abs(lmb_min - crval_sp_3) / cdel1_sp_3)
		nmax  = int(abs(lmb_max - crval_sp_3) / cdel1_sp_3)
		min_y = bn.nanmin(inten_sp_3[mask])#min(inten_sp_3[nmin:nmax])
		max_y = bn.nanmax(inten_sp_3[mask])#max(inten_sp_3[nmin:nmax])
		plt.ylim([min_y,max_y])
		ymin, ymax = plt.ylim()
		plt.ylim((ymin,ymax))
	elif autoaxis == True:
		min_y, max_y = ax310.get_ylim()

	#################LINE ID-4-SPEC#################
	z_glx_rsf=0
	for lines in range(len(LINES[0])):
		if (lmb_min < LINES[0][lines]*(1+z_glx_rsf) < lmb_max):
			plt.plot([LINES[0][lines]*(1+z_glx_rsf),LINES[0][lines]*(1+z_glx_rsf)],[min_y,max_y],color=clr_tag_3, ls=':',lw=1.5)
			ax310.text(LINES[0][lines]*(1+z_glx_rsf),min_y,LINES[4][lines],rotation=90,va='bottom',fontsize=16,style='oblique',color=clr_tag_3)
		elif LINES[0][lines]*(1+z_glx_rsf) > 6700 :
			break
		if (lmb_min<LINES[0][lines]*((1+z_glx_zro_3)/(1+z_glx_ref_3))<lmb_max):
			plt.plot([LINES[0][lines]*((1+z_glx_zro_3)/(1+z_glx_ref_3)),LINES[0][lines]*((1+z_glx_zro_3)/(1+z_glx_ref_3))],[min_y,max_y],color=clr_tag_3, ls=':',lw=1.5)
			ax310.text(LINES[0][lines]*((1+z_glx_zro_3)/(1+z_glx_ref_3)),min_y,LINES[4][lines],rotation=90,va='bottom',fontsize=16,style='oblique',color=clr_tag_3)
		elif LINES[0][lines]*(1+z_glx_ref_3) > 6700 :
			break
	#################LINE ID-4-SPEC#################


	##########################################SPEC-4###################################

	gs41 = gridspec.GridSpecFromSubplotSpec(1, 1, subplot_spec=gs0[3])
		
	ax410 = plt.Subplot(f, gs41[999999.99999,999999.99999])
	f.add_subplot(ax410)

	ax410.set_rasterization_zorder(1)
	plt.autoscale(enable=True, axis='y', tight=False)
	ax410.xaxis.set_tick_params(labelsize=16)
	ax410.yaxis.set_tick_params(labelsize=16)
	#ax410.set_title('Teste')
	xticklabels = ax410.get_xticklabels()
	plt.setp(xticklabels, visible=True,family='serif')
	yticklabels = ax410.get_yticklabels()
	plt.setp(yticklabels, visible=True,family='serif')

	minorLocator_x   = plt.MultipleLocator(5)
	majorLocator_x   = plt.MultipleLocator(50)
	#minorLocator_y   = plt.MultipleLocator(0.1)
	#majorLocator_y   = plt.MultipleLocator(0.5)
	ax410.xaxis.set_minor_locator(minorLocator_x)
	ax410.xaxis.set_major_locator(majorLocator_x)
	#ax410.yaxis.set_minor_locator(minorLocator_y)
	#ax410.yaxis.set_major_locator(majorLocator_y)
	plt.tick_params(which='both', width=0.7)
	plt.tick_params(which='major', length=5)
	plt.tick_params(which='minor', length=2)
	ax410.minorticks_on()

	ax410.yaxis.set_tick_params(which='both',labelsize=16,direction='in',color='black',bottom=True,top=True,left=True,right=True)
	ax410.xaxis.set_tick_params(which='both',labelsize=16,direction='in',color='black',bottom=True,top=True,left=True,right=True)

	plt.xlabel('$\lambda$'  ,fontsize=16, family = 'serif')
	plt.ylabel('F$_\lambda$ (ergs/sec/cm$^{2}/\AA$)',fontsize=16, family = 'serif')
	#plt.ylabel('Intensity',fontsize=16, family = 'serif')

	if wgt_typ == 'i-band-mag':
		wgt_var         = 'MAG_I'
		wgt_nrm_hdr = 'MAG_IN'
	elif wgt_typ == 'cont-flux-sum':
		wgt_var         = 'CFX_SUM'
		wgt_nrm_hdr = 'CFX_SUN'
	elif wgt_typ == 'cont-flux-med':
		wgt_var         = 'CFX_MED'
		wgt_nrm_hdr = 'CFX_MEN'
	elif wgt_typ == 'cont-flux-avg':
		wgt_var         = 'CFX_AVG'
		wgt_nrm_hdr = 'CFX_AVN'
	elif wgt_typ == None:
		wgt_var         = 'WGT_UNT'
		wgt_nrm_hdr = 'WGT_UNN'
	try:
		wght_times = Header_Get(specfile4,wgt_nrm_hdr)
	except:
		wght_times = 1

	mask = (lambda_sp_4 >= lmb_min) & (lambda_sp_4 <= lmb_max)
	plt.plot(lambda_sp_4[mask], wght_times*inten_sp_4[mask],color=clr4,label=label_4)
	lg=plt.legend(loc=1,prop={'size':14})
	lg.draw_frame(False)

	plt.xlim([lmb_min,lmb_max])
	xmin, xmax = plt.xlim()
	plt.xlim((xmin,xmax))
	
	plt.plot([lmb_min, lmb_max], [1, 1], color='black', lw=1, alpha=0.5)

	if autoaxis == False:
		nmin  = int(abs(lmb_min - crval_sp_4) / cdel1_sp_4)
		nmax  = int(abs(lmb_max - crval_sp_4) / cdel1_sp_4)
		min_y = bn.nanmin(wght_times*inten_sp_4[mask])#min(wght_times*inten_sp_4[nmin:nmax])
		max_y = bn.nanmax(wght_times*inten_sp_4[mask])#max(wght_times*inten_sp_4[nmin:nmax])
		plt.ylim([min_y,max_y])
		ymin, ymax = plt.ylim()
		plt.ylim((ymin,ymax))
	elif autoaxis == True:
		min_y, max_y = ax410.get_ylim()

	#################LINE ID-4-SPEC#################
	z_glx_rsf=0
	for lines in range(len(LINES[0])):
		if (lmb_min < LINES[0][lines]*(1+z_glx_rsf) < lmb_max):
			plt.plot([LINES[0][lines]*(1+z_glx_rsf),LINES[0][lines]*(1+z_glx_rsf)],[min_y,max_y],color=clr_tag_1, ls=':',lw=1.5)
			ax410.text(LINES[0][lines]*(1+z_glx_rsf),min_y,LINES[4][lines],rotation=90,va='bottom',fontsize=16,style='oblique',color=clr_tag_1)
		elif LINES[0][lines]*(1+z_glx_rsf) > 6700 :
			break
		if (lmb_min<LINES[0][lines]*((1+z_glx_zro_4)/(1+z_glx_ref_4))<lmb_max):
			plt.plot([LINES[0][lines]*((1+z_glx_zro_4)/(1+z_glx_ref_4)),LINES[0][lines]*((1+z_glx_zro_4)/(1+z_glx_ref_4))],[min_y,max_y],color=clr_tag_4, ls=':',lw=1.5)
			ax410.text(LINES[0][lines]*((1+z_glx_zro_4)/(1+z_glx_ref_4)),min_y,LINES[4][lines],rotation=90,va='bottom',fontsize=16,style='oblique',color=clr_tag_4)
		elif LINES[0][lines]*(1+z_glx_ref_4) > 6700 :
			break
	#################LINE ID-4-SPEC#################
	##########################################SAVE#####################################
	plt.savefig(PLOTFILENAME)

	if verbose == True:
		print colored('Generated Plot: ' + str(PLOTFILENAME),'cyan')
	elif verbose ==False:
		pass
	if epssave == True:
		plt.savefig(PLOTFILENAME2, rasterized=True)
		#os.system('open Spectra.eps')
	elif epssave == False:
		pass
	if showplot == True:
		#os.system('open '+str(PLOTFILENAME))
		pass
	elif showplot == False:
		pass	
	plt.close('all')

def Plot_2Spc(specfile1,specfile2,*args, **kwargs):
	dest_dir    = kwargs.get('dest_dir',None)
	autoaxis    = kwargs.get('autoaxis',False)
	verbose     = kwargs.get('verbose' , False)
	epssave     = kwargs.get('epssave' , False)
	showplot    = kwargs.get('showplot', False) 

	wgt_typ     = kwargs.get('wgt_typ'    ,None)
	wgt_var     = kwargs.get('wgt_var'    ,None)
	wgt_nrm_hdr = kwargs.get('wgt_nrm_hdr',None)

	#lmb_min = kwargs.get('lmb_min',1200)
	#lmb_max = kwargs.get('lmb_max',1700)

	min_x_lim_Idp = kwargs.get('min_x_lim_Idp' , 1200)
	max_x_lim_Idp = kwargs.get('max_x_lim_Idp' , 1750)

	lmb_min       = min_x_lim_Idp #kwargs.get('lmb_min',1200)
	lmb_max       = max_x_lim_Idp #kwargs.get('lmb_max',1700)

	if dest_dir != None:
		PLOTFILENAME  = str(dest_dir)  + '/' + (str(specfile1).split('.fits')[0]).split('/')[-1] + '-pre-pst.pdf'
		PLOTFILENAME2 = str(dest_dir)  + '/' + (str(specfile1).split('.fits')[0]).split('/')[-1] + '-pre-pst.eps'
	elif dest_dir == None:
		PLOTFILENAME  = ind_plt_res    + '/' + (str(specfile1).split('.fits')[0]).split('/')[-1] + '-pre-pst.pdf'
		PLOTFILENAME2 = ind_plt_res    + '/' + (str(specfile1).split('.fits')[0]).split('/')[-1] + '-pre-pst.eps'

	try:
		label_1 = str((specfile1.split('sc_',1)[-1]).split('_',1)[0]) + ', z: ' + str(Header_Get(specfile1,'Z_0'))+ '; glx_ref_id:  ' + str(Header_Get(specfile1,'ID_REF')) + ' z_glx_ref: ' + str(Header_Get(specfile1,'Z_REF'))
		clr1      = 'black'
		clr_tag_1 = 'blue'
		clr_tag_2 = 'red'
	except KeyError:
		label_1   = (str(specfile1).split('.fits')[0]).split('/')[-1]
		clr1      = 'blue'
		clr_tag_1 = 'black'
	try:
		label_2 = str((specfile2.split('sc_',1)[-1]).split('_',1)[0]) + ', z: ' + str(Header_Get(specfile2,'Z_0'))+ '; glx_ref_id:  ' + str(Header_Get(specfile2,'ID_REF')) + ' z_glx_ref: ' + str(Header_Get(specfile2,'Z_REF'))
		clr2      = 'black'
		clr_tag_1 = 'blue'
		clr_tag_2 = 'red'
	except KeyError:
		label_2   = (str(specfile2).split('.fits')[0]).split('/')[-1]
		clr2      = 'red'
		clr_tag_2 = 'black'

	lambda_sp_1,inten_sp_1,crval_sp_1,cdel1_sp_1 = Spectra_x_y(specfile1)[0], Spectra_x_y(specfile1)[1],Spectra_x_y(specfile1)[2],Spectra_x_y(specfile1)[3]
	lambda_sp_2,inten_sp_2,crval_sp_2,cdel1_sp_2 = Spectra_x_y(specfile2)[0], Spectra_x_y(specfile2)[1],Spectra_x_y(specfile2)[2],Spectra_x_y(specfile2)[3]

	try:
		z_glx_ref_1 = Header_Get(specfile1,'Z_REF')
	except KeyError:
		z_glx_ref_1 = 0
	try:
		z_glx_zro_1 = Header_Get(specfile1,'Z_0')
	except KeyError:
		z_glx_zro_1 = 0

	try:
		z_glx_ref_2 = Header_Get(specfile2,'Z_REF')
	except KeyError:
		z_glx_ref_2 = 0
	try:
		z_glx_zro_2 = Header_Get(specfile2,'Z_0')
	except KeyError:
		z_glx_zro_2 = 0

	fxsize=11
	fysize=8
	f = plt.figure(num=None, figsize=(11, 8), dpi=180, facecolor='w',
		edgecolor='k')
	plt.subplots_adjust(
		left 	= (16/25.4)/fxsize,                   #-26 bigger 22-def 
		bottom 	= (12/25.4)/fysize,                   #20 bigger  19-def 
		right 	= 1 - (6/25.4)/fxsize,                #            2-def  
		top 	= 1 - (15/25.4)/fysize)               #            4-def
	plt.subplots_adjust(hspace=0)#,wspace=0)

	gs0 = gridspec.GridSpec(2, 1)

	##########################################SPEC-1###################################

	gs11 = gridspec.GridSpecFromSubplotSpec(1, 1, subplot_spec=gs0[0])
		
	ax110 = plt.Subplot(f, gs11[0,0])
	f.add_subplot(ax110)

	ax110.set_rasterization_zorder(1)
	plt.autoscale(enable=True, axis='y', tight=False)
	ax110.xaxis.set_tick_params(labelsize=16)
	ax110.yaxis.set_tick_params(labelsize=16)
	#ax110.set_title('Teste')
	xticklabels = ax110.get_xticklabels()
	plt.setp(xticklabels, visible=False,family='serif')
	yticklabels = ax110.get_yticklabels()
	plt.setp(yticklabels, visible=True,family='serif')

	minorLocator_x   = plt.MultipleLocator()
	majorLocator_x   = plt.MultipleLocator(50)
	#minorLocator_y   = plt.MultipleLocator(0.1)
	#majorLocator_y   = plt.MultipleLocator(0.5)
	ax110.xaxis.set_minor_locator(minorLocator_x)
	ax110.xaxis.set_major_locator(majorLocator_x)
	#ax110.yaxis.set_minor_locator(minorLocator_y)
	#ax110.yaxis.set_major_locator(majorLocator_y)
	plt.tick_params(which='both', width=0.7)
	plt.tick_params(which='major', length=5)
	plt.tick_params(which='minor', length=2)
	ax110.minorticks_on()

	ax110.yaxis.set_tick_params(which='both',labelsize=16,direction='in',color='black',bottom=True,top=True,left=True,right=True)
	ax110.xaxis.set_tick_params(which='both',labelsize=16,direction='in',color='black',bottom=True,top=True,left=True,right=True)

	plt.ylabel('F$_\lambda$ (ergs/sec/cm$^{2}/\AA$)',fontsize=16, family = 'serif')
	#plt.ylabel('Intensity',fontsize=16, family = 'serif')

	mask = (lambda_sp_1 >= lmb_min) & (lambda_sp_1 <= lmb_max)
	plt.plot(lambda_sp_1[mask], inten_sp_1[mask],color=clr1,label=label_1)
	lg=plt.legend(loc=1,prop={'size':14})
	lg.draw_frame(False)

	plt.xlim([lmb_min,lmb_max])
	xmin, xmax = plt.xlim()
	plt.xlim((xmin,xmax))

	plt.plot([lmb_min, lmb_max], [1, 1], color='black', lw=1, alpha=0.5)

	if autoaxis == False:
		nmin  = int(abs(lmb_min - crval_sp_1) / cdel1_sp_1)
		nmax  = int(abs(lmb_max - crval_sp_1) / cdel1_sp_1)
		min_y = bn.nanmin(inten_sp_1[mask])#min(inten_sp_1[nmin:nmax])
		max_y = bn.nanmax(inten_sp_1[mask])#max(inten_sp_1[nmin:nmax])
		plt.ylim([min_y,max_y])
		ymin, ymax = plt.ylim()
		plt.ylim((ymin,ymax))
	elif autoaxis == True:
		min_y, max_y = ax110.get_ylim()

	#################LINE ID-2-SPEC#################
	z_glx_rsf=0
	for lines in range(len(LINES[0])):
		if (lmb_min < LINES[0][lines]*(1+z_glx_rsf) < lmb_max):
			plt.plot([LINES[0][lines]*(1+z_glx_rsf),LINES[0][lines]*(1+z_glx_rsf)],[min_y,max_y],color=clr_tag_1, ls=':',lw=1.5)
			ax110.text(LINES[0][lines]*(1+z_glx_rsf),min_y,LINES[4][lines],rotation=90,va='bottom',fontsize=16,style='oblique',color=clr_tag_1)
		elif LINES[0][lines]*(1+z_glx_rsf) > 6700 :
			break
		if (lmb_min<LINES[0][lines]*((1+z_glx_zro_1)/(1+z_glx_ref_1))<lmb_max):
			plt.plot([LINES[0][lines]*((1+z_glx_zro_1)/(1+z_glx_ref_1)),LINES[0][lines]*((1+z_glx_zro_1)/(1+z_glx_ref_1))],[min_y,max_y],color=clr_tag_2, ls=':',lw=1.5)
			ax110.text(LINES[0][lines]*((1+z_glx_zro_1)/(1+z_glx_ref_1)),min_y,LINES[4][lines],rotation=90,va='bottom',fontsize=16,style='oblique',color=clr_tag_2)
		elif LINES[0][lines]*(1+z_glx_ref_1) > 6700 :
			break
	#################LINE ID-2-SPEC#################




	##########################################SPEC-2###################################

	gs21 = gridspec.GridSpecFromSubplotSpec(1, 1, subplot_spec=gs0[1])
		
	ax210 = plt.Subplot(f, gs21[999999.99999,999999.99999])
	f.add_subplot(ax210)

	ax210.set_rasterization_zorder(1)
	plt.autoscale(enable=True, axis='y', tight=False)
	ax210.xaxis.set_tick_params(labelsize=16)
	ax210.yaxis.set_tick_params(labelsize=16)
	#ax210.set_title('Teste')
	xticklabels = ax210.get_xticklabels()
	plt.setp(xticklabels, visible=True,family='serif')
	yticklabels = ax210.get_yticklabels()
	plt.setp(yticklabels, visible=True,family='serif')

	minorLocator_x   = plt.MultipleLocator(5)
	majorLocator_x   = plt.MultipleLocator(50)
	#minorLocator_y   = plt.MultipleLocator(0.1)
	#majorLocator_y   = plt.MultipleLocator(0.5)
	ax210.xaxis.set_minor_locator(minorLocator_x)
	ax210.xaxis.set_major_locator(majorLocator_x)
	#ax210.yaxis.set_minor_locator(minorLocator_y)
	#ax210.yaxis.set_major_locator(majorLocator_y)
	plt.tick_params(which='both', width=0.7)
	plt.tick_params(which='major', length=5)
	plt.tick_params(which='minor', length=2)
	ax210.minorticks_on()

	ax210.yaxis.set_tick_params(which='both',labelsize=16,direction='in',color='black',bottom=True,top=True,left=True,right=True)
	ax210.xaxis.set_tick_params(which='both',labelsize=16,direction='in',color='black',bottom=True,top=True,left=True,right=True)

	plt.xlabel('$\lambda$'  ,fontsize=16, family = 'serif')
	plt.ylabel('F$_\lambda$ (ergs/sec/cm$^{2}/\AA$)',fontsize=16, family = 'serif')
	#plt.ylabel('Intensity',fontsize=16, family = 'serif')

	if wgt_typ == 'i-band-mag':
		wgt_var     = 'MAG_I'
		wgt_nrm_hdr = 'MAG_IN'
	elif wgt_typ == 'cont-flux-sum':
		wgt_var     = 'CFX_SUM'
		wgt_nrm_hdr = 'CFX_SUN'
	elif wgt_typ == 'cont-flux-med':
		wgt_var     = 'CFX_MED'
		wgt_nrm_hdr = 'CFX_MEN'
	elif wgt_typ == 'cont-flux-avg':
		wgt_var     = 'CFX_AVG'
		wgt_nrm_hdr = 'CFX_AVN'
	elif wgt_typ == None:
		wgt_var     = 'WGT_UNT'
		wgt_nrm_hdr = 'WGT_UNN'
	try:
		wght_times = Header_Get(specfile2,wgt_nrm_hdr)
	except:
		wght_times = 1

	mask = (lambda_sp_2 >= lmb_min) & (lambda_sp_2 <= lmb_max)
	plt.plot(lambda_sp_2[mask], wght_times*inten_sp_2[mask],color=clr2,label=label_2)
	lg=plt.legend(loc=1,prop={'size':14})
	lg.draw_frame(False)

	plt.xlim([lmb_min,lmb_max])
	xmin, xmax = plt.xlim()
	plt.xlim((xmin,xmax))
	
	plt.plot([lmb_min, lmb_max], [1, 1], color='black', lw=1, alpha=0.5)

	if autoaxis == False:
		nmin  = int(abs(lmb_min - crval_sp_2) / cdel1_sp_2)
		nmax  = int(abs(lmb_max - crval_sp_2) / cdel1_sp_2)
		min_y = bn.nanmin(wght_times*inten_sp_2[mask])#min(wght_times*inten_sp_2[nmin:nmax])
		max_y = bn.nanmax(wght_times*inten_sp_2[mask])#max(wght_times*inten_sp_2[nmin:nmax])
		plt.ylim([min_y,max_y])
		ymin, ymax = plt.ylim()
		plt.ylim((ymin,ymax))
	elif autoaxis == True:
		min_y, max_y = ax210.get_ylim()

	#################LINE ID-2-SPEC#################
	z_glx_rsf=0
	for lines in range(len(LINES[0])):
		if (lmb_min < LINES[0][lines]*(1+z_glx_rsf) < lmb_max):
			plt.plot([LINES[0][lines]*(1+z_glx_rsf),LINES[0][lines]*(1+z_glx_rsf)],[min_y,max_y],color=clr_tag_1, ls=':',lw=1.5)
			ax210.text(LINES[0][lines]*(1+z_glx_rsf),min_y,LINES[4][lines],rotation=90,va='bottom',fontsize=16,style='oblique',color=clr_tag_1)
		elif LINES[0][lines]*(1+z_glx_rsf) > 6700 :
			break
		if (lmb_min<LINES[0][lines]*((1+z_glx_zro_2)/(1+z_glx_ref_2))<lmb_max):
			plt.plot([LINES[0][lines]*((1+z_glx_zro_2)/(1+z_glx_ref_2)),LINES[0][lines]*((1+z_glx_zro_2)/(1+z_glx_ref_2))],[min_y,max_y],color=clr_tag_2, ls=':',lw=1.5)
			ax210.text(LINES[0][lines]*((1+z_glx_zro_2)/(1+z_glx_ref_2)),min_y,LINES[4][lines],rotation=90,va='bottom',fontsize=16,style='oblique',color=clr_tag_2)
		elif LINES[0][lines]*(1+z_glx_ref_2) > 6700 :
			break
	#################LINE ID-2-SPEC#################
	##########################################SAVE#####################################
	plt.savefig(PLOTFILENAME)

	if verbose == True:
		print colored('Generated Plot: ' + str(PLOTFILENAME),'cyan')
	elif verbose ==False:
		pass
	if epssave == True:
		plt.savefig(PLOTFILENAME2, rasterized=True)
		#os.system('open Spectra.eps')
	elif epssave == False:
		pass
	if showplot == True:
		#os.system('open '+str(PLOTFILENAME))
		pass
	elif showplot == False:
		pass	
	plt.close('all')

def Plot_1Spc(specfile,*args, **kwargs):
	dest_dir    = kwargs.get('dest_dir',None)
	autoaxis    = kwargs.get('autoaxis',False)
	verbose     = kwargs.get('verbose' , False)
	epssave     = kwargs.get('epssave' , False)
	showplot    = kwargs.get('showplot', False) 

	wgt_typ     = kwargs.get('wgt_typ'    ,None)
	wgt_var     = kwargs.get('wgt_var'    ,None)
	wgt_nrm_hdr = kwargs.get('wgt_nrm_hdr',None)

	#lmb_min     = kwargs.get('lmb_min',1200)
	#lmb_max     = kwargs.get('lmb_max',1700)

	min_x_lim_Idp = kwargs.get('min_x_lim_Idp' , 1200)
	max_x_lim_Idp = kwargs.get('max_x_lim_Idp' , 1750)

	lmb_min       = min_x_lim_Idp #kwargs.get('lmb_min',1200)
	lmb_max       = max_x_lim_Idp #kwargs.get('lmb_max',1700)

	if dest_dir != None:
		PLOTFILENAME  = str(dest_dir)  + '/' + (str(specfile).split('.fits')[0]).split('/')[-1] + '-ind.pdf'
		PLOTFILENAME2 = str(dest_dir)  + '/' + (str(specfile).split('.fits')[0]).split('/')[-1] + '-ind.eps'
	elif dest_dir == None:
		PLOTFILENAME  = ind_plt_res    + '/' + (str(specfile).split('.fits')[0]).split('/')[-1] + '-ind.pdf'
		PLOTFILENAME2 = ind_plt_res    + '/' + (str(specfile).split('.fits')[0]).split('/')[-1] + '-ind.eps'

	lambda_sp,inten_sp,crval_sp,cdel1_sp = Spectra_x_y(specfile)[0], Spectra_x_y(specfile)[1],Spectra_x_y(specfile)[2],Spectra_x_y(specfile)[3]

	id_ref = str(Header_Get(specfile,'ID_REF'))
	z_ref  = Header_Get(specfile,'Z_REF')
	id_zro = str(Header_Get(specfile,'ID_0'))
	z_zro  = Header_Get(specfile,'Z_0')  

	label_sp = str(specfile.rsplit('/',1)[1]) + ':  ' + str(id_ref)+ '  ' + str(z_ref)+ '  ' + str(id_zro)+ '  ' + str(z_zro)  

	lmb_min_lim = lmb_min
	lmb_max_lim = lmb_max

	if 'int' in specfile:
		z_zro = 0
		z_ref = (1+ Header_Get(specfile,'Z_0'))/ (1+ Header_Get(specfile,'Z_REF'))
	else:
		z_ref = 0
		z_zro = 0

	fxsize=11
	fysize=8
	f = plt.figure(num=None, figsize=(11, 8), dpi=180, facecolor='w',
		edgecolor='k')
	plt.subplots_adjust(
		left 	= (16/25.4)/fxsize,                   #-26 bigger 22-def 
		bottom 	= (12/25.4)/fysize,                   #20 bigger  19-def 
		right 	= 1 - (6/25.4)/fxsize,                #            2-def  
		top 	= 1 - (15/25.4)/fysize)               #            4-def
	plt.subplots_adjust(hspace=0)#,wspace=0)


	#f.suptitle('An overall title', size=20)
	gs0 = gridspec.GridSpec(1, 1)
	##########################################SPEC-1###################################

	gs11 = gridspec.GridSpecFromSubplotSpec(1, 1, subplot_spec=gs0[0])
		
	ax110 = plt.Subplot(f, gs11[0,0])
	f.add_subplot(ax110)

	ax110.set_rasterization_zorder(1)
	plt.autoscale(enable=True, axis='y', tight=False)
	ax110.xaxis.set_tick_params(labelsize=16)
	ax110.yaxis.set_tick_params(labelsize=16)
	#ax110.set_title('Teste')
	xticklabels = ax110.get_xticklabels()
	plt.setp(xticklabels, visible=True,family='serif')
	yticklabels = ax110.get_yticklabels()
	plt.setp(yticklabels, visible=True,family='serif')

	minorLocator_x   = plt.MultipleLocator(5)
	majorLocator_x   = plt.MultipleLocator(50)
	#minorLocator_y   = plt.MultipleLocator(0.1)
	#majorLocator_y   = plt.MultipleLocator(0.5)
	ax110.xaxis.set_minor_locator(minorLocator_x)
	ax110.xaxis.set_major_locator(majorLocator_x)
	#ax110.yaxis.set_minor_locator(minorLocator_y)
	#ax110.yaxis.set_major_locator(majorLocator_y)
	plt.tick_params(which='both', width=0.7)
	plt.tick_params(which='major', length=5)
	plt.tick_params(which='minor', length=2)
	ax110.minorticks_on()

	ax110.yaxis.set_tick_params(which='both',labelsize=16,direction='in',color='black',bottom=True,top=True,left=True,right=True)
	ax110.xaxis.set_tick_params(which='both',labelsize=16,direction='in',color='black',bottom=True,top=True,left=True,right=True)

	#for s in range(len(spectra_plt)):
	plt.xlabel('$\lambda$'  ,fontsize=16, family = 'serif')
	plt.ylabel('F$_\lambda$',fontsize=16, family = 'serif')
	#plt.ylabel('F$_\lambda$ (ergs/sec/cm$^{2}/\AA$)',fontsize=16, family = 'serif')
	#plt.ylabel('Intensity',fontsize=16, family = 'serif')
	#lambda_sp,inten_sp,crval_sp,cdel1_sp

	if wgt_typ == 'i-band-mag':
		wgt_var     = 'MAG_I'
		wgt_nrm_hdr = 'MAG_IN'
	elif wgt_typ == 'cont-flux-sum':
		wgt_var     = 'CFX_SUM'
		wgt_nrm_hdr = 'CFX_SUN'
	elif wgt_typ == 'cont-flux-med':
		wgt_var     = 'CFX_MED'
		wgt_nrm_hdr = 'CFX_MEN'
	elif wgt_typ == 'cont-flux-avg':
		wgt_var     = 'CFX_AVG'
		wgt_nrm_hdr = 'CFX_AVN'
	elif wgt_typ == None:
		wgt_var     = 'WGT_UNT'
		wgt_nrm_hdr = 'WGT_UNN'
	wght_times = Header_Get(specfile,wgt_nrm_hdr)
	label_sp = label_sp + ', wght: ' + str(np.around(wght_times,decimals=4))

	mask = (lambda_sp >= lmb_min) & (lambda_sp <= lmb_max)
	plt.plot(lambda_sp[mask], wght_times*inten_sp[mask], color='k', label=label_sp)
	lg=plt.legend(loc=1,prop={'size':14})
	lg.draw_frame(False)

	plt.xlim([lmb_min,lmb_max])
	xmin, xmax = plt.xlim()
	plt.xlim((xmin,xmax))

	if autoaxis == False:
		nmin  = int(abs(lmb_min - crval_sp) / cdel1_sp)
		nmax  = int(abs(lmb_max - crval_sp) / cdel1_sp)
		min_y = bn.nanmin(wght_times*inten_sp[mask])#min(wght_times*inten_sp[nmin:nmax])
		max_y = bn.nanmax(wght_times*inten_sp[mask])#max(wght_times*inten_sp[nmin:nmax])
		plt.ylim([min_y,max_y])
		ymin, ymax = plt.ylim()
		plt.ylim((ymin,ymax))
	elif autoaxis == True:
		min_y, max_y = ax110.get_ylim()

	#################LINE ID-1-SPEC#################
	for lines in range(len(LINES[0])):
		if (lmb_min < LINES[0][lines]*(1+z_zro) < lmb_max) or (lmb_min < LINES[0][lines]*(z_ref) < lmb_max ):
			plt.plot([LINES[0][lines]*(1+z_zro),LINES[0][lines]*(1+z_zro)],[min_y,max_y],color='b', ls=':',lw=1.5)
			ax110.text(LINES[0][lines]*(1+z_zro),min_y,LINES[4][lines],rotation=90,va='bottom',fontsize=16,style='oblique')
			if 'int' in specfile:
				plt.plot([LINES[0][lines]*(z_ref),LINES[0][lines]*(z_ref)],[min_y,max_y],color='r', ls=':',lw=1.5)
				ax110.text(LINES[0][lines]*(z_ref),min_y,LINES[4][lines],rotation=90,va='bottom',fontsize=16,style='oblique')
			else:
				pass
		elif LINES[0][lines]*(1+z_zro) > 6700 :
			break
	#################LINE ID-1-SPEC#################
	plt.plot([lmb_min, lmb_max], [1, 1], color='green', lw=1)
	##########################################SAVE#####################################
	plt.savefig(PLOTFILENAME)

	if verbose == True:
		print colored('Generated Plot: ' + str(PLOTFILENAME),'cyan')
	elif verbose ==False:
		pass
	if epssave == True:
		plt.savefig(PLOTFILENAME2, rasterized=True)
		#os.system('open Spectra.eps')
	elif epssave == False:
		pass
	if showplot == True:
		#os.system('open '+str(PLOTFILENAME))
		pass
	elif showplot == False:
		pass	
	plt.close('all')

def Plot_Idp_Spc(specfile_glx,*args, **kwargs):
	z_glx_Ps      = kwargs.get('z_glx_Ps'      ,0)
	dest_dir      = kwargs.get('dest_dir'      , None)
	verbose       = kwargs.get('verbose'       , False)
	epssave       = kwargs.get('epssave'       , False)
	showplot      = kwargs.get('showplot'      , False) 

	autoaxis_Idp  = kwargs.get('autoaxis_Idp'  , True)
	min_y_lim_Idp = kwargs.get('min_y_lim_Idp' , 0.5)
	max_y_lim_Idp = kwargs.get('max_y_lim_Idp' , 1.5)

	aaxs_Idp_ml_y = kwargs.get('aaxs_Idp_ml_y' ,False)

	min_x_lim_Idp = kwargs.get('min_x_lim_Idp' , 1200)
	max_x_lim_Idp = kwargs.get('max_x_lim_Idp' , 1750)

	cont_plot     = kwargs.get('cont_plot'     , False) 
	smth_plot     = kwargs.get('smth_plot'     , False) 
	twin_axis     = kwargs.get('twin_axis'     , False)

	SNR_LINES     = kwargs.get('SNR_LINES'     , 'med')
	plt_stk_med   = kwargs.get('plt_stk_med'   , True)
	plt_stk_avg   = kwargs.get('plt_stk_avg'   , True)
	plt_stk_avw   = kwargs.get('plt_stk_avw'   , True)
	show_legends  = kwargs.get('show_legends'  , True)

	splt_smpl_sfx   = kwargs.get('splt_smpl_sfx',None)
	splt_smpl_sfx_f = kwargs.get('splt_smpl_sfx_f',None)
	splt_smpl_unt   = kwargs.get('splt_smpl_unt',None)
	splt_smpl_unl   = kwargs.get('splt_smpl_unl',None)
	sep_lin_min     = kwargs.get('sep_lin_min',40)

	try:
		FILENAME      = str((specfile_glx[2].split('-stk',1)[0]).split(str(rad_sep[0][0])+'-'+str(rad_sep[0][-1])+'-',2)[1])
	except IndexError:
		FILENAME      = str((specfile_glx[2].split('-stk',1)[0]).split(str(rad_sep[0][0])+'-'+str(rad_sep[0][-1])+'_',2)[1])

	lmb_min       = min_x_lim_Idp #kwargs.get('lmb_min',1200)
	lmb_max       = max_x_lim_Idp #kwargs.get('lmb_max',1700)

	lmb_min_lim   = lmb_min
	lmb_max_lim   = lmb_max

	if 'Fg' in specfile_glx[2]:
		glx_type = 'Fg'
		clr_plt  = 'red'
	elif 'Bg' in specfile_glx[2]:
		glx_type = 'Bg'
		clr_plt  = 'blue'

	try:
		sep_label     = str((specfile_glx[2].split('-stk',1)[0]).rsplit('_as-',2)[1])
	except IndexError:
		sep_label = 'None'

	if cont_plot == False and smth_plot ==False:
		n_med = 2
		n_avg = 3
		n_avw = 16
		n_hst = 6
		n_hsw = 18
		PLOTFILENAME  = res_plt_res + FILENAME + '_' + glx_type + '_stk-'+ str(lmb_min) + '-' + str(lmb_max)+'.pdf'
		PLOTFILENAME2 = res_plt_res + FILENAME + '_' + glx_type + '_stk-'+ str(lmb_min) + '-' + str(lmb_max)+'.eps'
	elif   cont_plot == True and smth_plot ==False:
		n_med = 20
		n_avg = 21
		n_avw = 25
		n_hst = 6
		n_hsw = 18
		PLOTFILENAME  = res_plt_res + FILENAME + '_' + glx_type + '_stk_C-' + str(lmb_min) + '-' + str(lmb_max)+'.pdf'
		PLOTFILENAME2 = res_plt_res + FILENAME + '_' + glx_type + '_stk_C-' + str(lmb_min) + '-' + str(lmb_max)+'.eps'
	elif cont_plot == False and smth_plot ==True:
		n_med = 27
		n_avg = 28
		n_avw = 30
		n_hst = 6
		n_hsw = 18
		PLOTFILENAME  = res_plt_res + FILENAME + '_' + glx_type + '_stk_S-' + str(lmb_min) + '-' + str(lmb_max)+'.pdf'
		PLOTFILENAME2 = res_plt_res + FILENAME + '_' + glx_type + '_stk_S-' + str(lmb_min) + '-' + str(lmb_max)+'.eps'
	elif cont_plot == True and smth_plot ==True:
		n_med = 32
		n_avg = 33
		n_avw = 35
		n_hst = 6
		n_hsw = 18
		PLOTFILENAME  = res_plt_res + FILENAME + '_' + glx_type + '_stk_C_S-' + str(lmb_min) + '-' + str(lmb_max)+'.pdf'
		PLOTFILENAME2 = res_plt_res + FILENAME + '_' + glx_type + '_stk_C_S-' + str(lmb_min) + '-' + str(lmb_max)+'.eps'

	try:
		std_glx_med = Header_Get(specfile_glx[n_med],'SNR_NSE')
	except KeyError:
		std_glx_med = 1
	try:
		std_glx_avg = Header_Get(specfile_glx[n_avg],'SNR_NSE')
	except KeyError:
		std_glx_avg = 1
	try:
		std_glx_avw = Header_Get(specfile_glx[n_avw],'SNR_NSE')
	except KeyError:
		std_glx_avw = 1

	try:
		N_GLX_med = Header_Get(specfile_glx[n_med],'STK_NUM')
		label_glx_med = glx_type  + '-'+ 'MED ' + sep_label + ' ' + splt_smpl_unl #str(Header_Get(specfile_glx[n_med],'STK_OPR')) + ' N$_{\mathrm{T}}$: '+str(N_GLX_med)  #+ ') STD: ' + str(np.round(std_glx_med,4))
	except KeyError:
		label_glx_med = 'IRAF-TEST'
		new_spec_file = (specfile_glx[n_med].split('g_',1)[0]).split('P_',1)[0] + 'P_Fg_'+specfile_glx[n_med].split('g_',1)[1]
		N_GLX_med = Header_Get(new_spec_file,'STK_NUM')
		label_glx_med = glx_type  + '-'+ 'MED ' + sep_label + ' ' + splt_smpl_unl #str(Header_Get(specfile_glx[n_med],'STK_OPR')) + ' N$_{\mathrm{T}}$: '+str(N_GLX_med)  #+ ') STD: ' + str(np.round(std_glx_med,4))
		Header_Copy(specfile_glx[n_med],new_spec_file,'STK_NUM')
		print
		print colored('STK_NUM header not found!','yellow')
		print colored('Got & Copied from: ','yellow')
		print colored(new_spec_file,'yellow')
		print colored('Into: '+specfile_glx[n_med],'yellow')
		print
	try:
		N_GLX_avg = Header_Get(specfile_glx[n_avg],'STK_NUM')
		label_glx_avg = glx_type  + '-'+ 'AVG ' + sep_label + ' ' + splt_smpl_unl #+str(Header_Get(specfile_glx[n_avg],'STK_OPR')) + ' N$_{\mathrm{T}}$: '+str(N_GLX_avg)  #+ ') STD: ' + str(np.round(std_glx_avg,4))
	except KeyError:
		label_glx_avg = 'IRAF-TEST'
		new_spec_file = (specfile_glx[n_avg].split('g_',1)[0]).split('P_',1)[0] + 'P_Fg_'+specfile_glx[n_avg].split('g_',1)[1]
		N_GLX_avg = Header_Get(new_spec_file,'STK_NUM')
		label_glx_avg = glx_type  + '-'+ 'AVG ' + sep_label + ' ' + splt_smpl_unl #+str(Header_Get(specfile_glx[n_avg],'STK_OPR')) + ' N$_{\mathrm{T}}$: '+str(N_GLX_avg)  #+ ') STD: ' + str(np.round(std_glx_avg,4))
		Header_Copy(specfile_glx[n_avg],new_spec_file,'STK_NUM')
		print
		print colored('STK_NUM header not found!','yellow')
		print colored('Got & Copied from: ','yellow')
		print colored(new_spec_file,'yellow')
		print colored('Into: '+specfile_glx[n_avg],'yellow')
		print
	try:
		N_GLX_avw = Header_Get(specfile_glx[n_avw],'STK_NUM')
		label_glx_avw = glx_type  + '-'+ 'AVW ' + sep_label + ' ' + splt_smpl_unl #+str(Header_Get(specfile_glx[n_avw],'STK_OPR')) + ' N$_{\mathrm{T}}$: '+str(N_GLX_avw) #+ ') STD: ' + str(np.round(std_glx_avw,4))
	except KeyError:
		label_glx_avw = 'IRAF-TEST'
		new_spec_file = (specfile_glx[n_avw].split('g_',1)[0]).split('P_',1)[0] + 'P_Fg_'+specfile_glx[n_avw].split('g_',1)[1]
		N_GLX_avw = Header_Get(new_spec_file,'STK_NUM')
		label_glx_avw = glx_type  + '-'+ 'AVW ' + sep_label + ' ' + splt_smpl_unl #+str(Header_Get(specfile_glx[n_avw],'STK_OPR')) + ' N$_{\mathrm{T}}$: '+str(N_GLX_avw)  #+ ') STD: ' + str(np.round(std_glx_avw,4))
		Header_Copy(specfile_glx[n_avw],new_spec_file,'STK_NUM')
		print
		print colored('STK_NUM header not found!','yellow')
		print colored('Got & Copied from: ','yellow')
		print colored(new_spec_file,'yellow')
		print colored('Into: '+specfile_glx[n_avw],'yellow')
		print
	try:
		N_GLX_hst = Header_Get(specfile_glx[n_hst],'STK_NUM')
		label_glx_hst = ' N$_{\mathrm{T}}$: '+str(N_GLX_hst)  #glx_type  + '-'+ ' ' + sep_label + ' ' + splt_smpl_unl + str(Header_Get(specfile_glx[n_hst],'STK_OPR')) + ')'# + str(specfile_glx[n_hst])
	except KeyError:
		label_glx_hst = 'IRAF-TEST'
		new_spec_file = (specfile_glx[n_hst].split('g_',1)[0]).split('P_',1)[0] + 'P_Fg_'+specfile_glx[n_hst].split('g_',1)[1]
		N_GLX_hst = Header_Get(new_spec_file,'STK_NUM')
		label_glx_hst = ' N$_{\mathrm{T}}$: '+str(N_GLX_hst)  #glx_type  + '-'+ ' ' + sep_label + ' ' + splt_smpl_unl + str(Header_Get(specfile_glx[n_hst],'STK_OPR')) + ') STD: ' + str(np.round(std_glx_hst,4))
		Header_Copy(specfile_glx[n_hst],new_spec_file,'STK_NUM')
		print
		print colored('STK_NUM header not found!','yellow')
		print colored('Got & Copied from: ','yellow')
		print colored(new_spec_file,'yellow')
		print colored('Into: '+specfile_glx[n_hst],'yellow')
		print
	try:
		N_GLX_hsw = Header_Get(specfile_glx[n_hsw],'STK_NUM')
		label_glx_hsw = ' N$_{\mathrm{Tw}}$: '+str(N_GLX_hsw) #glx_type  + '-'+ ' ' + sep_label + ' ' + splt_smpl_unl + str(Header_Get(specfile_glx[n_hsw],'STK_OPR'))  ')'# + str(specfile_glx[n_hst])	
	except KeyError:
		label_glx_hsw = 'IRAF-TEST'
		new_spec_file = (specfile_glx[n_hsw].split('g_',1)[0]).split('P_',1)[0] + 'P_Fg_'+specfile_glx[n_hsw].split('g_',1)[1]
		N_GLX_hsw = Header_Get(new_spec_file,'STK_NUM')
		label_glx_hsw = ' N$_{\mathrm{Tw}}$: '+str(N_GLX_hsw)  #glx_type  + '-'+ ' ' + sep_label + ' ' + splt_smpl_unl + str(Header_Get(specfile_glx[n_hsw],'STK_OPR')) + ') STD: ' + str(np.round(std_glx_hsw,4))
		Header_Copy(specfile_glx[n_hsw],new_spec_file,'STK_NUM')
		print
		print colored('STK_NUM header not found!','yellow')
		print colored('Got & Copied from: ','yellow')
		print colored(new_spec_file,'yellow')
		print colored('Into: '+specfile_glx[n_hsw],'yellow')
		print


	glx_med = Spectra_x_y(specfile_glx[n_med])#, header_lbl = 'CD1_1')
	glx_avg = Spectra_x_y(specfile_glx[n_avg])#, header_lbl = 'CD1_1')
	glx_hst = Spectra_x_y(specfile_glx[n_hst])#, header_lbl = 'CD1_1')

	glx_hsw = Spectra_x_y(specfile_glx[n_hsw])#, header_lbl = 'CD1_1')
	glx_avw = Spectra_x_y(specfile_glx[n_avw])#, header_lbl = 'CD1_1')

	lambda_glx_med,inten_glx_med,crval_glx_med,cdel1_glx_med,cd1_glx_med = glx_med[0], glx_med[1], glx_med[2], glx_med[3], glx_med[4]
	lambda_glx_avg,inten_glx_avg,crval_glx_avg,cdel1_glx_avg,cd1_glx_avg = glx_avg[0], glx_avg[1], glx_avg[2], glx_avg[3], glx_avg[4]
	lambda_glx_hst,inten_glx_hst,crval_glx_hst,cdel1_glx_hst,cd1_glx_hst = glx_hst[0], glx_hst[1], glx_hst[2], glx_hst[3], glx_hst[4]

	lambda_glx_hsw,inten_glx_hsw,crval_glx_hsw,cdel1_glx_hsw,cd1_glx_hsw = glx_hsw[0], glx_hsw[1], glx_hsw[2], glx_hsw[3], glx_hsw[4]
	lambda_glx_avw,inten_glx_avw,crval_glx_avw,cdel1_glx_avw,cd1_glx_avw = glx_avw[0], glx_avw[1], glx_avw[2], glx_avw[3], glx_avw[4]

	#res_sp_hst_frg  = Spectra_x_y(specfile_glx[-1],header_lbl='CRVAL1')

	fxsize=11
	fysize=8
	f = plt.figure(num=None, figsize=(fxsize, fysize), dpi=180, facecolor='w',
		edgecolor='k')
	plt.subplots_adjust(
		left 	= (20/25.4)/fxsize,                   #26 bigger  22-def
		bottom 	= (16/25.4)/fysize,                   #20 bigger  19-def
		right 	= 1 - (8/25.4)/fxsize,                #12 bigger  2-def 
		top 	= 1 - (7/25.4)/fysize)                #14 bigger  4-def
	plt.subplots_adjust(hspace=0)#,wspace=0)

	#f.suptitle('An overall title', size=20)
	gs0 = gridspec.GridSpec(1, 1)

	#############################################################STACK###########################################################
	gs11 = gridspec.GridSpecFromSubplotSpec(4, 1, subplot_spec=gs0[0])
		
	ax110 = plt.Subplot(f, gs11[0:3,0])
	f.add_subplot(ax110)

	ax110.set_rasterization_zorder(1)
	plt.autoscale(enable=True, axis='y', tight=False)
	ax110.xaxis.set_tick_params(labelsize=16)
	ax110.yaxis.set_tick_params(labelsize=16)
	#ax110.set_title('Teste')
	xticklabels = ax110.get_xticklabels()
	plt.setp(xticklabels, visible=False,family='serif')
	yticklabels = ax110.get_yticklabels()
	plt.setp(yticklabels, visible=True,family='serif')
	ax110.yaxis.set_tick_params(which='both',labelsize=16,direction='in',color='black',bottom=True,top=True,left=True,right=True)
	ax110.xaxis.set_tick_params(which='both',labelsize=16,direction='in',color='black',bottom=True,top=True,left=True,right=True)

	#minorLocator_x   = plt.MultipleLocator(5)
	#majorLocator_x   = plt.MultipleLocator(50)
	##minorLocator_y   = plt.MultipleLocator(0.1)
	##majorLocator_y   = plt.MultipleLocator(0.5)
	#ax110.xaxis.set_minor_locator(minorLocator_x)
	#ax110.xaxis.set_major_locator(majorLocator_x)
	##ax110.yaxis.set_minor_locator(minorLocator_y)
	##ax110.yaxis.set_major_locator(majorLocator_y)
	plt.tick_params(which='both', width=0.7)
	plt.tick_params(which='major', length=5)
	plt.tick_params(which='minor', length=2)
	ax110.minorticks_on()

	plt.xlabel('$\lambda$',fontsize=16, family = 'serif')
	plt.ylabel('F$_\lambda$ (ergs/sec/cm$^{2}/\AA$)',fontsize=16, family = 'serif')

	mask_med = (lambda_glx_med >= lmb_min_lim) & (lambda_glx_med <= lmb_max_lim)
	mask_avg = (lambda_glx_avg >= lmb_min_lim) & (lambda_glx_avg <= lmb_max_lim)
	mask_avw = (lambda_glx_avw >= lmb_min_lim) & (lambda_glx_avw <= lmb_max_lim)

	if plt_stk_med == True:
		plt.plot(lambda_glx_med[mask_med], inten_glx_med[mask_med], color='black' , label=label_glx_med,alpha=0.6,ls='-.')
	else:
		pass
	
	if plt_stk_avg == True:
		plt.plot(lambda_glx_avg[mask_avg], inten_glx_avg[mask_avg], color=clr_plt , label=label_glx_avg,alpha=0.6)#, ls='-.')
	else:
		pass
	
	if plt_stk_avw == True:
		plt.plot(lambda_glx_avw[mask_avw], inten_glx_avw[mask_avw], color='green' , label=label_glx_avw,alpha=0.6, ls='--')
	else:
		pass

	if show_legends == True:
		lg1 = plt.legend(loc=1,prop={'size':14})
		lg1.draw_frame(False)
	elif show_legends == False:
		pass

	plt.xlim([lmb_min,lmb_max])
	xmin, xmax = plt.xlim()
	plt.xlim((xmin,xmax))

	if autoaxis_Idp == False and aaxs_Idp_ml_y == False:
		nmin  = int(min((abs(lmb_min - crval_glx_med) / cdel1_glx_med), (abs(lmb_min - crval_glx_avg) / cdel1_glx_avg)))
		nmax  = int(max((abs(lmb_max - crval_glx_med) / cdel1_glx_med), (abs(lmb_max - crval_glx_avg) / cdel1_glx_avg)))
		min_y = min((np.nanmin(inten_glx_med[mask_med])),(np.nanmin(inten_glx_avg[mask_med])))#min((min(inten_glx_med[nmin:nmax])),(min(inten_glx_avg[nmin:nmax])))
		max_y = max((np.nanmax(inten_glx_med[mask_med])),(np.nanmax(inten_glx_avg[mask_med])))#max((max(inten_glx_med[nmin:nmax])),(max(inten_glx_avg[nmin:nmax])))
	elif autoaxis_Idp == False and aaxs_Idp_ml_y == True:
		min_y =  min_y_lim_Idp
		max_y =  max_y_lim_Idp
	elif autoaxis_Idp == True:
		min_y, max_y = ax110.get_ylim()
		min_y =  min_y_lim_Idp
		max_y =  max_y_lim_Idp

	plt.ylim([min_y,max_y])
	ymin, ymax = plt.ylim()
	plt.ylim((ymin,ymax))

	##############LINE ID-STLYE##############
	linestyle_str = [
	     ('solid', 'solid'),      # Same as (0, ()) or '-'
	     ('dotted', 'dotted'),    # Same as (0, (1, 1)) or '.'
	     ('dashed', 'dashed'),    # Same as '--'
	     ('dashdot', 'dashdot')]  # Same as '-.'

	linestyle_tuple = [
	     ('loosely dotted',        (0, (1, 10))),
	     ('dotted',                (0, (1, 1))),
	     ('densely dotted',        (0, (1, 1))),

	     ('loosely dashed',        (0, (5, 10))),
	     ('dashed',                (0, (5, 5))),
	     ('densely dashed',        (0, (5, 1))),

	     ('loosely dashdotted',    (0, (3, 10, 1, 10))),
	     ('dashdotted',            (0, (3, 5, 1, 5))),
	     ('densely dashdotted',    (0, (3, 1, 1, 1))),

	     ('dashdotdotted',         (0, (3, 5, 1, 5, 1, 5))),
	     ('loosely dashdotdotted', (0, (3, 10, 1, 10, 1, 10))),
	     ('densely dashdotdotted', (0, (3, 1, 1, 1, 1, 1)))]
	##############LINE ID-STLYE##############
	#################LINE ID#################
	prev_loc=0
	for lines in range(len(LINES[0])):
		if LINES[11][lines] == 1:
			#LOW ISM absorption line
			col_lne_idx = 'red'
			stl_lne_idx = 'solid'
		elif LINES[11][lines] == 2:
			#HIGH ISM absorption line
			col_lne_idx = 'green'
			stl_lne_idx = 0, (1, 1)#'dotted'
		elif LINES[11][lines] == 3:
			#Stellar Photospheric Absorption Line
			col_lne_idx = 'cyan'
			stl_lne_idx = 'dashed'
		elif LINES[11][lines] == 4:
			#Nebular Emission Line
			col_lne_idx = 'magenta'
			stl_lne_idx = 'dashdot'
		elif LINES[11][lines] == 5:
			#Interstellar Fine-structure emission lines
			col_lne_idx = 'black'
			stl_lne_idx = (0, (3, 5, 1, 5, 1, 5)) #dashdotdotted
		elif LINES[11][lines] == 6:
			#HI absorption line
			col_lne_idx = 'blue'
			stl_lne_idx = (0, (3, 10, 1, 10, 1, 10)) #loosely dashdotdotted

		sep_lin_min=40
		if lmb_min < LINES[0][lines]*(1+z_glx_Ps) < lmb_max:
			if ((LINES[9][lines] == LINES[9][lines+1])) and (abs(LINES[0][lines]-LINES[0][lines-1])> sep_lin_min): 
				#print
				#print LINES[9][lines],LINES[9][lines-1],abs(LINES[0][lines]-LINES[0][lines-1]),'D',((LINES[9][lines] == LINES[9][lines+1])) and (abs(LINES[0][lines]-LINES[0][lines-1])> sep_lin_min)
				#print abs(LINES[0][lines]-LINES[0][lines-1]),prev_loc,'D',(abs(LINES[0][lines]-LINES[0][lines-1])<sep_lin_min and prev_loc==1)
				#print
				plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[1,max_y-(max_y*.3)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				ax110.text((LINES[0][lines]*(1+z_glx_Ps)+LINES[0][lines+1]*(1+z_glx_Ps))/2,max_y-(max_y*.3),LINES[9][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='normal',color=col_lne_idx,family='serif')

				#plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y,max_y-(max_y*.3)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				#ax110.text(LINES[0][lines]*(1+z_glx_Ps),max_y-(max_y*.3),LINES[4][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='italic',color=col_lne_idx)
				prev_loc=0
			elif (abs(LINES[0][lines]-LINES[0][lines-1])<(sep_lin_min/1.6) and prev_loc==1): 
				#print
				#print LINES[9][lines],LINES[9][lines-1],abs(LINES[0][lines]-LINES[0][lines-1]),'C',((LINES[9][lines] == LINES[9][lines+1])) and (abs(LINES[0][lines]-LINES[0][lines-1])> sep_lin_min)
				#print abs(LINES[0][lines]-LINES[0][lines-1]),prev_loc,'C',(abs(LINES[0][lines]-LINES[0][lines-1])<sep_lin_min and prev_loc==1)
				#print
				plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[1,max_y-(max_y*.3)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				ax110.text((LINES[0][lines]*(1+z_glx_Ps)+LINES[0][lines+1]*(1+z_glx_Ps))/2,max_y-(max_y*.3),LINES[9][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='normal',color=col_lne_idx,family='serif')

				#plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y,max_y-(max_y*.3)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				#ax110.text(LINES[0][lines]*(1+z_glx_Ps),max_y-(max_y*.3),LINES[4][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='italic',color=col_lne_idx)
				prev_loc=0
			elif (sep_lin_min/1.6)<=(abs(LINES[0][lines]-LINES[0][lines-1])<sep_lin_min and prev_loc==1): 
				#print
				#print LINES[9][lines],LINES[9][lines-1],abs(LINES[0][lines]-LINES[0][lines-1]),'C',((LINES[9][lines] == LINES[9][lines+1])) and (abs(LINES[0][lines]-LINES[0][lines-1])> sep_lin_min)
				#print abs(LINES[0][lines]-LINES[0][lines-1]),prev_loc,'C',(abs(LINES[0][lines]-LINES[0][lines-1])<sep_lin_min and prev_loc==1)
				#print
				plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[1,max_y-(max_y*.3)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				ax110.text((LINES[0][lines]*(1+z_glx_Ps)+LINES[0][lines+1]*(1+z_glx_Ps))/2,max_y-(max_y*.3),LINES[9][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='normal',color=col_lne_idx,family='serif')

				#plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y,max_y-(max_y*.3)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				#ax110.text(LINES[0][lines]*(1+z_glx_Ps),max_y-(max_y*.3),LINES[4][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='italic',color=col_lne_idx)
				prev_loc=0
			elif ((LINES[9][lines] == LINES[9][lines+1])) and (abs(LINES[0][lines]-LINES[0][lines-1])<sep_lin_min and (prev_loc==0)) and (len(LINES[4][lines])<=5):
				#print
				#print LINES[9][lines],LINES[9][lines-1],'B'
				#print
				plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y+(min_y*.30),1],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				ax110.text((LINES[0][lines]*(1+z_glx_Ps)+LINES[0][lines+1]*(1+z_glx_Ps))/2,min_y,LINES[9][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='normal',color=col_lne_idx,family='serif')

				#plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y,max_y-(max_y*.2)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				#ax110.text(LINES[0][lines]*(1+z_glx_Ps),max_y-(max_y*.2),LINES[4][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='italic',color=col_lne_idx)
				prev_loc=1
			elif ((LINES[9][lines] == LINES[9][lines+1])) and (abs(LINES[0][lines]-LINES[0][lines-1])<sep_lin_min and (prev_loc==0)) and (len(LINES[4][lines])>5):
				#print
				#print LINES[9][lines],LINES[9][lines-1],'A'
				#print
				plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y+(min_y*.45),1],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				ax110.text((LINES[0][lines]*(1+z_glx_Ps)+LINES[0][lines+1]*(1+z_glx_Ps))/2,min_y,LINES[9][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='normal',color=col_lne_idx,family='serif')

				#plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y,max_y-(max_y*.2)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				#ax110.text(LINES[0][lines]*(1+z_glx_Ps),max_y-(max_y*.2),LINES[4][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='italic',color=col_lne_idx)
				prev_loc=1
				#
			elif (LINES[9][lines] == LINES[9][lines-1]) and (prev_loc==1) and (len(LINES[4][lines])<=5):
				#print
				#print LINES[9][lines],LINES[9][lines-1],'d'
				#print
				plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y+(min_y*.30),1],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				#plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y,max_y-(max_y*.2)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
			elif (LINES[9][lines] == LINES[9][lines-1]) and (prev_loc==1) and (len(LINES[4][lines])>5):
				#print
				#print LINES[9][lines],LINES[9][lines-1],'c'
				#print
				plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y+(min_y*.45),1],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				#plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y,max_y-(max_y*.2)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)

			elif (LINES[9][lines] == LINES[9][lines-1]) and (prev_loc==0) and (len(LINES[4][lines])<=5):
				#print
				#print LINES[9][lines],LINES[9][lines-1],'b'
				#print
				plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[1,max_y-(max_y*.30)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				#plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y,max_y-(max_y*.3)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
			elif (LINES[9][lines] == LINES[9][lines-1]) and (prev_loc==0) and (len(LINES[4][lines])>5):
				#print
				#print LINES[9][lines],LINES[9][lines-1],'a'
				#print
				plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[1,max_y-(max_y*.30)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				#plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y,max_y-(max_y*.3)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				#
			elif (abs(LINES[0][lines]-LINES[0][lines-1])> sep_lin_min) or (abs(LINES[0][lines]-LINES[0][lines-1])<sep_lin_min and prev_loc==1) and ((LINES[9][lines] != LINES[9][lines-1])):
				#print
				#print LINES[9][lines],LINES[9][lines-1],'1'
				#print
				plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[1,max_y-(max_y*.3)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				ax110.text(LINES[0][lines]*(1+z_glx_Ps),max_y-(max_y*.3),LINES[9][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='normal',color=col_lne_idx,family='serif')

				#plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y,max_y-(max_y*.3)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				#ax110.text(LINES[0][lines]*(1+z_glx_Ps),max_y-(max_y*.3),LINES[4][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='italic',color=col_lne_idx)
				prev_loc=0
			elif (abs(LINES[0][lines]-LINES[0][lines-1])<sep_lin_min and (prev_loc==0)) and ((LINES[9][lines] != LINES[9][lines-1])) and (len(LINES[4][lines])<=5):
				#print
				#print LINES[9][lines],LINES[9][lines-1],'2'
				#print
				plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y+(min_y*.30),1],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				ax110.text(LINES[0][lines]*(1+z_glx_Ps),min_y,LINES[9][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='normal',color=col_lne_idx,family='serif')

				#plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y,max_y-(max_y*.2)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				#ax110.text(LINES[0][lines]*(1+z_glx_Ps),max_y-(max_y*.2),LINES[4][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='italic',color=col_lne_idx)
				prev_loc=1
			elif (abs(LINES[0][lines]-LINES[0][lines-1])<sep_lin_min and (prev_loc==0)) and ((LINES[9][lines] != LINES[9][lines-1])) and (len(LINES[4][lines])>5):
				#print
				#print LINES[9][lines],LINES[9][lines-1],'3'
				#print
				plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y+(min_y*.45),1],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				ax110.text(LINES[0][lines]*(1+z_glx_Ps),min_y,LINES[9][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='normal',color=col_lne_idx,family='serif')
				#plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y,max_y-(max_y*.2)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				#ax110.text(LINES[0][lines]*(1+z_glx_Ps),max_y-(max_y*.2),LINES[4][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='italic',color=col_lne_idx)
				prev_loc=1
		elif LINES[0][lines]*(1+z_glx_Ps) > 6700 :
			break
	#################LINE ID#################

	plt.plot([lmb_min, lmb_max], [1, 1], color='black', lw=1, alpha=0.6)
	if SNR_LINES == 'med':
		plt.plot([lmb_min, lmb_max], [1 + 1 * std_glx_med, 1 + 1 * std_glx_med], color='black', lw=1, alpha=0.6, ls='dotted')
		plt.plot([lmb_min, lmb_max], [1 + 2 * std_glx_med, 1 + 2 * std_glx_med], color='black', lw=1, alpha=0.6, ls='dotted')
		plt.plot([lmb_min, lmb_max], [1 + 3 * std_glx_med, 1 + 3 * std_glx_med], color='black', lw=1, alpha=0.6, ls='dotted')
		plt.plot([lmb_min, lmb_max], [1 + 4 * std_glx_med, 1 + 4 * std_glx_med], color='black', lw=1, alpha=0.6, ls='dotted')
		plt.plot([lmb_min, lmb_max], [1 + 5 * std_glx_med, 1 + 5 * std_glx_med], color='black', lw=1, alpha=0.6, ls='dotted')
		plt.plot([lmb_min, lmb_max], [1 - 1 * std_glx_med, 1 - 1 * std_glx_med], color='black', lw=1, alpha=0.6, ls='dotted')
		plt.plot([lmb_min, lmb_max], [1 - 2 * std_glx_med, 1 - 2 * std_glx_med], color='black', lw=1, alpha=0.6, ls='dotted')
		plt.plot([lmb_min, lmb_max], [1 - 3 * std_glx_med, 1 - 3 * std_glx_med], color='black', lw=1, alpha=0.6, ls='dotted')
		plt.plot([lmb_min, lmb_max], [1 - 4 * std_glx_med, 1 - 4 * std_glx_med], color='black', lw=1, alpha=0.6, ls='dotted')
		plt.plot([lmb_min, lmb_max], [1 - 5 * std_glx_med, 1 - 5 * std_glx_med], color='black', lw=1, alpha=0.6, ls='dotted')

	elif SNR_LINES == 'avg':
		plt.plot([lmb_min, lmb_max], [1 + 1 * std_glx_avg, 1 + 1 * std_glx_avg], color=clr_plt, lw=1, alpha=0.6, ls='dotted')
		plt.plot([lmb_min, lmb_max], [1 + 2 * std_glx_avg, 1 + 2 * std_glx_avg], color=clr_plt, lw=1, alpha=0.6, ls='dotted')
		plt.plot([lmb_min, lmb_max], [1 + 3 * std_glx_avg, 1 + 3 * std_glx_avg], color=clr_plt, lw=1, alpha=0.6, ls='dotted')
		plt.plot([lmb_min, lmb_max], [1 + 4 * std_glx_avg, 1 + 4 * std_glx_avg], color=clr_plt, lw=1, alpha=0.6, ls='dotted')
		plt.plot([lmb_min, lmb_max], [1 + 5 * std_glx_avg, 1 + 5 * std_glx_avg], color=clr_plt, lw=1, alpha=0.6, ls='dotted')
		plt.plot([lmb_min, lmb_max], [1 - 1 * std_glx_avg, 1 - 1 * std_glx_avg], color=clr_plt, lw=1, alpha=0.6, ls='dotted')
		plt.plot([lmb_min, lmb_max], [1 - 2 * std_glx_avg, 1 - 2 * std_glx_avg], color=clr_plt, lw=1, alpha=0.6, ls='dotted')
		plt.plot([lmb_min, lmb_max], [1 - 3 * std_glx_avg, 1 - 3 * std_glx_avg], color=clr_plt, lw=1, alpha=0.6, ls='dotted')
		plt.plot([lmb_min, lmb_max], [1 - 4 * std_glx_avg, 1 - 4 * std_glx_avg], color=clr_plt, lw=1, alpha=0.6, ls='dotted')
		plt.plot([lmb_min, lmb_max], [1 - 5 * std_glx_avg, 1 - 5 * std_glx_avg], color=clr_plt, lw=1, alpha=0.6, ls='dotted')

	elif SNR_LINES == 'avw':
		plt.plot([lmb_min, lmb_max], [1 + 1 * std_glx_avw, 1 + 1 * std_glx_avw], color='green', lw=1, alpha=0.6, ls='dashed')
		plt.plot([lmb_min, lmb_max], [1 + 2 * std_glx_avw, 1 + 2 * std_glx_avw], color='green', lw=1, alpha=0.6, ls='dashed')
		plt.plot([lmb_min, lmb_max], [1 + 3 * std_glx_avw, 1 + 3 * std_glx_avw], color='green', lw=1, alpha=0.6, ls='dashed')
		plt.plot([lmb_min, lmb_max], [1 + 4 * std_glx_avw, 1 + 4 * std_glx_avw], color='green', lw=1, alpha=0.6, ls='dashed')
		plt.plot([lmb_min, lmb_max], [1 + 5 * std_glx_avw, 1 + 5 * std_glx_avw], color='green', lw=1, alpha=0.6, ls='dashed')
		plt.plot([lmb_min, lmb_max], [1 - 1 * std_glx_avw, 1 - 1 * std_glx_avw], color='green', lw=1, alpha=0.6, ls='dashed')
		plt.plot([lmb_min, lmb_max], [1 - 2 * std_glx_avw, 1 - 2 * std_glx_avw], color='green', lw=1, alpha=0.6, ls='dashed')
		plt.plot([lmb_min, lmb_max], [1 - 3 * std_glx_avw, 1 - 3 * std_glx_avw], color='green', lw=1, alpha=0.6, ls='dashed')
		plt.plot([lmb_min, lmb_max], [1 - 4 * std_glx_avw, 1 - 4 * std_glx_avw], color='green', lw=1, alpha=0.6, ls='dashed')
		plt.plot([lmb_min, lmb_max], [1 - 5 * std_glx_avw, 1 - 5 * std_glx_avw], color='green', lw=1, alpha=0.6, ls='dashed')
	elif SNR_LINES == 'None':
		print 'asldkkajsdlkjasd'
		quit()
		pass

	#################LEGEND#################
	if show_legends == True:
		pass
		lg2=plt.legend(loc=1,prop={'size':14})
		lg2.draw_frame(False)
	elif show_legends == False:
		pass
	#################LEGEND#################


	if twin_axis == True:
		ax110_twin = ax110.twinx()
		ax110_p_major = ax110.get_yticks()
		ax110_p_minor = ax110.get_yticks(minor=True)
		ax110_twin_minor = []
		ax110_twin_major = []
		np.round(std_glx_med,4)
		[ax110_twin_minor.append(np.round((Y-1)/std_glx_avw,0)) for Y in ax110_p_minor]
		[ax110_twin_major.append(np.round((Y-1)/std_glx_avw,0)) for Y in ax110_p_major]
		ax110_twin.set_yticks(ax110_twin_minor,minor=True)
		ax110_twin.set_yticks(ax110_twin_major)
		ax110_twin.set_yticklabels(ax110_twin_major,fontsize=16)
		align_yaxis(ax110, 1, ax110_twin, 0)
		ax110_twin.set_ylabel('SNR',fontsize=16, family = 'serif')
	if twin_axis == False:
		pass

	#################################################################HISTO###########################################################
	
	ax111 = plt.Subplot(f, gs11[3,0])
	f.add_subplot(ax111)

	ax111.set_rasterization_zorder(1)
	plt.autoscale(enable=True, axis='y', tight=False)
	ax111.xaxis.set_tick_params(labelsize=16)
	ax111.yaxis.set_tick_params(labelsize=16)
	#ax110.set_title('Teste')
	xticklabels = ax111.get_xticklabels()
	plt.setp(xticklabels, visible=True,family='serif')
	yticklabels = ax111.get_yticklabels()
	plt.setp(yticklabels, visible=True,family='serif')

	#minorLocator_x   = plt.MultipleLocator(5)
	#majorLocator_x   = plt.MultipleLocator(50)
	##minorLocator_y   = plt.MultipleLocator(0.1)
	##majorLocator_y   = plt.MultipleLocator(0.5)
	#ax111.xaxis.set_minor_locator(minorLocator_x)
	#ax111.xaxis.set_major_locator(majorLocator_x)
	##ax110.yaxis.set_minor_locator(minorLocator_y)
	##ax110.yaxis.set_major_locator(majorLocator_y)
	plt.tick_params(which='both', width=0.7)
	plt.tick_params(which='major', length=5)
	plt.tick_params(which='minor', length=2)
	ax111.minorticks_on()

	plt.xlabel('$\lambda$'         ,fontsize=16, family = 'serif')
	plt.ylabel('N/N$_{\mathrm{T}}$',fontsize=16, family = 'serif')

	ax111.yaxis.set_tick_params(which='both',labelsize=16,direction='in',color='black',bottom=True,top=True,left=True,right=True)
	ax111.xaxis.set_tick_params(which='both',labelsize=16,direction='in',color='black',bottom=True,top=True,left=True,right=True)

	if (plt_stk_med == True) or (plt_stk_avg == True):
		mask_hst = (lambda_glx_hst >= lmb_min_lim) & (lambda_glx_hst <= lmb_max_lim)
		plt.plot(lambda_glx_hst[mask_hst], inten_glx_hst[mask_hst]/N_GLX_avg, color='black',label=label_glx_hst,alpha=0.6)
	else:
		pass

	if plt_stk_avw == True:
		mask_hsw = (lambda_glx_hsw >= lmb_min_lim) & (lambda_glx_hsw <= lmb_max_lim)
		plt.plot(lambda_glx_hsw[mask_hsw], inten_glx_hsw[mask_hsw]/N_GLX_avw, color='green',label=label_glx_hsw,alpha=0.6,ls='--')
	else:
		pass
 
	if show_legends == True:
		lg1 = plt.legend(loc=1,prop={'size':14})
		lg1.draw_frame(False)
	elif show_legends == False:
		pass

	plt.xlim([lmb_min,lmb_max])
	xmin, xmax = plt.xlim()
	plt.xlim((xmin,xmax))

	if autoaxis_Idp == False and ((plt_stk_med == True) or (plt_stk_avg == True)):
		nmin  = int(abs(lmb_min - crval_glx_hst) / cdel1_glx_hst)
		nmax  = int(abs(lmb_max - crval_glx_hst) / cdel1_glx_hst)
		min_y = (min(inten_glx_hst[mask_hst]/N_GLX_avg)) - 0.05#int(min(inten_glx_hst[nmin:nmax])) - 0.5
		max_y = (max(inten_glx_hst[mask_hst]/N_GLX_avg)) + 0.05#int(max(inten_glx_hst[nmin:nmax])) + 0.5
	elif autoaxis_Idp == False and ((plt_stk_avw == True) ):
		nmin  = int(abs(lmb_min - crval_glx_hsw) / cdel1_glx_hsw)
		nmax  = int(abs(lmb_max - crval_glx_hsw) / cdel1_glx_hsw)
		min_y = (min(inten_glx_hsw[mask_hsw]/N_GLX_avw)) - 0.05#int(min(inten_glx_hsw[nmin:nmax])) - 0.5
		max_y = (max(inten_glx_hsw[mask_hsw]/N_GLX_avw)) + 0.05#int(max(inten_glx_hsw[nmin:nmax])) + 0.5

	elif autoaxis_Idp == True:
		min_y, max_y = ax111.get_ylim()
		min_y, max_y = min_y -0.5, max_y+0.5
	plt.ylim([min_y,max_y])
	ymin, ymax = plt.ylim()
	plt.ylim((ymin,ymax))

	#plt.plot([lmb_min, lmb_max], [0.60, 0.60], color='red', lw=1, alpha=0.6, ls='dashed')

	#################LINE ID-HISTO#################
	for lines in range(len(LINES[0])):

		if LINES[11][lines] == 1:
			#LOW ISM absorption line
			col_lne_idx = 'red'
			stl_lne_idx = 'solid'
		elif LINES[11][lines] == 2:
			#HIGH ISM absorption line
			col_lne_idx = 'green'
			stl_lne_idx = 'dotted'
		elif LINES[11][lines] == 3:
			#Stellar Photospheric Absorption Line
			col_lne_idx = 'cyan'
			stl_lne_idx ='dashed'
		elif LINES[11][lines] == 4:
			#Nebular Emission Line
			col_lne_idx = 'magenta'
			stl_lne_idx ='dashdot'
		elif LINES[11][lines] == 5:
			#Interstellar Fine-structure emission lines
			col_lne_idx = 'black'
			stl_lne_idx = (0, (3, 5, 1, 5, 1, 5)) #dashdotdotted
		elif LINES[11][lines] == 6:
			#HI absorption line
			col_lne_idx = 'blue'
			stl_lne_idx = (0, (3, 10, 1, 10, 1, 10)) #loosely dashdotdotted
		if lmb_min < LINES[0][lines]*(1+z_glx_Ps) < lmb_max :
			plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y,max_y],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
			#ax111.text(LINES[0][lines]*(1+z_glx_Ps),min_y,LINES[4][lines],rotation=90,va='bottom',fontsize=16,style='oblique')
		elif LINES[0][lines]*(1+z_glx_Ps) > 6700 :
			break
	#################LINE ID-HISTO#################

	#################LEGEND#################
	if show_legends == True:
		lg2=plt.legend(loc=1,prop={'size':14})
		lg2.draw_frame(False)
	elif show_legends == False:
		pass
	#################LEGEND#################	

	################################################################SAVE###########################################################
	plt.savefig(PLOTFILENAME)

	if verbose == True:
		print colored('Generated Plot: ' + str(PLOTFILENAME),'cyan')
	elif verbose ==False:
		pass
	if epssave == True:
		plt.savefig(PLOTFILENAME2, rasterized=True)
		#os.system('open Spectra.eps')
	elif epssave == False:
		pass
	if showplot == True:
		#os.system('open '+str(PLOTFILENAME))
		pass
	elif showplot == False:
		pass	
	plt.close('all')

def Plot_Ctb_Spc(specfile_glx,*args, **kwargs):
	z_glx_Ps    = kwargs.get('z_glx_Ps'   , 0)
	dest_dir    = kwargs.get('dest_dir'   , None)
	autoaxis    = kwargs.get('autoaxis'   , False)
	verbose     = kwargs.get('verbose'    , False)
	epssave     = kwargs.get('epssave'    , False)
	showplot    = kwargs.get('showplot'   , False) 

	cont_plot   = kwargs.get('cont_plot'  , False) 
	smth_plot   = kwargs.get('smth_plot'  , False) 
	twin_axis   = kwargs.get('twin_axis'  , False)

	wgt_typ     = kwargs.get('wgt_typ'    ,None)
	wgt_var     = kwargs.get('wgt_var'    ,None)
	wgt_nrm_hdr = kwargs.get('wgt_nrm_hdr',None)

	min_x_lim_Idp = kwargs.get('min_x_lim_Idp' , 1200)
	max_x_lim_Idp = kwargs.get('max_x_lim_Idp' , 1750)

	FILENAME = str((specfile_glx[2].split('-stk',1)[0]).split(str(rad_sep[0][0])+'-'+str(rad_sep[0][-1])+'-',2)[1])

	lmb_min       = min_x_lim_Idp #kwargs.get('lmb_min',1200)
	lmb_max       = max_x_lim_Idp #kwargs.get('lmb_max',1700)

	lmb_min_lim   = lmb_min
	lmb_max_lim   = lmb_max

	sep_lin_min   = kwargs.get('sep_lin_min',40)

	if 'Fg' in specfile_glx[2]:
		glx_type = 'Fg'
		clr_plt  = 'red'
	elif 'Bg' in specfile_glx[2]:
		glx_type = 'Bg'
		clr_plt  = 'blue'

	try:
		sep_label     = str((specfile_glx[2].split('-stk',1)[0]).rsplit('_as-',2)[1])
	except IndexError:
		sep_label = 'None'

	if   cont_plot == True and smth_plot ==False:
		n_med = 20
		n_avg = 21
		n_avw = 25
		n_hst = 6
		n_hsw = 18
		PLOTFILENAME  = res_plt_res + FILENAME + '_' + glx_type + '_stk_ctb_C-' + str(lmb_min) + '-' + str(lmb_max) + '.pdf'
		PLOTFILENAME2 = res_plt_res + FILENAME + '_' + glx_type + '_stk_ctb_C-' + str(lmb_min) + '-' + str(lmb_max) + '.eps'
	elif cont_plot == False and smth_plot ==True:
		n_med = 27
		n_avg = 28
		n_avw = 30
		n_hst = 6
		n_hsw = 18
		PLOTFILENAME  = res_plt_res + FILENAME + '_' + glx_type + '_stk_ctb_S-' + str(lmb_min) + '-' + str(lmb_max) + '.pdf'
		PLOTFILENAME2 = res_plt_res + FILENAME + '_' + glx_type + '_stk_ctb_S-' + str(lmb_min) + '-' + str(lmb_max) + '.eps'
	elif cont_plot == True and smth_plot ==True:
		n_med = 32
		n_avg = 33
		n_avw = 35
		n_hst = 6
		n_hsw = 18
		PLOTFILENAME  = res_plt_res + FILENAME + '_' + glx_type + '_stk_ctb_C_S-' + str(lmb_min) + '-' + str(lmb_max) + '.pdf'
		PLOTFILENAME2 = res_plt_res + FILENAME + '_' + glx_type + '_stk_ctb_C_S-' + str(lmb_min) + '-' + str(lmb_max) + '.eps'
	elif cont_plot == False and smth_plot ==False:
		n_med = 2
		n_avg = 3
		n_avw = 16
		n_hst = 6
		n_hsw = 18
		PLOTFILENAME  = res_plt_res + FILENAME + '_' + glx_type + '_stk_ctb-' + str(lmb_min) + '-' + str(lmb_max) + '.pdf'
		PLOTFILENAME2 = res_plt_res + FILENAME + '_' + glx_type + '_stk_ctb-' + str(lmb_min) + '-' + str(lmb_max) + '.eps'


	std_glx_med = Header_Get(specfile_glx[n_med] ,'SNR_NSE')
	std_glx_avg = Header_Get(specfile_glx[n_avg] ,'SNR_NSE')
	std_glx_avw = Header_Get(specfile_glx[n_avw] ,'SNR_NSE')

	label_glx_med = glx_type + ' (sep: ' + sep_label + ' arcsec) '  + ' ('+ str(Header_Get(specfile_glx[n_med],'STK_OPR'))  + ' N = '+str(str(Header_Get(specfile_glx[n_med],'STK_NUM')))  + ') STD: ' + str(np.round(std_glx_med,4))
	label_glx_avg = glx_type + ' (sep: ' + sep_label + ' arcsec) '  + ' ('+ str(Header_Get(specfile_glx[n_avg],'STK_OPR'))  + ' N = '+str(str(Header_Get(specfile_glx[n_avg],'STK_NUM')))  + ') STD: ' + str(np.round(std_glx_avg,4))
	label_glx_hst = glx_type + ' (sep: ' + sep_label + ' arcsec) '  + ' ('+ str(Header_Get(specfile_glx[n_hst],'STK_OPR'))  + ' N = '+str(str(Header_Get(specfile_glx[n_hst],'STK_NUM')))  + ')'# + str(specfile_glx[n_hst])
	
	label_glx_hsw = glx_type + ' (sep: ' + sep_label + ' arcsec) '  + ' ('+ str(Header_Get(specfile_glx[n_hsw],'STK_OPR')) + ' N = '+str(str(Header_Get(specfile_glx[n_hsw],'STK_NUM'))) + ')'# + str(specfile_glx[n_hst])	
	label_glx_avw = glx_type + ' (sep: ' + sep_label + ' arcsec) '  + ' ('+ str(Header_Get(specfile_glx[n_avw],'STK_OPR')) + ' N = '+str(str(Header_Get(specfile_glx[n_avw],'STK_NUM'))) + ') STD: ' + str(np.round(std_glx_avw,4))

	glx_med = Spectra_x_y(specfile_glx[n_med])#, header_lbl = 'CD1_1')
	glx_avg = Spectra_x_y(specfile_glx[n_avg])#, header_lbl = 'CD1_1')
	glx_hst = Spectra_x_y(specfile_glx[n_hst])#, header_lbl = 'CD1_1')

	glx_hsw = Spectra_x_y(specfile_glx[n_hsw])#, header_lbl = 'CD1_1')
	glx_avw = Spectra_x_y(specfile_glx[n_avw])#, header_lbl = 'CD1_1')

	lambda_glx_med,inten_glx_med,crval_glx_med,cdel1_glx_med,cd1_glx_med = glx_med[0], glx_med[1], glx_med[2], glx_med[3], glx_med[4]
	lambda_glx_avg,inten_glx_avg,crval_glx_avg,cdel1_glx_avg,cd1_glx_avg = glx_avg[0], glx_avg[1], glx_avg[2], glx_avg[3], glx_avg[4]
	lambda_glx_hst,inten_glx_hst,crval_glx_hst,cdel1_glx_hst,cd1_glx_hst = glx_hst[0], glx_hst[1], glx_hst[2], glx_hst[3], glx_hst[4]

	lambda_glx_hsw,inten_glx_hsw,crval_glx_hsw,cdel1_glx_hsw,cd1_glx_hsw = glx_hsw[0], glx_hsw[1], glx_hsw[2], glx_hsw[3], glx_hsw[4]
	lambda_glx_avw,inten_glx_avw,crval_glx_avw,cdel1_glx_avw,cd1_glx_avw = glx_avw[0], glx_avw[1], glx_avw[2], glx_avw[3], glx_avw[4]

	#res_sp_hst_frg  = Spectra_x_y(specfile_glx[-1],header_lbl='CRVAL1')

	fxsize=11
	fysize=8
	f = plt.figure(num=None, figsize=(11, 8), dpi=180, facecolor='w',
		edgecolor='k')
	plt.subplots_adjust(
		left 	= (16/25.4)/fxsize,                   #-26 bigger 22-def 
		bottom 	= (12/25.4)/fysize,                   #20 bigger  19-def 
		right 	= 1 - (16/25.4)/fxsize,               #            2-def  #1 - (6/25.4)/fxsize, 
		top 	= 1 - (15/25.4)/fysize)               #            4-def
	plt.subplots_adjust(hspace=0)#,wspace=0)

	#f.suptitle('An overall title', size=20)
	gs0 = gridspec.GridSpec(1, 1)

	########################################IND########################################
	gs11 = gridspec.GridSpecFromSubplotSpec(4, 1, subplot_spec=gs0[0])
		
	ax110 = plt.Subplot(f, gs11[0:3,0])
	f.add_subplot(ax110)

	ax110.set_rasterization_zorder(1)
	plt.autoscale(enable=True, axis='y', tight=False)
	ax110.xaxis.set_tick_params(labelsize=16)
	ax110.yaxis.set_tick_params(labelsize=16)
	#ax110.set_title('Teste')
	xticklabels = ax110.get_xticklabels()
	plt.setp(xticklabels, visible=False,family='serif')
	yticklabels = ax110.get_yticklabels()
	plt.setp(yticklabels, visible=True,family='serif')

	minorLocator_x   = plt.MultipleLocator(5)
	majorLocator_x   = plt.MultipleLocator(50)
	#minorLocator_y   = plt.MultipleLocator(0.1)
	#majorLocator_y   = plt.MultipleLocator(0.5)
	ax110.xaxis.set_minor_locator(minorLocator_x)
	ax110.xaxis.set_major_locator(majorLocator_x)
	#ax110.yaxis.set_minor_locator(minorLocator_y)
	#ax110.yaxis.set_major_locator(majorLocator_y)
	plt.tick_params(which='both', width=0.7)
	plt.tick_params(which='major', length=5)
	plt.tick_params(which='minor', length=2)
	ax110.minorticks_on()

	ax110.yaxis.set_tick_params(which='both',labelsize=16,direction='in',color='black',bottom=True,top=True,left=True,right=True)
	ax110.xaxis.set_tick_params(which='both',labelsize=16,direction='in',color='black',bottom=True,top=True,left=True,right=True)

	plt.xlabel('$\lambda$',fontsize=16, family = 'serif')
	plt.ylabel('F$_\lambda$ (ergs/sec/cm$^{2}/\AA$)',fontsize=16, family = 'serif')

	min_y_ind_spc=[]
	max_y_ind_spc=[]

	## Have a look at the colormaps here and decide which one you'd like:
	## http://matplotlib.org/1.2.1/examples/pylab_examples/show_colormaps.html
	#colormap = plt.cm.spectral#gist_ncar
	#num_plots = len(specfile_glx[0])	
	#plt.gca().set_color_cycle([colormap(i) for i in np.linspace(0, 0.9, num_plots)])


	for s in np.loadtxt(specfile_glx[0],dtype=str):
		primer =  str((s.split('.fits',1)[0]).split('sc_')[1])
		segund =  str(primer.split('_',1)[0])
		tercer =  str(((primer.split('s2-',1)[1])).split('-int')[0])
		label_id_stck = segund + '-' + tercer

		ind_spec = Spectra_x_y(s)
		if wgt_typ == 'i-band-mag':
			wgt_var     = 'MAG_I'
			wgt_nrm_hdr = 'MAG_IN'
		elif wgt_typ == 'cont-flux-sum':
			wgt_var         = 'CFX_SUM'
			wgt_nrm_hdr = 'CFX_SUN'
		elif wgt_typ == 'cont-flux-med':
			wgt_var     = 'CFX_MED'
			wgt_nrm_hdr = 'CFX_MEN'
		elif wgt_typ == 'cont-flux-avg':
			wgt_var     = 'CFX_AVG'
			wgt_nrm_hdr = 'CFX_AVN'
		elif wgt_typ == None:
			wgt_var     = 'WGT_UNT'
			wgt_nrm_hdr = 'WGT_UNN'
		try:
			wght_times = Header_Get(s,wgt_nrm_hdr)
		except KeyError:
			wght_times = 1
		label_id_stck = label_id_stck + ', wght: ' + str(np.around(wght_times,decimals=4))

		mask = (ind_spec[1] >= lmb_min_lim) & (ind_spec[1] <= lmb_max_lim)

		#return sp_lambda,sp_intens,sp_lambda0,sp_step,sp_hdr
		#plt.plot(ind_spec[0][mask],wght_times*ind_spec[1][mask],alpha=0.4,label=label_id_stck)
		plt.plot(ind_spec[0],wght_times*ind_spec[1],alpha=0.4,label=label_id_stck)
		#lg1 = plt.legend(loc=1,prop={'size':14},ncol=11)
		#lg1.draw_frame(False)
		nmin = int(abs(lmb_min - ind_spec[2]) / ind_spec[3])
		nmax = int(abs(lmb_max - ind_spec[2]) / ind_spec[3])

		#min_y_ind_spc.append(bn.nanmin(wght_times*ind_spec[1][mask]))
		#max_y_ind_spc.append(bn.nanmax(wght_times*ind_spec[1][mask]))

		min_y_ind_spc.append(min(ind_spec[1][nmin:nmax]*wght_times))
		max_y_ind_spc.append(max(ind_spec[1][nmin:nmax]*wght_times))

	plt.xlim([lmb_min,lmb_max])
	xmin, xmax = plt.xlim()
	plt.xlim((xmin,xmax))

	if autoaxis == False:
		min_y = bn.nanmin(min_y_ind_spc)
		max_y = bn.nanmax(max_y_ind_spc)
		#plt.ylim([min_y,max_y])
		#ymin, ymax = plt.ylim()
		#plt.ylim((ymin,ymax))

	elif autoaxis == True:
		min_y, max_y = ax110.get_ylim()



	#lg1 = plt.legend(loc=1,prop={'size':14},ncol=10)
	#lg1.draw_frame(False)

	#################LINE ID-IND#################
	for lines in range(len(LINES[0])):
		if lmb_min < LINES[0][lines]*(1+z_glx_Ps) < lmb_max :
			plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y,max_y],color='k', ls=':',lw=1.5)
			ax110.text(LINES[0][lines]*(1+z_glx_Ps),min_y,LINES[4][lines],rotation=90,va='bottom',fontsize=16,style='oblique')
		elif LINES[0][lines]*(1+z_glx_Ps) > 6700 :
			break
	#################LINE ID-IND#################

	#lg2=plt.legend(loc=1,prop={'size':14}, ncol=10)
	#lg2.draw_frame(False)

	plt.plot([lmb_min,lmb_max],[1,1],color='k', ls='-.',lw=1)

	plt.xlim([lmb_min,lmb_max])
	xmin, xmax = plt.xlim()
	plt.xlim((xmin,xmax))
	plt.ylim([min_y,max_y])
	ymin, ymax = plt.ylim()
	plt.ylim((ymin,ymax))

	##########################################STK######################################
	
	ax111 = plt.Subplot(f, gs11[3,0])
	f.add_subplot(ax111)

	ax111.set_rasterization_zorder(1)
	plt.autoscale(enable=True, axis='y', tight=False)
	ax111.xaxis.set_tick_params(labelsize=16)
	ax111.yaxis.set_tick_params(labelsize=16)
	#ax111.set_title('Teste')
	xticklabels = ax111.get_xticklabels()
	plt.setp(xticklabels, visible=True,family='serif')
	yticklabels = ax111.get_yticklabels()
	plt.setp(yticklabels, visible=True,family='serif')

	minorLocator_x   = plt.MultipleLocator(5)
	majorLocator_x   = plt.MultipleLocator(50)
	#minorLocator_y   = plt.MultipleLocator(1)
	#majorLocator_y   = plt.MultipleLocator(10)
	ax111.xaxis.set_minor_locator(minorLocator_x)
	ax111.xaxis.set_major_locator(majorLocator_x)
	#ax111.yaxis.set_minor_locator(minorLocator_y)
	#ax111.yaxis.set_major_locator(majorLocator_y)
	plt.tick_params(which='both', width=0.7)
	plt.tick_params(which='major', length=5)
	plt.tick_params(which='minor', length=2)
	ax111.minorticks_on()

	ax111.yaxis.set_tick_params(which='both',labelsize=16,direction='in',color='black',bottom=True,top=True,left=True,right=True)
	ax111.xaxis.set_tick_params(which='both',labelsize=16,direction='in',color='black',bottom=True,top=True,left=True,right=True)

	plt.xlabel('$\lambda$',fontsize=16, family = 'serif')
	plt.ylabel('F$_\lambda$ (ergs/sec/cm$^{2}/\AA$)',fontsize=16, family = 'serif')

	mask_med = (lambda_glx_med >= lmb_min_lim) & (lambda_glx_med <= lmb_max_lim)
	mask_avg = (lambda_glx_avg >= lmb_min_lim) & (lambda_glx_avg <= lmb_max_lim)
	mask_avw = (lambda_glx_avw >= lmb_min_lim) & (lambda_glx_avw <= lmb_max_lim)

	plt.plot(lambda_glx_med, inten_glx_med, color='black' , label=label_glx_med,alpha=0.6)
	plt.plot(lambda_glx_avg, inten_glx_avg, color=clr_plt , label=label_glx_avg,alpha=0.6)
	plt.plot(lambda_glx_avw, inten_glx_avw, color='green' , label=label_glx_avw,alpha=0.6)

	plt.xlim([lmb_min,lmb_max])
	xmin, xmax = plt.xlim()
	plt.xlim((xmin,xmax))

	if autoaxis == False:
		nmin  = int(min((abs(lmb_min - crval_glx_med) / cdel1_glx_med), (abs(lmb_min - crval_glx_avg) / cdel1_glx_avg)))
		nmax  = int(max((abs(lmb_max - crval_glx_med) / cdel1_glx_med), (abs(lmb_max - crval_glx_avg) / cdel1_glx_avg)))
		min_y = min((min(inten_glx_med[mask_med])),(min(inten_glx_avg[mask_avg])))#min((min(inten_glx_med[nmin:nmax])),(min(inten_glx_avg[nmin:nmax])))
		max_y = max((max(inten_glx_med[mask_med])),(max(inten_glx_avg[mask_avg])))#max((max(inten_glx_med[nmin:nmax])),(max(inten_glx_avg[nmin:nmax])))

		plt.ylim([min_y,max_y])
		ymin, ymax = plt.ylim()
		plt.ylim((ymin,ymax))

	elif autoaxis == True:
		min_y, max_y = ax110.get_ylim()


	#min_y, max_y = ax111.get_ylim()

	lg1 = plt.legend(loc=1,prop={'size':14})
	lg1.draw_frame(False)

	##############LINE ID-STLYE##############
	linestyle_str = [
	     ('solid', 'solid'),      # Same as (0, ()) or '-'
	     ('dotted', 'dotted'),    # Same as (0, (1, 1)) or '.'
	     ('dashed', 'dashed'),    # Same as '--'
	     ('dashdot', 'dashdot')]  # Same as '-.'

	linestyle_tuple = [
	     ('loosely dotted',        (0, (1, 10))),
	     ('dotted',                (0, (1, 1))),
	     ('densely dotted',        (0, (1, 1))),

	     ('loosely dashed',        (0, (5, 10))),
	     ('dashed',                (0, (5, 5))),
	     ('densely dashed',        (0, (5, 1))),

	     ('loosely dashdotted',    (0, (3, 10, 1, 10))),
	     ('dashdotted',            (0, (3, 5, 1, 5))),
	     ('densely dashdotted',    (0, (3, 1, 1, 1))),

	     ('dashdotdotted',         (0, (3, 5, 1, 5, 1, 5))),
	     ('loosely dashdotdotted', (0, (3, 10, 1, 10, 1, 10))),
	     ('densely dashdotdotted', (0, (3, 1, 1, 1, 1, 1)))]
	##############LINE ID-STLYE##############
	#################LINE ID#################
	prev_loc=0
	for lines in range(len(LINES[0])):
		if LINES[11][lines] == 1:
			#LOW ISM absorption line
			col_lne_idx = 'red'
			stl_lne_idx = 'solid'
		elif LINES[11][lines] == 2:
			#HIGH ISM absorption line
			col_lne_idx = 'green'
			stl_lne_idx = 0, (1, 1)#'dotted'
		elif LINES[11][lines] == 3:
			#Stellar Photospheric Absorption Line
			col_lne_idx = 'cyan'
			stl_lne_idx = 'dashed'
		elif LINES[11][lines] == 4:
			#Nebular Emission Line
			col_lne_idx = 'magenta'
			stl_lne_idx = 'dashdot'
		elif LINES[11][lines] == 5:
			#Interstellar Fine-structure emission lines
			col_lne_idx = 'black'
			stl_lne_idx = (0, (3, 5, 1, 5, 1, 5)) #dashdotdotted
		elif LINES[11][lines] == 6:
			#HI absorption line
			col_lne_idx = 'blue'
			stl_lne_idx = (0, (3, 10, 1, 10, 1, 10)) #loosely dashdotdotted

		sep_lin_min=40
		if lmb_min < LINES[0][lines]*(1+z_glx_Ps) < lmb_max:
			if ((LINES[9][lines] == LINES[9][lines+1])) and (abs(LINES[0][lines]-LINES[0][lines-1])> sep_lin_min): 
				#print
				#print LINES[9][lines],LINES[9][lines-1],abs(LINES[0][lines]-LINES[0][lines-1]),'D',((LINES[9][lines] == LINES[9][lines+1])) and (abs(LINES[0][lines]-LINES[0][lines-1])> sep_lin_min)
				#print abs(LINES[0][lines]-LINES[0][lines-1]),prev_loc,'D',(abs(LINES[0][lines]-LINES[0][lines-1])<sep_lin_min and prev_loc==1)
				#print
				plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[1,max_y-(max_y*.3)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				ax110.text((LINES[0][lines]*(1+z_glx_Ps)+LINES[0][lines+1]*(1+z_glx_Ps))/2,max_y-(max_y*.3),LINES[9][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='normal',color=col_lne_idx,family='serif')

				#plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y,max_y-(max_y*.3)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				#ax110.text(LINES[0][lines]*(1+z_glx_Ps),max_y-(max_y*.3),LINES[4][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='italic',color=col_lne_idx)
				prev_loc=0
			elif (abs(LINES[0][lines]-LINES[0][lines-1])<(sep_lin_min/1.6) and prev_loc==1): 
				#print
				#print LINES[9][lines],LINES[9][lines-1],abs(LINES[0][lines]-LINES[0][lines-1]),'C',((LINES[9][lines] == LINES[9][lines+1])) and (abs(LINES[0][lines]-LINES[0][lines-1])> sep_lin_min)
				#print abs(LINES[0][lines]-LINES[0][lines-1]),prev_loc,'C',(abs(LINES[0][lines]-LINES[0][lines-1])<sep_lin_min and prev_loc==1)
				#print
				plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[1,max_y-(max_y*.3)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				ax110.text((LINES[0][lines]*(1+z_glx_Ps)+LINES[0][lines+1]*(1+z_glx_Ps))/2,max_y-(max_y*.3),LINES[9][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='normal',color=col_lne_idx,family='serif')

				#plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y,max_y-(max_y*.3)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				#ax110.text(LINES[0][lines]*(1+z_glx_Ps),max_y-(max_y*.3),LINES[4][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='italic',color=col_lne_idx)
				prev_loc=0
			elif (sep_lin_min/1.6)<=(abs(LINES[0][lines]-LINES[0][lines-1])<sep_lin_min and prev_loc==1): 
				#print
				#print LINES[9][lines],LINES[9][lines-1],abs(LINES[0][lines]-LINES[0][lines-1]),'C',((LINES[9][lines] == LINES[9][lines+1])) and (abs(LINES[0][lines]-LINES[0][lines-1])> sep_lin_min)
				#print abs(LINES[0][lines]-LINES[0][lines-1]),prev_loc,'C',(abs(LINES[0][lines]-LINES[0][lines-1])<sep_lin_min and prev_loc==1)
				#print
				plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[1,max_y-(max_y*.3)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				ax110.text((LINES[0][lines]*(1+z_glx_Ps)+LINES[0][lines+1]*(1+z_glx_Ps))/2,max_y-(max_y*.3),LINES[9][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='normal',color=col_lne_idx,family='serif')

				#plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y,max_y-(max_y*.3)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				#ax110.text(LINES[0][lines]*(1+z_glx_Ps),max_y-(max_y*.3),LINES[4][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='italic',color=col_lne_idx)
				prev_loc=0
			elif ((LINES[9][lines] == LINES[9][lines+1])) and (abs(LINES[0][lines]-LINES[0][lines-1])<sep_lin_min and (prev_loc==0)) and (len(LINES[4][lines])<=5):
				#print
				#print LINES[9][lines],LINES[9][lines-1],'B'
				#print
				plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y+(min_y*.30),1],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				ax110.text((LINES[0][lines]*(1+z_glx_Ps)+LINES[0][lines+1]*(1+z_glx_Ps))/2,min_y,LINES[9][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='normal',color=col_lne_idx,family='serif')

				#plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y,max_y-(max_y*.2)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				#ax110.text(LINES[0][lines]*(1+z_glx_Ps),max_y-(max_y*.2),LINES[4][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='italic',color=col_lne_idx)
				prev_loc=1
			elif ((LINES[9][lines] == LINES[9][lines+1])) and (abs(LINES[0][lines]-LINES[0][lines-1])<sep_lin_min and (prev_loc==0)) and (len(LINES[4][lines])>5):
				#print
				#print LINES[9][lines],LINES[9][lines-1],'A'
				#print
				plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y+(min_y*.45),1],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				ax110.text((LINES[0][lines]*(1+z_glx_Ps)+LINES[0][lines+1]*(1+z_glx_Ps))/2,min_y,LINES[9][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='normal',color=col_lne_idx,family='serif')

				#plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y,max_y-(max_y*.2)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				#ax110.text(LINES[0][lines]*(1+z_glx_Ps),max_y-(max_y*.2),LINES[4][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='italic',color=col_lne_idx)
				prev_loc=1
				#
			elif (LINES[9][lines] == LINES[9][lines-1]) and (prev_loc==1) and (len(LINES[4][lines])<=5):
				#print
				#print LINES[9][lines],LINES[9][lines-1],'d'
				#print
				plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y+(min_y*.30),1],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				#plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y,max_y-(max_y*.2)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
			elif (LINES[9][lines] == LINES[9][lines-1]) and (prev_loc==1) and (len(LINES[4][lines])>5):
				#print
				#print LINES[9][lines],LINES[9][lines-1],'c'
				#print
				plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y+(min_y*.45),1],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				#plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y,max_y-(max_y*.2)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)

			elif (LINES[9][lines] == LINES[9][lines-1]) and (prev_loc==0) and (len(LINES[4][lines])<=5):
				#print
				#print LINES[9][lines],LINES[9][lines-1],'b'
				#print
				plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[1,max_y-(max_y*.30)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				#plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y,max_y-(max_y*.3)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
			elif (LINES[9][lines] == LINES[9][lines-1]) and (prev_loc==0) and (len(LINES[4][lines])>5):
				#print
				#print LINES[9][lines],LINES[9][lines-1],'a'
				#print
				plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[1,max_y-(max_y*.30)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				#plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y,max_y-(max_y*.3)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				#
			elif (abs(LINES[0][lines]-LINES[0][lines-1])> sep_lin_min) or (abs(LINES[0][lines]-LINES[0][lines-1])<sep_lin_min and prev_loc==1) and ((LINES[9][lines] != LINES[9][lines-1])):
				#print
				#print LINES[9][lines],LINES[9][lines-1],'1'
				#print
				plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[1,max_y-(max_y*.3)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				ax110.text(LINES[0][lines]*(1+z_glx_Ps),max_y-(max_y*.3),LINES[9][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='normal',color=col_lne_idx,family='serif')

				#plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y,max_y-(max_y*.3)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				#ax110.text(LINES[0][lines]*(1+z_glx_Ps),max_y-(max_y*.3),LINES[4][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='italic',color=col_lne_idx)
				prev_loc=0
			elif (abs(LINES[0][lines]-LINES[0][lines-1])<sep_lin_min and (prev_loc==0)) and ((LINES[9][lines] != LINES[9][lines-1])) and (len(LINES[4][lines])<=5):
				#print
				#print LINES[9][lines],LINES[9][lines-1],'2'
				#print
				plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y+(min_y*.30),1],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				ax110.text(LINES[0][lines]*(1+z_glx_Ps),min_y,LINES[9][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='normal',color=col_lne_idx,family='serif')

				#plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y,max_y-(max_y*.2)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				#ax110.text(LINES[0][lines]*(1+z_glx_Ps),max_y-(max_y*.2),LINES[4][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='italic',color=col_lne_idx)
				prev_loc=1
			elif (abs(LINES[0][lines]-LINES[0][lines-1])<sep_lin_min and (prev_loc==0)) and ((LINES[9][lines] != LINES[9][lines-1])) and (len(LINES[4][lines])>5):
				#print
				#print LINES[9][lines],LINES[9][lines-1],'3'
				#print
				plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y+(min_y*.45),1],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				ax110.text(LINES[0][lines]*(1+z_glx_Ps),min_y,LINES[9][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='normal',color=col_lne_idx,family='serif')
				#plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y,max_y-(max_y*.2)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				#ax110.text(LINES[0][lines]*(1+z_glx_Ps),max_y-(max_y*.2),LINES[4][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='italic',color=col_lne_idx)
				prev_loc=1
		elif LINES[0][lines]*(1+z_glx_Ps) > 6700 :
			break
	#################LINE ID#################

	plt.plot([lmb_min, lmb_max], [1, 1], color='black', lw=1, alpha=0.4)

	lg2=plt.legend(loc=1,prop={'size':14})
	lg2.draw_frame(False)	

	plt.plot([lmb_min, lmb_max], [1 + 1 * std_glx_avw, 1 + 1 * std_glx_avw], color='green', lw=1, alpha=0.6, ls='dashed')
	plt.plot([lmb_min, lmb_max], [1 + 2 * std_glx_avw, 1 + 2 * std_glx_avw], color='green', lw=1, alpha=0.6, ls='dashed')
	plt.plot([lmb_min, lmb_max], [1 + 3 * std_glx_avw, 1 + 3 * std_glx_avw], color='green', lw=1, alpha=0.6, ls='dashed')
	plt.plot([lmb_min, lmb_max], [1 - 1 * std_glx_avw, 1 - 1 * std_glx_avw], color='green', lw=1, alpha=0.6, ls='dashed')
	plt.plot([lmb_min, lmb_max], [1 - 2 * std_glx_avw, 1 - 2 * std_glx_avw], color='green', lw=1, alpha=0.6, ls='dashed')
	plt.plot([lmb_min, lmb_max], [1 - 3 * std_glx_avw, 1 - 3 * std_glx_avw], color='green', lw=1, alpha=0.6, ls='dashed')

	lg2=plt.legend(loc=1,prop={'size':14})
	lg2.draw_frame(False)

	if twin_axis == True:
		ax111_twin = ax111.twinx()
		ax111_p_major = ax111.get_yticks()
		ax111_p_minor = ax111.get_yticks(minor=True)
		ax111_twin_minor = []
		ax111_twin_major = []
		np.round(std_glx_med,4)
		[ax111_twin_minor.append(np.round((Y-1)/std_glx_avw,0)) for Y in ax111_p_minor]
		[ax111_twin_major.append(np.round((Y-1)/std_glx_avw,0)) for Y in ax111_p_major]
		ax111_twin.set_yticks(ax111_twin_minor,minor=True)
		ax111_twin.set_yticks(ax111_twin_major)
		ax111_twin.set_yticklabels(ax111_twin_major,fontsize=16, family = 'serif')
		align_yaxis(ax111, 1, ax111_twin, 0)
		ax111_twin.set_ylabel('SNR',fontsize=16, family = 'serif')
	elif twin_axis == False:
		pass
	##########################################SAVE#####################################
	plt.savefig(PLOTFILENAME)

	if verbose == True:
		print colored('Generated Plot: ' + str(PLOTFILENAME),'cyan')
	elif verbose ==False:
		pass
	if epssave == True:
		plt.savefig(PLOTFILENAME2, rasterized=True)
		#os.system('open Spectra.eps')
	elif epssave == False:
		pass
	if showplot == True:
		#os.system('open '+str(PLOTFILENAME))
		pass
	elif showplot == False:
		pass	
	plt.close('all')

def Plot_Step_Spc(specfile,*args, **kwargs):
	dest_dir    = kwargs.get('dest_dir',None)
	autoaxis    = kwargs.get('autoaxis',False)
	verbose     = kwargs.get('verbose' , False)
	epssave     = kwargs.get('epssave' , False)
	showplot    = kwargs.get('showplot', False) 

	wgt_typ     = kwargs.get('wgt_typ'    ,None)
	wgt_var     = kwargs.get('wgt_var'    ,None)
	wgt_nrm_hdr = kwargs.get('wgt_nrm_hdr',None)

	min_x_lim_Idp = kwargs.get('min_x_lim_Idp' , 1200)
	max_x_lim_Idp = kwargs.get('max_x_lim_Idp' , 1750)

	lmb_min       = min_x_lim_Idp #kwargs.get('lmb_min',1200)
	lmb_max       = max_x_lim_Idp #kwargs.get('lmb_max',1700)
	
	if dest_dir != None:
		PLOTFILENAME = str(dest_dir)  + '/' + (str(specfile).split('.fits')[0]).split('/')[-1] + '-stp.pdf'
	elif dest_dir == None:
		PLOTFILENAME = ind_plt_res    + '/' + (str(specfile).split('.fits')[0]).split('/')[-1] + '-stp.pdf'

	fxsize=11
	fysize=8
	f = plt.figure(num=None, figsize=(11, 8), dpi=180, facecolor='w',
		edgecolor='k')
	plt.subplots_adjust(
		left 	= (16/25.4)/fxsize,                   #-26 bigger 22-def 
		bottom 	= (12/25.4)/fysize,                   #20 bigger  19-def 
		right 	= 1 - (6/25.4)/fxsize,                #            2-def  
		top 	= 1 - (15/25.4)/fysize)               #            4-def
	plt.subplots_adjust(hspace=0.0)#,wspace=0)
	
	loop_back_max  = int(Header_Get(specfile,'h_s_c'))
	loop_back_step = int(Header_Get(specfile,'h_s_c'))

	lmb_min_lim = lmb_min
	lmb_max_lim = lmb_max


	####################################PLOT STEP######################################
	
	gs0 = gridspec.GridSpec(loop_back_step+1, 1)

	while (loop_back_step >= 0):
		loop_back_step_header = 'h_s_' + str(loop_back_step)
		loop_back_fits = str(Header_Get(specfile,loop_back_step_header)) + '.fits'
		id_glx_ref     = str(Header_Get(specfile,'ID_REF'))
		z_glx_ref      = Header_Get(specfile,'Z_REF')
		id_glx_zro     = str(Header_Get(specfile,'ID_0'))
		z_glx_zro      = Header_Get(specfile,'Z_0')

		dest_dir_fr      = par_frg_dir + str(rad_sep[0][0]) + '-' + str(rad_sep[0][-1]) + '/'
		dest_dir_bk      = par_bkg_dir + str(rad_sep[0][0]) + '-' + str(rad_sep[0][-1]) + '/'

		try:
			specfile_step = ind_stk_res + loop_back_fits
			lambda_sp,inten_sp,crval_sp,cdel1_sp = Spectra_x_y(specfile_step)[0], Spectra_x_y(specfile_step)[1],Spectra_x_y(specfile_step)[2],Spectra_x_y(specfile_step)[3]#,str(Header_Get(specfile_step,'ID_0')),str(Header_Get(specfile_step,'Z_0')),str(Header_Get(specfile_step,'ID_REF')),str(Header_Get(specfile_step,'Z_REF'))
			label_1 = loop_back_fits + ' 1: '
			id_glx_ref = str(Header_Get(specfile_step,'ID_REF'))
			z_glx_ref  = Header_Get(specfile_step,'Z_REF')
			id_glx_zro = int(Header_Get(specfile_step,'ID_0'))
			z_glx_zro  = Header_Get(specfile_step,'Z_0')
		except:
			pass

		try:
			specfile_step = dest_dir_fr + loop_back_fits
			lambda_sp,inten_sp,crval_sp,cdel1_sp = Spectra_x_y(specfile_step)[0], Spectra_x_y(specfile_step)[1],Spectra_x_y(specfile_step)[2],Spectra_x_y(specfile_step)[3]#,str(Header_Get(specfile_step,'ID_0')),str(Header_Get(specfile_step,'Z_0')),str(Header_Get(specfile_step,'ID_REF')),str(Header_Get(specfile_step,'Z_REF'))
			label_1 = loop_back_fits + ' 2: ' 
			id_glx_ref = str(Header_Get(specfile_step,'ID_REF'))
			z_glx_ref  = Header_Get(specfile_step,'Z_REF')
			id_glx_zro = int(Header_Get(specfile_step,'ID_0'))
			z_glx_zro  = Header_Get(specfile_step,'Z_0')
		except:
			pass

		try:
			specfile_step = dest_dir_bk + loop_back_fits
			lambda_sp,inten_sp,crval_sp,cdel1_sp = Spectra_x_y(specfile_step)[0], Spectra_x_y(specfile_step)[1],Spectra_x_y(specfile_step)[2],Spectra_x_y(specfile_step)[3]#,str(Header_Get(specfile_step,'ID_0')),str(Header_Get(specfile_step,'Z_0')),str(Header_Get(specfile_step,'ID_REF')),str(Header_Get(specfile_step,'Z_REF'))
			label_1 = loop_back_fits + ' 3: '
			id_glx_ref = str(Header_Get(specfile_step,'ID_REF'))
			z_glx_ref  = Header_Get(specfile_step,'Z_REF')
			id_glx_zro = int(Header_Get(specfile_step,'ID_0'))
			z_glx_zro  = Header_Get(specfile_step,'Z_0')
		except:
			pass

		####################################SPEC-N#########################################
		
		gs11 = gridspec.GridSpecFromSubplotSpec(1, 1, subplot_spec=gs0[loop_back_step])
			
		ax110 = plt.Subplot(f, gs11[0,0])
		f.add_subplot(ax110)

		ax110.set_rasterization_zorder(1)
		plt.autoscale(enable=True, axis='y', tight=True)
		ax110.xaxis.set_tick_params(labelsize=16)
		ax110.yaxis.set_tick_params(labelsize=16)
		#ax110.set_title('Teste')
		xticklabels = ax110.get_xticklabels()
		yticklabels = ax110.get_yticklabels()
		plt.setp(yticklabels, visible=True,family='serif')
		plt.setp(xticklabels, visible=True,family='serif')

		minorLocator_x   = plt.MultipleLocator(5)
		majorLocator_x   = plt.MultipleLocator(50)
		#minorLocator_y   = plt.MultipleLocator(0.1)
		#majorLocator_y   = plt.MultipleLocator(0.5)
		ax110.xaxis.set_minor_locator(minorLocator_x)
		ax110.xaxis.set_major_locator(majorLocator_x)
		#ax110.yaxis.set_minor_locator(minorLocator_y)
		#ax110.yaxis.set_major_locator(majorLocator_y)
		plt.tick_params(which='both', width=0.7)
		plt.tick_params(which='major', length=5)
		plt.tick_params(which='minor', length=2)
		ax110.minorticks_on()

		ax110.yaxis.set_tick_params(which='both',labelsize=16,direction='in',color='black',bottom=True,top=True,left=True,right=True)
		ax110.xaxis.set_tick_params(which='both',labelsize=16,direction='in',color='black',bottom=True,top=True,left=True,right=True)


		plt.ylabel('F$_\lambda$',fontsize=16, family = 'serif')
		#plt.ylabel('F$_\lambda$ (ergs/sec/cm$^{2}/\AA$)',fontsize=16, family = 'serif')
		#plt.ylabel('Intensity',fontsize=16, family = 'serif')
		
		if loop_back_step == 0:
			#print ind_stk_res
			#print dest_dir_fr
			#print dest_dir_bk
			try:
				specfile_c_fit = ind_stk_res + loop_back_fits.split('.fits',1)[0] + '-c-f.fits'
				lambda_sp_c_fit,inten_sp_c_fit,crval_sp_c_fit,cdel1_sp_c_fit = Spectra_x_y(specfile_c_fit)[0], Spectra_x_y(specfile_c_fit)[1],Spectra_x_y(specfile_c_fit)[2],Spectra_x_y(specfile_c_fit)[3]
				label_cnt = loop_back_fits.split('.fits',1)[0] + '-c-f.fits' + ' 1: '  
				cnt_par_1 = str(Header_Get(specfile_c_fit,'CNT_FIT'))
				cnt_par_2 = str(Header_Get(specfile_c_fit,'CNT_ORD'))
				cnt_par_3 = str(Header_Get(specfile_c_fit,'CNT_LRJ'))
				cnt_par_4 = str(Header_Get(specfile_c_fit,'CNT_HRJ'))
				label_c_fit  = str(label_cnt)+ '  ' + str(cnt_par_1)+ ', order:  ' + str(cnt_par_2)+ ', $\sigma_l$  ' + str(cnt_par_3)+ ', $\sigma_h$  ' + str(cnt_par_4)  
				plt.plot(lambda_sp_c_fit, inten_sp_c_fit,color='green',label=label_c_fit)
			except:
				pass
			try:
				specfile_c_fit = dest_dir_fr + loop_back_fits.split('.fits',1)[0] + '-c-f.fits'
				lambda_sp_c_fit,inten_sp_c_fit,crval_sp_c_fit,cdel1_sp_c_fit = Spectra_x_y(specfile_c_fit)[0], Spectra_x_y(specfile_c_fit)[1],Spectra_x_y(specfile_c_fit)[2],Spectra_x_y(specfile_c_fit)[3]
				label_cnt = loop_back_fits.split('.fits',1)[0] + '-c-f.fits' + ' 2: '  
				cnt_par_1 = str(Header_Get(specfile_c_fit,'CNT_FIT'))
				cnt_par_2 = str(Header_Get(specfile_c_fit,'CNT_ORD'))
				cnt_par_3 = str(Header_Get(specfile_c_fit,'CNT_LRJ'))
				cnt_par_4 = str(Header_Get(specfile_c_fit,'CNT_HRJ'))
				label_c_fit  = str(label_cnt)+ '  ' + str(cnt_par_1)+ ', order:  ' + str(cnt_par_2)+ ', $\sigma_l$  ' + str(cnt_par_3)+ ', $\sigma_h$  ' + str(cnt_par_4)  
				plt.plot(lambda_sp_c_fit, inten_sp_c_fit,color='green',label=label_c_fit)
			except:
				pass
			try:
				specfile_c_fit = dest_dir_bk + loop_back_fits.split('.fits',1)[0] + '-c-f.fits'
				lambda_sp_c_fit,inten_sp_c_fit,crval_sp_c_fit,cdel1_sp_c_fit = Spectra_x_y(specfile_c_fit)[0], Spectra_x_y(specfile_c_fit)[1],Spectra_x_y(specfile_c_fit)[2],Spectra_x_y(specfile_c_fit)[3]
				label_cnt = loop_back_fits.split('.fits',1)[0] + '-c-f.fits' + ' 3: '  
				cnt_par_1 = str(Header_Get(specfile_c_fit,'CNT_FIT'))
				cnt_par_2 = str(Header_Get(specfile_c_fit,'CNT_ORD'))
				cnt_par_3 = str(Header_Get(specfile_c_fit,'CNT_LRJ'))
				cnt_par_4 = str(Header_Get(specfile_c_fit,'CNT_HRJ'))
				label_c_fit  = str(label_cnt)+ '  ' + str(cnt_par_1)+ ', order:  ' + str(cnt_par_2)+ ', $\sigma_l$  ' + str(cnt_par_3)+ ', $\sigma_h$  ' + str(cnt_par_4)  
				plt.plot(lambda_sp_c_fit, inten_sp_c_fit,color='green',label=label_c_fit)
			except:
				pass
			
			#label_c_fit  = str(label_cnt)+ '  ' + str(cnt_par_1)+ ', order:  ' + str(cnt_par_2)+ ', $\sigma_l$  ' + str(cnt_par_3)+ ', $\sigma_h$  ' + str(cnt_par_4)  
			#plt.plot(lambda_sp_c_fit, inten_sp_c_fit,color='green',label=label_c_fit)

		else:
			pass

		if (crval_sp==3510.71 or crval_sp==3500.0)and cdel1_sp==5.355:

			lmb_min_lim = lmb_min * (z_glx_ref+1)
			lmb_max_lim = lmb_max * (z_glx_ref+1)

			mask = (lambda_sp >= lmb_min_lim) & (lambda_sp <= lmb_max_lim)

			plt.plot(lambda_sp[mask], inten_sp[mask],color='black',label=label_1 + '  ' + str(id_glx_ref) + ',  ' + str(z_glx_ref) + ';  ' + str(id_glx_zro) + ',  ' + str(z_glx_zro))
			lg=plt.legend(loc=1,prop={'size':14})
			lg.draw_frame(False)

			ax110_th_minor = []
			ax110_th_major = []

			[ax110_th_minor.append(float(X * (1+z_glx_ref))) for X in ax110_p_minor]
			[ax110_th_major.append(float(X * (1+z_glx_ref))) for X in ax110_p_major]

			ax110.set_xticks(ax110_th_minor,minor=True)
			ax110.set_xticks(ax110_th_major)

			plt.xlim([lmb_min_lim,lmb_max_lim])
			xmin, xmax = plt.xlim()
			plt.xlim((xmin,xmax))

			if autoaxis == False:
				nmin  = int(abs( lmb_min_lim - crval_sp) / cdel1_sp)
				nmax  = int(abs( lmb_max_lim - crval_sp) / cdel1_sp)

				min_y = bn.nanmin(inten_sp[mask])#bn.nanmin(inten_sp[nmin:nmax])
				max_y = bn.nanmax(inten_sp[mask])#bn.nanmax(inten_sp[nmin:nmax])

				plt.ylim([min_y,max_y])
				ymin, ymax = plt.ylim()
				plt.ylim((ymin,ymax))

			elif autoaxis == True:
				min_y, max_y = ax110.get_ylim()

			#################LINE ID-STEP#################
			for lines in range(len(LINES[0])):
				if (lmb_min_lim < LINES[0][lines]*(1+z_glx_ref) < lmb_max_lim) :
					plt.plot([LINES[0][lines]*(1+z_glx_ref),LINES[0][lines]*(1+z_glx_ref)],[min_y,max_y],color='b', ls=':',lw=1.5)
					ax110.text(LINES[0][lines]*(1+z_glx_ref),min_y,LINES[4][lines],rotation=90,va='bottom',fontsize=16,style='oblique',color='blue')
				elif LINES[0][lines]*(1+z_glx_ref) > 6700 :
					break
				if lmb_min_lim < LINES[0][lines]*(1+z_glx_zro) < lmb_max_lim:
					plt.plot([LINES[0][lines]*(1+z_glx_zro),LINES[0][lines]*(1+z_glx_zro)],[min_y,max_y],color='r', ls=':',lw=1.5)
					ax110.text(LINES[0][lines]*(1+z_glx_zro),min_y,LINES[4][lines],rotation=90,va='bottom',fontsize=16,style='oblique',color='red')

				elif LINES[0][lines]*(1+z_glx_zro) > 6700 :
					break
			#################LINE ID-STEP#################
		else:
			z_glx_rsf=0
			z_ref = (1+ Header_Get(specfile,'Z_0'))/ (1+ Header_Get(specfile,'Z_REF'))
			lmb_min_lim = lmb_min
			lmb_max_lim = lmb_max

			mask = (lambda_sp >= lmb_min_lim) & (lambda_sp <= lmb_max_lim)

			try:
				specfile_c_fit = ind_stk_res + loop_back_fits.split('.fits',1)[0] + '-c-f.fits'
				lambda_sp_c_fit,inten_sp_c_fit,crval_sp_c_fit,cdel1_sp_c_fit = Spectra_x_y(specfile_c_fit)[0], Spectra_x_y(specfile_c_fit)[1],Spectra_x_y(specfile_c_fit)[2],Spectra_x_y(specfile_c_fit)[3]
				label_cnt = loop_back_fits.split('.fits',1)[0] + '-c-f.fits' + ' 1: '  
				cnt_par_1 = str(Header_Get(specfile_c_fit,'CNT_FIT'))
				cnt_par_2 = str(Header_Get(specfile_c_fit,'CNT_ORD'))
				cnt_par_3 = str(Header_Get(specfile_c_fit,'CNT_LRJ'))
				cnt_par_4 = str(Header_Get(specfile_c_fit,'CNT_HRJ'))
				label_c_fit  = str(label_cnt)+ '  ' + str(cnt_par_1)+ ', order:  ' + str(cnt_par_2)+ ', $\sigma_l$  ' + str(cnt_par_3)+ ', $\sigma_h$  ' + str(cnt_par_4)  
				plt.plot(lambda_sp_c_fit[mask], inten_sp_c_fit[mask],color='green',label=label_c_fit)

			except:
				pass
			try:
				specfile_c_fit = dest_dir_fr + loop_back_fits.split('.fits',1)[0] + '-c-f.fits'
				lambda_sp_c_fit,inten_sp_c_fit,crval_sp_c_fit,cdel1_sp_c_fit = Spectra_x_y(specfile_c_fit)[0], Spectra_x_y(specfile_c_fit)[1],Spectra_x_y(specfile_c_fit)[2],Spectra_x_y(specfile_c_fit)[3]
				label_cnt = loop_back_fits.split('.fits',1)[0] + '-c-f.fits' + ' 2: '  
				cnt_par_1 = str(Header_Get(specfile_c_fit,'CNT_FIT'))
				cnt_par_2 = str(Header_Get(specfile_c_fit,'CNT_ORD'))
				cnt_par_3 = str(Header_Get(specfile_c_fit,'CNT_LRJ'))
				cnt_par_4 = str(Header_Get(specfile_c_fit,'CNT_HRJ'))
				label_c_fit  = str(label_cnt)+ '  ' + str(cnt_par_1)+ ', order:  ' + str(cnt_par_2)+ ', $\sigma_l$  ' + str(cnt_par_3)+ ', $\sigma_h$  ' + str(cnt_par_4)  
				plt.plot(lambda_sp_c_fit[mask], inten_sp_c_fit[mask],color='green',label=label_c_fit)

			except:
				pass
			try:
				specfile_c_fit = dest_dir_bk + loop_back_fits.split('.fits',1)[0] + '-c-f.fits'
				lambda_sp_c_fit,inten_sp_c_fit,crval_sp_c_fit,cdel1_sp_c_fit = Spectra_x_y(specfile_c_fit)[0], Spectra_x_y(specfile_c_fit)[1],Spectra_x_y(specfile_c_fit)[2],Spectra_x_y(specfile_c_fit)[3]
				label_cnt = loop_back_fits.split('.fits',1)[0] + '-c-f.fits' + ' 3: '  
				cnt_par_1 = str(Header_Get(specfile_c_fit,'CNT_FIT'))
				cnt_par_2 = str(Header_Get(specfile_c_fit,'CNT_ORD'))
				cnt_par_3 = str(Header_Get(specfile_c_fit,'CNT_LRJ'))
				cnt_par_4 = str(Header_Get(specfile_c_fit,'CNT_HRJ'))
				label_c_fit  = str(label_cnt)+ '  ' + str(cnt_par_1)+ ', order:  ' + str(cnt_par_2)+ ', $\sigma_l$  ' + str(cnt_par_3)+ ', $\sigma_h$  ' + str(cnt_par_4)  
				plt.plot(lambda_sp_c_fit[mask], inten_sp_c_fit[mask],color='green',label=label_c_fit)

			except:
				pass
			
			#label_c_fit  = str(label_cnt)+ '  ' + str(cnt_par_1)+ ', order:  ' + str(cnt_par_2)+ ', $\sigma_l$  ' + str(cnt_par_3)+ ', $\sigma_h$  ' + str(cnt_par_4)  


			if 'int' in label_1:
				#print 'int'
				if wgt_typ == 'i-band-mag':
					wgt_var     = 'MAG_I'
					wgt_nrm_hdr = 'MAG_IN'
				elif wgt_typ == 'cont-flux-sum':
					wgt_var     = 'CFX_SUM'
					wgt_nrm_hdr = 'CFX_SUN'
				elif wgt_typ == 'cont-flux-med':
					wgt_var     = 'CFX_MED'
					wgt_nrm_hdr = 'CFX_MEN'
				elif wgt_typ == 'cont-flux-avg':
					wgt_var     = 'CFX_AVG'
					wgt_nrm_hdr = 'CFX_AVN'
				elif wgt_typ == None:
					wgt_var     = 'WGT_UNT'
					wgt_nrm_hdr = 'WGT_UNN'
				wght_times = Header_Get(specfile,wgt_nrm_hdr)
				plt.plot(lambda_sp[mask], wght_times * inten_sp[mask],color='black',label=label_1 + '  ' + str(id_glx_ref) + ',  ' + str(z_glx_ref) + ';  ' + str(id_glx_zro) + ',  ' + str(z_glx_zro) + ', wght: ' + str(np.around(wght_times,decimals=4)))
			else:
				plt.plot(lambda_sp[mask], inten_sp[mask],color='black',label=label_1 + '  ' + str(id_glx_ref) + ',  ' + str(z_glx_ref) + ';  ' + str(id_glx_zro) + ',  ' + str(z_glx_zro))
			nmin  = int(abs(lmb_min_lim - crval_sp) / cdel1_sp)
			nmax  = int(abs(lmb_max_lim - crval_sp) / cdel1_sp)


			lg=plt.legend(loc=1,prop={'size':14})
			lg.draw_frame(False)


			plt.xlim([lmb_min_lim,lmb_max_lim])
			xmin, xmax = plt.xlim()
			plt.xlim((xmin,xmax))

			if autoaxis == False and 'int' in label_1:
				min_y = bn.nanmin(wght_times * inten_sp[mask])#bn.nanmin(wght_times * inten_sp[nmin:nmax])
				max_y = bn.nanmax(wght_times * inten_sp[mask])#bn.nanmax(wght_times * inten_sp[nmin:nmax])
				plt.ylim([min_y,max_y])
				ymin, ymax = plt.ylim()
				plt.ylim((ymin,ymax))
			elif autoaxis == False and not 'int' in label_1:
				min_y = bn.nanmin(inten_sp[mask])#bn.nanmin(inten_sp[nmin:nmax])
				max_y = bn.nanmax(inten_sp[mask])#bn.nanmax(inten_sp[nmin:nmax])
				plt.ylim([min_y,max_y])
				ymin, ymax = plt.ylim()
				plt.ylim((ymin,ymax))
			elif autoaxis == True:
				min_y, max_y = ax110.get_ylim()

			plt.plot([lmb_min_lim, lmb_max_lim], [1, 1], color='green', lw=1)
			#lg1=plt.legend(loc=1,prop={'size':14})
			#lg1.draw_frame(False)

			#################LINE ID-STEP#################
			for lines in range(len(LINES[0])):
				if (lmb_min_lim < LINES[0][lines]*(1+z_glx_rsf) < lmb_max_lim):
					plt.plot([LINES[0][lines]*(1+z_glx_rsf),LINES[0][lines]*(1+z_glx_rsf)],[min_y,max_y],color='b', ls=':',lw=1.5)
					ax110.text(LINES[0][lines]*(1+z_glx_rsf),min_y,LINES[4][lines],rotation=90,va='bottom',fontsize=16,style='oblique',color='blue')
				elif LINES[0][lines]*(1+z_glx_rsf) > 6700 :
					break
				if (lmb_min_lim<LINES[0][lines]*((1+z_glx_zro)/(1+z_glx_ref))<lmb_max_lim):
					plt.plot([LINES[0][lines]*((1+z_glx_zro)/(1+z_glx_ref)),LINES[0][lines]*((1+z_glx_zro)/(1+z_glx_ref))],[min_y,max_y],color='r', ls=':',lw=1.5)
					ax110.text(LINES[0][lines]*((1+z_glx_zro)/(1+z_glx_ref)),min_y,LINES[4][lines],rotation=90,va='bottom',fontsize=16,style='oblique',color='red')
				elif LINES[0][lines]*(1+z_glx_ref) > 6700 :
					break
			#################LINE ID-STEP#################
			ax110_p_major = ax110.get_xticks()
			ax110_p_minor = ax110.get_xticks(minor=True)

		if loop_back_step== 0:
			ax110.xaxis.tick_top()
			plt.setp(xticklabels, visible=True,family='serif')
		elif loop_back_step == loop_back_max:
			plt.setp(xticklabels, visible=True,family='serif')
			plt.xlabel('$\lambda$',fontsize=16, family = 'serif')
		elif loop_back_step != 0 or loop_back_step!= loop_back_max:
			#plt.setp(xticklabels, visible=False,family='serif')
			plt.tick_params(
		    axis        = 'x',     # changes apply to the x-axis
		    which       = 'both',  # both major and minor ticks are affected
		    bottom      = True,    # ticks along the bottom edge are off
		    top         = True,    # ticks along the top edge are off
		    labelbottom = False)   # labels along the bottom edge are off			
		else:
			pass
		####################################SPEC-N#########################################
		loop_back_step = int(loop_back_step - 1)
	else:
		pass
	##########################################SAVE#####################################
	plt.savefig(PLOTFILENAME)

	if verbose == True:
		print colored('Generated Plot: ' + str(PLOTFILENAME),'cyan')
	elif verbose ==False:
		pass
	if epssave == True:
		plt.savefig(PLOTFILENAME2, rasterized=True)
		#os.system('open Spectra.eps')
	elif epssave == False:
		pass
	if showplot == True:
		#os.system('open '+str(PLOTFILENAME))
		pass
	elif showplot == False:
		pass	
	plt.close('all')

def Plot_All_Spec_All_Int(int_typ_spl,n_int_spt,*args,**kwargs):
	plt_ind_spec    = kwargs.get('plt_ind_spec' ,False)
	verbose         = kwargs.get('verbose'      ,True)

	autoaxis_Idp    = kwargs.get('autoaxis_Idp' ,True)
	min_y_lim_Idp   = kwargs.get('min_y_lim_Idp', 0.5)
	max_y_lim_Idp   = kwargs.get('max_y_lim_Idp', 1.5)
	aaxs_Idp_ml_y   = kwargs.get('aaxs_Idp_ml_y', False)

	min_x_lim_Idp   = kwargs.get('min_x_lim_Idp', 1200)
	max_x_lim_Idp   = kwargs.get('max_x_lim_Idp', 1750)

	autoaxis_Ctb    = kwargs.get('autoaxis_Ctb' ,False)
	only_stt_tbl    = kwargs.get('only_stt_tbl' ,False)

	plt_cnt_stk_spc = kwargs.get('plt_cnt_stk_spc' ,False)

	wgt_typ         = kwargs.get('wgt_typ'         ,None)

	max_sep         = kwargs.get('max_sep'         ,23)

	SNR_LINES       = kwargs.get('SNR_LINES'       ,23)
	show_legends    = kwargs.get('show_legends'    , True)

	plt_stk_med   = kwargs.get('plt_stk_med'       , True)
	plt_stk_avg   = kwargs.get('plt_stk_avg'       , True)
	plt_stk_avw   = kwargs.get('plt_stk_avw'       , True)

	####################DEFINE-INTERVALS-FOR-PLOTTING####################
	#int_typ_spl     = kwargs.get('int_typ_spl','sep_as')
	#n_int_spt       = kwargs.get('n_int_spt',False)
	lower_shift     = kwargs.get('lower_shift',False)
	upper_shift     = kwargs.get('upper_shift',False)
	print
	print int_typ_spl
	print n_int_spt
	print max_sep
	print
	if (int_typ_spl == 'kpc') and n_int_spt == 0:#in specfile_glx_f:
		splt_smpl_sfx   = '_kpc'
		splt_smpl_sfx_f = '_kpc_F'
		splt_smpl_unt   = 'kpc'
		splt_smpl_unl   = 'kpc'
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv)	
	elif (int_typ_spl == 'kpc') and n_int_spt == 1:#in specfile_glx_f:
		splt_smpl_sfx   = '_kpc'
		splt_smpl_sfx_f = '_kpc_F'
		splt_smpl_unt   = 'kpc'
		splt_smpl_unl   = 'kpc'
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_1)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_1)	
	elif (int_typ_spl == 'kpc') and n_int_spt == 2:#in specfile_glx_f:
		splt_smpl_sfx   = '_kpc'
		splt_smpl_sfx_f = '_kpc_F'
		splt_smpl_unt   = 'kpc'
		splt_smpl_unl   = 'kpc'
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_2)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_2)	
	elif (int_typ_spl == 'kpc') and n_int_spt == 3:#in specfile_glx_f:
		splt_smpl_sfx   = '_kpc'
		splt_smpl_sfx_f = '_kpc_F'
		splt_smpl_unt   = 'kpc'
		splt_smpl_unl   = 'kpc'
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_3)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_3)	
	elif (int_typ_spl == 'kpc') and n_int_spt == 4:#in specfile_glx_f:
		splt_smpl_sfx   = '_kpc'
		splt_smpl_sfx_f = '_kpc_F'
		splt_smpl_unt   = 'kpc'
		splt_smpl_unl   = 'kpc'
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_4)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_4)	
	elif (int_typ_spl == 'mass') and n_int_spt == 0:# in specfile_glx_f:
		splt_smpl_sfx   = '-mass'
		splt_smpl_sfx_f = '-mass_F'
		splt_smpl_unt   = 'mass'
		splt_smpl_unl   = 'mass'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv)	
	elif (int_typ_spl == 'mass') and n_int_spt == 1:# in specfile_glx_f:
		splt_smpl_sfx   = '-mass'
		splt_smpl_sfx_f = '-mass_F'
		splt_smpl_unt   = 'mass'
		splt_smpl_unl   = 'mass'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_1)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_1)	
	elif (int_typ_spl == 'mass') and n_int_spt == 2 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx   = '-mass'
		splt_smpl_sfx_f = '-mass_F'
		splt_smpl_unt   = 'mass'
		splt_smpl_unl   = 'mass'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_2)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_2)	
	elif (int_typ_spl == 'mass') and n_int_spt == 3 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx   = '-mass'
		splt_smpl_sfx_f = '-mass_F'
		splt_smpl_unt   = 'mass'
		splt_smpl_unl   = 'mass'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_3)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_3)	
	elif (int_typ_spl == 'mass') and n_int_spt == 4 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx   = '-mass'
		splt_smpl_sfx_f = '-mass_F'
		splt_smpl_unt   = 'mass'
		splt_smpl_unl   = 'mass'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_4)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_4)	
	elif (int_typ_spl == 'Age')  and n_int_spt == 0:#in specfile_glx_f:
		splt_smpl_sfx   = '-Age'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv)
	elif (int_typ_spl == 'Age')  and n_int_spt == 1:#in specfile_glx_f:
		splt_smpl_sfx_f = '-Age_F'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_1)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_1)
	elif (int_typ_spl == 'Age')  and n_int_spt == 2 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_unt   = 'Age'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_2)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_2)
	elif (int_typ_spl == 'Age')  and n_int_spt == 3 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_unl   = 'Age'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_3)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_3)
	elif (int_typ_spl == 'Age')  and n_int_spt == 4 and max_sep ==23:#in specfile_glx_f:
		slc_age_int_fg = Def_Sub_		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_4)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_4)
	elif (int_typ_spl =='SFR')  and n_int_spt == 0:#in specfile_glx_f:
		splt_smpl_sfx   = '-SFR' 
		splt_smpl_sfx_f = '-SFR_F'
		splt_smpl_unt   = 'SFR'
		splt_smpl_unl   = 'M$_{\odot}$yr$^{-1}$'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv)
	elif (int_typ_spl =='SFR')  and n_int_spt == 1:#in specfile_glx_f:
		splt_smpl_sfx   = '-SFR' 
		splt_smpl_sfx_f = '-SFR_F'
		splt_smpl_unt   = 'SFR'
		splt_smpl_unl   = 'M$_{\odot}$yr$^{-1}$'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_1)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_1)
	elif (int_typ_spl =='SFR')  and n_int_spt == 2 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx   = '-SFR' 
		splt_smpl_sfx_f = '-SFR_F'
		splt_smpl_unt   = 'SFR'
		splt_smpl_unl   = 'M$_{\odot}$yr$^{-1}$'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_2)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_2)
	elif (int_typ_spl =='SFR')  and n_int_spt == 3 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx   = '-SFR' 
		splt_smpl_sfx_f = '-SFR_F'
		splt_smpl_unt   = 'SFR'
		splt_smpl_unl   = 'M$_{\odot}$yr$^{-1}$'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_3)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_3)
	elif (int_typ_spl =='SFR')  and n_int_spt == 4 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx   = '-SFR' 
		splt_smpl_sfx_f = '-SFR_F'
		splt_smpl_unt   = 'SFR'
		splt_smpl_unl   = 'M$_{\odot}$yr$^{-1}$'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_4)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_4)
	elif (int_typ_spl =='sSFR') and n_int_spt == 0:# in specfile_glx_f:
		splt_smpl_sfx   = '-sSFR'
		splt_smpl_sfx_f = '-sSFR_F'
		splt_smpl_unt   = 'sSFR'
		splt_smpl_unl   = 'sSFR'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv)
	elif (int_typ_spl =='sSFR') and n_int_spt == 1:# in specfile_glx_f:
		splt_smpl_sfx   = '-sSFR'
		splt_smpl_sfx_f = '-sSFR_F'
		splt_smpl_unt   = 'sSFR'
		splt_smpl_unl   = 'sSFR'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_1)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_1)
	elif (int_typ_spl =='sSFR') and n_int_spt == 2 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx   = '-sSFR'
		splt_smpl_sfx_f = '-sSFR_F'
		splt_smpl_unt   = 'sSFR'
		splt_smpl_unl   = 'sSFR'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_2)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_2)
	elif (int_typ_spl =='sSFR') and n_int_spt == 3 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx   = '-sSFR'
		splt_smpl_sfx_f = '-sSFR_F'
		splt_smpl_unt   = 'sSFR'
		splt_smpl_unl   = 'sSFR'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_3)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_3)
	elif (int_typ_spl =='sSFR') and n_int_spt == 4 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx   = '-sSFR'
		splt_smpl_sfx_f = '-sSFR_F'
		splt_smpl_unt   = 'sSFR'
		splt_smpl_unl   = 'sSFR'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_4)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_4)
	elif (int_typ_spl =='Lnuv') and n_int_spt == 0:# in specfile_glx_f:
		splt_smpl_sfx   = '-Lnuv'
		splt_smpl_sfx_f = '-Lnuv_F'
		splt_smpl_unt   = 'Lnuv'
		splt_smpl_unl   = 'Lnuv'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv)
	elif (int_typ_spl =='Lnuv') and n_int_spt == 1:# in specfile_glx_f:
		splt_smpl_sfx   = '-Lnuv'
		splt_smpl_sfx_f = '-Lnuv_F'
		splt_smpl_unt   = 'Lnuv'
		splt_smpl_unl   = 'Lnuv'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_1)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_1)
	elif (int_typ_spl =='Lnuv') and n_int_spt == 2 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx   = '-Lnuv'
		splt_smpl_sfx_f = '-Lnuv_F'
		splt_smpl_unt   = 'Lnuv'
		splt_smpl_unl   = 'Lnuv'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_2)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_2)
	elif (int_typ_spl =='Lnuv') and n_int_spt == 3 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx   = '-Lnuv'
		splt_smpl_sfx_f = '-Lnuv_F'
		splt_smpl_unt   = 'Lnuv'
		splt_smpl_unl   = 'Lnuv'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_3)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_3)
	elif (int_typ_spl =='Lnuv') and n_int_spt == 4 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx   = '-Lnuv'
		splt_smpl_sfx_f = '-Lnuv_F'
		splt_smpl_unt   = 'Lnuv'
		splt_smpl_unl   = 'Lnuv'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_4)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_4)
	elif (int_typ_spl =='magi') and n_int_spt == 0:# in specfile_glx_f:
		splt_smpl_sfx   = '_magi'
		splt_smpl_sfx_f = '-magi_F'
		splt_smpl_unt   = 'arcsec'
		splt_smpl_unl   = '$^{\\prime\\prime}$'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv)
	elif (int_typ_spl =='magi') and n_int_spt == 1:# in specfile_glx_f:
		splt_smpl_sfx   = '_magi'
		splt_smpl_sfx_f = '-magi_F'
		splt_smpl_unt   = 'arcsec'
		splt_smpl_unl   = '$^{\\prime\\prime}$'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_1)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_1)
	elif (int_typ_spl =='magi') and n_int_spt == 2 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx   = '_magi'
		splt_smpl_sfx_f = '-magi_F'
		splt_smpl_unt   = 'arcsec'
		splt_smpl_unl   = '$^{\\prime\\prime}$'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_2)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_2)
	elif (int_typ_spl =='magi') and n_int_spt == 3 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx   = '_magi'
		splt_smpl_sfx_f = '-magi_F'
		splt_smpl_unt   = 'arcsec'
		splt_smpl_unl   = '$^{\\prime\\prime}$'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_3)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_3)
	elif (int_typ_spl =='magi') and n_int_spt == 4 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx   = '_magi'
		splt_smpl_sfx_f = '-magi_F'
		splt_smpl_unt   = 'arcsec'
		splt_smpl_unl   = '$^{\\prime\\prime}$'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_4)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_4)
	elif (int_typ_spl =='sep_as') and n_int_spt == 0 and max_sep == 23:
		splt_smpl_sfx   = '_as'
		splt_smpl_sfx_f = '_as_F'
		splt_smpl_unt   = 'arcsec'
		splt_smpl_unl   = '$^{\\prime\\prime}$'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep[1])
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep[1])
	elif (int_typ_spl =='sep_as') and n_int_spt == 1 and max_sep == 23:
		splt_smpl_sfx   = '_as'
		splt_smpl_sfx_f = '_as_F'
		splt_smpl_unt   = 'arcsec'
		splt_smpl_unl   = '$^{\\prime\\prime}$'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_1[1])
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_1[1])
	elif (int_typ_spl =='sep_as') and n_int_spt == 2 and max_sep == 23:
		splt_smpl_sfx   = '_as'
		splt_smpl_sfx_f = '_as_F'
		splt_smpl_unt   = 'arcsec'
		splt_smpl_unl   = '$^{\\prime\\prime}$'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_2[1])
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_2[1])
	elif (int_typ_spl =='sep_as') and n_int_spt == 3 and max_sep == 23:
		splt_smpl_sfx   = '_as'
		splt_smpl_sfx_f = '_as_F'
		splt_smpl_unt   = 'arcsec'
		splt_smpl_unl   = '$^{\\prime\\prime}$'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_3[1])
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_3[1])
	elif (int_typ_spl =='sep_as') and n_int_spt == 4 and max_sep == 23:
		splt_smpl_sfx   = '_as'
		splt_smpl_sfx_f = '_as_F'
		splt_smpl_unt   = 'arcsec'
		splt_smpl_unl   = '$^{\\prime\\prime}$'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_4[1])
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_4[1])
	elif (int_typ_spl =='sep_as') and n_int_spt == 5 and max_sep == 23:
		splt_smpl_sfx   = '_as'
		splt_smpl_sfx_f = '_as_F'
		splt_smpl_unt   = 'arcsec'
		splt_smpl_unl   = '$^{\\prime\\prime}$'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_5[1])
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_5[1])
	elif (int_typ_spl =='sep_as') and n_int_spt == 0 and max_sep == 25:
		splt_smpl_sfx   = '_as'
		splt_smpl_sfx_f = '_as_F'
		splt_smpl_unt   = 'arcsec'
		splt_smpl_unl   = '$^{\\prime\\prime}$'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep[1])
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep[1])
	elif (int_typ_spl =='sep_as') and n_int_spt == 1 and max_sep == 25:
		splt_smpl_sfx   = '_as'
		splt_smpl_sfx_f = '_as_F'
		splt_smpl_unt   = 'arcsec'
		splt_smpl_unl   = '$^{\\prime\\prime}$'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_1[1])
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_1[1])
	elif (int_typ_spl =='sep_as') and n_int_spt == 2 and max_sep == 25:
		splt_smpl_sfx   = '_as'
		splt_smpl_sfx_f = '_as_F'
		splt_smpl_unt   = 'arcsec'
		splt_smpl_unl   = '$^{\\prime\\prime}$'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_2[1])
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_2[1])
	elif (int_typ_spl =='sep_as') and n_int_spt == 3 and max_sep == 25:
		splt_smpl_sfx   = '_as'
		splt_smpl_sfx_f = '_as_F'
		splt_smpl_unt   = 'arcsec'
		splt_smpl_unl   = '$^{\\prime\\prime}$'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_3[1])
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_3[1])
	elif (int_typ_spl =='sep_as') and n_int_spt == 4 and max_sep == 25:
		splt_smpl_sfx   = '_as'
		splt_smpl_sfx_f = '_as_F'
		splt_smpl_unt   = 'arcsec'
		splt_smpl_unl   = '$^{\\prime\\prime}$'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_4[1])
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_4[1])
	elif (int_typ_spl =='sep_as') and n_int_spt == 5 and max_sep == 25:
		splt_smpl_sfx   = '_as'
		splt_smpl_sfx_f = '_as_F'
		splt_smpl_unt   = 'arcsec'
		splt_smpl_unl   = '$^{\\prime\\prime}$'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_5[1])
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_5[1])
	elif int_typ_spl == 'phi' and n_int_spt == 0 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx   = '-phi'
		splt_smpl_sfx_f = '-PHI'
		splt_smpl_unt   = 'deg'
		splt_smpl_unl   = '$^{\circ}$'
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv)
		slc_int_fg      = slc_sep_int_fg[1]
		slc_int_bg      = slc_sep_int_bg[1]
	elif int_typ_spl == 'phi' and n_int_spt == 2 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx   = '-phi'
		splt_smpl_sfx_f = '-PHI'
		splt_smpl_unt   = 'deg'
		splt_smpl_unl   = '$^{\circ}$'
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv_23_2)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv_23_2)			
		slc_int_fg      = slc_sep_int_fg[1]
		slc_int_bg      = slc_sep_int_bg[1]
	elif int_typ_spl == 'phi' and n_int_spt == 3 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx   = '-phi'
		splt_smpl_sfx_f = '-PHI'
		splt_smpl_unt   = 'deg'
		splt_smpl_unl   = '$^{\circ}$'
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv_23_3)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv_23_3)			
		slc_int_fg      = slc_sep_int_fg[1]
		slc_int_bg      = slc_sep_int_bg[1]
	elif int_typ_spl == 'icl_fg' and n_int_spt == 0 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx   = '-icl'
		splt_smpl_sfx_f = '-q_F'
		splt_smpl_unt   = 'deg'
		splt_smpl_unl   = '$^{\circ}$'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv)
		slc_int_fg      = slc_sep_int_fg[1]
		slc_int_bg      = slc_sep_int_bg[1]
	elif int_typ_spl == 'icl_fg' and n_int_spt == 2 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx   = '-icl'
		splt_smpl_sfx_f = '-q_F'
		splt_smpl_unt   = 'deg'
		splt_smpl_unl   = '$^{\circ}$'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv_23_2)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv_23_2)			
		slc_int_fg      = slc_sep_int_fg[1]
		slc_int_bg      = slc_sep_int_bg[1]
	elif int_typ_spl == 'icl_fg' and n_int_spt == 3 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx   = '-icl'
		splt_smpl_sfx_f = '-q_F'
		splt_smpl_unt   = 'deg'
		splt_smpl_unl   = '$^{\circ}$'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv_23_3)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv_23_3)			
		slc_int_fg      = slc_sep_int_fg[1]
		slc_int_bg      = slc_sep_int_bg[1]
	elif int_typ_spl == 'icl_fg'  and n_int_spt == 4 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx   = '-icl'
		splt_smpl_sfx_f = '-q_F'
		splt_smpl_unt   = 'deg'
		splt_smpl_unl   = '$^{\circ}$'		
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv_23_4)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv_23_4)			
		slc_int_fg      = slc_sep_int_fg[1]
		slc_int_bg      = slc_sep_int_bg[1]
	elif int_typ_spl == 'n_sersic_fg' and n_int_spt == 0 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx   = '-n_srs'
		splt_smpl_sfx_f = '-n_F'
		splt_smpl_unt   = 'n'
		splt_smpl_unl   = 'n'
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,n_srs_itv)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,n_srs_itv)
		slc_int_fg      = slc_sep_int_fg[1]
		slc_int_bg      = slc_sep_int_bg[1]
	elif int_typ_spl == 'n_sersic_fg'  and n_int_spt == 2 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx   = '-n_srs'
		splt_smpl_sfx_f = '-n_F'
		splt_smpl_unt   = 'n'
		splt_smpl_unl   = 'n'
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,n_srs_itv_23_2)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,n_srs_itv_23_2)			
		slc_int_fg      = slc_sep_int_fg[1]
		slc_int_bg      = slc_sep_int_bg[1]
	elif int_typ_spl == 'r_eff_fg' and n_int_spt == 0 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx   = '-r_eff'
		splt_smpl_sfx_f = '-re_F'
		splt_smpl_unt   = 'arcsec'
		splt_smpl_unl   = '$^{\\prime\\prime}$'
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv)
		slc_int_fg      = slc_sep_int_fg[1]
		slc_int_bg      = slc_sep_int_bg[1]
	elif int_typ_spl == 'r_eff_fg'  and n_int_spt == 2 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx   = '-r_eff'
		splt_smpl_sfx_f = '-re_F'
		splt_smpl_unt   = 'arcsec'
		splt_smpl_unl   = '$^{\\prime\\prime}$'
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv_23_2)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv_23_2)			
		slc_int_fg      = slc_sep_int_fg[1]
		slc_int_bg      = slc_sep_int_bg[1]	
	elif int_typ_spl == 'r_eff_fg'  and n_int_spt == 3 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx   = '-r_eff'
		splt_smpl_sfx_f = '-re_F'
		splt_smpl_unt   = 'arcsec'
		splt_smpl_unl   = '$^{\\prime\\prime}$'
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv_23_3)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv_23_3)			
		slc_int_fg      = slc_sep_int_fg[1]
		slc_int_bg      = slc_sep_int_bg[1]
	else:
		print
		print colored('Error sep - variable','yellow')
		print colored(prefix_F,'yellow')
		print 
	slc_int_fg     = slc_sep_int_fg[1]
	slc_int_bg     = slc_sep_int_bg[1]
	print
	print colored('Plotting spectra split by ' + int_typ_spl,'yellow')
	print colored('Split by intervals:','yellow')
	#print colored("\n".join([str(j)+': '+str(sep_intv) for j,sep_intv in enumerate(slc_sep_int_fg[1])]),'yellow')
	#print colored("\n".join([str(j)+': '+str(sep_intv) for j,sep_intv in enumerate(slc_sep_int_bg[1])]),'yellow')
	#print colored("\n".join([sep_intv for sep_intv in slc_sep_int_bg[1]]),'yellow')
	#print

	####
	NEW_ITV =[]	
	print colored('Intervals to be plotted: ','yellow')
	print colored('Defined Indices : '+str(range(lower_shift,len(slc_int_bg)-upper_shift)),'yellow')
	#print
	#print lower_shift,upper_shift
	#print len(slc_sep_int_fg[1])
	#print
	for interval_range in range(lower_shift,len(slc_sep_int_fg[1])-upper_shift):
		print colored('Interval: ' + str(interval_range) + ': ' + str(slc_int_fg[interval_range]),'yellow')
		#print
		#print interval_range
		#print slc_sep_int_fg[1]
		#print slc_sep_int_fg[1][interval_range]
		NEW_ITV.append(slc_sep_int_fg[1][interval_range])

	slc_int_fg = NEW_ITV
	slc_int_bg = NEW_ITV
	print colored('Foreground Indices : ','yellow')
	print colored("\n".join([str(j)+': '+str(sep_intv) for j,sep_intv in enumerate(slc_sep_int_fg[1])]),'yellow')
	print
	print colored('Background Indices : ','yellow')
	print colored("\n".join([str(j)+': '+str(sep_intv) for j,sep_intv in enumerate(slc_sep_int_bg[1])]),'yellow')
	print
	print colored('Used Indices : '+str(range(lower_shift,len(slc_int_bg)-upper_shift)),'yellow')
	print colored("\n".join([str(j)+': '+str(sep_intv) for j,sep_intv in enumerate(NEW_ITV)]),'yellow')
	print

	if int_typ_spl == 'sep_as':
		prefix_F  = 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-'#0-' + str(max_sep) + '-ss' + splt_smpl_sfx_f +'-'#+str(slc_int_fg[index_int]) #+ '-stk-'+str(stk_function)+'.fits'
		prefix_B  = 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-'#0-' + str(max_sep) + '-ss' + splt_smpl_sfx_f +'-'#+str(slc_int_fg[index_int]) #+ '-stk-'+str(stk_function)+'.fits'
	else:
		prefix_F  = 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-0-' + str(max_sep) + '-ss' + splt_smpl_sfx_f +'-'#+str(slc_int_fg[index_int]) #+ '-stk-'+str(stk_function)+'.fits'
		prefix_B  = 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-0-' + str(max_sep) + '-ss' + splt_smpl_sfx_f +'-'#+str(slc_int_fg[index_int]) #+ '-stk-'+str(stk_function)+'.fits'

	####################DEFINE-INTERVALS-FOR-PLOTTING####################
	for interval_range in range(len(slc_int_bg)):
		F = [
		ind_stk_res + prefix_F + str(slc_int_fg[interval_range]) + '.txt',               #0 
		ind_stk_res + prefix_F + str(slc_int_fg[interval_range]) + '.txt',               #1 
		res_stk_res + prefix_F + str(slc_int_fg[interval_range]) + '-stk-med.fits',      #2 
		res_stk_res + prefix_F + str(slc_int_fg[interval_range]) + '-stk-avg.fits',      #3 
		res_stk_res + prefix_F + str(slc_int_fg[interval_range]) + '-stk-sum.fits',      #4 
		res_stk_res + prefix_F + str(slc_int_fg[interval_range]) + '-stk-std.fits',      #5 
		res_stk_res + prefix_F + str(slc_int_fg[interval_range]) + '-stk-hst.fits',      #6 
		res_stk_res + prefix_F + str(slc_int_fg[interval_range]) + '-stk-1sl.fits',      #7 
		res_stk_res + prefix_F + str(slc_int_fg[interval_range]) + '-stk-1sh.fits',      #8 
		res_stk_res + prefix_F + str(slc_int_fg[interval_range]) + '-stk-2sl.fits',      #9 
		res_stk_res + prefix_F + str(slc_int_fg[interval_range]) + '-stk-2sh.fits',      #10
		res_stk_res + prefix_F + str(slc_int_fg[interval_range]) + '-stk-3sl.fits',      #11
		res_stk_res + prefix_F + str(slc_int_fg[interval_range]) + '-stk-3sh.fits',      #12
		res_stk_res + prefix_F + str(slc_int_fg[interval_range]) + '-stk-p25.fits',      #13
		res_stk_res + prefix_F + str(slc_int_fg[interval_range]) + '-stk-p75.fits',      #14
		res_stk_res + prefix_F + str(slc_int_fg[interval_range]) + '-stk-rms.fits',      #15
		res_stk_res + prefix_F + str(slc_int_fg[interval_range]) + '-stk-avw.fits',      #16
		res_stk_res + prefix_F + str(slc_int_fg[interval_range]) + '-stk-suw.fits',      #17
		res_stk_res + prefix_F + str(slc_int_fg[interval_range]) + '-stk-hsw.fits',      #18
		res_stk_res + prefix_F + str(slc_int_fg[interval_range]) + '-stk-wsu.fits',      #19
		res_stk_res + prefix_F + str(slc_int_fg[interval_range]) + '-stk-med-c.fits',    #20
		res_stk_res + prefix_F + str(slc_int_fg[interval_range]) + '-stk-avg-c.fits',    #21
		res_stk_res + prefix_F + str(slc_int_fg[interval_range]) + '-stk-sum-c.fits',    #22
		res_stk_res + prefix_F + str(slc_int_fg[interval_range]) + '-stk-std-c.fits',    #23
		res_stk_res + prefix_F + str(slc_int_fg[interval_range]) + '-stk-rms-c.fits',    #24
		res_stk_res + prefix_F + str(slc_int_fg[interval_range]) + '-stk-avw-c.fits',    #25
		res_stk_res + prefix_F + str(slc_int_fg[interval_range]) + '-stk-suw-c.fits',    #26
		res_stk_res + prefix_F + str(slc_int_fg[interval_range]) + '-stk-med-smt.fits',  #27
		res_stk_res + prefix_F + str(slc_int_fg[interval_range]) + '-stk-avg-smt.fits',  #28
		res_stk_res + prefix_F + str(slc_int_fg[interval_range]) + '-stk-sum-smt.fits',  #29
		res_stk_res + prefix_F + str(slc_int_fg[interval_range]) + '-stk-avw-smt.fits',  #30
		res_stk_res + prefix_F + str(slc_int_fg[interval_range]) + '-stk-suw-smt.fits',  #31
		res_stk_res + prefix_F + str(slc_int_fg[interval_range]) + '-stk-med-c-smt.fits',#32
		res_stk_res + prefix_F + str(slc_int_fg[interval_range]) + '-stk-avg-c-smt.fits',#33
		res_stk_res + prefix_F + str(slc_int_fg[interval_range]) + '-stk-sum-c-smt.fits',#34
		res_stk_res + prefix_F + str(slc_int_fg[interval_range]) + '-stk-avw-c-smt.fits',#35
		res_stk_res + prefix_F + str(slc_int_fg[interval_range]) + '-stk-suw-c-smt.fits',#36
		]
		B = [
		ind_stk_res + prefix_B + str(slc_int_bg[interval_range]) + '.txt',               #0 
		ind_stk_res + prefix_B + str(slc_int_bg[interval_range]) + '.txt',               #1 
		res_stk_res + prefix_B + str(slc_int_bg[interval_range]) + '-stk-med.fits',      #2 
		res_stk_res + prefix_B + str(slc_int_bg[interval_range]) + '-stk-avg.fits',      #3 
		res_stk_res + prefix_B + str(slc_int_bg[interval_range]) + '-stk-sum.fits',      #4 
		res_stk_res + prefix_B + str(slc_int_bg[interval_range]) + '-stk-std.fits',      #5 
		res_stk_res + prefix_B + str(slc_int_bg[interval_range]) + '-stk-hst.fits',      #6 
		res_stk_res + prefix_B + str(slc_int_bg[interval_range]) + '-stk-1sl.fits',      #7 
		res_stk_res + prefix_B + str(slc_int_bg[interval_range]) + '-stk-1sh.fits',      #8 
		res_stk_res + prefix_B + str(slc_int_bg[interval_range]) + '-stk-2sl.fits',      #9 
		res_stk_res + prefix_B + str(slc_int_bg[interval_range]) + '-stk-2sh.fits',      #10
		res_stk_res + prefix_B + str(slc_int_bg[interval_range]) + '-stk-3sl.fits',      #11
		res_stk_res + prefix_B + str(slc_int_bg[interval_range]) + '-stk-3sh.fits',      #12
		res_stk_res + prefix_B + str(slc_int_bg[interval_range]) + '-stk-p25.fits',      #13
		res_stk_res + prefix_B + str(slc_int_bg[interval_range]) + '-stk-p75.fits',      #14
		res_stk_res + prefix_B + str(slc_int_bg[interval_range]) + '-stk-rms.fits',      #15
		res_stk_res + prefix_B + str(slc_int_bg[interval_range]) + '-stk-avw.fits',      #16
		res_stk_res + prefix_B + str(slc_int_bg[interval_range]) + '-stk-suw.fits',      #17
		res_stk_res + prefix_B + str(slc_int_bg[interval_range]) + '-stk-hsw.fits',      #18
		res_stk_res + prefix_B + str(slc_int_bg[interval_range]) + '-stk-wsu.fits',      #19
		res_stk_res + prefix_B + str(slc_int_bg[interval_range]) + '-stk-med-c.fits',    #20
		res_stk_res + prefix_B + str(slc_int_bg[interval_range]) + '-stk-avg-c.fits',    #21
		res_stk_res + prefix_B + str(slc_int_bg[interval_range]) + '-stk-sum-c.fits',    #22
		res_stk_res + prefix_B + str(slc_int_bg[interval_range]) + '-stk-std-c.fits',    #23
		res_stk_res + prefix_B + str(slc_int_bg[interval_range]) + '-stk-rms-c.fits',    #24
		res_stk_res + prefix_B + str(slc_int_bg[interval_range]) + '-stk-avw-c.fits',    #25
		res_stk_res + prefix_B + str(slc_int_bg[interval_range]) + '-stk-suw-c.fits',    #26
		res_stk_res + prefix_B + str(slc_int_bg[interval_range]) + '-stk-med-smt.fits',  #27
		res_stk_res + prefix_B + str(slc_int_bg[interval_range]) + '-stk-avg-smt.fits',  #28
		res_stk_res + prefix_B + str(slc_int_bg[interval_range]) + '-stk-sum-smt.fits',  #29
		res_stk_res + prefix_B + str(slc_int_bg[interval_range]) + '-stk-avw-smt.fits',  #30
		res_stk_res + prefix_B + str(slc_int_bg[interval_range]) + '-stk-suw-smt.fits',  #31
		res_stk_res + prefix_B + str(slc_int_bg[interval_range]) + '-stk-med-c-smt.fits',#32
		res_stk_res + prefix_B + str(slc_int_bg[interval_range]) + '-stk-avg-c-smt.fits',#33
		res_stk_res + prefix_B + str(slc_int_bg[interval_range]) + '-stk-sum-c-smt.fits',#34
		res_stk_res + prefix_B + str(slc_int_bg[interval_range]) + '-stk-avw-c-smt.fits',#35
		res_stk_res + prefix_B + str(slc_int_bg[interval_range]) + '-stk-suw-c-smt.fits',#36
		]

		B_tbl = bkg_dir_res + prefix_B + str(slc_int_bg[interval_range])+'.csv'
		F_tbl = frg_dir_res + prefix_F + str(slc_int_fg[interval_range])+'.csv'

		print
		print B[0]
		print B[3]
		print

		if only_stt_tbl == True:
			if os.path.exists(F[0])==True and os.path.exists(B[0])==True:
				stats_table(F_tbl,tbl_format_opt)
				stats_table(B_tbl,tbl_format_opt)
			elif os.path.exists(B[0])==False:#not os.path.exists(B[interval_range]) == False:
				print
				print colored('No such prefix exists: ' + str(prefix_B) ,'yellow')
				print colored('Neither file:          ' + str(B[0]),'yellow')
				print
				pass

				print
				print colored('No such prefix exists: ' + str(prefix_F) ,'yellow')
				print colored('Neither file:          ' + str(F[0]),'yellow')
				print
				pass
			elif os.path.exists(F[0])==False:#not os.path.exists(B[interval_range]) == False:
				print
				print colored('No such prefix exists: ' + str(prefix_B) ,'yellow')
				print colored('Neither file:          ' + str(B[0]),'yellow')
				print
				pass

				print
				print colored('No such prefix exists: ' + str(prefix_F) ,'yellow')
				print colored('Neither file:          ' + str(F[0]),'yellow')
				print
				pass

		elif only_stt_tbl == False:

			if os.path.exists(F[0])==True and os.path.exists(B[0])==True:
				Plot_Idp_Spc(F,verbose=verbose,autoaxis_Idp=autoaxis_Idp,min_x_lim_Idp=min_x_lim_Idp,max_x_lim_Idp=max_x_lim_Idp,min_y_lim_Idp=min_y_lim_Idp,max_y_lim_Idp=max_y_lim_Idp,cont_plot=True ,smth_plot=True ,SNR_LINES=SNR_LINES,show_legends=show_legends,plt_stk_med = plt_stk_med, plt_stk_avg = plt_stk_avg, plt_stk_avw = plt_stk_avw,aaxs_Idp_ml_y = aaxs_Idp_ml_y,splt_smpl_sfx=splt_smpl_sfx,splt_smpl_sfx_f=splt_smpl_sfx_f,splt_smpl_unt=splt_smpl_unt,splt_smpl_unl=splt_smpl_unl)
				Plot_Idp_Spc(F,verbose=verbose,autoaxis_Idp=autoaxis_Idp,min_x_lim_Idp=min_x_lim_Idp,max_x_lim_Idp=max_x_lim_Idp,min_y_lim_Idp=min_y_lim_Idp,max_y_lim_Idp=max_y_lim_Idp,cont_plot=True ,smth_plot=False,SNR_LINES=SNR_LINES,show_legends=show_legends,plt_stk_med = plt_stk_med, plt_stk_avg = plt_stk_avg, plt_stk_avw = plt_stk_avw,aaxs_Idp_ml_y = aaxs_Idp_ml_y,splt_smpl_sfx=splt_smpl_sfx,splt_smpl_sfx_f=splt_smpl_sfx_f,splt_smpl_unt=splt_smpl_unt,splt_smpl_unl=splt_smpl_unl)
				Plot_Idp_Spc(F,verbose=verbose,autoaxis_Idp=autoaxis_Idp,min_x_lim_Idp=min_x_lim_Idp,max_x_lim_Idp=max_x_lim_Idp,min_y_lim_Idp=min_y_lim_Idp,max_y_lim_Idp=max_y_lim_Idp,cont_plot=False,smth_plot=True ,SNR_LINES=SNR_LINES,show_legends=show_legends,plt_stk_med = plt_stk_med, plt_stk_avg = plt_stk_avg, plt_stk_avw = plt_stk_avw,aaxs_Idp_ml_y = aaxs_Idp_ml_y,splt_smpl_sfx=splt_smpl_sfx,splt_smpl_sfx_f=splt_smpl_sfx_f,splt_smpl_unt=splt_smpl_unt,splt_smpl_unl=splt_smpl_unl)
				Plot_Idp_Spc(F,verbose=verbose,autoaxis_Idp=autoaxis_Idp,min_x_lim_Idp=min_x_lim_Idp,max_x_lim_Idp=max_x_lim_Idp,min_y_lim_Idp=min_y_lim_Idp,max_y_lim_Idp=max_y_lim_Idp,cont_plot=False,smth_plot=False,SNR_LINES=SNR_LINES,show_legends=show_legends,plt_stk_med = plt_stk_med, plt_stk_avg = plt_stk_avg, plt_stk_avw = plt_stk_avw,aaxs_Idp_ml_y = aaxs_Idp_ml_y,splt_smpl_sfx=splt_smpl_sfx,splt_smpl_sfx_f=splt_smpl_sfx_f,splt_smpl_unt=splt_smpl_unt,splt_smpl_unl=splt_smpl_unl)
				Plot_Idp_Spc(B,verbose=verbose,autoaxis_Idp=autoaxis_Idp,min_x_lim_Idp=min_x_lim_Idp,max_x_lim_Idp=max_x_lim_Idp,min_y_lim_Idp=min_y_lim_Idp,max_y_lim_Idp=max_y_lim_Idp,cont_plot=True ,smth_plot=True ,SNR_LINES=SNR_LINES,show_legends=show_legends,plt_stk_med = plt_stk_med, plt_stk_avg = plt_stk_avg, plt_stk_avw = plt_stk_avw,aaxs_Idp_ml_y = aaxs_Idp_ml_y,splt_smpl_sfx=splt_smpl_sfx,splt_smpl_sfx_f=splt_smpl_sfx_f,splt_smpl_unt=splt_smpl_unt,splt_smpl_unl=splt_smpl_unl)
				Plot_Idp_Spc(B,verbose=verbose,autoaxis_Idp=autoaxis_Idp,min_x_lim_Idp=min_x_lim_Idp,max_x_lim_Idp=max_x_lim_Idp,min_y_lim_Idp=min_y_lim_Idp,max_y_lim_Idp=max_y_lim_Idp,cont_plot=True ,smth_plot=False,SNR_LINES=SNR_LINES,show_legends=show_legends,plt_stk_med = plt_stk_med, plt_stk_avg = plt_stk_avg, plt_stk_avw = plt_stk_avw,aaxs_Idp_ml_y = aaxs_Idp_ml_y,splt_smpl_sfx=splt_smpl_sfx,splt_smpl_sfx_f=splt_smpl_sfx_f,splt_smpl_unt=splt_smpl_unt,splt_smpl_unl=splt_smpl_unl)
				Plot_Idp_Spc(B,verbose=verbose,autoaxis_Idp=autoaxis_Idp,min_x_lim_Idp=min_x_lim_Idp,max_x_lim_Idp=max_x_lim_Idp,min_y_lim_Idp=min_y_lim_Idp,max_y_lim_Idp=max_y_lim_Idp,cont_plot=False,smth_plot=True ,SNR_LINES=SNR_LINES,show_legends=show_legends,plt_stk_med = plt_stk_med, plt_stk_avg = plt_stk_avg, plt_stk_avw = plt_stk_avw,aaxs_Idp_ml_y = aaxs_Idp_ml_y,splt_smpl_sfx=splt_smpl_sfx,splt_smpl_sfx_f=splt_smpl_sfx_f,splt_smpl_unt=splt_smpl_unt,splt_smpl_unl=splt_smpl_unl)
				Plot_Idp_Spc(B,verbose=verbose,autoaxis_Idp=autoaxis_Idp,min_x_lim_Idp=min_x_lim_Idp,max_x_lim_Idp=max_x_lim_Idp,min_y_lim_Idp=min_y_lim_Idp,max_y_lim_Idp=max_y_lim_Idp,cont_plot=False,smth_plot=False,SNR_LINES=SNR_LINES,show_legends=show_legends,plt_stk_med = plt_stk_med, plt_stk_avg = plt_stk_avg, plt_stk_avw = plt_stk_avw,aaxs_Idp_ml_y = aaxs_Idp_ml_y,splt_smpl_sfx=splt_smpl_sfx,splt_smpl_sfx_f=splt_smpl_sfx_f,splt_smpl_unt=splt_smpl_unt,splt_smpl_unl=splt_smpl_unl)
				if plt_cnt_stk_spc == True:
					Plot_Ctb_Spc(F,verbose=verbose,autoaxis=autoaxis_Ctb,min_x_lim_Idp=min_x_lim_Idp,max_x_lim_Idp=max_x_lim_Idp,min_y_lim_Idp=min_y_lim_Idp,max_y_lim_Idp=max_y_lim_Idp,cont_plot=True ,smth_plot=True ,wgt_typ=wgt_typ)
					Plot_Ctb_Spc(F,verbose=verbose,autoaxis=autoaxis_Ctb,min_x_lim_Idp=min_x_lim_Idp,max_x_lim_Idp=max_x_lim_Idp,min_y_lim_Idp=min_y_lim_Idp,max_y_lim_Idp=max_y_lim_Idp,cont_plot=True ,smth_plot=False,wgt_typ=wgt_typ)
					Plot_Ctb_Spc(F,verbose=verbose,autoaxis=autoaxis_Ctb,min_x_lim_Idp=min_x_lim_Idp,max_x_lim_Idp=max_x_lim_Idp,min_y_lim_Idp=min_y_lim_Idp,max_y_lim_Idp=max_y_lim_Idp,cont_plot=False,smth_plot=True ,wgt_typ=wgt_typ)
					Plot_Ctb_Spc(F,verbose=verbose,autoaxis=autoaxis_Ctb,min_x_lim_Idp=min_x_lim_Idp,max_x_lim_Idp=max_x_lim_Idp,min_y_lim_Idp=min_y_lim_Idp,max_y_lim_Idp=max_y_lim_Idp,cont_plot=False,smth_plot=False,wgt_typ=wgt_typ)
					Plot_Ctb_Spc(B,verbose=verbose,autoaxis=autoaxis_Ctb,min_x_lim_Idp=min_x_lim_Idp,max_x_lim_Idp=max_x_lim_Idp,min_y_lim_Idp=min_y_lim_Idp,max_y_lim_Idp=max_y_lim_Idp,cont_plot=True ,smth_plot=True ,wgt_typ=wgt_typ)
					Plot_Ctb_Spc(B,verbose=verbose,autoaxis=autoaxis_Ctb,min_x_lim_Idp=min_x_lim_Idp,max_x_lim_Idp=max_x_lim_Idp,min_y_lim_Idp=min_y_lim_Idp,max_y_lim_Idp=max_y_lim_Idp,cont_plot=True ,smth_plot=False,wgt_typ=wgt_typ)
					Plot_Ctb_Spc(B,verbose=verbose,autoaxis=autoaxis_Ctb,min_x_lim_Idp=min_x_lim_Idp,max_x_lim_Idp=max_x_lim_Idp,min_y_lim_Idp=min_y_lim_Idp,max_y_lim_Idp=max_y_lim_Idp,cont_plot=False,smth_plot=True ,wgt_typ=wgt_typ)
					Plot_Ctb_Spc(B,verbose=verbose,autoaxis=autoaxis_Ctb,min_x_lim_Idp=min_x_lim_Idp,max_x_lim_Idp=max_x_lim_Idp,min_y_lim_Idp=min_y_lim_Idp,max_y_lim_Idp=max_y_lim_Idp,cont_plot=False,smth_plot=False,wgt_typ=wgt_typ)
				else:
					pass
				stats_table(F_tbl,tbl_format_opt)
				stats_table(B_tbl,tbl_format_opt)

				print
				files = np.loadtxt(str(B[0]),dtype=str)
				widgets = ['Generating individual plots for  '+ str(len(files)) + ' galaxies, belonging to category:  ' + str(interval_range+1) + '   ', 
				Percentage(), ' ', Bar(marker='*',left='[',right=']'),
				' ', ETA(), ' ', FileTransferSpeed()] #see docs for other options
				pbar2    = ProgressBar(widgets=widgets, maxval=len(files))
				pbar2.start()	
				for galaxy in range(len(files)):
					spectrum1 = files[galaxy]
					spectrum2 = (str(files[galaxy]).split('-int')[0])+'.fits'
					if plt_ind_spec == True:
						print
						Plot_Step_Spc(spectrum1      ,
										dest_dir     = slc_sep_int_bg[0][interval_range],
										autoaxis     = True                             ,
										verbose      = verbose,
										wgt_typ      = wgt_typ,
										min_x_lim_Idp= min_x_lim_Idp,max_x_lim_Idp=max_x_lim_Idp,
										min_y_lim_Idp= min_y_lim_Idp,max_y_lim_Idp=max_y_lim_Idp)
						Plot_1Spc(spectrum1          ,
										dest_dir     = slc_sep_int_bg[0][interval_range],
										autoaxis     = False                            ,
										verbose      = verbose,
										wgt_typ      = wgt_typ,
										min_x_lim_Idp= min_x_lim_Idp,max_x_lim_Idp=max_x_lim_Idp,
										min_y_lim_Idp= min_y_lim_Idp,max_y_lim_Idp=max_y_lim_Idp)
						Plot_2Spc(spectrum2,spectrum1,
										dest_dir     = slc_sep_int_bg[0][interval_range],
										autoaxis     = False                            ,
										verbose      = verbose,
										min_x_lim_Idp= min_x_lim_Idp,max_x_lim_Idp=max_x_lim_Idp,
										min_y_lim_Idp= min_y_lim_Idp,max_y_lim_Idp=max_y_lim_Idp)
						print
					elif plt_ind_spec == False:
						pass
					pbar2.update(galaxy)
				pbar2.finish()
			elif os.path.exists(B[0])==False:#not os.path.exists(B[interval_range]) == False:
				print
				print colored('No such prefix exists: ' + str(prefix_B) ,'yellow')
				print colored('Neither file:          ' + str(B[0]),'yellow')
				print
				pass
			elif os.path.exists(F[0])==False:#not os.path.exists(B[interval_range]) == False:
				print
				print colored('No such prefix exists: ' + str(prefix_F) ,'yellow')
				print colored('Neither file:          ' + str(F[0]),'yellow')
				print
				pass

def Plot_All_Spec_All_Int_Mlt(int_typ_spl_1,int_typ_spl_2,n_int_spt_1,n_int_spt_2,*args, **kwargs):
	###########
	autoaxis_SSL  = kwargs.get('autoaxis_SSL'  , True)
	min_y_lim_SSL = kwargs.get('min_y_lim_SSL' , -2.0)
	max_y_lim_SSL = kwargs.get('max_y_lim_SSL' , 1.0)
	aaxs_SSL_ml_y = kwargs.get('aaxs_SSL_ml_y' ,False)
	fit_lne       = kwargs.get('fit_lne',False)
	plt_ind_fit   = kwargs.get('plt_ind_fit',False)
	lbl_col_idv   = kwargs.get('lbl_col_idv',True)
	nmb_cols      = kwargs.get('nmb_cols',2)
	###########

	z_glx_Ps      = kwargs.get('z_glx_Ps'    ,0)
	dest_dir      = kwargs.get('dest_dir'    , None)
	verbose       = kwargs.get('verbose'     , False)
	epssave       = kwargs.get('epssave'     , False)
	showplot      = kwargs.get('showplot'    , False) 

	autoaxis_Idp  = kwargs.get('autoaxis_Idp', False)
	#min_y_lim_Idp = kwargs.get('min_y_lim'   , 0.5)
	#max_y_lim_Idp = kwargs.get('max_y_lim'   , 1.5)

	lmb_min       = kwargs.get('lmb_min',1200)
	lmb_max       = kwargs.get('lmb_max',1700)

	lmb_min_lim   = lmb_min
	lmb_max_lim   = lmb_max

	#upper_shift   = kwargs.get('upper_shift',0)
	#lower_shift   = kwargs.get('lower_shift',0)
	stk_function  = kwargs.get('stk_function','med')

	fit_fnct      = kwargs.get('fit_fnct','gauss')
	fit_type      = kwargs.get('fit_type','lmfit')
	pre_off_plt   = kwargs.get('pre_off_plt',False)
	dest_dir      = kwargs.get('dest_dir',None)

	n_int_spt     = kwargs.get('n_int_spt',0)

	int_typ_spl   = kwargs.get('int_typ_spl','arcsec')

	upper_shift_1   = kwargs.get('upper_shift_1',0)
	lower_shift_1   = kwargs.get('lower_shift_1',0)
	upper_shift_2   = kwargs.get('upper_shift_2',0)
	lower_shift_2   = kwargs.get('lower_shift_2',0)

	#stk_function_m  = kwargs.get('stk_function_m',False)
	#stk_function_a  = kwargs.get('stk_function_a',False)
	#stk_function_b  = kwargs.get('stk_function_b',False)
	mlt_stk_fct     = kwargs.get('mlt_stk_fct','both')

	max_sep         = kwargs.get('max_sep'         ,23)
	#mlt_stk_med     = kwargs.get('mlt_stk_med'   , True)
	#mlt_stk_avg     = kwargs.get('mlt_stk_avg'   , True)

	aaxs_Idp_ml_y   = kwargs.get('aaxs_Idp_ml_y', False)

	sep_lin_min     = kwargs.get('sep_lin_min',40)

	print

	print
	print colored('Using ' + str(len(LINES[0])) + ' lines in the range ' +str(lmb_min_lim) +'-'+str(lmb_max_lim),'yellow') 
	print "\n".join([lineinrange[0] + '-' +str(lineinrange[1]) for lineinrange in zip(LINES[4],LINES[0])])
	print

	##############
	print
	print colored('Plotting absoprtion profiles dependent on: '+int_typ_spl_1,'yellow')
	print colored('Plotting absoprtion profiles dependent on: '+int_typ_spl_2,'yellow')
	print

	##########
	if int_typ_spl_1 == 'kpc'  and n_int_spt_1 == 0:#in specfile_glx_f:
		splt_smpl_sfx_f1= 'kpc_F'
		splt_smpl_sfx_1 = '_kpc' 
		splt_smpl_unt_1 = 'kpc'
		splt_smpl_unl_1 = 'kpc'
		plt_nme_prp_1   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv)				
		slc_int_fg_1    = slc_kpc_int_fg[1]
		slc_int_bg_1    = slc_kpc_int_bg[1]		
		xlabel_1        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_1   = 'SKP'
		xticks_values   = [5,50, 100, 150]
		yticks_values   = np.arange(0,30,.1)#[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'kpc'  and n_int_spt_1 == 1:#in specfile_glx_f:
		splt_smpl_sfx_f1= 'kpc_F'
		splt_smpl_sfx_1 = '_kpc' 
		splt_smpl_unt_1 = 'kpc'
		splt_smpl_unl_1 = 'kpc'
		plt_nme_prp_1   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_1)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_1)				
		slc_int_fg_1    = slc_kpc_int_fg[1]
		slc_int_bg_1    = slc_kpc_int_bg[1]
		xlabel_1        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_1   = 'SKP'
		xticks_values   = [5,50, 100, 150]
		yticks_values   = np.arange(0,30,.1)#[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'kpc'  and n_int_spt_1 == 2:#in specfile_glx_f:
		splt_smpl_sfx_f1= 'kpc_F'
		splt_smpl_sfx_1 = '_kpc' 
		splt_smpl_unt_1 = 'kpc'
		splt_smpl_unl_1 = 'kpc'
		plt_nme_prp_1   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_2)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_2)				
		slc_int_fg_1    = slc_kpc_int_fg[1]
		slc_int_bg_1    = slc_kpc_int_bg[1]
		xlabel_1        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_1   = 'SKP'
		xticks_values   = [5,50, 100, 150]
		yticks_values   = np.arange(0,30,.1)#[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'kpc'  and n_int_spt_1 == 3:#in specfile_glx_f:
		splt_smpl_sfx_f1= 'kpc_F'
		splt_smpl_sfx_1 = '_kpc' 
		splt_smpl_unt_1 = 'kpc'
		splt_smpl_unl_1 = 'kpc'
		plt_nme_prp_1   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_3)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_3)				
		slc_int_fg_1    = slc_kpc_int_fg[1]
		slc_int_bg_1    = slc_kpc_int_bg[1]
		xlabel_1        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_1   = 'SKP'
		xticks_values   = [5,50, 100, 150]
		yticks_values   = np.arange(0,30,.1)#[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'kpc'  and n_int_spt_1 == 4:#in specfile_glx_f:
		splt_smpl_sfx_f1= 'kpc_F'
		splt_smpl_sfx_1 = '_kpc' 
		splt_smpl_unt_1 = 'kpc'
		splt_smpl_unl_1 = 'kpc'
		plt_nme_prp_1   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_4)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_4)				
		slc_int_fg_1    = slc_kpc_int_fg[1]
		slc_int_bg_1    = slc_kpc_int_bg[1]
		xlabel_1        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_1   = 'SKP'
		xticks_values   = [5,50, 100, 150]
		yticks_values   = np.arange(0,30,.1)#[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'mass' and n_int_spt_1 == 0 and max_sep == 23:# in specfile_glx_f:
		splt_smpl_sfx_f1= 'mass_F'
		splt_smpl_sfx_1 = '-mass'
		splt_smpl_unt_1 = 'mass'
		splt_smpl_unl_1 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_1   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23)				
		slc_int_fg_1    = slc_mss_int_fg[1]
		slc_int_bg_1    = slc_mss_int_bg[1]
		xlabel_1        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_1   = 'MSF'
		xticks_values   = np.arange(1,20,.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values   = np.arange(0,30,.1)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'mass' and n_int_spt_1 == 1 and max_sep == 23:# in specfile_glx_f:
		splt_smpl_sfx_f1= 'mass_F'
		splt_smpl_sfx_1 = '-mass'
		splt_smpl_unt_1 = 'mass'
		splt_smpl_unl_1 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_1   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_1)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_1)				
		slc_int_fg_1    = slc_mss_int_fg[1]
		slc_int_bg_1    = slc_mss_int_bg[1]
		xlabel_1        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_1   = 'MSF'
		xticks_values   = np.arange(1,20,.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values   = np.arange(0,30,.1)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'mass' and n_int_spt_1 == 2 and max_sep == 23:# in specfile_glx_f:
		splt_smpl_sfx_f1= 'mass_F'
		splt_smpl_sfx_1 = '-mass'
		splt_smpl_unt_1 = 'mass'
		splt_smpl_unl_1 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_1   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_2)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_2)				
		slc_int_fg_1    = slc_mss_int_fg[1]
		slc_int_bg_1    = slc_mss_int_bg[1]
		xlabel_1        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_1   = 'MSF'
		xticks_values   = np.arange(1,20,.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values   = np.arange(0,30,.01)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'mass' and n_int_spt_1 == 3 and max_sep == 23:# in specfile_glx_f:
		splt_smpl_sfx_f1= 'mass_F'
		splt_smpl_sfx_1 = '-mass'
		splt_smpl_unt_1 = 'mass'
		splt_smpl_unl_1 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_1   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_3)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_3)				
		slc_int_fg_1    = slc_mss_int_fg[1]
		slc_int_bg_1    = slc_mss_int_bg[1]
		xlabel_1        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_1   = 'MSF'
		xticks_values   = np.arange(1,20,.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values   = np.arange(0,30,.1)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'mass' and n_int_spt_1 == 4 and max_sep == 23:# in specfile_glx_f:
		splt_smpl_sfx_f1= 'mass_F'
		splt_smpl_sfx_1 = '-mass'
		splt_smpl_unt_1 = 'mass'
		splt_smpl_unl_1 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_1   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_4)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_4)				
		slc_int_fg_1    = slc_mss_int_fg[1]
		slc_int_bg_1    = slc_mss_int_bg[1]
		xlabel_1        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_1   = 'MSF'
		xticks_values   = np.arange(1,20,.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values   = np.arange(0,30,.1)         #[0.1,0.5,1,3]				
	elif int_typ_spl_1 == 'Age'  and n_int_spt_1 == 0:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Age_F'
		splt_smpl_sfx_1  = '-Age' 
		splt_smpl_unt_1  = 'Age'
		splt_smpl_unl_1  = 'Age'
		plt_nme_prp_1    = 'Age'
		slc_age_int_fg_0 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv)
		slc_age_int_bg_0 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv)
		slc_int_fg_1     = slc_age_int_fg_0[1]
		slc_int_bg_1     = slc_age_int_bg_0[1]
		xlabel_1         = 'Age'
		var_prp_hdr_1    = 'AGF'
		xticks_values    = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Age'  and n_int_spt_1 == 1 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Age_F'
		splt_smpl_sfx_1  = '-Age' 
		splt_smpl_unt_1  = 'Age'
		splt_smpl_unl_1  = 'Age'
		plt_nme_prp_1    = 'Age'
		slc_age_int_fg_1 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_1)
		slc_age_int_bg_1 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_1)
		slc_int_fg_1     = slc_age_int_fg_1[1]
		slc_int_bg_1     = slc_age_int_bg_1[1]
		xlabel_1         = 'Age'
		var_prp_hdr_1    = 'AGF'
		xticks_values    = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Age'  and n_int_spt_1 == 2 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Age_F'
		splt_smpl_sfx_1  = '-Age' 
		splt_smpl_unt_1  = 'Age'
		splt_smpl_unl_1  = 'Age'
		plt_nme_prp_1    = 'Age'
		slc_age_int_fg_2 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_2)
		slc_age_int_bg_2 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_2)
		slc_int_fg_1     = slc_age_int_fg_2[1]
		slc_int_bg_1     = slc_age_int_bg_2[1]
		xlabel_1         = 'Age'
		var_prp_hdr_1    = 'AGF'
		xticks_values    = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Age'  and n_int_spt_1 == 3 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Age_F'
		splt_smpl_sfx_1  = '-Age' 
		splt_smpl_unt_1  = 'Age'
		splt_smpl_unl_1  = 'Age'
		plt_nme_prp_1    = 'Age'
		slc_age_int_fg_3 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_3)
		slc_age_int_bg_3 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_3)
		slc_int_fg_1     = slc_age_int_fg_3[1]
		slc_int_bg_1     = slc_age_int_bg_3[1]
		xlabel_1         = 'Age'
		var_prp_hdr_1    = 'AGF'
		xticks_values    = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Age'  and n_int_spt_1 == 4 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Age_F'
		splt_smpl_sfx_1  = '-Age' 
		splt_smpl_unt_1  = 'Age'
		splt_smpl_unl_1  = 'Age'
		plt_nme_prp_1    = 'Age'
		slc_age_int_fg_4 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_4)
		slc_age_int_bg_4 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_4)
		slc_int_fg_1     = slc_age_int_fg_4[1]
		slc_int_bg_1     = slc_age_int_bg_4[1]
		xlabel_1         = 'Age'
		var_prp_hdr_1    = 'AGF'
		xticks_values    = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'SFR'  and n_int_spt_1 == 0:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'SFR_F'
		splt_smpl_sfx_1  = '-SFR' 
		splt_smpl_unt_1  = 'SFR' 
		splt_smpl_unl_1  = 'SFR' 
		plt_nme_prp_1    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv)
		slc_int_fg_1     = slc_sfr_int_fg[1]
		slc_int_bg_1     = slc_sfr_int_bg[1]
		xlabel_1         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_1    = 'SFF'
		xticks_values    = np.arange(0,3,0.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'SFR'  and n_int_spt_1 == 1 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'SFR_F'
		splt_smpl_sfx_1  = '-SFR' 
		splt_smpl_unt_1  = 'SFR' 
		splt_smpl_unl_1  = 'SFR' 
		plt_nme_prp_1    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_1)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_1)
		slc_int_fg_1     = slc_sfr_int_fg[1]
		slc_int_bg_1     = slc_sfr_int_bg[1]
		xlabel_1         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_1    = 'SFF'
		xticks_values    = np.arange(0,3,0.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'SFR'  and n_int_spt_1 == 2 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'SFR_F'
		splt_smpl_sfx_1  = '-SFR' 
		splt_smpl_unt_1  = 'SFR' 
		splt_smpl_unl_1  = 'SFR' 
		plt_nme_prp_1    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_2)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_2)
		slc_int_fg_1     = slc_sfr_int_fg[1]
		slc_int_bg_1     = slc_sfr_int_bg[1]
		xlabel_1         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_1    = 'SFF'
		xticks_values    = np.arange(0,3,0.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'SFR'  and n_int_spt_1 == 3 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'SFR_F'
		splt_smpl_sfx_1  = '-SFR' 
		splt_smpl_unt_1  = 'SFR' 
		splt_smpl_unl_1  = 'SFR' 
		plt_nme_prp_1    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_3)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_3)
		slc_int_fg_1     = slc_sfr_int_fg[1]
		slc_int_bg_1     = slc_sfr_int_bg[1]
		xlabel_1         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_1    = 'SFF'
		xticks_values    = np.arange(0,3,0.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'SFR'  and n_int_spt_1 == 4 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'SFR_F'
		splt_smpl_sfx_1  = '-SFR' 
		splt_smpl_unt_1  = 'SFR' 
		splt_smpl_unl_1  = 'SFR' 
		plt_nme_prp_1    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_4)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_4)
		slc_int_fg_1     = slc_sfr_int_fg[1]
		slc_int_bg_1     = slc_sfr_int_bg[1]
		xlabel_1         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_1    = 'SFF'
		xticks_values    = np.arange(0,3,0.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sSFR' and n_int_spt_1 == 0:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'sSFR_F'
		splt_smpl_sfx_1  = '-sSFR'
		splt_smpl_unt_1  = 'sSFR'
		splt_smpl_unl_1  = 'sSFR'
		plt_nme_prp_1    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv)
		slc_int_fg_1     = slc_ssf_int_fg[1]
		slc_int_bg_1     = slc_ssf_int_bg[1]
		xlabel_1         = 'sSFR [Gyr]'
		var_prp_hdr_1    = 'sSF'
		xticks_values    = np.arange(-20,-1,0.1)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sSFR' and n_int_spt_1 == 1 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'sSFR_F'
		splt_smpl_sfx_1  = '-sSFR'
		splt_smpl_unt_1  = 'sSFR'
		splt_smpl_unl_1  = 'sSFR'
		plt_nme_prp_1    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_1)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_1)
		slc_int_fg_1     = slc_ssf_int_fg[1]
		slc_int_bg_1     = slc_ssf_int_bg[1]
		xlabel_1         = 'sSFR [Gyr]'
		var_prp_hdr_1    = 'sSF'
		xticks_values    = np.arange(-20,-1,0.1)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sSFR' and n_int_spt_1 == 2 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'sSFR_F'
		splt_smpl_sfx_1  = '-sSFR'
		splt_smpl_unt_1  = 'sSFR'
		splt_smpl_unl_1  = 'sSFR'
		plt_nme_prp_1    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_2)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_2)
		slc_int_fg_1     = slc_ssf_int_fg[1]
		slc_int_bg_1     = slc_ssf_int_bg[1]
		xlabel_1         = 'sSFR [Gyr]'
		var_prp_hdr_1    = 'sSF'
		xticks_values    = np.arange(-20,-1,0.1)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sSFR' and n_int_spt_1 == 3 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'sSFR_F'
		splt_smpl_sfx_1  = '-sSFR'
		splt_smpl_unt_1  = 'sSFR'
		splt_smpl_unl_1  = 'sSFR'
		plt_nme_prp_1    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_3)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_3)
		slc_int_fg_1     = slc_ssf_int_fg[1]
		slc_int_bg_1     = slc_ssf_int_bg[1]
		xlabel_1         = 'sSFR [Gyr]'
		var_prp_hdr_1    = 'sSF'
		xticks_values    = np.arange(-20,-1,0.1)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sSFR' and n_int_spt_1 == 4 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'sSFR_F'
		splt_smpl_sfx_1  = '-sSFR'
		splt_smpl_unt_1  = 'sSFR'
		splt_smpl_unl_1  = 'sSFR'
		plt_nme_prp_1    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_4)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_4)
		slc_int_fg_1     = slc_ssf_int_fg[1]
		slc_int_bg_1     = slc_ssf_int_bg[1]
		xlabel_1         = 'sSFR [Gyr]'
		var_prp_hdr_1    = 'sSF'
		xticks_values    = np.arange(-20,-1,0.25)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.25)   #[0.1,0.5,1,3]						
	elif int_typ_spl_1 == 'Lnuv' and n_int_spt_1 == 0:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Lnuv_F'
		splt_smpl_sfx_1  = '-Lnuv'
		splt_smpl_unt_1  = 'ergs cm$^{-2}$ s$^{-1}$'
		splt_smpl_unl_1  = 'Lnuv'
		plt_nme_prp_1    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv)
		slc_int_fg_1     = slc_luv_int_fg[1]
		slc_int_bg_1     = slc_luv_int_bg[1]
		xlabel_1         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_1    = 'UVF'
		xticks_values    = np.arange(8,14,.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Lnuv' and n_int_spt_1 == 1 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Lnuv_F'
		splt_smpl_sfx_1  = '-Lnuv'
		splt_smpl_unt_1  = 'ergs cm$^{-2}$ s$^{-1}$'
		splt_smpl_unl_1  = 'Lnuv'
		plt_nme_prp_1    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_1)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_1)
		slc_int_fg_1     = slc_luv_int_fg[1]
		slc_int_bg_1     = slc_luv_int_bg[1]
		xlabel_1         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_1    = 'UVF'
		xticks_values    = np.arange(8,14,.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Lnuv' and n_int_spt_1 == 2 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Lnuv_F'
		splt_smpl_sfx_1  = '-Lnuv'
		splt_smpl_unt_1  = 'ergs cm$^{-2}$ s$^{-1}$'
		splt_smpl_unl_1  = 'Lnuv'
		plt_nme_prp_1    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_2)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_2)
		slc_int_fg_1     = slc_luv_int_fg[1]
		slc_int_bg_1     = slc_luv_int_bg[1]
		xlabel_1         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_1    = 'UVF'
		xticks_values    = np.arange(8,14,.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Lnuv' and n_int_spt_1 == 3 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Lnuv_F'
		splt_smpl_sfx_1  = '-Lnuv'
		splt_smpl_unt_1  = 'ergs cm$^{-2}$ s$^{-1}$'
		splt_smpl_unl_1  = 'Lnuv'
		plt_nme_prp_1    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_3)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_3)
		slc_int_fg_1     = slc_luv_int_fg[1]
		slc_int_bg_1     = slc_luv_int_bg[1]
		xlabel_1         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_1    = 'UVF'
		xticks_values    = np.arange(8,14,.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Lnuv' and n_int_spt_1 == 4 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Lnuv_F'
		splt_smpl_sfx_1  = '-Lnuv'
		splt_smpl_unt_1  = 'ergs cm$^{-2}$ s$^{-1}$'
		splt_smpl_unl_1  = 'Lnuv'
		plt_nme_prp_1    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_4)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_4)
		slc_int_fg_1     = slc_luv_int_fg[1]
		slc_int_bg_1     = slc_luv_int_bg[1]
		xlabel_1         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_1    = 'UVF'
		xticks_values    = np.arange(8,14,.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 0:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150]
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 1 and max_sep==23:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_1[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_1[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150]
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 2 and max_sep==23:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_2[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_2[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150]
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 3 and max_sep==23:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_3[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_3[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150]
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 4 and max_sep==23:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_4[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_4[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150]
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 5 and max_sep==23:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_5[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_5[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150, 200]
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 6 and max_sep==23:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_6[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_6[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150, 200]
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]			
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 1 and max_sep==25:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_1[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_1[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150]
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 2 and max_sep==25:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_2[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_2[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150]
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 3 and max_sep==25:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_3[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_3[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150]
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 4 and max_sep==25:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_4[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_4[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150]
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 5 and max_sep==25:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_5[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_5[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150, 200]
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 6 and max_sep==25:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_6[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_6[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150, 200]
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]

	elif int_typ_spl_1 == 'magi' and n_int_spt_1 == 0:# in specfile_glx:
		splt_smpl_sfx_f1 = 'magi_F'
		splt_smpl_sfx_1  = '_magi'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv)
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'mag$_{i}$'
		var_prp_hdr_1    = 'magi'#'SAS'
		xticks_values    = np.arange(-100,100,0.25)
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]				
	elif int_typ_spl_1 == 'magi' and n_int_spt_1 == 1:# in specfile_glx:
		splt_smpl_sfx_f1 = 'magi_F'
		splt_smpl_sfx_1  = '_magi'
		splt_smpl_unt_1  = 'mag'
		splt_smpl_unl_1  = 'mag'
		plt_nme_prp_1    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv)
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'mag$_{i}$'
		var_prp_hdr_1    = 'magi'#'SAS'
		xticks_values    = np.arange(-100,100,0.25)
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]				
	elif int_typ_spl_1 == 'magi' and n_int_spt_1 == 2 and max_sep==23:# in specfile_glx:
		splt_smpl_sfx_f1 = 'magi_F'
		splt_smpl_sfx_1  = '_magi'
		splt_smpl_unt_1  = 'mag'
		splt_smpl_unl_1  = 'mag'
		plt_nme_prp_1    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_2)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_2)
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'mag$_{i}$'
		var_prp_hdr_1    = 'magi'#'SAS'
		xticks_values    = np.arange(-100,100,0.25)
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]				
	elif int_typ_spl_1 == 'magi' and n_int_spt_1 == 3 and max_sep==23:# in specfile_glx:
		splt_smpl_sfx_f1 = 'magi_F'
		splt_smpl_sfx_1  = '_magi'
		splt_smpl_unt_1  = 'mag'
		splt_smpl_unl_1  = 'mag'
		plt_nme_prp_1    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_3)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_3)
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'mag$_{i}$'
		var_prp_hdr_1    = 'magi'#'SAS'
		xticks_values    = np.arange(-100,100,0.25)
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]				
	elif int_typ_spl_1 == 'magi' and n_int_spt_1 == 4 and max_sep==23:# in specfile_glx:
		splt_smpl_sfx_f1 = 'magi_F'
		splt_smpl_sfx_1  = '_magi'
		splt_smpl_unt_1  = 'mag'
		splt_smpl_unl_1  = 'mag'
		plt_nme_prp_1    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_4)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_4)
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'mag$_{i}$'
		var_prp_hdr_1    = 'magi'#'SAS'
		xticks_values    = np.arange(-100,100,0.25)
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]				
	elif int_typ_spl_1 == 'phi' and n_int_spt_1 == 0:# in specfile_glx:
		splt_smpl_sfx_f1 = 'PHI'
		splt_smpl_sfx_1  = '-phi'
		splt_smpl_unt_1  = 'deg'
		splt_smpl_unl_1  = 'deg'
		plt_nme_prp_1    = 'PHI'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv)
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr_1    = 'PHI'#'SAS'
		xticks_values    = np.arange(-10,100,10) #xticks_values  = [0,100]
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'phi'  and n_int_spt_1 == 2:# in specfile_glx:
		splt_smpl_sfx_f1 = 'PHI'
		splt_smpl_sfx_1  = '-phi'
		splt_smpl_unt_1  = 'deg'
		splt_smpl_unl_1  = 'deg'
		plt_nme_prp_1    = 'PHI'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv_23_2)			
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr_1    = 'PHI'#'SAS'
		xticks_values    = np.arange(-10,100,10) #xticks_values  = [0,100]
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'phi'  and n_int_spt_1 == 3:# in specfile_glx:
		splt_smpl_sfx_f1 = 'PHI'
		splt_smpl_sfx_1  = '-phi'
		splt_smpl_unt_1  = 'deg'
		splt_smpl_unl_1  = 'deg'
		plt_nme_prp_1    = 'PHI'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv_23_3)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv_23_3)			
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr_1    = 'PHI'#'SAS'
		xticks_values    = np.arange(-10,100,10) #xticks_values  = [0,100]
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]	
	elif int_typ_spl_1 == 'icl_fg' and n_int_spt_1 == 0:# in specfile_glx:
		splt_smpl_sfx_f1 = 'q_F'
		splt_smpl_sfx_1  = '-icl'
		splt_smpl_unt_1  = 'deg'
		splt_smpl_unl_1  = 'deg'
		plt_nme_prp_1    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv)
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$q$'
		var_prp_hdr_1    = 'q'#'SAS'
		xticks_values    = np.arange(-1,1,0.1)
		yticks_values    = np.arange(0,30,.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'icl_fg' and n_int_spt_1 == 2:# in specfile_glx:
		splt_smpl_sfx_f1 = 'q_F'
		splt_smpl_sfx_1  = '-icl'
		splt_smpl_unt_1  = 'deg'
		splt_smpl_unl_1  = 'deg'
		plt_nme_prp_1    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_23_itv_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_23_itv_2)
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$q$'
		var_prp_hdr_1    = 'q'#'SAS'
		xticks_values    = np.arange(-1,1,0.1)
		yticks_values    = np.arange(0,30,.5)  #[0.1,0.5,1,3]	
	elif int_typ_spl_1 == 'icl_fg' and n_int_spt_1 == 3:# in specfile_glx:
		splt_smpl_sfx_f1 = 'q_F'
		splt_smpl_sfx_1  = '-icl'
		splt_smpl_unt_1  = 'deg'
		splt_smpl_unl_1  = 'deg'
		plt_nme_prp_1    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_23_itv_3)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_23_itv_3)
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$q$'
		var_prp_hdr_1    = 'q'#'SAS'
		xticks_values    = np.arange(-1,1,0.1)
		yticks_values    = np.arange(0,30,.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'icl_fg' and n_int_spt_1 == 4:# in specfile_glx:
		splt_smpl_sfx_f1 = 'q_F'
		splt_smpl_sfx_1  = '-icl'
		splt_smpl_unt_1  = 'deg'
		splt_smpl_unl_1  = 'deg'
		plt_nme_prp_1    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_23_itv_4)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_23_itv_4)			
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$q$'
		var_prp_hdr_1    = 'q'#'SAS'
		xticks_values    = np.arange(-1,1,0.1)
		yticks_values    = np.arange(0,30,.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'n_sersic_fg' and n_int_spt_1 == 0:# in specfile_glx:
		splt_smpl_sfx_f1 = 'n_F'
		splt_smpl_sfx_1  = '-n_srs'
		splt_smpl_unt_1  = 'n'
		splt_smpl_unl_1  = 'n'
		plt_nme_prp_1    = 'n_srs'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,n_srs_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,n_srs_itv)
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = 'n'
		var_prp_hdr_1    = 'nsr'#'SAS'
		xticks_values    = np.arange(-1,3,0.25)
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'n_sersic_fg'  and n_int_spt_1 == 2:# in specfile_glx:
		splt_smpl_sfx_f1 = 'n_F'
		splt_smpl_sfx_1  = '-n_srs'
		splt_smpl_unt_1  = 'n'
		splt_smpl_unl_1  = 'n'
		plt_nme_prp_1    = 'n_srs'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,n_srs_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,n_srs_itv_23_2)			
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = 'n'
		var_prp_hdr_1    = 'nsr'#'SAS'
		xticks_values    = np.arange(-1,3,0.25)
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'r_eff_fg' and n_int_spt_1 == 0:# in specfile_glx:
		splt_smpl_sfx_f1 = 're_F'
		splt_smpl_sfx_1  = '-r_eff'
		splt_smpl_unt_1  = 'arcsec'
		splt_smpl_unl_1  = 'arcsec'
		plt_nme_prp_1    = 'r_eff'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv)
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]  
		xlabel_1         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr_1    = 'ref'#'SAS'
		xticks_values    = np.arange(-1,50,0.5)
		yticks_values    = np.arange(0,30,.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'r_eff_fg'  and n_int_spt_1 == 2:# in specfile_glx:
		splt_smpl_sfx_f1 = 're_F'
		splt_smpl_sfx_1  = '-r_eff'
		splt_smpl_unt_1  = 'arcsec'
		splt_smpl_unl_1  = 'arcsec'
		plt_nme_prp_1    = 'r_eff'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv_23_2)			
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr_1    = 'ref'#'SAS'
		xticks_values    = np.arange(-1,50,0.5)
		yticks_values    = np.arange(0,30,.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'r_eff_fg'  and n_int_spt_1 == 3:# in specfile_glx:
		splt_smpl_sfx_f1 = 're_F'
		splt_smpl_sfx_1  = '-r_eff'
		splt_smpl_unt_1  = 'arcsec'
		splt_smpl_unl_1  = 'arcsec'
		plt_nme_prp_1    = 'r_eff'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv_23_3)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv_23_3)			
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr_1    = 'ref'#'SAS'
		xticks_values    = np.arange(-1,50,0.5)
		yticks_values    = np.arange(0,30,.5)  #[0.1,0.5,1,3]						
	else:
		print
		print (colored('Such combination (1st-split) does not exist!','yellow'))
		print (colored('Variable: '+str(int_typ_spl_1)+', # bins: '+str(n_int_spt_1),'yellow'))
		print
		quit()

	####

	if int_typ_spl_2 == 'kpc'  and n_int_spt_2 == 0:#in specfile_glx_f:
		splt_smpl_sfx_f2= 'kpc_F'
		splt_smpl_sfx_2 = '_kpc' 
		splt_smpl_unt_2 = 'kpc'
		splt_smpl_unl_2 = 'kpc'
		plt_nme_prp_2   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv)				
		slc_int_fg_2    = slc_kpc_int_fg[1]
		slc_int_bg_2    = slc_kpc_int_bg[1]		
		xlabel_2        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_2   = 'SKP'
	elif int_typ_spl_2 == 'kpc'  and n_int_spt_2 == 1:#in specfile_glx_f:
		splt_smpl_sfx_f2= 'kpc_F'
		splt_smpl_sfx_2 = '_kpc' 
		splt_smpl_unt_2 = 'kpc'
		splt_smpl_unl_2 = 'kpc'
		plt_nme_prp_2   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_1)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_1)				
		slc_int_fg_2    = slc_kpc_int_fg[1]
		slc_int_bg_2    = slc_kpc_int_bg[1]
		xlabel_2        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_2   = 'SKP'
	elif int_typ_spl_2 == 'kpc'  and n_int_spt_2 == 2:#in specfile_glx_f:
		splt_smpl_sfx_f2= 'kpc_F'
		splt_smpl_sfx_2 = '_kpc' 
		splt_smpl_unt_2 = 'kpc'
		splt_smpl_unl_2 = 'kpc'
		plt_nme_prp_2   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_2)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_2)				
		slc_int_fg_2    = slc_kpc_int_fg[1]
		slc_int_bg_2    = slc_kpc_int_bg[1]
		xlabel_2        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_2   = 'SKP'
	elif int_typ_spl_2 == 'kpc'  and n_int_spt_2 == 3:#in specfile_glx_f:
		splt_smpl_sfx_f2= 'kpc_F'
		splt_smpl_sfx_2 = '_kpc' 
		splt_smpl_unt_2 = 'kpc'
		splt_smpl_unl_2 = 'kpc'
		plt_nme_prp_2   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_3)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_3)				
		slc_int_fg_2    = slc_kpc_int_fg[1]
		slc_int_bg_2    = slc_kpc_int_bg[1]
		xlabel_2        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_2   = 'SKP'
	elif int_typ_spl_2 == 'kpc'  and n_int_spt_2 == 4:#in specfile_glx_f:
		splt_smpl_sfx_f2= 'kpc_F'
		splt_smpl_sfx_2 = '_kpc' 
		splt_smpl_unt_2 = 'kpc'
		splt_smpl_unl_2 = 'kpc'
		plt_nme_prp_2   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_4)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_4)				
		slc_int_fg_2    = slc_kpc_int_fg[1]
		slc_int_bg_2    = slc_kpc_int_bg[1]
		xlabel_2        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_2   = 'SKP'
	elif int_typ_spl_2 == 'mass' and n_int_spt_2 == 0:# in specfile_glx_f:
		splt_smpl_sfx_f2= 'mass_F'
		splt_smpl_sfx_2 = '-mass'
		splt_smpl_unt_2 = 'log[M/M$_{\odot}$]'
		splt_smpl_unl_2 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_2   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23)				
		slc_int_fg_2    = slc_mss_int_fg[1]
		slc_int_bg_2    = slc_mss_int_bg[1]
		xlabel_2        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_2   = 'MSF'
	elif int_typ_spl_2 == 'mass' and n_int_spt_2 == 1:# in specfile_glx_f:
		splt_smpl_sfx_f2= 'mass_F'
		splt_smpl_sfx_2 = '-mass'
		splt_smpl_unt_2 = 'log[M/M$_{\odot}$]'
		splt_smpl_unl_2 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_2   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_1)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_1)				
		slc_int_fg_2    = slc_mss_int_fg[1]
		slc_int_bg_2    = slc_mss_int_bg[1]
		xlabel_2        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_2   = 'MSF'
	elif int_typ_spl_2 == 'mass' and n_int_spt_2 == 2:# in specfile_glx_f:
		splt_smpl_sfx_f2= 'mass_F'
		splt_smpl_sfx_2 = '-mass'
		splt_smpl_unt_2 = 'log[M/M$_{\odot}$]'
		splt_smpl_unl_2 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_2   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_2)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_2)				
		slc_int_fg_2    = slc_mss_int_fg[1]
		slc_int_bg_2    = slc_mss_int_bg[1]
		xlabel_2        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_2   = 'MSF'
	elif int_typ_spl_2 == 'mass' and n_int_spt_2 == 3:# in specfile_glx_f:
		splt_smpl_sfx_f2= 'mass_F'
		splt_smpl_sfx_2 = '-mass'
		splt_smpl_unt_2 = 'log[M/M$_{\odot}$]'
		splt_smpl_unl_2 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_2   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_3)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_3)				
		slc_int_fg_2    = slc_mss_int_fg[1]
		slc_int_bg_2    = slc_mss_int_bg[1]
		xlabel_2        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_2   = 'MSF'
	elif int_typ_spl_2 == 'mass' and n_int_spt_2 == 4:# in specfile_glx_f:
		splt_smpl_sfx_f2= 'mass_F'
		splt_smpl_sfx_2 = '-mass'
		splt_smpl_unt_2 = 'log[M/M$_{\odot}$]'
		splt_smpl_unl_2 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_2   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_4)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_4)				
		slc_int_fg_2    = slc_mss_int_fg[1]
		slc_int_bg_2    = slc_mss_int_bg[1]
		xlabel_2        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_2   = 'MSF'
	elif int_typ_spl_2 == 'Age'  and n_int_spt_2 == 0:#in specfile_glx_f:
		splt_smpl_sfx_f2 = '-Age_F'
		splt_smpl_sfx_2  = '-Age' 
		splt_smpl_unt_2  = 'Age'
		splt_smpl_unl_2  = 'Age'
		plt_nme_prp_2    = 'Age'
		slc_age_int_fg_0 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv)
		slc_age_int_bg_0 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv)
		slc_int_fg_2     = slc_age_int_fg_0[1]
		slc_int_bg_2     = slc_age_int_bg_0[1]
		xlabel_2         = 'Age'
		var_prp_hdr_2    = 'AGF'
	elif int_typ_spl_2 == 'Age'  and n_int_spt_2 == 1:#in specfile_glx_f:
		splt_smpl_sfx_f2 = '-Age_F'
		splt_smpl_sfx_2  = '-Age' 
		splt_smpl_unt_2  = 'Age'
		splt_smpl_unl_2  = 'Age'
		plt_nme_prp_2    = 'Age'
		slc_age_int_fg_1 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_1)
		slc_age_int_bg_1 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_1)
		slc_int_fg_2     = slc_age_int_fg_1[1]
		slc_int_bg_2     = slc_age_int_bg_1[1]
		xlabel_2         = 'Age'
		var_prp_hdr_2    = 'AGF'
	elif int_typ_spl_2 == 'Age'  and n_int_spt_2 == 2:#in specfile_glx_f:
		splt_smpl_sfx_f2 = '-Age_F'
		splt_smpl_sfx_2  = '-Age' 
		splt_smpl_unt_2  = 'Age'
		splt_smpl_unl_2  = 'Age'
		plt_nme_prp_2    = 'Age'
		slc_age_int_fg_2 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_2)
		slc_age_int_bg_2 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_2)
		slc_int_fg_2     = slc_age_int_fg_2[1]
		slc_int_bg_2     = slc_age_int_bg_2[1]
		xlabel_2         = 'Age'
		var_prp_hdr_2    = 'AGF'
	elif int_typ_spl_2 == 'Age'  and n_int_spt_2 == 3:#in specfile_glx_f:
		splt_smpl_sfx_f2 = '-Age_F'
		splt_smpl_sfx_2  = '-Age' 
		splt_smpl_unt_2  = 'Age'
		splt_smpl_unl_2  = 'Age'
		plt_nme_prp_2    = 'Age'
		slc_age_int_fg_3 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_3)
		slc_age_int_bg_3 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_3)
		slc_int_fg_2     = slc_age_int_fg_3[1]
		slc_int_bg_2     = slc_age_int_bg_3[1]
		xlabel_2         = 'Age'
		var_prp_hdr_2    = 'AGF'
	elif int_typ_spl_2 == 'Age'  and n_int_spt_2 == 4:#in specfile_glx_f:
		splt_smpl_sfx_f2 = '-Age_F'
		splt_smpl_sfx_2  = '-Age' 
		splt_smpl_unt_2  = 'Age'
		splt_smpl_unl_2  = 'Age'
		plt_nme_prp_2    = 'Age'
		slc_age_int_fg_4 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_4)
		slc_age_int_bg_4 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_4)
		slc_int_fg_2     = slc_age_int_fg_4[1]
		slc_int_bg_2     = slc_age_int_bg_4[1]
		xlabel_2         = 'Age'
		var_prp_hdr_2    = 'AGF'
	elif int_typ_spl_2 == 'SFR'  and n_int_spt_2 == 0:#in specfile_glx_f:
		splt_smpl_sfx_f2 = 'SFR_F'
		splt_smpl_sfx_2  = '-SFR' 
		splt_smpl_unt_2  = 'M$_{\odot}$yr$^{-1}$' 
		splt_smpl_unl_2  = 'SFR' 
		plt_nme_prp_2    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv)
		slc_int_fg_2     = slc_sfr_int_fg[1]
		slc_int_bg_2     = slc_sfr_int_bg[1]
		xlabel_2         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_2    = 'SFF'
	elif int_typ_spl_2 == 'SFR'  and n_int_spt_2 == 1:#in specfile_glx_f:
		splt_smpl_sfx_f2 = 'SFR_F'
		splt_smpl_sfx_2  = '-SFR' 
		splt_smpl_unt_2  = 'M$_{\odot}$yr$^{-1}$' 
		splt_smpl_unl_2  = 'SFR' 
		plt_nme_prp_2    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_1)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_1)
		slc_int_fg_2     = slc_sfr_int_fg[1]
		slc_int_bg_2     = slc_sfr_int_bg[1]
		xlabel_2         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_2    = 'SFF'
	elif int_typ_spl_2 == 'SFR'  and n_int_spt_2 == 2:#in specfile_glx_f:
		splt_smpl_sfx_f2 = 'SFR_F'
		splt_smpl_sfx_2  = '-SFR' 
		splt_smpl_unt_2  = 'M$_{\odot}$yr$^{-1}$' 
		splt_smpl_unl_2  = 'SFR' 
		plt_nme_prp_2    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_2)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_2)
		slc_int_fg_2     = slc_sfr_int_fg[1]
		slc_int_bg_2     = slc_sfr_int_bg[1]
		xlabel_2         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_2    = 'SFF'
	elif int_typ_spl_2 == 'SFR'  and n_int_spt_2 == 3:#in specfile_glx_f:
		splt_smpl_sfx_f2 = 'SFR_F'
		splt_smpl_sfx_2  = '-SFR' 
		splt_smpl_unt_2  = 'M$_{\odot}$yr$^{-1}$' 
		splt_smpl_unl_2  = 'SFR' 
		plt_nme_prp_2    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_3)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_3)
		slc_int_fg_2     = slc_sfr_int_fg[1]
		slc_int_bg_2     = slc_sfr_int_bg[1]
		xlabel_2         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_2    = 'SFF'
	elif int_typ_spl_2 == 'SFR'  and n_int_spt_2 == 4:#in specfile_glx_f:
		splt_smpl_sfx_f2 = 'SFR_F'
		splt_smpl_sfx_2  = '-SFR' 
		splt_smpl_unt_2  = 'M$_{\odot}$yr$^{-1}$' 
		splt_smpl_unl_2  = 'SFR' 
		plt_nme_prp_2    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_4)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_4)
		slc_int_fg_2     = slc_sfr_int_fg[1]
		slc_int_bg_2     = slc_sfr_int_bg[1]
		xlabel_2         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_2    = 'SFF'
	elif int_typ_spl_2 == 'sSFR' and n_int_spt_2 == 0:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'sSFR_F'
		splt_smpl_sfx_2  = '-sSFR'
		splt_smpl_unt_2  = 'sSFR'
		splt_smpl_unl_2  = 'sSFR'
		plt_nme_prp_2    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv)
		slc_int_fg_2     = slc_ssf_int_fg[1]
		slc_int_bg_2     = slc_ssf_int_bg[1]
		xlabel_2         = 'sSFR [Gyr]'
		var_prp_hdr_2    = 'sSF'
	elif int_typ_spl_2 == 'sSFR' and n_int_spt_2 == 1:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'sSFR_F'
		splt_smpl_sfx_2  = '-sSFR'
		splt_smpl_unt_2  = 'sSFR'
		splt_smpl_unl_2  = 'sSFR'
		plt_nme_prp_2    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_1)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_1)
		slc_int_fg_2     = slc_ssf_int_fg[1]
		slc_int_bg_2     = slc_ssf_int_bg[1]
		xlabel_2         = 'sSFR [Gyr]'
		var_prp_hdr_2    = 'sSF'
	elif int_typ_spl_2 == 'sSFR' and n_int_spt_2 == 2:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'sSFR_F'
		splt_smpl_sfx_2  = '-sSFR'
		splt_smpl_unt_2  = 'sSFR'
		splt_smpl_unl_2  = 'sSFR'
		plt_nme_prp_2    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_2)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_2)
		slc_int_fg_2     = slc_ssf_int_fg[1]
		slc_int_bg_2     = slc_ssf_int_bg[1]
		xlabel_2         = 'sSFR [Gyr]'
		var_prp_hdr_2    = 'sSF'
	elif int_typ_spl_2 == 'sSFR' and n_int_spt_2 == 3:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'sSFR_F'
		splt_smpl_sfx_2  = '-sSFR'
		splt_smpl_unt_2  = 'sSFR'
		splt_smpl_unl_2  = 'sSFR'
		plt_nme_prp_2    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_3)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_3)
		slc_int_fg_2     = slc_ssf_int_fg[1]
		slc_int_bg_2     = slc_ssf_int_bg[1]
		xlabel_2         = 'sSFR [Gyr]'
		var_prp_hdr_2    = 'sSF'
	elif int_typ_spl_2 == 'sSFR' and n_int_spt_2 == 4:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'sSFR_F'
		splt_smpl_sfx_2  = '-sSFR'
		splt_smpl_unt_2  = 'sSFR'
		splt_smpl_unl_2  = 'sSFR'
		plt_nme_prp_2    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_4)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_4)
		slc_int_fg_2     = slc_ssf_int_fg[1]
		slc_int_bg_2     = slc_ssf_int_bg[1]
		xlabel_2         = 'sSFR [Gyr]'
		var_prp_hdr_2    = 'sSF'
	elif int_typ_spl_2 == 'Lnuv' and n_int_spt_2 == 0:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'Lnuv_F'
		splt_smpl_sfx_2  = '-Lnuv'
		splt_smpl_unt_2  = 'ergs cm$^{-2}$ s$^{-1}$'
		splt_smpl_unl_2  = 'Lnuv'
		plt_nme_prp_2    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv)
		slc_int_fg_2     = slc_luv_int_fg[1]
		slc_int_bg_2     = slc_luv_int_bg[1]
		xlabel_2         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_2    = 'UVF'
	elif int_typ_spl_2 == 'Lnuv' and n_int_spt_2 == 1:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'Lnuv_F'
		splt_smpl_sfx_2  = '-Lnuv'
		splt_smpl_unt_2  = 'ergs cm$^{-2}$ s$^{-1}$'
		splt_smpl_unl_2  = 'Lnuv'
		plt_nme_prp_2    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_1)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_1)
		slc_int_fg_2     = slc_luv_int_fg[1]
		slc_int_bg_2     = slc_luv_int_bg[1]
		xlabel_2         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_2    = 'UVF'
	elif int_typ_spl_2 == 'Lnuv' and n_int_spt_2 == 2:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'Lnuv_F'
		splt_smpl_sfx_2  = '-Lnuv'
		splt_smpl_unt_2  = 'ergs cm$^{-2}$ s$^{-1}$'
		splt_smpl_unl_2  = 'Lnuv'
		plt_nme_prp_2    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_2)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_2)
		slc_int_fg_2     = slc_luv_int_fg[1]
		slc_int_bg_2     = slc_luv_int_bg[1]
		xlabel_2         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_2    = 'UVF'
	elif int_typ_spl_2 == 'Lnuv' and n_int_spt_2 == 3:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'Lnuv_F'
		splt_smpl_sfx_2  = '-Lnuv'
		splt_smpl_unt_2  = 'ergs cm$^{-2}$ s$^{-1}$'
		splt_smpl_unl_2  = 'Lnuv'
		plt_nme_prp_2    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_3)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_3)
		slc_int_fg_2     = slc_luv_int_fg[1]
		slc_int_bg_2     = slc_luv_int_bg[1]
		xlabel_2         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_2    = 'UVF'
	elif int_typ_spl_2 == 'Lnuv' and n_int_spt_2 == 4:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'Lnuv_F'
		splt_smpl_sfx_2  = '-Lnuv'
		splt_smpl_unt_2  = 'ergs cm$^{-2}$ s$^{-1}$'
		splt_smpl_unl_2  = 'Lnuv'
		plt_nme_prp_2    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_4)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_4)
		slc_int_fg_2     = slc_luv_int_fg[1]
		slc_int_bg_2     = slc_luv_int_bg[1]
		xlabel_2         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_2    = 'UVF'
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 0:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = 'arcsec'
		splt_smpl_unl_2  = 'arcsec'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 1:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = 'arcsec'
		splt_smpl_unl_2  = 'arcsec'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_1[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_1[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 2:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = 'arcsec'
		splt_smpl_unl_2  = 'arcsec'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_2[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_2[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 3:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = 'arcsec'
		splt_smpl_unl_2  = 'arcsec'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_3[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_3[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 4:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = 'arcsec'
		splt_smpl_unl_2  = 'arcsec'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_4[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_4[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 5:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = 'arcsec'
		splt_smpl_unl_2  = 'arcsec'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_5[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_5[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 6:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = 'arcsec'
		splt_smpl_unl_2  = 'arcsec'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_6[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_6[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
	elif int_typ_spl_2 == 'magi' and n_int_spt_2 == 0:# in specfile_glx:
		splt_smpl_sfx_f2 = 'magi_F'
		splt_smpl_sfx_2  = '_magi'
		splt_smpl_unt_2  = 'arcsec'
		splt_smpl_unl_2  = 'arcsec'
		plt_nme_prp_2    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv)
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'mag$_{i}$'
		var_prp_hdr_2    = 'magi'#'SAS'
	elif int_typ_spl_2 == 'magi' and n_int_spt_2 == 1:# in specfile_glx:
		splt_smpl_sfx_f2 = 'magi_F'
		splt_smpl_sfx_2  = '_magi'
		splt_smpl_unt_2  = 'mag'
		splt_smpl_unl_2  = 'mag'
		plt_nme_prp_2    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv)
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'mag$_{i}$'
		var_prp_hdr_2    = 'magi'#'SAS'
	elif int_typ_spl_2 == 'magi' and n_int_spt_2 == 2:# in specfile_glx:
		splt_smpl_sfx_f2 = 'magi_F'
		splt_smpl_sfx_2  = '_magi'
		splt_smpl_unt_2  = 'mag'
		splt_smpl_unl_2  = 'mag'
		plt_nme_prp_2    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_2)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_2)
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'mag$_{i}$'
		var_prp_hdr_2    = 'magi'#'SAS'
	elif int_typ_spl_2 == 'magi' and n_int_spt_2 == 3:# in specfile_glx:
		splt_smpl_sfx_f2 = 'magi_F'
		splt_smpl_sfx_2  = '_magi'
		splt_smpl_unt_2  = 'mag'
		splt_smpl_unl_2  = 'mag'
		plt_nme_prp_2    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_3)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_3)
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'mag$_{i}$'
		var_prp_hdr_2    = 'magi'#'SAS'
	elif int_typ_spl_2 == 'magi' and n_int_spt_2 == 4:# in specfile_glx:
		splt_smpl_sfx_f2 = 'magi_F'
		splt_smpl_sfx_2  = '_magi'
		splt_smpl_unt_2  = 'mag'
		splt_smpl_unl_2  = 'mag'
		plt_nme_prp_2    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_4)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_4)
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'mag$_{i}$'
		var_prp_hdr_2    = 'magi'#'SAS'
	elif int_typ_spl_2 == 'phi' and n_int_spt_2 == 0:# in specfile_glx:
		splt_smpl_sfx_f2 = 'PHI'
		splt_smpl_sfx_2  = '-phi'
		splt_smpl_unt_2  = 'deg'
		splt_smpl_unl_2  = 'deg'
		plt_nme_prp_2    = 'PHI'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv)
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr_2    = 'PHI'#'SAS'
	elif int_typ_spl_2 == 'phi'  and n_int_spt_2 == 2:# in specfile_glx:
		splt_smpl_sfx_f2 = 'PHI'
		splt_smpl_sfx_2  = '-phi'
		splt_smpl_unt_2  = 'deg'
		splt_smpl_unl_2  = 'deg'
		plt_nme_prp_2    = 'PHI'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv_23_2)			
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr_2    = 'PHI'#'SAS'
	elif int_typ_spl_2 == 'phi'  and n_int_spt_2 == 3:# in specfile_glx:
		splt_smpl_sfx_f2 = 'PHI'
		splt_smpl_sfx_2  = '-phi'
		splt_smpl_unt_2  = 'deg'
		splt_smpl_unl_2  = 'deg'
		plt_nme_prp_2    = 'PHI'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv_23_3)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv_23_3)			
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr_2    = 'PHI'#'SAS'
	elif int_typ_spl_2 == 'icl_fg' and n_int_spt_2 == 0:# in specfile_glx:
		splt_smpl_sfx_f2 = 'q_F'
		splt_smpl_sfx_2  = '-icl'
		splt_smpl_unt_2  = 'deg'
		splt_smpl_unl_2  = 'deg'
		plt_nme_prp_2    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv)
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$q$'
		var_prp_hdr_2    = 'q'#'SAS'
	elif int_typ_spl_2 == 'icl_fg' and n_int_spt_2 == 2:# in specfile_glx:
		splt_smpl_sfx_f2 = 'q_F'
		splt_smpl_sfx_2  = '-icl'
		splt_smpl_unt_2  = 'deg'
		splt_smpl_unl_2  = 'deg'
		plt_nme_prp_2    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv_23_2)
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$q$'
		var_prp_hdr_2    = 'q'#'SAS'
	elif int_typ_spl_2 == 'icl_fg' and n_int_spt_2 == 3:# in specfile_glx:
		splt_smpl_sfx_f2 = 'q_F'
		splt_smpl_sfx_2  = '-icl'
		splt_smpl_unt_2  = 'deg'
		splt_smpl_unl_2  = 'deg'
		plt_nme_prp_2    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv_23_3)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv_23_3)
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$q$'
		var_prp_hdr_2    = 'q'#'SAS'
	elif int_typ_spl_2 == 'icl_fg' and n_int_spt_2 == 4:# in specfile_glx:
		splt_smpl_sfx_f2 = 'q_F'
		splt_smpl_sfx_2  = '-icl'
		splt_smpl_unt_2  = 'deg'
		splt_smpl_unl_2  = 'deg'
		plt_nme_prp_2    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv_23_4)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv_23_4)			
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$q$'
		var_prp_hdr_2    = 'q'#'SAS'
	elif int_typ_spl_2 == 'n_sersic_fg' and n_int_spt_2 == 0:# in specfile_glx:
		splt_smpl_sfx_f2 = 'n_F'
		splt_smpl_sfx_2  = '-n_srs'
		splt_smpl_unt_2  = 'n'
		splt_smpl_unl_2  = 'n'
		plt_nme_prp_2    = 'n_srs'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,n_srs_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,n_srs_itv)
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = 'n'
		var_prp_hdr_2    = 'nsr'#'SAS'
	elif int_typ_spl_2 == 'n_sersic_fg'  and n_int_spt_2 == 2:# in specfile_glx:
		splt_smpl_sfx_f2 = 'n_F'
		splt_smpl_sfx_2  = '-n_srs'
		splt_smpl_unt_2  = 'n'
		splt_smpl_unl_2  = 'n'
		plt_nme_prp_2    = 'n_srs'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,n_srs_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,n_srs_itv_23_2)			
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = 'n'
		var_prp_hdr_2    = 'nsr'#'SAS'
	elif int_typ_spl_2 == 'r_eff_fg' and n_int_spt_2 == 0:# in specfile_glx:
		splt_smpl_sfx_f2 = 're_F'
		splt_smpl_sfx_2  = '-r_eff'
		splt_smpl_unt_2  = 'arcsec'
		splt_smpl_unl_2  = 'arcsec'
		plt_nme_prp_2    = 'r_eff'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv)
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]  
		xlabel_2         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr_2    = 'ref'#'SAS'
	elif int_typ_spl_2 == 'r_eff_fg'  and n_int_spt_2 == 2:# in specfile_glx:
		splt_smpl_sfx_f2 = 're_F'
		splt_smpl_sfx_2  = '-r_eff'
		splt_smpl_unt_2  = 'arcsec'
		splt_smpl_unl_2  = 'arcsec'
		plt_nme_prp_2    = 'r_eff'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv_23_2)			
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr_2    = 'ref'#'SAS'
	elif int_typ_spl_2 == 'r_eff_fg'  and n_int_spt_2 == 3:# in specfile_glx:
		splt_smpl_sfx_f2 = 're_F'
		splt_smpl_sfx_2  = '-r_eff'
		splt_smpl_unt_2  = 'arcsec'
		splt_smpl_unl_2  = 'arcsec'
		plt_nme_prp_2    = 'r_eff'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv_23_3)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv_23_3)			
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr_2    = 'ref'#'SAS'
	else:
		print
		print (colored('Such combination (2nd-split) does not exist!','yellow'))
		print (colored('Variable: '+str(int_typ_spl_2)+', # bins: '+str(n_int_spt_2),'yellow'))
		print
		quit()
	##########	
	
	print
	print slc_int_fg_1
	print slc_int_fg_2
	print lower_shift_1, upper_shift_1
	print lower_shift_2, upper_shift_2
	print
	FILES_BG =[]
	FILES_FG =[]


	'''
	if frg_ref_plt == True:
		for element,a in  enumerate(itertools.product(range(len(slc_int_fg_1)-1,len(slc_int_fg_1)),range(lower_shift_2,len(slc_int_fg_2)-upper_shift_2))):	
			index_int_1 = a[0]
			index_int_2 = a[1]
			print element,slc_int_fg_1[index_int_1],slc_int_fg_2[index_int_2]
			ini_fg_spc_m  = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-' + splt_smpl_sfx_f1 +'-'+str(slc_int_fg_1[index_int_1]) +'-ss-' + splt_smpl_sfx_f2 +'-'+str(slc_int_fg_2[index_int_2]) + '-stk-med'+str(stk_function)+'.fits'
			ini_fg_spc_a  = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-' + splt_smpl_sfx_f1 +'-'+str(slc_int_fg_1[index_int_1]) +'-ss-' + splt_smpl_sfx_f2 +'-'+str(slc_int_fg_2[index_int_2]) + '-stk-avg'+str(stk_function)+'.fits'
			print
			print ini_fg_spc_m
			print ini_fg_spc_a
			print

			#FILES_M_BG.append(ini_fg_spc_m)
			#FILES_A_BG.append(ini_fg_spc_a)
			#FILES_A_BG.append(ini_fg_spc_a)
	elif frg_ref_plt == False:
		pass
	print 'zfsdfsd'
	print
	'''


	splt_smpl_sfx_f1_plt=[]
	splt_smpl_sfx_f2_plt=[]	
	splt_smpl_sfx_f1_plt_fnc_m = []
	splt_smpl_sfx_f1_plt_fnc_a = []
	for element,a in  enumerate(itertools.product(range(lower_shift_1,len(slc_int_fg_1)-upper_shift_1),range(lower_shift_2,len(slc_int_fg_2)-upper_shift_2))):
		#print element,a
		index_int_1 = a[0]
		index_int_2 = a[1]
		print element,slc_int_fg_1[index_int_1],slc_int_fg_2[index_int_2]
		ini_fg_spc  = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-' + splt_smpl_sfx_f1 +'-'+str(slc_int_fg_1[index_int_1]) +'-ss-' + splt_smpl_sfx_f2 +'-'+str(slc_int_fg_2[index_int_2]) #+ '-stk-med'+str(stk_function)+'.fits'
		ini_bg_spc  = res_stk_res + 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-' + splt_smpl_sfx_f1 +'-'+str(slc_int_fg_1[index_int_1]) +'-ss-' + splt_smpl_sfx_f2 +'-'+str(slc_int_fg_2[index_int_2]) #+ '-stk-avg'+str(stk_function)+'.fits'


		print
		print ini_fg_spc
		print ini_fg_spc
		print
		FILES_BG.append(ini_bg_spc)
		FILES_FG.append(ini_fg_spc)

		splt_smpl_sfx_f1_plt.append(splt_smpl_sfx_f1 +'-'+str(slc_int_fg_1[index_int_1]))
		splt_smpl_sfx_f2_plt.append(splt_smpl_sfx_f2 +'-'+str(slc_int_fg_2[index_int_2]))
		#splt_smpl_sfx_f1_plt_fnc_m.append((ini_fg_spc_m.split('-stk',1)[1]).split('.fits',1)[0])
		#splt_smpl_sfx_f1_plt_fnc_a.append((ini_fg_spc_a.split('-stk',1)[1]).split('.fits',1)[0])

	print
	print colored('Intervals to be plotted: ','yellow')
	print colored('Indices : '+str(range(lower_shift_1,len(slc_int_bg_1)-upper_shift_1)),'yellow')
	print colored('Indices : '+str(range(lower_shift_2,len(slc_int_bg_2)-upper_shift_2)),'yellow')
	print
	#for interval_range in range(lower_shift,len(slc_int_bg)-upper_shift):
		#print colored('Interval: ' + str(interval_range) + ': ' + str(slc_int_fg[interval_range]),'yellow')
		#cur_spc_1 = res_stk_res + specfile_glx_b + str(slc_int_fg[interval_range]) + '-stk-med'+str(stk_function)+'.fits'
		#cur_spc_2 = res_stk_res + specfile_glx_b + str(slc_int_fg[interval_range]) + '-stk-avg'+str(stk_function)+'.fits'
		#FILES_M_BG.append(cur_spc_1)
		#FILES_A_BG.append(cur_spc_2)
		#FILES_A_BG.append(cur_spc_2)
		#
	#if 'Fg' in specfile_glx_b[2]:
		#glx_type = 'Fg'
		#clr_plt  = 'red'
	#elif 'Bg' in specfile_glx_b[2]:
		#glx_type = 'Bg'
		#clr_plt  = 'blue'
		#
	if mlt_stk_fct == 'med':#stk_function_m == True:
		stk_function_file = 'med-c'
		
	elif mlt_stk_fct == 'avg':#stk_function_a == True:
		stk_function_file = 'avg-c'
		
	elif mlt_stk_fct == 'both':#stk_function_b == True:
		stk_function_file = 'med-avg'

	print
	print colored('EW from spectra files: ','yellow')
	print
	print colored("\n".join([FILE + '.fits' for FILE in FILES_BG]),'blue')
	print colored("\n".join([FILE + '.fits' for FILE in FILES_FG]),'red')
	print
	print
	print colored('Reshaping filename array.','yellow')
	print colored('Split by: ' + int_typ_spl_1 + ' in # bins: ' +str(n_int_spt_1) ,'yellow')
	print colored("\n".join([str(FILE) for FILE in slc_int_fg_1]),'yellow')
	print
	print colored('Split by: ' + int_typ_spl_2 + ' in # bins: ' +str(n_int_spt_2) ,'yellow')
	print colored("\n".join([str(FILE) for FILE in slc_int_fg_2]),'yellow')
	FILES_BG_AUX = np.reshape(FILES_BG, (n_int_spt_1,n_int_spt_2))
	FILES_FG_AUX = np.reshape(FILES_FG, (n_int_spt_1,n_int_spt_2))

	splt_smpl_sfx_f1_plt_aux     = np.reshape(splt_smpl_sfx_f1_plt, (n_int_spt_1,n_int_spt_2))
	splt_smpl_sfx_f2_plt_aux     = np.reshape(splt_smpl_sfx_f2_plt, (n_int_spt_1,n_int_spt_2))
	#splt_smpl_sfx_f1_plt_fnc_m_aux   = np.reshape(splt_smpl_sfx_f1_plt_fnc_m, (n_int_spt_1,n_int_spt_2))
	#splt_smpl_sfx_f1_plt_fnc_a_aux   = np.reshape(splt_smpl_sfx_f1_plt_fnc_a, (n_int_spt_1,n_int_spt_2))

	print
	print colored('EW from spectra files: ','yellow')
	print
	print colored("\n".join([str(FILE) + '.fits' for FILE in FILES_BG]),'blue')
	print colored("\n".join([str(FILE) + '.fits' for FILE in FILES_FG]),'red')
	print

	#print
	#print colored('EW from spectra files: ','yellow')
	#print
	#print colored("\n".join([str(FILE) for FILE in FILES_M_BG_AUX]),'blue')
	#print colored("\n".join([str(FILE) for FILE in FILES_M_FG_AUX]),'blue')
	#print
	#print colored("\n".join([str(FILE) for FILE in FILES_A_BG_AUX]),'red')
	#print colored("\n".join([str(FILE) for FILE in FILES_A_FG_AUX]),'red')
	#print	
	##########
	#############
	#plt_sufix_fnm = specfile_glx  + slc_int_fg[lower_shift]  + '-' + slc_int_fg[len(slc_int_bg)-upper_shift-1]

	B_FLAG = (FILES_BG_AUX[0][0].split('ss-zf_B-')[1]).rsplit('-ss-zf_F-')[0]
	F_FLAG = (FILES_FG_AUX[0][0].split('ss-zf_F-')[1]).rsplit('-ss-'+int_typ_spl_1+'-')[0]

	try:
		plt_sufix_fnm = ((FILES_BG_AUX[0][0].split('/')[-1])).rsplit(int_typ_spl_1)[0] + int_typ_spl_1 + '-' + str((n_int_spt_1)) + '-' +int_typ_spl_2 +'-' + str((n_int_spt_2)) #slc_int_fg_1[lower_shift_1] +'-' +slc_int_fg_1[len(slc_int_bg_2[0])-upper_shift_2-1]
		PLOT_TITLE    = 'z_Bg: ' + B_FLAG + ', z_Fg:' + F_FLAG + ', bins: ' +  int_typ_spl_1 + ': ' + str((n_int_spt_1)) + ', ' +int_typ_spl_2 +': ' + str((n_int_spt_2))#+ '-' + str(slc_int_fg_1[1][len(slc_int_bg_2[0])-upper_shift_2-1]) 
	except IndexError:
		plt_sufix_fnm = ((FILES_BG_AUX[0][0].split('/')[-1])).rsplit(int_typ_spl_1)[0] + int_typ_spl_1 + '-' + str((n_int_spt_1)) + '-' +int_typ_spl_2 +'-' + str((n_int_spt_2)) #slc_int_fg_1[lower_shift_1] +'-' +slc_int_fg_1[len(slc_int_bg_2)-upper_shift_2-1]
		PLOT_TITLE    = 'z_Bg: ' + B_FLAG + ', z_Fg:' + F_FLAG + ', bins: ' +  int_typ_spl_1 + ': ' + str((n_int_spt_1)) + ', ' +int_typ_spl_2 +': ' + str((n_int_spt_2))#+ '-' + str(slc_int_fg_1[1][len(slc_int_bg_2)-upper_shift_2-1]) 

	print
	print plt_sufix_fnm
	print PLOT_TITLE
	print
	print len(FILES_BG_AUX)
	print
	print colored("\n".join([str(FILE) for FILE in FILES_FG_AUX]),'red')
	print colored("\n".join([str(FILE) for FILE in FILES_BG_AUX]),'blue')
	#print colored("\n".join([str(FILE) for FILE in splt_smpl_sfx_f1_plt_fnc_m_aux]),'blue')
	print
	print splt_smpl_sfx_2
	print splt_smpl_sfx_f2
	print splt_smpl_unt_2
	print splt_smpl_unl_2
	print
	[Plot_All_Spec_All_Int_Mlt_Plt(FILE[0],FILE[1],plt_sufix_fnm=plt_sufix_fnm,splt_smpl_sfx_f1_plt=FILE[1],slc_int_fg_1=slc_int_fg_1,slc_int_bg_1=slc_int_bg_1,slc_int_fg_2=slc_int_fg_2,slc_int_bg_2=slc_int_bg_2,int_typ_spl_1 = int_typ_spl_1,int_typ_spl_2=int_typ_spl_2,n_int_spt_1=n_int_spt_1,n_int_spt_2=n_int_spt_2,splt_smpl_sfx=splt_smpl_sfx_2,splt_smpl_sfx_f=splt_smpl_sfx_f2,splt_smpl_unt=splt_smpl_unt_2,splt_smpl_unl=splt_smpl_unl_2,*args,**kwargs)for FILE in zip(FILES_FG_AUX,FILES_BG_AUX,splt_smpl_sfx_f1_plt_aux)]

def Plot_All_Spec_All_Int_Mlt_Plt(Mltp_Spec_Files_2b_Plot_Fg,Mltp_Spec_Files_2b_Plot_Bg,*args, **kwargs):
	###########
	autoaxis_SSL  = kwargs.get('autoaxis_SSL'  , True)
	min_y_lim_SSL = kwargs.get('min_y_lim_SSL' , -2.0)
	max_y_lim_SSL = kwargs.get('max_y_lim_SSL' , 1.0)
	aaxs_SSL_ml_y = kwargs.get('aaxs_SSL_ml_y' ,False)
	fit_lne       = kwargs.get('fit_lne',False)
	plt_ind_fit   = kwargs.get('plt_ind_fit',False)
	lbl_col_idv   = kwargs.get('lbl_col_idv',True)
	###########
	z_glx_Ps      = kwargs.get('z_glx_Ps'    ,0)
	dest_dir      = kwargs.get('dest_dir'    , None)
	verbose       = kwargs.get('verbose'     , False)
	epssave       = kwargs.get('epssave'     , False)
	showplot      = kwargs.get('showplot'    , False) 

	autoaxis_Idp  = kwargs.get('autoaxis_Idp', False)
	#min_y_lim_Idp = kwargs.get('min_y_lim'   , 0.5)
	#max_y_lim_Idp = kwargs.get('max_y_lim'   , 1.5)

	lmb_min       = kwargs.get('lmb_min',1200)
	lmb_max       = kwargs.get('lmb_max',1700)

	lmb_min_lim   = lmb_min
	lmb_max_lim   = lmb_max

	#upper_shift   = kwargs.get('upper_shift',0)
	#lower_shift   = kwargs.get('lower_shift',0)
	#stk_function  = kwargs.get('stk_function','med')

	fit_fnct      = kwargs.get('fit_fnct','gauss')
	fit_type      = kwargs.get('fit_type','lmfit')
	pre_off_plt   = kwargs.get('pre_off_plt',False)
	dest_dir      = kwargs.get('dest_dir',None)

	n_int_spt     = kwargs.get('n_int_spt',0)

	int_typ_spl   = kwargs.get('int_typ_spl','arcsec')

	upper_shift_1   = kwargs.get('upper_shift_1',0)
	lower_shift_1   = kwargs.get('lower_shift_1',0)
	upper_shift_2   = kwargs.get('upper_shift_2',0)
	lower_shift_2   = kwargs.get('lower_shift_2',0)

	#stk_function_m  = kwargs.get('stk_function_m',False)
	#stk_function_a  = kwargs.get('stk_function_a',False)
	#stk_function_b  = kwargs.get('stk_function_b',False)
	mlt_stk_fct     = kwargs.get('mlt_stk_fct','both')

	plt_sufix_fnm   = kwargs.get('plt_sufix_fnm',None)

	sep_lin_min     = kwargs.get('sep_lin_min',40)


	MSK_NTMS=2.5

	splt_smpl_sfx_f1_plt     = kwargs.get('splt_smpl_sfx_f1_plt',None)
	splt_smpl_sfx_f2_plt     = kwargs.get('splt_smpl_sfx_f2_plt',None)
	stk_function_sfx_f1_plt  = kwargs.get('stk_function_sfx_f1_plt','med')

	stk_function    = stk_function_sfx_f1_plt[0]

	max_sep         = kwargs.get('max_sep'         ,23)


	slc_int_fg_1 = kwargs.get('slc_int_fg_1',0)
	slc_int_bg_1 = kwargs.get('slc_int_bg_1',0)
	slc_int_fg_2 = kwargs.get('slc_int_fg_2',0)
	slc_int_bg_2 = kwargs.get('slc_int_bg_2',0)

	int_typ_spl_1 = kwargs.get('int_typ_spl_1',None)
	int_typ_spl_2 = kwargs.get('int_typ_spl_2',None)
	n_int_spt_1   = kwargs.get('n_int_spt_1',None)
	n_int_spt_2   = kwargs.get('n_int_spt_2',None)

	SNR_LINES       = kwargs.get('SNR_LINES'       ,23)
	show_legends    = kwargs.get('show_legends'    , True)

	plt_stk_med   = kwargs.get('plt_stk_med'       , True)
	plt_stk_avg   = kwargs.get('plt_stk_avg'       , True)
	plt_stk_avw   = kwargs.get('plt_stk_avw'       , True)

	aaxs_Idp_ml_y   = kwargs.get('aaxs_Idp_ml_y', False)

	splt_smpl_sfx   = kwargs.get('splt_smpl_sfx',None)
	splt_smpl_sfx_f = kwargs.get('splt_smpl_sfx_f',None)
	splt_smpl_unt   = kwargs.get('splt_smpl_unt',None)
	splt_smpl_unl   = kwargs.get('splt_smpl_unl',None)
	sep_lin_min     = kwargs.get('sep_lin_min',40)

	print
	print colored('OLD','yellow')
	print


	###########
	####OLD####
	###########

	plt_ind_spec    = kwargs.get('plt_ind_spec' ,False)
	verbose         = kwargs.get('verbose'      ,True)

	autoaxis_Idp    = kwargs.get('autoaxis_Idp' ,True)
	min_y_lim_Idp   = kwargs.get('min_y_lim_Idp', 0.5)
	max_y_lim_Idp   = kwargs.get('max_y_lim_Idp', 1.5)

	min_x_lim_Idp   = kwargs.get('min_x_lim_Idp', 1200)
	max_x_lim_Idp   = kwargs.get('max_x_lim_Idp', 1750)

	autoaxis_Ctb    = kwargs.get('autoaxis_Ctb' ,False)
	only_stt_tbl    = kwargs.get('only_stt_tbl' ,False)

	plt_cnt_stk_spc = kwargs.get('plt_cnt_stk_spc' ,False)

	wgt_typ         = kwargs.get('wgt_typ'         ,None)

	max_sep         = kwargs.get('max_sep'         ,23)

	####################DEFINE-INTERVALS-FOR-PLOTTING####################
	int_typ_spl     = kwargs.get('int_typ_spl','sep_as')
	n_int_spt       = kwargs.get('n_int_spt',False)
	lower_shift     = kwargs.get('lower_shift',False)
	upper_shift     = kwargs.get('upper_shift',False)
	print
	print int_typ_spl
	print n_int_spt
	print max_sep
	print
	print
	print colored('Using ' + str(len(LINES[0])) + ' lines in the range ' +str(lmb_min_lim) +'-'+str(lmb_max_lim),'yellow') 
	print "\n".join([lineinrange[0] + '-' +str(lineinrange[1]) for lineinrange in zip(LINES[4],LINES[0])])
	print

	####################DEFINE-INTERVALS-FOR-PLOTTING####################
	for interval_range in range(len(Mltp_Spec_Files_2b_Plot_Bg)):
		F = [
		ind_stk_res+str(Mltp_Spec_Files_2b_Plot_Fg[interval_range]).rsplit('/',1)[1] + '.txt',      #0
		ind_stk_res+str(Mltp_Spec_Files_2b_Plot_Fg[interval_range]).rsplit('/',1)[1] + '.txt',      #1
		str(Mltp_Spec_Files_2b_Plot_Fg[interval_range]) + '-stk-med.fits',      #2 
		str(Mltp_Spec_Files_2b_Plot_Fg[interval_range]) + '-stk-avg.fits',      #3 
		str(Mltp_Spec_Files_2b_Plot_Fg[interval_range]) + '-stk-sum.fits',      #4 
		str(Mltp_Spec_Files_2b_Plot_Fg[interval_range]) + '-stk-std.fits',      #5 
		str(Mltp_Spec_Files_2b_Plot_Fg[interval_range]) + '-stk-hst.fits',      #6 
		str(Mltp_Spec_Files_2b_Plot_Fg[interval_range]) + '-stk-1sl.fits',      #7 
		str(Mltp_Spec_Files_2b_Plot_Fg[interval_range]) + '-stk-1sh.fits',      #8 
		str(Mltp_Spec_Files_2b_Plot_Fg[interval_range]) + '-stk-2sl.fits',      #9 
		str(Mltp_Spec_Files_2b_Plot_Fg[interval_range]) + '-stk-2sh.fits',      #10
		str(Mltp_Spec_Files_2b_Plot_Fg[interval_range]) + '-stk-3sl.fits',      #11
		str(Mltp_Spec_Files_2b_Plot_Fg[interval_range]) + '-stk-3sh.fits',      #12
		str(Mltp_Spec_Files_2b_Plot_Fg[interval_range]) + '-stk-p25.fits',      #13
		str(Mltp_Spec_Files_2b_Plot_Fg[interval_range]) + '-stk-p75.fits',      #14
		str(Mltp_Spec_Files_2b_Plot_Fg[interval_range]) + '-stk-rms.fits',      #15
		str(Mltp_Spec_Files_2b_Plot_Fg[interval_range]) + '-stk-avw.fits',      #16
		str(Mltp_Spec_Files_2b_Plot_Fg[interval_range]) + '-stk-suw.fits',      #17
		str(Mltp_Spec_Files_2b_Plot_Fg[interval_range]) + '-stk-hsw.fits',      #18
		str(Mltp_Spec_Files_2b_Plot_Fg[interval_range]) + '-stk-wsu.fits',      #19
		str(Mltp_Spec_Files_2b_Plot_Fg[interval_range]) + '-stk-med-c.fits',    #20
		str(Mltp_Spec_Files_2b_Plot_Fg[interval_range]) + '-stk-avg-c.fits',    #21
		str(Mltp_Spec_Files_2b_Plot_Fg[interval_range]) + '-stk-sum-c.fits',    #22
		str(Mltp_Spec_Files_2b_Plot_Fg[interval_range]) + '-stk-std-c.fits',    #23
		str(Mltp_Spec_Files_2b_Plot_Fg[interval_range]) + '-stk-rms-c.fits',    #24
		str(Mltp_Spec_Files_2b_Plot_Fg[interval_range]) + '-stk-avw-c.fits',    #25
		str(Mltp_Spec_Files_2b_Plot_Fg[interval_range]) + '-stk-suw-c.fits',    #26
		str(Mltp_Spec_Files_2b_Plot_Fg[interval_range]) + '-stk-med-smt.fits',  #27
		str(Mltp_Spec_Files_2b_Plot_Fg[interval_range]) + '-stk-avg-smt.fits',  #28
		str(Mltp_Spec_Files_2b_Plot_Fg[interval_range]) + '-stk-sum-smt.fits',  #29
		str(Mltp_Spec_Files_2b_Plot_Fg[interval_range]) + '-stk-avw-smt.fits',  #30
		str(Mltp_Spec_Files_2b_Plot_Fg[interval_range]) + '-stk-suw-smt.fits',  #31
		str(Mltp_Spec_Files_2b_Plot_Fg[interval_range]) + '-stk-med-c-smt.fits',#32
		str(Mltp_Spec_Files_2b_Plot_Fg[interval_range]) + '-stk-avg-c-smt.fits',#33
		str(Mltp_Spec_Files_2b_Plot_Fg[interval_range]) + '-stk-sum-c-smt.fits',#34
		str(Mltp_Spec_Files_2b_Plot_Fg[interval_range]) + '-stk-avw-c-smt.fits',#35
		str(Mltp_Spec_Files_2b_Plot_Fg[interval_range]) + '-stk-suw-c-smt.fits',#36
		]
		B = [
		ind_stk_res + str(Mltp_Spec_Files_2b_Plot_Bg[interval_range]).rsplit('/',1)[1] + '.txt',      #0 
		ind_stk_res + str(Mltp_Spec_Files_2b_Plot_Bg[interval_range]).rsplit('/',1)[1] + '.txt',      #1 
		str(Mltp_Spec_Files_2b_Plot_Bg[interval_range]) + '-stk-med.fits',      #2 
		str(Mltp_Spec_Files_2b_Plot_Bg[interval_range]) + '-stk-avg.fits',      #3 
		str(Mltp_Spec_Files_2b_Plot_Bg[interval_range]) + '-stk-sum.fits',      #4 
		str(Mltp_Spec_Files_2b_Plot_Bg[interval_range]) + '-stk-std.fits',      #5 
		str(Mltp_Spec_Files_2b_Plot_Bg[interval_range]) + '-stk-hst.fits',      #6 
		str(Mltp_Spec_Files_2b_Plot_Bg[interval_range]) + '-stk-1sl.fits',      #7 
		str(Mltp_Spec_Files_2b_Plot_Bg[interval_range]) + '-stk-1sh.fits',      #8 
		str(Mltp_Spec_Files_2b_Plot_Bg[interval_range]) + '-stk-2sl.fits',      #9 
		str(Mltp_Spec_Files_2b_Plot_Bg[interval_range]) + '-stk-2sh.fits',      #10
		str(Mltp_Spec_Files_2b_Plot_Bg[interval_range]) + '-stk-3sl.fits',      #11
		str(Mltp_Spec_Files_2b_Plot_Bg[interval_range]) + '-stk-3sh.fits',      #12
		str(Mltp_Spec_Files_2b_Plot_Bg[interval_range]) + '-stk-p25.fits',      #13
		str(Mltp_Spec_Files_2b_Plot_Bg[interval_range]) + '-stk-p75.fits',      #14
		str(Mltp_Spec_Files_2b_Plot_Bg[interval_range]) + '-stk-rms.fits',      #15
		str(Mltp_Spec_Files_2b_Plot_Bg[interval_range]) + '-stk-avw.fits',      #16
		str(Mltp_Spec_Files_2b_Plot_Bg[interval_range]) + '-stk-suw.fits',      #17
		str(Mltp_Spec_Files_2b_Plot_Bg[interval_range]) + '-stk-hsw.fits',      #18
		str(Mltp_Spec_Files_2b_Plot_Bg[interval_range]) + '-stk-wsu.fits',      #19
		str(Mltp_Spec_Files_2b_Plot_Bg[interval_range]) + '-stk-med-c.fits',    #20
		str(Mltp_Spec_Files_2b_Plot_Bg[interval_range]) + '-stk-avg-c.fits',    #21
		str(Mltp_Spec_Files_2b_Plot_Bg[interval_range]) + '-stk-sum-c.fits',    #22
		str(Mltp_Spec_Files_2b_Plot_Bg[interval_range]) + '-stk-std-c.fits',    #23
		str(Mltp_Spec_Files_2b_Plot_Bg[interval_range]) + '-stk-rms-c.fits',    #24
		str(Mltp_Spec_Files_2b_Plot_Bg[interval_range]) + '-stk-avw-c.fits',    #25
		str(Mltp_Spec_Files_2b_Plot_Bg[interval_range]) + '-stk-suw-c.fits',    #26
		str(Mltp_Spec_Files_2b_Plot_Bg[interval_range]) + '-stk-med-smt.fits',  #27
		str(Mltp_Spec_Files_2b_Plot_Bg[interval_range]) + '-stk-avg-smt.fits',  #28
		str(Mltp_Spec_Files_2b_Plot_Bg[interval_range]) + '-stk-sum-smt.fits',  #29
		str(Mltp_Spec_Files_2b_Plot_Bg[interval_range]) + '-stk-avw-smt.fits',  #30
		str(Mltp_Spec_Files_2b_Plot_Bg[interval_range]) + '-stk-suw-smt.fits',  #31
		str(Mltp_Spec_Files_2b_Plot_Bg[interval_range]) + '-stk-med-c-smt.fits',#32
		str(Mltp_Spec_Files_2b_Plot_Bg[interval_range]) + '-stk-avg-c-smt.fits',#33
		str(Mltp_Spec_Files_2b_Plot_Bg[interval_range]) + '-stk-sum-c-smt.fits',#34
		str(Mltp_Spec_Files_2b_Plot_Bg[interval_range]) + '-stk-avw-c-smt.fits',#35
		str(Mltp_Spec_Files_2b_Plot_Bg[interval_range]) + '-stk-suw-c-smt.fits',#36
		]
		
		F_tbl = frg_dir_res + str(Mltp_Spec_Files_2b_Plot_Fg[interval_range]).rsplit('/',1)[1] + '.csv'      #0
		B_tbl = bkg_dir_res + str(Mltp_Spec_Files_2b_Plot_Bg[interval_range]).rsplit('/',1)[1] + '.csv'      #0 

		if only_stt_tbl == True:
			if os.path.exists(F[0])==True and os.path.exists(B[0])==True:
				stats_table(F_tbl,tbl_format_opt)
				stats_table(B_tbl,tbl_format_opt)
			elif os.path.exists(B[0])==False:#not os.path.exists(B[interval_range]) == False:
				print
				print colored('No such prefix exists: ' + str(prefix_B) ,'yellow')
				print colored('Neither file:          ' + str(B[0]),'yellow')
				print
				pass

				print
				print colored('No such prefix exists: ' + str(prefix_F) ,'yellow')
				print colored('Neither file:          ' + str(F[0]),'yellow')
				print
				pass
			elif os.path.exists(F[0])==False:#not os.path.exists(B[interval_range]) == False:
				print
				print colored('No such prefix exists: ' + str(prefix_B) ,'yellow')
				print colored('Neither file:          ' + str(B[0]),'yellow')
				print
				pass

				print
				print colored('No such prefix exists: ' + str(prefix_F) ,'yellow')
				print colored('Neither file:          ' + str(F[0]),'yellow')
				print
				pass
		
		elif only_stt_tbl == False:
			if os.path.exists(F[0])==True and os.path.exists(B[0])==True:
				Plot_Idp_Spc(F,verbose=verbose,autoaxis_Idp=autoaxis_Idp,min_x_lim_Idp=min_x_lim_Idp,max_x_lim_Idp=max_x_lim_Idp,min_y_lim_Idp=min_y_lim_Idp,max_y_lim_Idp=max_y_lim_Idp,cont_plot=True ,smth_plot=True ,SNR_LINES=SNR_LINES,show_legends=show_legends,plt_stk_med = plt_stk_med, plt_stk_avg = plt_stk_avg, plt_stk_avw = plt_stk_avw,aaxs_Idp_ml_y = aaxs_Idp_ml_y,splt_smpl_sfx=splt_smpl_sfx,splt_smpl_sfx_f=splt_smpl_sfx_f,splt_smpl_unt=splt_smpl_unt,splt_smpl_unl=splt_smpl_unl,sep_lin_min=sep_lin_min)
				Plot_Idp_Spc(F,verbose=verbose,autoaxis_Idp=autoaxis_Idp,min_x_lim_Idp=min_x_lim_Idp,max_x_lim_Idp=max_x_lim_Idp,min_y_lim_Idp=min_y_lim_Idp,max_y_lim_Idp=max_y_lim_Idp,cont_plot=True ,smth_plot=False,SNR_LINES=SNR_LINES,show_legends=show_legends,plt_stk_med = plt_stk_med, plt_stk_avg = plt_stk_avg, plt_stk_avw = plt_stk_avw,aaxs_Idp_ml_y = aaxs_Idp_ml_y,splt_smpl_sfx=splt_smpl_sfx,splt_smpl_sfx_f=splt_smpl_sfx_f,splt_smpl_unt=splt_smpl_unt,splt_smpl_unl=splt_smpl_unl,sep_lin_min=sep_lin_min)
				Plot_Idp_Spc(F,verbose=verbose,autoaxis_Idp=autoaxis_Idp,min_x_lim_Idp=min_x_lim_Idp,max_x_lim_Idp=max_x_lim_Idp,min_y_lim_Idp=min_y_lim_Idp,max_y_lim_Idp=max_y_lim_Idp,cont_plot=False,smth_plot=True ,SNR_LINES=SNR_LINES,show_legends=show_legends,plt_stk_med = plt_stk_med, plt_stk_avg = plt_stk_avg, plt_stk_avw = plt_stk_avw,aaxs_Idp_ml_y = aaxs_Idp_ml_y,splt_smpl_sfx=splt_smpl_sfx,splt_smpl_sfx_f=splt_smpl_sfx_f,splt_smpl_unt=splt_smpl_unt,splt_smpl_unl=splt_smpl_unl,sep_lin_min=sep_lin_min)
				Plot_Idp_Spc(F,verbose=verbose,autoaxis_Idp=autoaxis_Idp,min_x_lim_Idp=min_x_lim_Idp,max_x_lim_Idp=max_x_lim_Idp,min_y_lim_Idp=min_y_lim_Idp,max_y_lim_Idp=max_y_lim_Idp,cont_plot=False,smth_plot=False,SNR_LINES=SNR_LINES,show_legends=show_legends,plt_stk_med = plt_stk_med, plt_stk_avg = plt_stk_avg, plt_stk_avw = plt_stk_avw,aaxs_Idp_ml_y = aaxs_Idp_ml_y,splt_smpl_sfx=splt_smpl_sfx,splt_smpl_sfx_f=splt_smpl_sfx_f,splt_smpl_unt=splt_smpl_unt,splt_smpl_unl=splt_smpl_unl,sep_lin_min=sep_lin_min)
				Plot_Idp_Spc(B,verbose=verbose,autoaxis_Idp=autoaxis_Idp,min_x_lim_Idp=min_x_lim_Idp,max_x_lim_Idp=max_x_lim_Idp,min_y_lim_Idp=min_y_lim_Idp,max_y_lim_Idp=max_y_lim_Idp,cont_plot=True ,smth_plot=True ,SNR_LINES=SNR_LINES,show_legends=show_legends,plt_stk_med = plt_stk_med, plt_stk_avg = plt_stk_avg, plt_stk_avw = plt_stk_avw,aaxs_Idp_ml_y = aaxs_Idp_ml_y,splt_smpl_sfx=splt_smpl_sfx,splt_smpl_sfx_f=splt_smpl_sfx_f,splt_smpl_unt=splt_smpl_unt,splt_smpl_unl=splt_smpl_unl,sep_lin_min=sep_lin_min)
				Plot_Idp_Spc(B,verbose=verbose,autoaxis_Idp=autoaxis_Idp,min_x_lim_Idp=min_x_lim_Idp,max_x_lim_Idp=max_x_lim_Idp,min_y_lim_Idp=min_y_lim_Idp,max_y_lim_Idp=max_y_lim_Idp,cont_plot=True ,smth_plot=False,SNR_LINES=SNR_LINES,show_legends=show_legends,plt_stk_med = plt_stk_med, plt_stk_avg = plt_stk_avg, plt_stk_avw = plt_stk_avw,aaxs_Idp_ml_y = aaxs_Idp_ml_y,splt_smpl_sfx=splt_smpl_sfx,splt_smpl_sfx_f=splt_smpl_sfx_f,splt_smpl_unt=splt_smpl_unt,splt_smpl_unl=splt_smpl_unl,sep_lin_min=sep_lin_min)
				Plot_Idp_Spc(B,verbose=verbose,autoaxis_Idp=autoaxis_Idp,min_x_lim_Idp=min_x_lim_Idp,max_x_lim_Idp=max_x_lim_Idp,min_y_lim_Idp=min_y_lim_Idp,max_y_lim_Idp=max_y_lim_Idp,cont_plot=False,smth_plot=True ,SNR_LINES=SNR_LINES,show_legends=show_legends,plt_stk_med = plt_stk_med, plt_stk_avg = plt_stk_avg, plt_stk_avw = plt_stk_avw,aaxs_Idp_ml_y = aaxs_Idp_ml_y,splt_smpl_sfx=splt_smpl_sfx,splt_smpl_sfx_f=splt_smpl_sfx_f,splt_smpl_unt=splt_smpl_unt,splt_smpl_unl=splt_smpl_unl,sep_lin_min=sep_lin_min)
				Plot_Idp_Spc(B,verbose=verbose,autoaxis_Idp=autoaxis_Idp,min_x_lim_Idp=min_x_lim_Idp,max_x_lim_Idp=max_x_lim_Idp,min_y_lim_Idp=min_y_lim_Idp,max_y_lim_Idp=max_y_lim_Idp,cont_plot=False,smth_plot=False,SNR_LINES=SNR_LINES,show_legends=show_legends,plt_stk_med = plt_stk_med, plt_stk_avg = plt_stk_avg, plt_stk_avw = plt_stk_avw,aaxs_Idp_ml_y = aaxs_Idp_ml_y,splt_smpl_sfx=splt_smpl_sfx,splt_smpl_sfx_f=splt_smpl_sfx_f,splt_smpl_unt=splt_smpl_unt,splt_smpl_unl=splt_smpl_unl,sep_lin_min=sep_lin_min)
				if plt_cnt_stk_spc == True:
					Plot_Ctb_Spc(F,verbose=verbose,autoaxis_Idp=autoaxis_Ctb,min_x_lim_Idp=min_x_lim_Idp,max_x_lim_Idp=max_x_lim_Idp,min_y_lim_Idp=min_y_lim_Idp,max_y_lim_Idp=max_y_lim_Idp,cont_plot=True ,smth_plot=True ,wgt_typ=wgt_typ)
					Plot_Ctb_Spc(F,verbose=verbose,autoaxis_Idp=autoaxis_Ctb,min_x_lim_Idp=min_x_lim_Idp,max_x_lim_Idp=max_x_lim_Idp,min_y_lim_Idp=min_y_lim_Idp,max_y_lim_Idp=max_y_lim_Idp,cont_plot=True ,smth_plot=False,wgt_typ=wgt_typ)
					Plot_Ctb_Spc(F,verbose=verbose,autoaxis_Idp=autoaxis_Ctb,min_x_lim_Idp=min_x_lim_Idp,max_x_lim_Idp=max_x_lim_Idp,min_y_lim_Idp=min_y_lim_Idp,max_y_lim_Idp=max_y_lim_Idp,cont_plot=False,smth_plot=True ,wgt_typ=wgt_typ)
					Plot_Ctb_Spc(F,verbose=verbose,autoaxis_Idp=autoaxis_Ctb,min_x_lim_Idp=min_x_lim_Idp,max_x_lim_Idp=max_x_lim_Idp,min_y_lim_Idp=min_y_lim_Idp,max_y_lim_Idp=max_y_lim_Idp,cont_plot=False,smth_plot=False,wgt_typ=wgt_typ)
					Plot_Ctb_Spc(B,verbose=verbose,autoaxis_Idp=autoaxis_Ctb,min_x_lim_Idp=min_x_lim_Idp,max_x_lim_Idp=max_x_lim_Idp,min_y_lim_Idp=min_y_lim_Idp,max_y_lim_Idp=max_y_lim_Idp,cont_plot=True ,smth_plot=True ,wgt_typ=wgt_typ)
					Plot_Ctb_Spc(B,verbose=verbose,autoaxis_Idp=autoaxis_Ctb,min_x_lim_Idp=min_x_lim_Idp,max_x_lim_Idp=max_x_lim_Idp,min_y_lim_Idp=min_y_lim_Idp,max_y_lim_Idp=max_y_lim_Idp,cont_plot=True ,smth_plot=False,wgt_typ=wgt_typ)
					Plot_Ctb_Spc(B,verbose=verbose,autoaxis_Idp=autoaxis_Ctb,min_x_lim_Idp=min_x_lim_Idp,max_x_lim_Idp=max_x_lim_Idp,min_y_lim_Idp=min_y_lim_Idp,max_y_lim_Idp=max_y_lim_Idp,cont_plot=False,smth_plot=True ,wgt_typ=wgt_typ)
					Plot_Ctb_Spc(B,verbose=verbose,autoaxis_Idp=autoaxis_Ctb,min_x_lim_Idp=min_x_lim_Idp,max_x_lim_Idp=max_x_lim_Idp,min_y_lim_Idp=min_y_lim_Idp,max_y_lim_Idp=max_y_lim_Idp,cont_plot=False,smth_plot=False,wgt_typ=wgt_typ)
					#Plot_2Spc(F[3] ,B[3] ,autoaxis=False,verbose=verbose,clr1='red',clr2='blue')
					#Plot_2Spc(F[19],B[19],autoaxis=False,verbose=verbose,clr1='red',clr2='blue')
				else:
					pass
				stats_table(F_tbl,tbl_format_opt)
				stats_table(B_tbl,tbl_format_opt)
				'''

				print
				files = np.loadtxt(str(B[0]),dtype=str)
				widgets = ['Generating individual plots for  '+ str(len(files)) + ' galaxies, belonging to category:  ' + str(interval_range+1) + '   ', 
				Percentage(), ' ', Bar(marker='*',left='[',right=']'),
				' ', ETA(), ' ', FileTransferSpeed()] #see docs for other options
				pbar2    = ProgressBar(widgets=widgets, maxval=len(files))
				pbar2.start()	
				for galaxy in range(len(files)):
					spectrum1 = files[galaxy]
					spectrum2 = (str(files[galaxy]).split('-int')[0])+'.fits'
					if plt_ind_spec == True:
						print
						Plot_Step_Spc(spectrum1      ,
										dest_dir     = slc_sep_int_bg[0][interval_range],
										autoaxis     = True                             ,
										verbose      = verbose,
										wgt_typ      = wgt_typ,
										min_x_lim_Idp= min_x_lim_Idp,max_x_lim_Idp=max_x_lim_Idp,
										min_y_lim_Idp= min_y_lim_Idp,max_y_lim_Idp=max_y_lim_Idp)
						Plot_1Spc(spectrum1          ,
										dest_dir     = slc_sep_int_bg[0][interval_range],
										autoaxis     = False                            ,
										verbose      = verbose,
										wgt_typ      = wgt_typ,
										min_x_lim_Idp= min_x_lim_Idp,max_x_lim_Idp=max_x_lim_Idp,
										min_y_lim_Idp= min_y_lim_Idp,max_y_lim_Idp=max_y_lim_Idp)
						Plot_2Spc(spectrum2,spectrum1,
										dest_dir     = slc_sep_int_bg[0][interval_range],
										autoaxis     = False                            ,
										verbose      = verbose,
										min_x_lim_Idp= min_x_lim_Idp,max_x_lim_Idp=max_x_lim_Idp,
										min_y_lim_Idp= min_y_lim_Idp,max_y_lim_Idp=max_y_lim_Idp)
						print
					elif plt_ind_spec == False:
						pass
					pbar2.update(galaxy)
				pbar2.finish()
				'''
			elif os.path.exists(B[0])==False:#not os.path.exists(B[interval_range]) == False:
				print
				#print colored('No such prefix exists: ' + str(prefix_B) ,'yellow')
				print colored('No such file:          ' + str(B[0]),'yellow')
				print
				pass
			elif os.path.exists(F[0])==False:#not os.path.exists(B[interval_range]) == False:
				print
				#print colored('No such prefix exists: ' + str(prefix_F) ,'yellow')
				print colored('No such file:          ' + str(F[0]),'yellow')
				print
				pass



	###########
	####OLD####
	###########

def Plot_Idp_Spc_Lne(int_typ_spl,n_int_spt,*args, **kwargs):
	z_glx_Ps      = kwargs.get('z_glx_Ps'    ,0)
	dest_dir      = kwargs.get('dest_dir'    , None)
	verbose       = kwargs.get('verbose'     , False)
	epssave       = kwargs.get('epssave'     , False)
	showplot      = kwargs.get('showplot'    , False) 

	autoaxis_Idp  = kwargs.get('autoaxis_Idp', False)
	#min_y_lim_Idp = kwargs.get('min_y_lim'   , 0.5)
	#max_y_lim_Idp = kwargs.get('max_y_lim'   , 1.5)

	lmb_min       = kwargs.get('lmb_min',1200)
	lmb_max       = kwargs.get('lmb_max',1700)

	lmb_min_lim   = lmb_min
	lmb_max_lim   = lmb_max

	upper_shift   = kwargs.get('upper_shift',0)
	lower_shift   = kwargs.get('lower_shift',0)
	stk_function  = kwargs.get('stk_function','med')

	fit_fnct      = kwargs.get('fit_fnct','gauss')
	fit_type      = kwargs.get('fit_type','lmfit')
	pre_off_plt   = kwargs.get('pre_off_plt',False)
	dest_dir      = kwargs.get('dest_dir',None)

	max_sep        = kwargs.get('max_sep',23)
	ofs_ctr_fit    = kwargs.get('ofs_ctr_fit',False)

	stk_fct        = kwargs.get('stk_fct','med')
	fpt_background = kwargs.get('fpt_background' , True)
	fpt_foreground = kwargs.get('fpt_foreground', False)

	int_vlf_hdr    = kwargs.get('int_vlf_hdr',True)
	fit_vls_hdr    = kwargs.get('fit_vls_hdr',True)
	uft_lne_vls    = kwargs.get('uft_lne_vls',False)

	cnt_bnp_adj    = kwargs.get('cnt_bnp_adj',False)

	fix_ctr_gau    = kwargs.get('fix_ctr_gau',True)
	fix_pre_gau    = kwargs.get('fix_pre_gau',True)
	fix_pst_gau    = kwargs.get('fix_pst_gau',True)
	pre_shf_lim    = kwargs.get('pre_shf_lim',5 )
	pst_shf_lim    = kwargs.get('pst_shf_lim',15)
	pre_shf_ctr    = kwargs.get('pre_shf_ctr',2.5 )
	pst_shf_ctr    = kwargs.get('pst_shf_ctr',20)

	ivl_fts_hdr    = kwargs.get('ivl_fts_hdr',False)
	mke_lne_fit    = kwargs.get('mke_lne_fit',False)

	fix_ctr_gau_1  = kwargs.get('fix_ctr_gau_1',True) 
	fix_ctr_gau_2  = kwargs.get('fix_ctr_gau_2',True) 
	fix_mdl_gau    = kwargs.get('fix_mdl_gau',True)
	mdl_shf_ctr    = kwargs.get('mdl_shf_ctr',1 )
	mdl_shf_lim    = kwargs.get('mdl_shf_lim',5)

	if int_typ_spl == 'kpc' and n_int_spt == 0:#in specfile_glx:
		splt_smpl_sfx = '_kpc'
		splt_smpl_sfx_f = '_kpc_F'
		splt_smpl_unt = 'kpc'
		splt_smpl_unl = 'kpc'
		slc_kpc_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv)
		slc_kpc_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv)
		slc_int_fg = slc_kpc_int_fg[1]
		slc_int_bg = slc_kpc_int_bg[1]
	elif int_typ_spl == 'kpc' and n_int_spt == 1:#in specfile_glx:
		splt_smpl_sfx = '_kpc'
		splt_smpl_sfx_f = '_kpc_F'
		splt_smpl_unt = 'kpc'
		splt_smpl_unl = 'kpc'
		slc_kpc_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_2)
		slc_kpc_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_2)
		slc_int_fg = slc_kpc_int_fg[1]
		slc_int_bg = slc_kpc_int_bg[1]
	elif int_typ_spl == 'kpc' and n_int_spt == 2:#in specfile_glx:
		splt_smpl_sfx = '_kpc'
		splt_smpl_sfx_f = '_kpc_F'
		splt_smpl_unt = 'kpc'
		splt_smpl_unl = 'kpc'
		slc_kpc_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_3)
		slc_kpc_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_3)
		slc_int_fg = slc_kpc_int_fg[1]
		slc_int_bg = slc_kpc_int_bg[1]
	elif int_typ_spl == 'kpc' and n_int_spt == 3:#in specfile_glx:
		splt_smpl_sfx = '_kpc'
		splt_smpl_sfx_f = '_kpc_F'
		splt_smpl_unt = 'kpc'
		splt_smpl_unl = 'kpc'
		slc_kpc_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_4)
		slc_kpc_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_4)
		slc_int_fg = slc_kpc_int_fg[1]
		slc_int_bg = slc_kpc_int_bg[1]	
	elif int_typ_spl == 'kpc' and n_int_spt == 4:#in specfile_glx:
		splt_smpl_sfx = '_kpc'
		splt_smpl_sfx_f = '_kpc_F'
		splt_smpl_unt = 'kpc'
		splt_smpl_unl = 'kpc'
		slc_int_fg = slc_kpc_int_fg[1]
		slc_int_bg = slc_kpc_int_bg[1]	
	elif int_typ_spl == 'mass' and n_int_spt == 0:# in specfile_glx:
		splt_smpl_sfx = '-mass'
		splt_smpl_sfx_f = '-mass_F'
		splt_smpl_unt = 'mass'
		splt_smpl_unl = 'log[M/M$_{\odot}$]'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv)
		slc_int_fg = slc_mss_int_fg[1]
		slc_int_bg = slc_mss_int_bg[1]
	elif int_typ_spl == 'mass'  and n_int_spt == 1 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '-mass'
		splt_smpl_sfx_f = '-mass_F'
		splt_smpl_unt = 'mass'
		splt_smpl_unl = 'log[M/M$_{\odot}$]'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_1)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_1)			
		slc_int_fg = slc_mss_int_fg[1]
		slc_int_bg = slc_mss_int_bg[1]
	elif int_typ_spl == 'mass'  and n_int_spt == 2 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '-mass'
		splt_smpl_sfx_f = '-mass_F'
		splt_smpl_unt = 'mass'
		splt_smpl_unl = 'log[M/M$_{\odot}$]'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_2)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_2)			
		slc_int_fg = slc_mss_int_fg[1]
		slc_int_bg = slc_mss_int_bg[1]
	elif int_typ_spl == 'mass'  and n_int_spt == 3 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '-mass'
		splt_smpl_sfx_f = '-mass_F'
		splt_smpl_unt = 'mass'
		splt_smpl_unl = 'log[M/M$_{\odot}$]'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_3)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_3)			
		slc_int_fg = slc_mss_int_fg[1]
		slc_int_bg = slc_mss_int_bg[1]
	elif int_typ_spl == 'mass' and n_int_spt == 4 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '-mass'
		splt_smpl_sfx_f = '-mass_F'
		splt_smpl_unt = 'mass'
		splt_smpl_unl = 'log[M/M$_{\odot}$]'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_4)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_4)
		slc_int_fg = slc_mss_int_fg[1]
		slc_int_bg = slc_mss_int_bg[1]
	elif int_typ_spl == 'Age' and n_int_spt == 0:#in specfile_glx:
		splt_smpl_sfx = '-Age'
		splt_smpl_sfx_f = '-Age_F'
		splt_smpl_unt = 'Age'
		splt_smpl_unl = 'Age'
		slc_age_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv)
		slc_age_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv)
		slc_int_fg = slc_age_int_fg[1]
		slc_int_bg = slc_age_int_bg[1]
	elif int_typ_spl == 'Age' and n_int_spt == 1 and max_sep ==23:#in specfile_glx:
		splt_smpl_sfx = '-Age'
		splt_smpl_sfx_f = '-Age_F'
		splt_smpl_unt = 'Age'
		splt_smpl_unl = 'Age'
		slc_age_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_1)
		slc_age_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_1)
		slc_int_fg = slc_age_int_fg[1]
		slc_int_bg = slc_age_int_bg[1]
	elif int_typ_spl == 'Age' and n_int_spt == 2 and max_sep ==23:#in specfile_glx:
		splt_smpl_sfx = '-Age'
		splt_smpl_sfx_f = '-Age_F'
		splt_smpl_unt = 'Age'
		splt_smpl_unl = 'Age'
		slc_age_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_2)
		slc_age_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_2)
		slc_int_fg = slc_age_int_fg[1]
		slc_int_bg = slc_age_int_bg[1]
	elif int_typ_spl == 'Age' and n_int_spt == 3 and max_sep ==23:#in specfile_glx:
		splt_smpl_sfx = '-Age'
		splt_smpl_sfx_f = '-Age_F'
		splt_smpl_unt = 'Age'
		splt_smpl_unl = 'Age'
		slc_age_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_3)
		slc_age_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_3)
		slc_int_fg = slc_age_int_fg[1]
		slc_int_bg = slc_age_int_bg[1]
	elif int_typ_spl == 'Age' and n_int_spt == 4 and max_sep ==23:#in specfile_glx:
		splt_smpl_sfx = '-Age'
		splt_smpl_sfx_f = '-Age_F'
		splt_smpl_unt = 'Age'
		splt_smpl_unl = 'Age'
		slc_age_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_4)
		slc_age_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_4)
		slc_int_fg = slc_age_int_fg[1]
		slc_int_bg = slc_age_int_bg[1]						
	elif int_typ_spl == 'SFR' and n_int_spt == 0:#in specfile_glx:
		splt_smpl_sfx   = '-SFR' 
		splt_smpl_sfx_f = '-SFR_F'
		splt_smpl_unt   = 'M$_{\odot}$yr$^{-1}$'
		splt_smpl_unl   = 'M$_{\odot}$yr$^{-1}$'
		slc_sfr_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv)
		slc_sfr_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv)
		slc_int_fg = slc_sfr_int_fg[1]
		slc_int_bg = slc_sfr_int_bg[1]
	elif int_typ_spl == 'SFR' and n_int_spt == 1 and max_sep ==23:#in specfile_glx:
		splt_smpl_sfx   = '-SFR' 
		splt_smpl_sfx_f = '-SFR_F'
		splt_smpl_unt   = 'M$_{\odot}$yr$^{-1}$'
		splt_smpl_unl   = 'M$_{\odot}$yr$^{-1}$'
		slc_sfr_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_1)
		slc_sfr_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_1)
		slc_int_fg = slc_sfr_int_fg[1]
		slc_int_bg = slc_sfr_int_bg[1]
	elif int_typ_spl == 'SFR' and n_int_spt == 2 and max_sep ==23:#in specfile_glx:
		splt_smpl_sfx   = '-SFR' 
		splt_smpl_sfx_f = '-SFR_F'
		splt_smpl_unt   = 'M$_{\odot}$yr$^{-1}$'
		splt_smpl_unl   = 'M$_{\odot}$yr$^{-1}$'
		slc_sfr_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_2)
		slc_sfr_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_2)
		slc_int_fg = slc_sfr_int_fg[1]
		slc_int_bg = slc_sfr_int_bg[1]
	elif int_typ_spl == 'SFR' and n_int_spt == 3 and max_sep ==23:#in specfile_glx:
		splt_smpl_sfx   = '-SFR' 
		splt_smpl_sfx_f = '-SFR_F'
		splt_smpl_unt   = 'M$_{\odot}$yr$^{-1}$'
		splt_smpl_unl   = 'M$_{\odot}$yr$^{-1}$'
		slc_sfr_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_3)
		slc_sfr_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_3)
		slc_int_fg = slc_sfr_int_fg[1]
		slc_int_bg = slc_sfr_int_bg[1]
	elif int_typ_spl == 'SFR' and n_int_spt == 4 and max_sep ==23:#in specfile_glx:
		splt_smpl_sfx   = '-SFR' 
		splt_smpl_sfx_f = '-SFR_F'
		splt_smpl_unt   = 'M$_{\odot}$yr$^{-1}$'
		splt_smpl_unl   = 'M$_{\odot}$yr$^{-1}$'
		slc_sfr_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_4)
		slc_sfr_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_4)
		slc_int_fg = slc_sfr_int_fg[1]
		slc_int_bg = slc_sfr_int_bg[1]
	elif int_typ_spl == 'sSFR' and n_int_spt == 0:# in specfile_glx:
		splt_smpl_sfx = '-sSFR'
		splt_smpl_sfx_f = '-sSFR_F'
		splt_smpl_unt = 'sSFR'
		splt_smpl_unl = 'sSFR'
		slc_ssf_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv)
		slc_ssf_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv)
		slc_int_fg = slc_ssf_int_fg[1]
		slc_int_bg = slc_ssf_int_bg[1]
	elif int_typ_spl == 'sSFR' and n_int_spt == 1 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '-sSFR'
		splt_smpl_sfx_f = '-sSFR_F'
		splt_smpl_unt = 'sSFR'
		splt_smpl_unl = 'sSFR'
		slc_ssf_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_1)
		slc_ssf_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_1)
		slc_int_fg = slc_ssf_int_fg[1]
		slc_int_bg = slc_ssf_int_bg[1]
	elif int_typ_spl == 'sSFR' and n_int_spt == 2 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '-sSFR'
		splt_smpl_sfx_f = '-sSFR_F'
		splt_smpl_unt = 'sSFR'
		splt_smpl_unl = 'sSFR'
		slc_ssf_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_2)
		slc_ssf_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_2)
		slc_int_fg = slc_ssf_int_fg[1]
		slc_int_bg = slc_ssf_int_bg[1]
	elif int_typ_spl == 'sSFR' and n_int_spt == 3 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '-sSFR'
		splt_smpl_sfx_f = '-sSFR_F'
		splt_smpl_unt = 'sSFR'
		splt_smpl_unl = 'sSFR'
		slc_ssf_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_3)
		slc_ssf_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_3)
		slc_int_fg = slc_ssf_int_fg[1]
		slc_int_bg = slc_ssf_int_bg[1]
	elif int_typ_spl == 'sSFR' and n_int_spt == 4 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '-sSFR'
		splt_smpl_sfx_f = '-sSFR_F'
		splt_smpl_unt = 'sSFR'
		splt_smpl_unl = 'sSFR'
		slc_ssf_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_4)
		slc_ssf_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_4)
		slc_int_fg = slc_ssf_int_fg[1]
		slc_int_bg = slc_ssf_int_bg[1]						
	elif int_typ_spl == 'Lnuv' and n_int_spt == 0:# in specfile_glx:
		splt_smpl_sfx = '-Lnuv'
		splt_smpl_sfx_f = '-Lnuv_F'
		splt_smpl_unt = 'Lnuv'
		splt_smpl_unl = 'Lnuv'
		slc_luv_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv)
		slc_luv_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv)
		slc_int_fg = slc_luv_int_fg[1]
		slc_int_bg = slc_luv_int_bg[1]
	elif int_typ_spl == 'Lnuv' and n_int_spt == 1 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '-Lnuv'
		splt_smpl_sfx_f = '-Lnuv_F'
		splt_smpl_unt = 'Lnuv'
		splt_smpl_unl = 'Lnuv'
		slc_luv_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_1)
		slc_luv_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_1)
		slc_int_fg = slc_luv_int_fg[1]
		slc_int_bg = slc_luv_int_bg[1]
	elif int_typ_spl == 'Lnuv' and n_int_spt == 2 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '-Lnuv'
		splt_smpl_sfx_f = '-Lnuv_F'
		splt_smpl_unt = 'Lnuv'
		splt_smpl_unl = 'Lnuv'
		slc_luv_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_2)
		slc_luv_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_2)
		slc_int_fg = slc_luv_int_fg[1]
		slc_int_bg = slc_luv_int_bg[1]
	elif int_typ_spl == 'Lnuv' and n_int_spt == 3 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '-Lnuv'
		splt_smpl_sfx_f = '-Lnuv_F'
		splt_smpl_unt = 'Lnuv'
		splt_smpl_unl = 'Lnuv'
		slc_luv_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_3)
		slc_luv_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_3)
		slc_int_fg = slc_luv_int_fg[1]
		slc_int_bg = slc_luv_int_bg[1]
	elif int_typ_spl == 'Lnuv' and n_int_spt == 4 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '-Lnuv'
		splt_smpl_sfx_f = '-Lnuv_F'
		splt_smpl_unt = 'Lnuv'
		splt_smpl_unl = 'Lnuv'
		slc_luv_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_4)
		slc_luv_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_4)
		slc_int_fg = slc_luv_int_fg[1]
		slc_int_bg = slc_luv_int_bg[1]								
	elif int_typ_spl == 'sep_as' and n_int_spt == 0:# in specfile_glx:
		splt_smpl_sfx = '_as'
		splt_smpl_sfx_f = '_as_F'
		splt_smpl_unt = 'arcsec'
		splt_smpl_unl = '$^{\\prime\\prime}$'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep[1])
		slc_int_fg = slc_sep_int_fg[1]
		slc_int_bg = slc_sep_int_bg[1]
	elif int_typ_spl == 'sep_as' and n_int_spt == 1 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '_as'
		splt_smpl_sfx_f = '_as_F'
		splt_smpl_unt = 'arcsec'
		splt_smpl_unl = '$^{\\prime\\prime}$'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_1[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_1[1])
		slc_int_fg = slc_sep_int_fg[1]
		slc_int_bg = slc_sep_int_bg[1]
	elif int_typ_spl == 'sep_as' and n_int_spt == 2 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '_as'
		splt_smpl_sfx_f = '_as_F'
		splt_smpl_unt = 'arcsec'
		splt_smpl_unl = '$^{\\prime\\prime}$'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_2[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_2[1])
		slc_int_fg = slc_sep_int_fg[1]
		slc_int_bg = slc_sep_int_bg[1]
	elif int_typ_spl == 'sep_as' and n_int_spt == 3 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '_as'
		splt_smpl_sfx_f = '_as_F'
		splt_smpl_unt = 'arcsec'
		splt_smpl_unl = '$^{\\prime\\prime}$'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_3[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_3[1])
		slc_int_fg = slc_sep_int_fg[1]
		slc_int_bg = slc_sep_int_bg[1]
	elif int_typ_spl == 'sep_as' and n_int_spt == 4 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '_as'
		splt_smpl_sfx_f = '_as_F'
		splt_smpl_unt = 'arcsec'
		splt_smpl_unl = '$^{\\prime\\prime}$'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_4[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_4[1])
		slc_int_fg = slc_sep_int_fg[1]
		slc_int_bg = slc_sep_int_bg[1]
	elif int_typ_spl == 'sep_as' and n_int_spt == 5 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '_as'
		splt_smpl_sfx_f = '_as_F'
		splt_smpl_unt = 'arcsec'
		splt_smpl_unl = '$^{\\prime\\prime}$'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_5[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_5[1])
		slc_int_fg = slc_sep_int_fg[1]
		slc_int_bg = slc_sep_int_bg[1]
	elif int_typ_spl == 'sep_as' and n_int_spt == 6 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '_as'
		splt_smpl_sfx_f = '_as_F'
		splt_smpl_unt = 'arcsec'
		splt_smpl_unl = '$^{\\prime\\prime}$'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_6[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_6[1])
		slc_int_fg = slc_sep_int_fg[1]
		slc_int_bg = slc_sep_int_bg[1]
	elif int_typ_spl == 'sep_as' and n_int_spt == 1 and max_sep ==25:# in specfile_glx:
		splt_smpl_sfx = '_as'
		splt_smpl_sfx_f = '_as_F'
		splt_smpl_unt = 'arcsec'
		splt_smpl_unl = '$^{\\prime\\prime}$'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_1[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_1[1])
		slc_int_fg = slc_sep_int_fg[1]
		slc_int_bg = slc_sep_int_bg[1]
	elif int_typ_spl == 'sep_as' and n_int_spt == 2 and max_sep ==25:# in specfile_glx:
		splt_smpl_sfx = '_as'
		splt_smpl_sfx_f = '_as_F'
		splt_smpl_unt = 'arcsec'
		splt_smpl_unl = '$^{\\prime\\prime}$'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_2[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_2[1])
		slc_int_fg = slc_sep_int_fg[1]
		slc_int_bg = slc_sep_int_bg[1]
	elif int_typ_spl == 'sep_as' and n_int_spt == 3 and max_sep ==25:# in specfile_glx:
		splt_smpl_sfx = '_as'
		splt_smpl_sfx_f = '_as_F'
		splt_smpl_unt = 'arcsec'
		splt_smpl_unl = '$^{\\prime\\prime}$'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_3[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_3[1])
		slc_int_fg = slc_sep_int_fg[1]
		slc_int_bg = slc_sep_int_bg[1]
	elif int_typ_spl == 'sep_as' and n_int_spt == 4 and max_sep ==25:# in specfile_glx:
		splt_smpl_sfx = '_as'
		splt_smpl_sfx_f = '_as_F'
		splt_smpl_unt = 'arcsec'
		splt_smpl_unl = '$^{\\prime\\prime}$'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_4[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_4[1])
		slc_int_fg = slc_sep_int_fg[1]
		slc_int_bg = slc_sep_int_bg[1]
	elif int_typ_spl == 'sep_as' and n_int_spt == 5 and max_sep ==25:# in specfile_glx:
		splt_smpl_sfx = '_as'
		splt_smpl_sfx_f = '_as_F'
		splt_smpl_unt = 'arcsec'
		splt_smpl_unl = '$^{\\prime\\prime}$'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_5[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_5[1])
		slc_int_fg = slc_sep_int_fg[1]
		slc_int_bg = slc_sep_int_bg[1]
	elif int_typ_spl == 'sep_as' and n_int_spt == 6 and max_sep ==25:# in specfile_glx:
		splt_smpl_sfx = '_as'
		splt_smpl_sfx_f = '_as_F'
		splt_smpl_unt = 'arcsec'
		splt_smpl_unl = '$^{\\prime\\prime}$'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_6[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_6[1])
		slc_int_fg = slc_sep_int_fg[1]
		slc_int_bg = slc_sep_int_bg[1]
	elif int_typ_spl == 'magi' and n_int_spt == 0:# in specfile_glx:
		splt_smpl_sfx = '_magi'
		splt_smpl_sfx_f = '-magi_F'
		splt_smpl_unt = 'arcsec'
		splt_smpl_unl = '$^{\\prime\\prime}$'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv)
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv)
		slc_int_fg = slc_sep_int_fg[1]
		slc_int_bg = slc_sep_int_bg[1]
	elif int_typ_spl == 'magi' and n_int_spt == 1:# in specfile_glx:
		splt_smpl_sfx = '_magi'
		splt_smpl_sfx_f = '-magi_F'
		splt_smpl_unt = 'mag'
		splt_smpl_unl = 'mag'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv)
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv)
		slc_int_fg = slc_sep_int_fg[1]
		slc_int_bg = slc_sep_int_bg[1]
	elif int_typ_spl == 'magi' and n_int_spt == 2 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '_magi'
		splt_smpl_sfx_f = '-magi_F'
		splt_smpl_unt = 'mag'
		splt_smpl_unl = 'mag'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_2)
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_2)
		slc_int_fg = slc_sep_int_fg[1]
		slc_int_bg = slc_sep_int_bg[1]
	elif int_typ_spl == 'magi' and n_int_spt == 3 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '_magi'
		splt_smpl_sfx_f = '-magi_F'
		splt_smpl_unt = 'mag'
		splt_smpl_unl = 'mag'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_3)
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_3)
		slc_int_fg = slc_sep_int_fg[1]
		slc_int_bg = slc_sep_int_bg[1]
	elif int_typ_spl == 'magi' and n_int_spt == 4 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx   = '_magi'
		splt_smpl_sfx_f = '-magi_F'
		splt_smpl_unt   = 'mag'
		splt_smpl_unl   = 'mag'
		slc_sep_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_4)
		slc_sep_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_4)
		slc_int_fg      = slc_sep_int_fg[1]
		slc_int_bg      = slc_sep_int_bg[1]
	elif int_typ_spl == 'phi' and n_int_spt == 0:# in specfile_glx:
		splt_smpl_sfx   = '-phi'
		splt_smpl_sfx_f = '-PHI'
		splt_smpl_unt   = 'deg'
		splt_smpl_unl   = '$^{\circ}$'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv)
		slc_int_fg      = slc_mss_int_fg[1]
		slc_int_bg      = slc_mss_int_bg[1]
	elif int_typ_spl == 'phi' and n_int_spt == 2:# in specfile_glx:
		splt_smpl_sfx   = '-phi'
		splt_smpl_sfx_f = '-PHI'
		splt_smpl_unt   = 'deg'
		splt_smpl_unl   = '$^{\circ}$'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv_23_2)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv_23_2)			
		slc_int_fg      = slc_mss_int_fg[1]
		slc_int_bg      = slc_mss_int_bg[1]
	elif int_typ_spl == 'phi' and n_int_spt == 3:# in specfile_glx:
		splt_smpl_sfx   = '-phi'
		splt_smpl_sfx_f = '-PHI'
		splt_smpl_unt   = 'deg'
		splt_smpl_unl   = '$^{\circ}$'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv_23_3)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv_23_3)			
		slc_int_fg      = slc_mss_int_fg[1]
		slc_int_bg      = slc_mss_int_bg[1]
	elif int_typ_spl == 'icl_fg' and n_int_spt == 0:# in specfile_glx:
		splt_smpl_sfx   = '-icl'
		splt_smpl_sfx_f = '-q_F'
		splt_smpl_unt   = 'deg'
		splt_smpl_unl   = '$^{\circ}$'	
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv)
		slc_int_fg      = slc_mss_int_fg[1]
		slc_int_bg      = slc_mss_int_bg[1]
	elif int_typ_spl == 'icl_fg' and n_int_spt == 2:# in specfile_glx:
		splt_smpl_sfx   = '-icl'
		splt_smpl_sfx_f = '-q_F'
		splt_smpl_unt   = 'deg'
		splt_smpl_unl   = '$^{\circ}$'	
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv_23_2)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv_23_2)			
		slc_int_fg      = slc_mss_int_fg[1]
		slc_int_bg      = slc_mss_int_bg[1]
	elif int_typ_spl == 'icl_fg' and n_int_spt == 3:# in specfile_glx:
		splt_smpl_sfx   = '-icl'
		splt_smpl_sfx_f = '-q_F'
		splt_smpl_unt   = 'deg'
		splt_smpl_unl   = '$^{\circ}$'	
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv_23_3)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv_23_3)			
		slc_int_fg      = slc_mss_int_fg[1]
		slc_int_bg      = slc_mss_int_bg[1]
	elif int_typ_spl == 'icl_fg'  and n_int_spt == 4:# in specfile_glx:
		splt_smpl_sfx   = '-icl'
		splt_smpl_sfx_f = '-q_F'
		splt_smpl_unt   = 'deg'
		splt_smpl_unl   = '$^{\circ}$'	
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv_23_4)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv_23_4)			
		slc_int_fg      = slc_mss_int_fg[1]
		slc_int_bg      = slc_mss_int_bg[1]
	elif int_typ_spl == 'n_sersic_fg' and n_int_spt == 0:# in specfile_glx:
		splt_smpl_sfx   = '-n_srs'
		splt_smpl_sfx_f = '-n_F'
		splt_smpl_unt   = 'n'
		splt_smpl_unl   = 'n'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,n_srs_itv)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,n_srs_itv)
		slc_int_fg      = slc_mss_int_fg[1]
		slc_int_bg      = slc_mss_int_bg[1]
	elif int_typ_spl == 'n_sersic_fg'  and n_int_spt == 2:# in specfile_glx:
		splt_smpl_sfx   = '-n_srs'
		splt_smpl_sfx_f = '-n_F'
		splt_smpl_unt   = 'n'
		splt_smpl_unl   = 'n'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,n_srs_itv_23_2)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,n_srs_itv_23_2)			
		slc_int_fg      = slc_mss_int_fg[1]
		slc_int_bg      = slc_mss_int_bg[1]
	elif int_typ_spl == 'r_eff_fg' and n_int_spt == 0:# in specfile_glx:
		splt_smpl_sfx   = '-r_eff'
		splt_smpl_sfx_f = '-re_F'
		splt_smpl_unt   = 'arcsec'
		splt_smpl_unl   = '$^{\\prime\\prime}$'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv)
		slc_int_fg      = slc_mss_int_fg[1]
		slc_int_bg      = slc_mss_int_bg[1]
	elif int_typ_spl == 'r_eff_fg'  and n_int_spt == 2:# in specfile_glx:
		splt_smpl_sfx   = '-r_eff'
		splt_smpl_sfx_f = '-re_F'
		splt_smpl_unt   = 'arcsec'
		splt_smpl_unl   = '$^{\\prime\\prime}$'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv_23_2)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv_23_2)			
		slc_int_fg      = slc_mss_int_fg[1]
		slc_int_bg      = slc_mss_int_bg[1]	
	elif int_typ_spl == 'r_eff_fg'  and n_int_spt == 3:# in specfile_glx:
		splt_smpl_sfx   = '-r_eff'
		splt_smpl_sfx_f = '-re_F'
		splt_smpl_unt   = 'arcsec'
		splt_smpl_unl   = '$^{\\prime\\prime}$'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv_23_3)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv_23_3)			
		slc_int_fg      = slc_mss_int_fg[1]
		slc_int_bg      = slc_mss_int_bg[1]						

	############CHECK NUMBER OF BINS############
	if (lower_shift+upper_shift)>=len(slc_int_bg):
		print
		print colored('Upper and Lower shifts larger than number of bins!','yellow')
		print colored('Number of bins       : ' + str(len(slc_int_bg)),'yellow')
		print colored('Number of slices     : ' + str(n_int_spt),'yellow')
		print colored('Lower & Upper shifts : ' + str(lower_shift)+' - '+str(upper_shift),'yellow')
		print colored('Check: lower_shift & upper_shift parameters','yellow')
		print
		quit()
	else:
		print
		print colored('Number of bins       : ' + str(len(slc_int_bg)),'yellow')
		print colored('Number of slices     : ' + str(n_int_spt),'yellow')
		print colored('Lower & Upper shifts : ' + str(lower_shift)+' - '+str(upper_shift),'yellow')
		print
		pass
	############CHECK NUMBER OF BINS############

	FILES_M_BG  = []
	FILES_A_BG  = []
	FILES_M_FG  = []
	FILES_A_FG  = []

	FLSHS_FG = []
	FLSHW_FG = []

	FLSHS_BG = []
	FLSHW_BG = []

	for element,interval_range in enumerate(range(lower_shift,len(slc_int_bg)-upper_shift)):
		index_int = interval_range

		if int_typ_spl == 'sep_as':
			ini_fg_spc_m  = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-' + str(slc_int_fg[index_int]) + '-stk-'+str(stk_function)+'.fits'
			ini_fg_spc_a  = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-' + str(slc_int_fg[index_int]) + '-stk-'+str(stk_function)+'.fits'
			ini_bg_spc_m  = res_stk_res + 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-' + str(slc_int_fg[index_int]) + '-stk-'+str(stk_function)+'.fits'
			ini_bg_spc_a  = res_stk_res + 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-' + str(slc_int_fg[index_int]) + '-stk-'+str(stk_function)+'.fits'

			ini_fg_spc_hst  = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-' + str(slc_int_fg[index_int]) + '-stk-hst.fits'
			ini_fg_spc_hsw  = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-' + str(slc_int_fg[index_int]) + '-stk-hsw.fits'
			ini_bg_spc_hst  = res_stk_res + 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-' + str(slc_int_fg[index_int]) + '-stk-hst.fits'
			ini_bg_spc_hsw  = res_stk_res + 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-' + str(slc_int_fg[index_int]) + '-stk-hsw.fits'

		else:
			ini_fg_spc_m  = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-0-' + str(max_sep) + '-ss' + splt_smpl_sfx_f +'-'+str(slc_int_fg[index_int]) + '-stk-'+str(stk_function)+'.fits'
			ini_fg_spc_a  = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-0-' + str(max_sep) + '-ss' + splt_smpl_sfx_f +'-'+str(slc_int_fg[index_int]) + '-stk-'+str(stk_function)+'.fits'
			ini_bg_spc_m  = res_stk_res + 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-0-' + str(max_sep) + '-ss' + splt_smpl_sfx_f +'-'+str(slc_int_fg[index_int]) + '-stk-'+str(stk_function)+'.fits'
			ini_bg_spc_a  = res_stk_res + 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-0-' + str(max_sep) + '-ss' + splt_smpl_sfx_f +'-'+str(slc_int_fg[index_int]) + '-stk-'+str(stk_function)+'.fits'

			ini_fg_spc_hst  = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-0-' + str(max_sep) + '-ss' + splt_smpl_sfx_f +'-'+str(slc_int_fg[index_int]) + '-stk-hst.fits'
			ini_fg_spc_hsw  = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-0-' + str(max_sep) + '-ss' + splt_smpl_sfx_f +'-'+str(slc_int_fg[index_int]) + '-stk-hsw.fits'
			ini_bg_spc_hst  = res_stk_res + 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-0-' + str(max_sep) + '-ss' + splt_smpl_sfx_f +'-'+str(slc_int_fg[index_int]) + '-stk-hst.fits'
			ini_bg_spc_hsw  = res_stk_res + 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-0-' + str(max_sep) + '-ss' + splt_smpl_sfx_f +'-'+str(slc_int_fg[index_int]) + '-stk-hsw.fits'

		FILES_M_BG.append(ini_bg_spc_m)
		FILES_A_BG.append(ini_bg_spc_a)
		FILES_M_FG.append(ini_fg_spc_m)
		FILES_A_FG.append(ini_fg_spc_a)

		FLSHS_FG.append(ini_fg_spc_hst)
		FLSHW_FG.append(ini_fg_spc_hsw)

		FLSHS_BG.append(ini_bg_spc_hst)
		FLSHW_BG.append(ini_bg_spc_hsw)

	print
	#print colored('Spectra  : '+str(specfile_glx),'yellow')
	print colored('Intervals: '+str(slc_int_fg)	,'yellow')
	print
	print colored('Lower shift: '+str(lower_shift),'yellow')
	print colored('Lower shift: '+str(slc_int_fg[lower_shift]),'yellow')
	print colored('Upper shift: '+str(upper_shift)+','+str(upper_shift-1),'yellow')
	print colored('Upper shift: '+str(slc_int_fg[len(slc_int_bg)-upper_shift-1]),'yellow')
	print

	B_FLAG = (FILES_M_BG[0].split('ss-zf_B-')[1]).rsplit('-ss-zf_F-')[0]
	F_FLAG = (FILES_M_FG[0].split('ss-zf_F-')[1]).rsplit('-ss-sep_as-')[0]
	print
	print colored('Background Redshift Flag: '+str(B_FLAG),'yellow')
	print colored('Foreground Redshift Flag: '+str(F_FLAG),'yellow')
	print

	print
	print colored('Fitting ' + str(len(LINES[0])) + ' lines in the range ' +str(lmb_min_lim) +'-'+str(lmb_max_lim),'yellow') 
	print "\n".join([lineinrange[0] + '-' +str(lineinrange[1]) +  '-' +str(lineinrange[2]) +  '-' +str(lineinrange[3]) for lineinrange in zip(LINES[4],LINES[0],LINES[5],LINES[9])])
	print
	#plt_sufix_fnm = specfile_glx + slc_int_fg[lower_shift] +'-' +slc_int_fg[len(slc_int_bg)-upper_shift-1]
	#plt_sufix_fnm = specfile_glx  + slc_int_fg[lower_shift]  + '-' + slc_int_fg[len(slc_int_bg)-upper_shift-1]

	#PLOT_TITLE    = 'z_Bg: ' + B_FLAG + ', z_Fg:' + F_FLAG + ' ' + str(slc_int_fg[lower_shift]) + '-' + str(slc_int_fg[len(slc_int_bg[0])-upper_shift-1]) + ' ' + stk_function
	#PLOT_TITLE    = 'z_Bg: ' + B_FLAG + ', z_Fg:' + F_FLAG + ' ' + str(slc_int_fg[lower_shift]) + '-' + str(slc_int_fg[len(slc_int_bg)-upper_shift-1]) + ' ' + stk_function
	try:
		PLOT_TITLE    = 'z_Bg: ' + B_FLAG + ', z_Fg:' + F_FLAG + ' ' + str(slc_int_fg[lower_shift]) + '-' + str(slc_int_fg[len(slc_int_bg[0])-upper_shift-1]) + ' ' + stk_function
	except IndexError:
		PLOT_TITLE    = 'z_Bg: ' + B_FLAG + ', z_Fg:' + F_FLAG + ' ' + str(slc_int_fg[lower_shift]) + '-' + str(slc_int_fg[len(slc_int_bg)-upper_shift-1]) + ' ' + stk_function


	print stk_fct[0]
	print fpt_background
	print fpt_foreground
	print
	if (stk_fct == 'med') and fpt_background == True:
		FILES = FILES_M_BG
		FLSHS = FLSHS_BG
		FLSHW = FLSHW_BG
		plt_sufix_fnm = 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-0-' + str(max_sep) + '-ss' + splt_smpl_sfx_f +'-'+str(slc_int_fg[index_int])  + slc_int_fg[lower_shift] +'-' +slc_int_fg[len(slc_int_bg)-upper_shift-1]
		print
		print colored("\n".join([str(FILE) for FILE in FILES]),'blue')
		print
		print colored("\n".join([str(FILE) for FILE in FLSHW]),'white')
		print
		print colored("\n".join([str(FILE) for FILE in FLSHS]),'green')
	elif (stk_fct == 'avg') and fpt_background == True:
		FILES = FILES_A_BG
		FLSHS = FLSHS_BG
		FLSHW = FLSHW_BG
		plt_sufix_fnm = 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-0-' + str(max_sep) + '-ss' + splt_smpl_sfx_f +'-'+str(slc_int_fg[index_int])  + slc_int_fg[lower_shift] +'-' +slc_int_fg[len(slc_int_bg)-upper_shift-1]
		print		
		print colored("\n".join([str(FILE) for FILE in FILES]),'red')
		print
		print colored("\n".join([str(FILE) for FILE in FLSHW]),'white')
		print
		print colored("\n".join([str(FILE) for FILE in FLSHS]),'green')
		print
	elif (stk_fct == 'avg') and fpt_foreground == True:
		FILES = FILES_A_FG
		FLSHS = FLSHS_FG
		FLSHW = FLSHW_FG
		plt_sufix_fnm = 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-0-' + str(max_sep) + '-ss' + splt_smpl_sfx_f +'-'+str(slc_int_fg[index_int])  + slc_int_fg[lower_shift] +'-' +slc_int_fg[len(slc_int_bg)-upper_shift-1]
		print
		print colored("\n".join([str(FILE) for FILE in FILES]),'blue')
		print
		print colored("\n".join([str(FILE) for FILE in FLSHW]),'white')
		print
		print colored("\n".join([str(FILE) for FILE in FLSHS]),'green')
		print
	elif (stk_fct == 'med') and fpt_foreground == True:
		FILES = FILES_A_FG
		FLSHS = FLSHS_FG
		FLSHW = FLSHW_FG		
		plt_sufix_fnm = 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-0-' + str(max_sep) + '-ss' + splt_smpl_sfx_f +'-'+str(slc_int_fg[index_int])  + slc_int_fg[lower_shift] +'-' +slc_int_fg[len(slc_int_bg)-upper_shift-1]
		print		
		print colored("\n".join([str(FILE) for FILE in FILES]),'red')
		print
		print colored("\n".join([str(FILE) for FILE in FLSHW]),'white')
		print
		print colored("\n".join([str(FILE) for FILE in FLSHS]),'green')
		print
	else:
		pass

	print
	print colored('Intervals to be plotted: ','yellow')
	print colored('Indices   : '+str(range(lower_shift,len(slc_int_bg)-upper_shift)),'yellow')
	print colored('Intervals : '+str(slc_int_fg[lower_shift:len(slc_int_bg)-upper_shift]),'yellow')
	print
	
	MSK_NTMS=2.5
	for lines in range(len(LINES[0])):
		if lmb_min < LINES[0][lines]*(1+z_glx_Ps) < lmb_max :
			if cnt_bnp_adj == False and 500 < LINES[0][lines]*(1+z_glx_Ps) <1390:
				spc_stt_lmbd_i= 1110 
				spc_stt_lmbd_f= 1200 
			########CONTIINUUM BAND PASS TALIA 20#########
			elif cnt_bnp_adj == True and 1258< LINES[0][lines]*(1+z_glx_Ps) <1265:
				spc_stt_lmbd_i = 1270
				spc_stt_lmbd_f = 1285
			elif cnt_bnp_adj == True and 1300< LINES[0][lines]*(1+z_glx_Ps) <1305:
				spc_stt_lmbd_i = 1310#1270
				spc_stt_lmbd_f = 1325#1285
			elif cnt_bnp_adj == True and 1330< LINES[0][lines]*(1+z_glx_Ps) <1340:
				spc_stt_lmbd_i = 1350 #1350
				spc_stt_lmbd_f = 1375 #1365
			elif cnt_bnp_adj == True and 1395< LINES[0][lines]*(1+z_glx_Ps) <1405:
				spc_stt_lmbd_i = 1430 #1440
				spc_stt_lmbd_f = 1455 #1455
			elif cnt_bnp_adj == True and 1520< LINES[0][lines]*(1+z_glx_Ps) <1530:
				spc_stt_lmbd_i = 1460
				spc_stt_lmbd_f = 1490
			elif cnt_bnp_adj == True and 1545< LINES[0][lines]*(1+z_glx_Ps) <1555:
				spc_stt_lmbd_i = 1580
				spc_stt_lmbd_f = 1600
			elif cnt_bnp_adj == True and 1605< LINES[0][lines]*(1+z_glx_Ps) <1610:
				spc_stt_lmbd_i = 1615
				spc_stt_lmbd_f = 1630
			elif cnt_bnp_adj == True and 1665< LINES[0][lines]*(1+z_glx_Ps) <1675:
				spc_stt_lmbd_i = 1680
				spc_stt_lmbd_f = 1700
			elif cnt_bnp_adj == True and 1855< LINES[0][lines]*(1+z_glx_Ps) <1865:
				spc_stt_lmbd_i = 1810
				spc_stt_lmbd_f = 1840
			########CONTIINUUM BAND PASS TALIA 20#########
			elif cnt_bnp_adj == False and 1390< LINES[0][lines]*(1+z_glx_Ps) <1700:
				spc_stt_lmbd_i = 1420 
				spc_stt_lmbd_f = 1500 
			elif cnt_bnp_adj == False and 1700< LINES[0][lines]*(1+z_glx_Ps) <2020:
				spc_stt_lmbd_i = 1920 
				spc_stt_lmbd_f = 2020 
			elif cnt_bnp_adj == False and 2020< LINES[0][lines]*(1+z_glx_Ps) <2200:
				spc_stt_lmbd_i = 2100 
				spc_stt_lmbd_f = 2200 
			elif cnt_bnp_adj == False and 2220< LINES[0][lines]*(1+z_glx_Ps) <2500:
				spc_stt_lmbd_i = 2200 
				spc_stt_lmbd_f = 2300 
			elif cnt_bnp_adj == False and 2500< LINES[0][lines]*(1+z_glx_Ps) <4000:
				spc_stt_lmbd_i = 2650 
				spc_stt_lmbd_f = 2750
			else:
				spc_stt_lmbd_i = 1410
				spc_stt_lmbd_f = 1510
			########################################################PLOT PER LINE########################################################
			fxsize=11
			fysize=8
			f = plt.figure(num=None, figsize=(fxsize, fysize), dpi=180, facecolor='w',
				edgecolor='k')
			plt.subplots_adjust(
				left 	= (38/25.4)/fxsize,       #-26 bigger 22-def
				bottom 	= (22/25.4)/fysize,       #20 bigger  19-def
				right 	= 1 - (2/25.4)/fxsize,    #          2-def
				top 	= 1 - (8/25.4)/fysize)    #          4-def
			plt.subplots_adjust(hspace=0)#,wspace=0)

			#f.suptitle('An overall title', size=20)
			gs0 = gridspec.GridSpec(1, 1)

			#############################################################STACK###########################################################
			gs11 = gridspec.GridSpecFromSubplotSpec(3, 1, subplot_spec=gs0[0])
				
			ax110 = plt.Subplot(f, gs11[0:3,0])
			f.add_subplot(ax110)

			ax110.set_rasterization_zorder(1)
			plt.autoscale(enable=True, axis='y', tight=False)
			ax110.xaxis.set_tick_params(labelsize=26)
			ax110.yaxis.set_tick_params(labelsize=26)
			#ax110.set_title(PLOT_TITLE)
			xticklabels = ax110.get_xticklabels()
			plt.setp(xticklabels, visible=True,family='serif')
			yticklabels = ax110.get_yticklabels()
			plt.setp(yticklabels, visible=True,family='serif')
			ax110.yaxis.set_tick_params(which='both',labelsize=26,direction='in',color='black',bottom=True,top=True,left=True,right=True)
			ax110.xaxis.set_tick_params(which='both',labelsize=26,direction='in',color='black',bottom=True,top=True,left=True,right=True)

			minorLocator_x   = plt.MultipleLocator(5)
			majorLocator_x   = plt.MultipleLocator(20)
			#minorLocator_y   = plt.MultipleLocator(0.1)
			#majorLocator_y   = plt.MultipleLocator(0.5)
			ax110.xaxis.set_minor_locator(minorLocator_x)
			ax110.xaxis.set_major_locator(majorLocator_x)
			#ax110.yaxis.set_minor_locator(minorLocator_y)
			#ax110.yaxis.set_major_locator(majorLocator_y)
			plt.tick_params(which='both' , width=0.7)
			plt.tick_params(which='major', length=5)
			plt.tick_params(which='minor', length=2)
			ax110.minorticks_on()

			plt.xlabel('$\lambda$',fontsize=28, family = 'serif')
			plt.ylabel('F$_\lambda$ (ergs/sec/cm$^{2}/\AA$)',fontsize=28, family = 'serif')

			if 'Bg' in FILES[0]:
				colors = "bgrcmykw"
			elif 'Fg' in FILES[0]:
				colors = "rgbcmykw"

			#######################################################DIF-SEPARATIONS#######################################################
			for index,(specfile_glx,specfile_glx_hst,specfile_glx_hsw)in enumerate(zip(FILES,FLSHS,FLSHW)):
				glx    = Spectra_x_y(specfile_glx)
				glxhst = Spectra_x_y(specfile_glx_hst)
				glxhsw = Spectra_x_y(specfile_glx_hsw)
				lambda_glx,inten_glx,crval_glx,cdel1_glx,cd1_glx = glx[0], glx[1], glx[2], glx[3], glx[4]
				lambda_glx_hst,inten_glx_hst,crval_glx_hst,cdel1_glx_hst,cd1_glx_hst = glxhst[0], glxhst[1], glxhst[2], glxhst[3], glxhst[4]
				lambda_glx_hsw,inten_glx_hsw,crval_glx_hsw,cdel1_glx_hsw,cd1_glx_hsw = glxhsw[0], glxhsw[1], glxhsw[2], glxhsw[3], glxhsw[4]
				stk_glx_nmb = Header_Get(specfile_glx,'STK_NUM')

				if uft_lne_vls == False and ivl_fts_hdr == False and fit_vls_hdr == True and int_vlf_hdr==True and mke_lne_fit == True:
					print
					print colored('1-Initial Guess Values for line Fitting will be recorded!','yellow')
					print colored('Info from Lines_Dictionary.py!','yellow')
					print
					print colored('Fit function method: ' + fit_fnct,'yellow')
					print colored('Make Line Fitting:   ' + str(mke_lne_fit),'yellow')
					print
					print
					print colored('##########################################################gaussM#######################################################','yellow')
					print colored('#Line fitting Cleaning Mode. 999999.99999 Recorded on fits headers + fit_u     pd_hdr. uft_lne_vls: ' + str(uft_lne_vls),'yellow')
					print colored('Record on fits headers: Fit values.                                                    fit_vls_hdr: ' + str(fit_vls_hdr),'yellow')
					print colored('Record on fits headers: Initial Guess Values for Line-fitting Needs int_vls_prv_fit.   int_vlf_hdr: ' + str(int_vlf_hdr),'yellow')
					print colored('##########################################################DblG#########################################################','yellow')
					print colored('Fix/Record Fit Values for CTR Gaussian in DblG mode.                                 fix_ctr_gau_1: ' + str(fix_ctr_gau_1),'yellow')
					print colored('Fix/Record Fit Values for PST Gaussian in DblG mode.                                 fix_ctr_gau_2: ' + str(fix_ctr_gau_2),'yellow')
					print colored('##########################################################DblG#########################################################','yellow')
					print colored('##########################################################gaussM#######################################################','yellow')
					print colored('True: Initial Guess Values from Spectra Fit / False: Lines Dictionary.                 ivl_fts_hdr: ' + str(ivl_fts_hdr),'yellow')
					print colored('Fix/Record Fit Values for CTR Gaussian in gaussM mode.                                 fix_ctr_gau: ' + str(fix_ctr_gau),'yellow')
					print colored('Fix/Record Fit Values for PST Gaussian in gaussM mode.                                 fix_pre_gau: ' + str(fix_pre_gau),'yellow')
					print colored('Fix/Record Fit Values for PST Gaussian in gaussM mode.                                 fix_pst_gau: ' + str(fix_pst_gau),'yellow')
					print colored('##########################################################gaussM#######################################################','yellow')
					print
					Header_Add(specfile_glx,str(LINES[5][lines])+'_WF_0',float(LINES[1][lines]) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-1 Wdt-Fit  1GF-IntVal')
					Header_Add(specfile_glx,str(LINES[5][lines])+'_WP_0',float(LINES[2][lines]) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-2 Wdt-Plt  1GF-IntVal')
					Header_Add(specfile_glx,str(LINES[5][lines])+'_CF_0',float(LINES[7][lines]) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-7 Ctr Fit Bnds  1GF-IntVal')
					Header_Add(specfile_glx,str(LINES[5][lines])+'_CO_0',float(LINES[8][lines]) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-8 Ctr Fit Ofst  1GF-IntVal')
					Header_Add(specfile_glx,str(LINES[5][lines])+'_AF_0',float(LINES[10][lines]),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-10 Amp Fit Bnds  1GF-IntVal')
				elif uft_lne_vls == False and ivl_fts_hdr == False and fit_vls_hdr == False and int_vlf_hdr==False and mke_lne_fit == True:#else
					print
					print colored('2-Initial Guess Values for line Fitting will NOT be recorded!','yellow')
					print
					print colored('Fit function method: ' + fit_fnct,'yellow')
					print colored('Make Line Fitting:   ' + str(mke_lne_fit),'yellow')
					print
					print
					print colored('##########################################################DblG#########################################################','yellow')
					print colored('Fix/Record Fit Values for CTR Gaussian in DblG mode.                                 fix_ctr_gau_1: ' + str(fix_ctr_gau_1),'yellow')
					print colored('Fix/Record Fit Values for PST Gaussian in DblG mode.                                 fix_ctr_gau_2: ' + str(fix_ctr_gau_2),'yellow')
					print colored('##########################################################DblG#########################################################','yellow')
					print colored('##########################################################gaussM#######################################################','yellow')
					print colored('#Line fitting Cleaning Mode. 999999.99999 Recorded on fits headers + fit_u     pd_hdr. uft_lne_vls: ' + str(uft_lne_vls),'yellow')
					print colored('Record on fits headers: Fit values.                                                    fit_vls_hdr: ' + str(fit_vls_hdr),'yellow')
					print colored('Record on fits headers: Initial Guess Values for Line-fitting Needs int_vls_prv_fit.   int_vlf_hdr: ' + str(int_vlf_hdr),'yellow')
					print colored('##########################################################gaussM#######################################################','yellow')
					print colored('True: Initial Guess Values from Spectra Fit / False: Lines Dictionary.                 ivl_fts_hdr: ' + str(ivl_fts_hdr),'yellow')
					print colored('Fix/Record Fit Values for CTR Gaussian in gaussM mode.                                 fix_ctr_gau: ' + str(fix_ctr_gau),'yellow')
					print colored('Fix/Record Fit Values for PST Gaussian in gaussM mode.                                 fix_pre_gau: ' + str(fix_pre_gau),'yellow')
					print colored('Fix/Record Fit Values for PST Gaussian in gaussM mode.                                 fix_pst_gau: ' + str(fix_pst_gau),'yellow')
					print colored('##########################################################gaussM#######################################################','yellow')
					print
					L1_0  = LINES[1][lines]
					L2_0  = LINES[2][lines]
					L7_0  = LINES[7][lines]
					L8_0  = LINES[8][lines]
					L10_0 = LINES[10][lines]
					print
					print colored('Initial fit variables from Lines_Dictionary.py!','yellow')
					print
					print colored(str(LINES[5][lines])+'_WF_0' + ' LINES-1 Wdt-Fit  1GF-IntVal      : ' + str(L1_0),'yellow')
					print colored(str(LINES[5][lines])+'_WP_0' + ' LINES-2 Wdt-Plt  1GF-IntVal      : ' + str(L2_0),'yellow')
					print colored(str(LINES[5][lines])+'_CF_0' + ' LINES-7 Ctr Fit Bnds  1GF-IntVal : ' + str(L7_0),'yellow')
					print colored(str(LINES[5][lines])+'_CO_0' + ' LINES-8 Ctr Fit Ofst  1GF-IntVal : ' + str(L8_0),'yellow')
					print colored(str(LINES[5][lines])+'_AF_0' + ' LINES-10 Amp Fit Bnds  1GF-IntVal: ' + str(L10_0),'yellow')
					print
				elif uft_lne_vls == False and ivl_fts_hdr == True and fit_vls_hdr == False and int_vlf_hdr==False and mke_lne_fit == True:
					print
					print colored('2-Initial fit variables from fits header!','yellow')
					print colored('Headers:','yellow')
					print
					print colored('Fit function method: ' + fit_fnct,'yellow')
					print colored('Make Line Fitting:   ' + str(mke_lne_fit),'yellow')
					print
					print
					print colored('##########################################################DblG#########################################################','yellow')
					print colored('Fix/Record Fit Values for CTR Gaussian in DblG mode.                                 fix_ctr_gau_1: ' + str(fix_ctr_gau_1),'yellow')
					print colored('Fix/Record Fit Values for PST Gaussian in DblG mode.                                 fix_ctr_gau_2: ' + str(fix_ctr_gau_2),'yellow')
					print colored('##########################################################DblG#########################################################','yellow')
					print colored('##########################################################gaussM#######################################################','yellow')
					print colored('Line fitting Cleaning Mode. 999999.99999 Recorded on fits headers + fit_u     pd_hdr. uft_lne_vls: ' + str(uft_lne_vls),'yellow')
					print colored('Record on fits headers: Fit values.                                                    fit_vls_hdr: ' + str(fit_vls_hdr),'yellow')
					print colored('Record on fits headers: Initial Guess Values for Line-fitting Needs int_vls_prv_fit.   int_vlf_hdr: ' + str(int_vlf_hdr),'yellow')
					print colored('##########################################################gaussM#######################################################','yellow')
					print colored('True: Initial Guess Values from Spectra Fit / False: Lines Dictionary.                 ivl_fts_hdr: ' + str(ivl_fts_hdr),'yellow')
					print colored('Fix/Record Fit Values for CTR Gaussian in gaussM mode.                                 fix_ctr_gau: ' + str(fix_ctr_gau),'yellow')
					print colored('Fix/Record Fit Values for PST Gaussian in gaussM mode.                                 fix_pre_gau: ' + str(fix_pre_gau),'yellow')
					print colored('Fix/Record Fit Values for PST Gaussian in gaussM mode.                                 fix_pst_gau: ' + str(fix_pst_gau),'yellow')
					print
					try:
						L1_0  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WF_0')        #LINES-1 Wdt-Fit  1GF-IntVal      WIDTH-FIT
						L2_0  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WP_0')        #LINES-2 Wdt-Plt  1GF-IntVal      WIDTH-PLT
						L7_0  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CF_0')        #LINES-7 Ctr Fit Bnds  1GF-IntVal CTR-FIT-BNDS
						L8_0  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CO_0')        #LINES-8 Ctr Fit Ofst  1GF-IntVal CTR-OFFSET
						L10_0 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF_0')        #LINES-8 Ctr Fit Ofst  1GF-IntVal LNE_AMP_BNDS
						print
						print colored(str(LINES[5][lines])+'_WF_0' + ' LINES-1 Wdt-Fit  1GF-IntVal      : ' + str(L1_0),'yellow')
						print colored(str(LINES[5][lines])+'_WP_0' + ' LINES-2 Wdt-Plt  1GF-IntVal      : ' + str(L2_0),'yellow')
						print colored(str(LINES[5][lines])+'_CF_0' + ' LINES-7 Ctr Fit Bnds  1GF-IntVal : ' + str(L7_0),'yellow')
						print colored(str(LINES[5][lines])+'_CO_0' + ' LINES-8 Ctr Fit Ofst  1GF-IntVal : ' + str(L8_0),'yellow')
						print colored(str(LINES[5][lines])+'_AF_0' + ' LINES-10 Amp Fit Bnds  1GF-IntVal: ' + str(L10_0),'yellow')
						print
					except KeyError:
						print
						print colored('Headers containing initial fit variables not found!','yellow')
						print colored('Run Spec_Stk_Stack first or use value from Lines_Dictionary.py with ivl_fts_hdr = False:','yellow')
						print colored('Headers:','yellow')
						print
						print colored(str(LINES[5][lines])+'_WF_0' + ' LINES-1 Wdt-Fit  1GF-IntVal','yellow')
						print colored(str(LINES[5][lines])+'_WP_0' + ' LINES-2 Wdt-Plt  1GF-IntVal','yellow')
						print colored(str(LINES[5][lines])+'_CF_0' + ' LINES-7 Ctr Fit Bnds  1GF-IntVal','yellow')
						print colored(str(LINES[5][lines])+'_CO_0' + ' LINES-8 Ctr Fit Ofst  1GF-IntVal','yellow')
						print colored(str(LINES[5][lines])+'_AF_0' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','yellow')
						print '*****'
						print
						quit()
					try:
						L10_0 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF_0')        #LINES-8 Ctr Fit Ofst  1GF-IntVal LNE_AMP_BNDS
						print colored(str(LINES[5][lines])+'_AF_0' + ' LINES-10 Amp Fit Bnds  1GF-IntVal: ' + str(L10_0),'yellow')
						print colored('*****Success-1!******','magenta')
						print
					except KeyError:
						print
						print colored('Header not found!','yellow')
						print colored('Adding Header with default valuee 0.001:','yellow')
						print colored(str(LINES[5][lines])+'_AF_0' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','yellow')
						Header_Get_Add(specfile_glx,str(LINES[5][lines])+'_AF_0',0.001,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-10 Amp Fit Bnds  1GF-IntVal')
						L10_0 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF_0')        #LINES-8 Ctr Fit Ofst  1GF-IntVal LNE_AMP_BNDS
						print colored(str(LINES[5][lines])+'_AF_0' + ' LINES-10 Amp Fit Bnds  1GF-IntVal: ' + str(L10_0),'yellow')
						print colored('*****Success-2!******','magenta')
						print
					################FOR CASES WHERE KLINE WIIDHT ==0################
					if L1_0  == 0:
						L1_0  = 1#LINES[1][lines]
					else:
						pass
					################FOR CASES WHERE KLINE WIIDHT ==0################
				elif uft_lne_vls == False and ivl_fts_hdr == False and fit_vls_hdr == True and int_vlf_hdr==False and mke_lne_fit == True:
					print
					print colored('3-Initial Guess Values for line Fitting will NOT be recorded!','yellow')
					print colored('3-Line will not be fitted!','yellow')
					print colored('3-Areas will be computed using fits header info','yellow')
					print
					print colored('Fit function method: ' + fit_fnct,'yellow')
					print colored('Make Line Fitting:   ' + str(mke_lne_fit),'yellow')
					print
					print colored('##########################################################DblG#########################################################','yellow')
					print colored('Fix/Record Fit Values for CTR Gaussian in DblG mode.                                 fix_ctr_gau_1: ' + str(fix_ctr_gau_1),'yellow')
					print colored('Fix/Record Fit Values for PST Gaussian in DblG mode.                                 fix_ctr_gau_2: ' + str(fix_ctr_gau_2),'yellow')
					print colored('##########################################################DblG#########################################################','yellow')
					print colored('##########################################################gaussM#######################################################','yellow')
					print colored('#Line fitting Cleaning Mode. 999999.99999 Recorded on fits headers + fit_u     pd_hdr. uft_lne_vls: ' + str(uft_lne_vls),'yellow')
					print colored('Record on fits headers: Fit values.                                                    fit_vls_hdr: ' + str(fit_vls_hdr),'yellow')
					print colored('Record on fits headers: Initial Guess Values for Line-fitting Needs int_vls_prv_fit.   int_vlf_hdr: ' + str(int_vlf_hdr),'yellow')
					print colored('##########################################################gaussM#######################################################','yellow')
					print colored('True: Initial Guess Values from Spectra Fit / False: Lines Dictionary.                 ivl_fts_hdr: ' + str(ivl_fts_hdr),'yellow')
					print colored('Fix/Record Fit Values for CTR Gaussian in gaussM mode.                                 fix_ctr_gau: ' + str(fix_ctr_gau),'yellow')
					print colored('Fix/Record Fit Values for PST Gaussian in gaussM mode.                                 fix_pre_gau: ' + str(fix_pre_gau),'yellow')
					print colored('Fix/Record Fit Values for PST Gaussian in gaussM mode.                                 fix_pst_gau: ' + str(fix_pst_gau),'yellow')
					print colored('##########################################################gaussM#######################################################','yellow')
					print
				elif uft_lne_vls == True and fit_vls_hdr == True and int_vlf_hdr==True:
					print
					print colored('Check Fitting conditions!','yellow')
					print
					print colored('Fit function method: ' + fit_fnct,'yellow')
					print colored('Make Line Fitting:   ' + str(mke_lne_fit),'yellow')
					print
					print colored('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%','white')
					print colored('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%','white')
					print colored('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%CLEANING METHOD%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%','white')
					print colored('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%','white')
					print colored('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%','white')
					print colored('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%','white')

					print
					print colored('Line fitting Cleaning Mode. 999999.99999 Recorded on fits headers + fit_upd_hdr True   uft_lne_vls: ' + str(uft_lne_vls),'yellow')
					print colored('Record on fits headers: Fit values.                                                    fit_vls_hdr: ' + str(fit_vls_hdr),'yellow')
					print colored('Record on fits headers: Initial Guess Values for Line-fitting Needs int_vls_prv_fit.   int_vlf_hdr: ' + str(int_vlf_hdr),'magenta')
					print colored('Initial Guess Values from Spectra Fit / False: Lines Dictionary.                       ivl_fts_hdr: ' + str(ivl_fts_hdr),'yellow')
					print colored('##########################################################DblG#########################################################','yellow')
					print colored('Fix/Record Fit Values for CTR Gaussian in DblG mode.                                 fix_ctr_gau_1: ' + str(fix_ctr_gau_1),'yellow')
					print colored('Fix/Record Fit Values for PST Gaussian in DblG mode.                                 fix_ctr_gau_2: ' + str(fix_ctr_gau_2),'yellow')
					print colored('##########################################################DblG#########################################################','yellow')
					print colored('##########################################################gaussM#######################################################','yellow')
					print colored('Initial Guess Values from Spectra Fit / False: Lines Dictionary.                       ivl_fts_hdr: ' + str(ivl_fts_hdr),'yellow')
					print colored('Fix/Record Fit Values for CTR Gaussian in gaussM mode.                                 fix_ctr_gau: ' + str(fix_ctr_gau),'yellow')
					print colored('Fix/Record Fit Values for PST Gaussian in gaussM mode.                                 fix_pre_gau: ' + str(fix_pre_gau),'yellow')
					print colored('Fix/Record Fit Values for PST Gaussian in gaussM mode.                                 fix_pst_gau: ' + str(fix_pst_gau),'yellow')
					print
				elif mke_lne_fit == False:
					print
					print colored('Make Line Fitting:   ' + str(mke_lne_fit),'yellow')
					print colored('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%','white')
					print colored('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%NO LINE FITTING%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%','white')
					print colored('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%','white')
					print colored('Useful for SNR Computations using values from fits headers.:   ' + str(mke_lne_fit),'yellow')
					print
				else:
					print
					print colored('Check Fitting conditions!','yellow')
					print
					print colored('Fit function method: ' + fit_fnct,'yellow')
					print colored('Make Line Fitting:   ' + str(mke_lne_fit),'yellow')
					print
					print colored('#Line fitting Cleaning Mode. 999999.99999 Recorded on fits headers + fit_u     pd_hdr. uft_lne_vls: ' + str(uft_lne_vls),'yellow')
					print colored('Record on fits headers: Fit values.                                                    fit_vls_hdr: ' + str(fit_vls_hdr),'yellow')
					print colored('Record on fits headers: Initial Guess Values for Line-fitting Needs int_vls_prv_fit.   int_vlf_hdr: ' + str(int_vlf_hdr),'magenta')
					print colored('Initial Guess Values from Spectra Fit / False: Lines Dictionary.                       ivl_fts_hdr: ' + str(ivl_fts_hdr),'yellow')
					print colored('##########################################################DblG#########################################################','yellow')
					print colored('Fix/Record Fit Values for CTR Gaussian in DblG mode.                                 fix_ctr_gau_1: ' + str(fix_ctr_gau_1),'yellow')
					print colored('Fix/Record Fit Values for PST Gaussian in DblG mode.                                 fix_ctr_gau_2: ' + str(fix_ctr_gau_2),'yellow')
					print colored('##########################################################DblG#########################################################','yellow')
					print colored('##########################################################gaussM#######################################################','yellow')
					print colored('Initial Guess Values from Spectra Fit / False: Lines Dictionary.                       ivl_fts_hdr: ' + str(ivl_fts_hdr),'yellow')
					print colored('Fix/Record Fit Values for CTR Gaussian in gaussM mode.                                 fix_ctr_gau: ' + str(fix_ctr_gau),'yellow')
					print colored('Fix/Record Fit Values for PST Gaussian in gaussM mode.                                 fix_pre_gau: ' + str(fix_pre_gau),'yellow')
					print colored('Fix/Record Fit Values for PST Gaussian in gaussM mode.                                 fix_pst_gau: ' + str(fix_pst_gau),'yellow')
					print
					print 'line 6291'
					quit()

				########################################################LINE-FIT#######################################################
				if   'Dbl' in   LINES[3][lines] and fit_fnct=='gauss' and fit_type == 'lmfit' and mke_lne_fit == True and uft_lne_vls == False:
					fit_typ = 'G'
					#GAUSSIAN FIT
					MSK_NTMS=2.5
					print
					print colored('1D Gaussian Fit Mode Choosen: Lmfit (Offset)','cyan')
					print
					print 
					print colored('Double Line Fit (Ind)','yellow')
					print colored(LINES[3][lines-2]  + '-' + str(LINES[0][lines-2])   + '-' + str(LINES[1][lines-2]),'cyan')
					print LINES[3][lines]+ '-' + str(LINES[0][lines]) + '-'  + str(LINES[1][lines])
					print colored(LINES[3][lines-1]+ '-' + str(LINES[0][lines-1]) + '-' + str(LINES[1][lines-1]),'magenta')

					from lmfit import Model
	
					########################Getting Line Fitting Initial Values From Statcked Spectrum Fits Header#########################
					if ivl_fts_hdr == True:
						try:
							L1_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WF01')        #LINES-1  Wdt-Fit  1GF-IntVal      WIDTH-FIT
							L2_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WP01')        #LINES-2  Wdt-Plt  1GF-IntVal      WIDTH-PLT
							L7_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CF01')        #LINES-7  Ctr Fit Bnds  1GF-IntVal CTR-FIT-BNDS
							L8_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CO01')        #LINES-8  Ctr Fit Ofst  1GF-IntVal CTR-OFFSET
							L10_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF01')        #LINES-10 Ctr Fit Amp   1GF-IntVal LNE_AMP_BNDS

							L1_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WF02')        #LINES-1  Wdt-Fit  1GF-IntVal      WIDTH-FIT
							L2_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WP02')        #LINES-2  Wdt-Plt  1GF-IntVal      WIDTH-PLT
							L7_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CF02')        #LINES-7  Ctr Fit Bnds  1GF-IntVal CTR-FIT-BNDS
							L8_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CO02')        #LINES-8  Ctr Fit Ofst  1GF-IntVal CTR-OFFSET
							L10_2 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF02')        #LINES-10 Ctr Fit Amp   1GF-IntVal LNE_AMP_BNDS

							print
							print colored('Initial fit variables from fits header!','yellow')
							print
							print colored('1: ' + LINES[3][lines-2]  + '-' + str(LINES[0][lines-2]),'cyan')
							print colored('Headers:','cyan')
							print colored(str(LINES[5][lines])+'_WF01' + ' LINES-1 Wdt-Fit  1GF-IntVal      : ' + str(L1_1),'cyan')
							print colored(str(LINES[5][lines])+'_WP01' + ' LINES-2 Wdt-Plt  1GF-IntVal      : ' + str(L2_1),'cyan')
							print colored(str(LINES[5][lines])+'_CF01' + ' LINES-7 Ctr Fit Bnds  1GF-IntVal : ' + str(L7_1),'cyan')
							print colored(str(LINES[5][lines])+'_CO01' + ' LINES-8 Ctr Fit Ofst  1GF-IntVal : ' + str(L8_1),'cyan')
							print colored(str(LINES[5][lines])+'_AF01' + ' LINES-10 Amp Fit Bnds  1GF-IntVal: ' + str(L10_1),'cyan')
							print
							print colored('2: ' + LINES[3][lines-1]  + '-' + str(LINES[0][lines-1]),'magenta')
							print colored('Headers:','magenta')
							print colored(str(LINES[5][lines])+'_WF02' + ' LINES-1 Wdt-Fit  1GF-IntVal      : ' + str(L1_2),'magenta')
							print colored(str(LINES[5][lines])+'_WP02' + ' LINES-2 Wdt-Plt  1GF-IntVal      : ' + str(L2_2),'magenta')
							print colored(str(LINES[5][lines])+'_CF02' + ' LINES-7 Ctr Fit Bnds  1GF-IntVal : ' + str(L7_2),'magenta')
							print colored(str(LINES[5][lines])+'_CO02' + ' LINES-8 Ctr Fit Ofst  1GF-IntVal : ' + str(L8_2),'magenta')
							print colored(str(LINES[5][lines])+'_AF02' + ' LINES-10 Amp Fit Bnds  1GF-IntVal: ' + str(L10_2),'magenta')
							print colored('*****Success!******','yellow')
							print
						except ValueError:
							print
							print colored('Headers containing initial fit variables not found!','yellow')
							print colored('Run Spec_Stk_Stack first or use value from Lines_Dictionary.py with ivl_fts_hdr = False:','yellow')
							print colored('Headers:','yellow')
							print
							print colored('1: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'cyan')
							print colored(str(LINES[5][lines])+'_WF_0' + ' LINES-1 Wdt-Fit  1GF-IntVal','cyan')
							print colored(str(LINES[5][lines])+'_WP_0' + ' LINES-2 Wdt-Plt  1GF-IntVal','cyan')
							print colored(str(LINES[5][lines])+'_CF_0' + ' LINES-7 Ctr Fit Bnds  1GF-IntVal','cyan')
							print colored(str(LINES[5][lines])+'_CO_0' + ' LINES-8 Ctr Fit Ofst  1GF-IntVal','cyan')
							print colored(str(LINES[5][lines])+'_AF_0' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','cyan')
							print
							print colored('2: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'magenta')
							print colored(str(LINES[5][lines])+'_WF_0' + ' LINES-1 Wdt-Fit  1GF-IntVal','magenta')
							print colored(str(LINES[5][lines])+'_WP_0' + ' LINES-2 Wdt-Plt  1GF-IntVal','magenta')
							print colored(str(LINES[5][lines])+'_CF_0' + ' LINES-7 Ctr Fit Bnds  1GF-IntVal','magenta')
							print colored(str(LINES[5][lines])+'_CO_0' + ' LINES-8 Ctr Fit Ofst  1GF-IntVal','magenta')
							print colored(str(LINES[5][lines])+'_AF_0' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','magenta')
							print '*****'
							print
							quit()
						try:
							L10_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF_0')        #LINES-8 Ctr Fit Ofst  1GF-IntVal LNE_AMP_BNDS
							L10_2 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF_0')        #LINES-8 Ctr Fit Ofst  1GF-IntVal LNE_AMP_BNDS
							print colored('1: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'cyan')
							print colored(str(LINES[5][lines])+'_AF_0' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','cyan')
							print colored('2: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'magenta')
							print colored(str(LINES[5][lines])+'_AF_0' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','magenta')
							print colored('*****Success!******','yellow')
							print
						except KeyError:
							print
							print colored('Header not found!','yellow')
							print colored('Adding Header with default valuee 0.001:','yellow')
							print colored('1: ' + LINES[3][lines-2]  + '-' + str(LINES[0][lines-2]),'cyan')							
							print colored(str(LINES[5][lines-2])+'_AF01' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','cyan')
							print colored('2: ' + LINES[3][lines-1]  + '-' + str(LINES[0][lines-1]),'magenta')							
							print colored(str(LINES[5][lines-1])+'_AF02' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','magenta')
							Header_Get_Add(specfile_glx,str(LINES[5][lines])+'_AF01',0.001,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' LINES-10 Amp Fit Bnds  1GF-IntVal')
							Header_Get_Add(specfile_glx,str(LINES[5][lines])+'_AF02',0.001,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' LINES-10 Amp Fit Bnds  1GF-IntVal')
							L10_1 = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_AF01')        #LINES-8 Ctr Fit Ofst  1GF-IntVal LNE_AMP_BNDS
							L10_1 = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_AF02')        #LINES-8 Ctr Fit Ofst  1GF-IntVal LNE_AMP_BNDS
							print colored('*****Success!******','yellow')
							print
						################FOR CASES WHERE KLINE WIIDHT ==0################
						if L1_1  == 0:
							L1_1  = 1#LINES[1][lines]
						else:
							pass
						if L1_2  == 0:
							L1_2  = 1#LINES[1][lines]
						else:
							pass
						################FOR CASES WHERE KLINE WIIDHT ==0################
					elif ivl_fts_hdr == False:
						L1_1  = LINES[1][lines-2]
						L2_1  = LINES[2][lines-2]
						L7_1  = LINES[7][lines-2]
						L8_1  = LINES[8][lines-2]
						L10_1 = LINES[10][lines-2]

						L1_2  = LINES[1][lines-1]
						L2_2  = LINES[2][lines-1]
						L7_2  = LINES[7][lines-1]
						L8_2  = LINES[8][lines-1]
						L10_2 = LINES[10][lines-1]
						print
						print colored('Initial fit variables from Lines_Dictionary.py!','yellow')
						print					
					print colored('Initial Values: ','cyan')
					print colored('1: ' + LINES[3][lines-2]  + '-' + str(LINES[0][lines-2]),'cyan')					
					print colored(str(LINES[5][lines])+'_WF01' + ': ' + str(L1_1),'cyan')
					print colored(str(LINES[5][lines])+'_WP01' + ': ' + str(L2_1),'cyan')
					print colored(str(LINES[5][lines])+'_CF01' + ': ' + str(L7_1),'cyan')
					print colored(str(LINES[5][lines])+'_CO01' + ': ' + str(L8_1),'cyan')
					print colored(str(LINES[5][lines])+'_AF01' + ': ' + str(L10_1),'cyan')
					print
					print colored('Initial Values: ','magenta')
					print colored('2: ' + LINES[3][lines-1]  + '-' + str(LINES[0][lines-1]),'magenta')					
					print colored(str(LINES[5][lines])+'_WF02' + ': ' + str(L1_2),'magenta')
					print colored(str(LINES[5][lines])+'_WP02' + ': ' + str(L2_2),'magenta')
					print colored(str(LINES[5][lines])+'_CF02' + ': ' + str(L7_2),'magenta')
					print colored(str(LINES[5][lines])+'_CO02' + ': ' + str(L8_2),'magenta')
					print colored(str(LINES[5][lines])+'_AF02' + ': ' + str(L10_2),'magenta')
					print
					########################Getting Line Fitting Initial Values From Statcked Spectrum Fits Header#########################
					##################################################CENTRAL GAUSSIAN-1###################################################
					lmb_min_lim_line_ft = (LINES[0][lines-2]+L8_1) - MSK_NTMS*L1_1 ##IT WAS LINE CTR - LINE OFFSET
					lmb_max_lim_line_ft = (LINES[0][lines-2]+L8_1) + MSK_NTMS*L1_1
					lmb_min_lim_line    = (LINES[0][lines-2]+L8_1)*(1+z_glx_Ps) - 1.5*MSK_NTMS*L2_1#- 20#L2_1 - 10 ##IT WAS LINE CTR - LINE OFFSET
					lmb_max_lim_line    = (LINES[0][lines-2]+L8_1)*(1+z_glx_Ps) + 1.5*MSK_NTMS*L2_1#+ 20#L2_1 + 10

					mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
					mask_ft    = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
					label_glx  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function

					idx_ctr_ft_reg = np.abs(lambda_glx[mask_ft] - (LINES[0][lines-2]+L8_1)).argmin()

					X0_f2DG    = (LINES[0][lines-2]+L8_1)
					SIGMA_f2DG = L1_1
					A_f2DG     = -(1-(min(inten_glx[mask_ft])))
					A_f2DG     = -(1-inten_glx[mask_ft][idx_ctr_ft_reg])

					max_val    = -(1-min(inten_glx[mask_ft]))
					lambda_max = (lambda_glx[np.where(inten_glx==min(inten_glx[mask_ft]))[0]][0])					

					if pre_off_plt == True:
						plt.step(lambda_glx[mask_pl], inten_glx[mask_pl],
								where='mid',lw=3.0,alpha=0.5,linestyle=':',color='gray',
								label='Original Spectrum')
					elif pre_off_plt == False:
						pass

					hsw_nmb_med = np.ceil(np.median(inten_glx_hst[mask_ft]))
					hsw_nmb_med = np.ceil(np.median(inten_glx_hsw[mask_ft]))
					Header_Add(specfile_glx,str(LINES[5][lines-2])+'_NHT',float(hsw_nmb_med) ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + '# glxs stk hst Fit Spec Reg (med)')
					Header_Add(specfile_glx,str(LINES[5][lines-2])+'_NHW',float(hsw_nmb_med) ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + '# glxs stk hsw Fit Spec Reg (med)')
					print
					print specfile_glx,str(LINES[5][lines-2])+'_NHT',float(hsw_nmb_med)
					print specfile_glx,str(LINES[5][lines-2])+'_NHW',float(hsw_nmb_med)
					print

					initial_guess_O   = (X0_f2DG,A_f2DG,SIGMA_f2DG,max(inten_glx[mask_ft])-1)
					initial_guess_0   = (X0_f2DG,A_f2DG,SIGMA_f2DG)
				
					#################################################CENTRAL GAUSSIAN-1-C##################################################
					if fix_ctr_gau_1 == False:
						print
						print colored('Fitting 1st line','cyan')
						print colored('1-0-Fitting Central line','cyan')
						print
						#################################################CENTRAL GAUSSIAN-1-0##################################################
						try:
							gmodel_0           = Model(func_1D_Gaussian)
							gmodel_0.set_param_hint('X_0'  , value=X0_f2DG   , min=X0_f2DG - (X0_f2DG*L7_1), max=X0_f2DG + (X0_f2DG*L7_1))
							#gmodel_0.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
							gmodel_0.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG  - (A_f2DG*L10_1), max=A_f2DG  + (A_f2DG*L10_1))#min=A_f2DG-0.001, max=A_f2DG)
							gmodel_0.set_param_hint('SIGMA', value=SIGMA_f2DG)
							pars_0             = gmodel_0.make_params()							
							result_0_1         = gmodel_0.fit(inten_glx[mask_ft],pars_0,
													X=lambda_glx[mask_ft],
													X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,
													nan_policy = 'omit')
							CTRE_G_0_1         = result_0_1.params['X_0'].value
							AMPL_G_0_1         = result_0_1.params['A'].value
							SGMA_G_0_1         = abs(result_0_1.params['SIGMA'].value)
							FWHM_G_0_1         = lw_sgma2fwhm(SGMA_G_0_1)
							W_0_1              = integrate.quad(lambda x: AMPL_G_0_1*np.exp(-((x)**2)/(2*SGMA_G_0_1**2)), -np.inf, np.inf)
							EW_0_1             = np.round(abs(np.asarray(W_0_1[0])),10)
							EWE_0_1            = np.round(abs(np.asarray(W_0_1[1])),10)
							data_fitted_0      = func_1D_Gaussian((lambda_glx[mask_ft]), CTRE_G_0_1,AMPL_G_0_1,SGMA_G_0_1)

							CTRE_G_0_1_E       = result_0_1.params['X_0'].stderr
							AMPL_G_0_1_E       = result_0_1.params['A'].stderr
							SGMA_G_0_1_E       = result_0_1.params['SIGMA'].stderr

							CTRE_G_0_1_cor     = result_0_1.params['X_0'].correl
							AMPL_G_0_1_cor     = result_0_1.params['A'].correl
							SGMA_G_0_1_cor     = result_0_1.params['SIGMA'].correl

							chisqr_0_1         = result_0_1.chisqr
							redchi_0_1         = result_0_1.redchi
						except (RuntimeError,ValueError,TypeError):
							popt_0, pcov_0   = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
							perr_0           = [999999.99999,999999.99999,999999.99999]
							CTRE_G_0         = 999999.99999
							AMPL_G_0         = 999999.99999
							SGMA_G_0         = 999999.99999
							FWHM_G_0         = 999999.99999
							EW_0             = 999999.99999
							EWE_0            = 999999.99999

							CTRE_G_0_E      = 999999.99999
							AMPL_G_0_E      = 999999.99999
							SGMA_G_0_E      = 999999.99999

							CTRE_G_0_cor    = 999999.99999
							AMPL_G_0_cor    = 999999.99999
							SGMA_G_0_cor    = 999999.99999

							chisqr_0        = 999999.99999
							redchi_0        = 999999.99999
						if fit_vls_hdr == True and fix_ctr_gau_1 ==False:
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CF01',float(CTRE_G_0_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct-1' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AF01',float(AMPL_G_0_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct-1' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_FF01',float(FWHM_G_0_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct-1' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WF01',float(EW_0_1)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct-1' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_EF01',float(EWE_0_1)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct-1' + str(fit_fnct) + '-' +str(fit_type))
							print
							print colored('The fit (CTR-1-0) values will be added to the fits headers!','cyan')
							print
						else:
							print
							print colored('The fit (CTR-1-0) values will not be added to the fits headers!','cyan')
							print
						#################################################CENTRAL GAUSSIAN-1-0##################################################
						#################################################CENTRAL GAUSSIAN-1-C##################################################
						try:
							gmodel_O           = Model(func_1D_Gaussian_O)
							gmodel_O.set_param_hint('X_0'   , value=X0_f2DG   , min=X0_f2DG-(X0_f2DG*L7_1), max=X0_f2DG+(X0_f2DG*L7_1))
							#gmodel_O.set_param_hint('A'     , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
							gmodel_O.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG  - (A_f2DG*L10_1) , max=A_f2DG  + (A_f2DG*L10_1))#min=A_f2DG-0.001, max=A_f2DG)
							gmodel_O.set_param_hint('SIGMA' , value=SIGMA_f2DG)
							gmodel_O.set_param_hint('OFFSET', value=max(inten_glx[mask_ft])-1)
							pars_O             = gmodel_O.make_params()

							result_O_1         = gmodel_O.fit(inten_glx[mask_ft],pars_O,
													X=lambda_glx[mask_ft],X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,OFFSET=max(inten_glx[mask_ft])-1,
													nan_policy = 'omit')
							CTRE_G_O_1         = result_O_1.params['X_0'].value
							AMPL_G_O_1         = result_O_1.params['A'].value
							SGMA_G_O_1         = abs(result_O_1.params['SIGMA'].value)
							OFST_G_O_1         = abs(result_O_1.params['OFFSET'].value)
							FWHM_G_O_1         = lw_sgma2fwhm(SGMA_G_O_1)
							W_O_1              = integrate.quad(lambda x: AMPL_G_O_1*np.exp(-((x)**2)/(2*SGMA_G_O_1**2)), -np.inf, np.inf)
							EW_O_1             = np.round(abs(np.asarray(W_O_1[0])),10)
							EWE_O_1            = np.round(abs(np.asarray(W_O_1[1])),10)
							data_fitted_O_1    = func_1D_Gaussian_O((lambda_glx[mask_ft]),CTRE_G_O_1,AMPL_G_O_1,SGMA_G_O_1,OFST_G_O_1)

							CTRE_G_O_E         = result_O_1.params['X_0'].stderr
							AMPL_G_O_E         = result_O_1.params['A'].stderr
							SGMA_G_O_E         = result_O_1.params['SIGMA'].stderr

							CTRE_G_O_cor       = result_O_1.params['X_0'].correl
							AMPL_G_O_cor       = result_O_1.params['A'].correl
							SGMA_G_O_cor       = result_O_1.params['SIGMA'].correl

							chisqr_O_1         = result_O_1.chisqr
							redchi_O_1         = result_O_1.redchi
							
							#####################################################################################################################
							if ofs_ctr_fit == True:
								print
								print colored('Using Fitted Center From Offset Fit to Redefine Fitting Region!','yellow')
								print
								lmb_min_lim_line_ft = (CTRE_G_O_1-L8_1) - MSK_NTMS*L1_1 #IT WAS LINE CTR - LINE OFFSET
								lmb_max_lim_line_ft = (CTRE_G_O_1+L8_1) + MSK_NTMS*L1_1
								#lmb_min_lim_line    = (CTRE_G_O-L8_1)*(1+z_glx_Ps) - 1.5*MSK_NTMS*L2_1#-20#L2_1 - 10
								#lmb_max_lim_line    = (CTRE_G_O+L8_1)*(1+z_glx_Ps) + 1.5*MSK_NTMS*L2_1#+20#L2_1 + 10
								#mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
								mask_ft     = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
							else:
								pass
							#####################################################################################################################
							#A_f2DG             = -(1-(min(inten_glx[mask_ft])))
							#inten_glx[mask_ft] = inten_glx[mask_ft] - OFST_G_O ####OFFSET - SHOULD BE APPLIED TO BE IDENTICAL TO METHOD GAUSS?
							initial_guess_C    = (X0_f2DG,A_f2DG,SIGMA_f2DG)#,max(inten_glx[mask_ft])-1)

							gmodel_C           = Model(func_1D_Gaussian)
							gmodel_C.set_param_hint('X_0'  , value=X0_f2DG   , min=X0_f2DG-(X0_f2DG*L7_1), max=X0_f2DG+(X0_f2DG*L7_1))
							#gmodel_C.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
							gmodel_C.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG  - (A_f2DG*L10_1) , max=A_f2DG  + (A_f2DG*L10_1))#min=A_f2DG-0.001, max=A_f2DG)
							gmodel_C.set_param_hint('SIGMA', value=SIGMA_f2DG)
							pars_C             = gmodel_C.make_params()
							result_C_1         = gmodel_C.fit(inten_glx[mask_ft],pars_C,
													X=lambda_glx[mask_ft],X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,
													nan_policy = 'omit')
							CTRE_G_C_1         = result_C_1.params['X_0'].value
							AMPL_G_C_1         = result_C_1.params['A'].value
							SGMA_G_C_1         = abs(result_C_1.params['SIGMA'].value)
							FWHM_G_C_1         = lw_sgma2fwhm(SGMA_G_C_1)

							W_C_1              = integrate.quad(lambda x: AMPL_G_C_1*np.exp(-((x)**2)/(2*SGMA_G_C_1**2)), -np.inf, np.inf)
							EW_C_1             = np.round(abs(np.asarray(W_C_1[0])),10)
							EWE_C_1            = np.round(abs(np.asarray(W_C_1[1])),10)
							data_fitted_C_1    = func_1D_Gaussian((lambda_glx[mask_ft]), CTRE_G_C_1,AMPL_G_C_1,SGMA_G_C_1)

							CTRE_G_C_1_E         = result_C_1.params['X_0'].stderr
							AMPL_G_C_1_E         = result_C_1.params['A'].stderr
							SGMA_G_C_1_E         = result_C_1.params['SIGMA'].stderr

							CTRE_G_C_1_cor       = result_C_1.params['X_0'].correl
							AMPL_G_C_1_cor       = result_C_1.params['A'].correl
							SGMA_G_C_1_cor       = result_C_1.params['SIGMA'].correl

							AMPL_SNR_1           = AMPL_G_C_1
							CTRE_SNR_1           = CTRE_G_C_1
							SGMA_SNR_1           = abs(SGMA_G_C_1)

							if CTRE_G_C_1_E == None:
								CTRE_G_C_1_E = 999999.99999
							else:
								pass
							if AMPL_G_C_1_E == None:
								AMPL_G_C_1_E = 999999.99999
							else:
								pass
							if SGMA_G_C_1_E == None:
								SGMA_G_C_1_E = 999999.99999
							else:
								pass
							if CTRE_G_C_1_cor == None:
								CTRE_G_C_1_cor = 999999.99999
							else:
								pass
							if AMPL_G_C_1_cor == None:
								AMPL_G_C_1_cor = 999999.99999
							else:
								pass
							if SGMA_G_C_1_cor == None:
								SGMA_G_C_1_cor = 999999.99999
							else:
								pass
							chisqr_C_1      = result_C_1.chisqr
							redchi_C_1      = result_C_1.redchi
							##inten_glx[mask_ft] = inten_glx[mask_ft] + OFST_G_O #OFFSET +
						except (RuntimeError,ValueError,TypeError):
							print colored('RuntimeError','cyan')
							popt_C_1, pcov_C_1 = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
							perr_C_1           = [999999.99999,999999.99999,999999.99999]
							CTRE_G_C_1         = 999999.99999
							AMPL_G_C_1         = 999999.99999
							SGMA_G_C_1         = 999999.99999
							FWHM_G_C_1         = 999999.99999
							EW_C_1             = 999999.99999
							EWE_C_1            = 999999.99999

							CTRE_G_C_1_E       = 999999.99999
							AMPL_G_C_1_E       = 999999.99999
							SGMA_G_C_1_E       = 999999.99999
							CTRE_G_C_1_cor     = 999999.99999
							AMPL_G_C_1_cor     = 999999.99999
							SGMA_G_C_1_cor     = 999999.99999
							chisqr_C_1         = 999999.99999
							redchi_C_1         = 999999.99999

							popt_O_1 ,pcov_O_1 = [999999.99999,999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999,999999.99999]
							perr_O_1           = [999999.99999,999999.99999,999999.99999,999999.99999]
							CTRE_G_O_1         = 999999.99999
							AMPL_G_O_1         = 999999.99999
							SGMA_G_O_1         = 999999.99999
							OFST_G_O_1         = 999999.99999
							FWHM_G_O_1         = 999999.99999
							EW_O_1             = 999999.99999
							EWE_O_1            = 999999.99999

							CTRE_G_O_1_E      = 999999.99999
							AMPL_G_O_1_E      = 999999.99999
							SGMA_G_O_1_E      = 999999.99999
							CTRE_G_O_1_cor    = 999999.99999
							AMPL_G_O_1_cor    = 999999.99999
							SGMA_G_O_1_cor    = 999999.99999
							OFST_G_O_1_cor    = 999999.99999
							chisqr_O_1        = 999999.99999
							redchi_O_1        = 999999.99999

							AMPL_SNR_1        = 999999.99999
							CTRE_SNR_1        = 999999.99999
							SGMA_SNR_1        = 999999.99999
						print
						print colored(specfile_glx,'cyan')
						print
						print colored(str(LINES[0][lines-2])+'-'+str(LINES[3][lines-2]),'cyan')
						print
						print colored(str(LINES[5][lines-2])+'_CGLC: ' + str(CTRE_G_C_1)  ,'cyan')
						print colored(str(LINES[5][lines-2])+'_AGLC: ' + str(AMPL_G_C_1)  ,'cyan')
						print colored(str(LINES[5][lines-2])+'_SGLC: ' + str(SGMA_G_C_1)  ,'cyan')
						print colored(str(LINES[5][lines-2])+'_FGLC: ' + str(FWHM_G_C_1)  ,'cyan')
						print colored(str(LINES[5][lines-2])+'_WGLC: ' + str(EW_C_1)      ,'cyan')
						print colored(str(LINES[5][lines-2])+'_EGLC: ' + str(EWE_C_1)     ,'cyan')
						print
						print
						#inten_glx[mask_ft] = inten_glx[mask_ft] + OFST_G_O
						if fit_vls_hdr == True and fix_ctr_gau_1==False:
							Header_Add(specfile_glx,'BSF_FCT',str(fit_fnct)                         ,header_comment = 'Fit function')
							Header_Add(specfile_glx,'BSF_MTH',str(fit_type)                         ,header_comment = 'Fit method')
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CLO1',float(CTRE_G_O_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_ALO1',float(AMPL_G_O_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_FLO1',float(FWHM_G_O_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WLO1',float(EW_O_1)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_ELO1',float(EWE_O_1)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_OFO1',float(OFST_G_O_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ofst 1GF Offst' + str(fit_fnct) + '-' +str(fit_type))

							Header_Add(specfile_glx,str(LINES[5][lines])+'_CLC1',float(CTRE_G_C_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_ALC1',float(AMPL_G_C_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_SLC1',float(SGMA_G_C_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_FLC1',float(FWHM_G_C_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WLC1',float(EW_C_1)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_ELC1',float(EWE_C_1)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CEC1',float(CTRE_G_C_1_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AEC1',float(AMPL_G_C_1_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_SEC1',float(SGMA_G_C_1_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_fnct) + '-' +str(fit_type))

							Header_Add(specfile_glx,str(LINES[5][lines])+'_CHL1',float(chisqr_C_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 1GF' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CRL1',float(redchi_C_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines-2]) + ' Chi2 Reduced 1GF' + str(fit_fnct) + '-' +str(fit_type))

							print
							print colored('The fit (CTR-1-C & CTR-1-O) values will be added to the fits headers!','cyan')
							print
						else:
							print
							print colored('The fit (CTR-1-C & CTR-1-O) values will not be added to the fits headers!','cyan')
							print

						if uft_lne_vls == False and fit_vls_hdr == True and int_vlf_hdr==True:
							print
							print colored('Initial Guess Values G-1 for line Fitting will be recorded!','yellow')
							print colored('Info input parameters (pre_gauss_shf, pre_gauss_ctr) in Spec_Stk_Stack_0.4.py!','yellow')
							print
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WF01',float(L1_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-1-1 Wdt-Fit  1GF-IntVal')         #LINES-1  Wdt-Fit  1GF-IntVal      WIDTH-FIT
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WP01',float(L2_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-2-1 Wdt-Plt  1GF-IntVal')         #LINES-2  Wdt-Plt  1GF-IntVal      WIDTH-PLT
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CF01',float(L7_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-7-1 Ctr Fit Bnds  1GF-IntVal')    #LINES-7  Ctr Fit Bnds  1GF-IntVal CTR-FIT-BNDS
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CO01',float(L8_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-8-1 Ctr Fit Ofst  1GF-IntVal')    #LINES-8  Ctr Fit Ofst  1GF-IntVal CTR-OFFSET
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AF01',float(L10_1),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-10-1 Amp Fit Bnds  1GF-IntVal')   #LINES-10 Ctr Fit Amp   1GF-IntVal LNE_AMP_BNDS

							print
							print colored('Initial Values: ','cyan')
							print colored('1: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'cyan')					
							print colored(str(LINES[5][lines])+'_WF01' + ': ' + str(L1_1),'cyan')
							print colored(str(LINES[5][lines])+'_WP01' + ': ' + str(L2_1),'cyan')
							print colored(str(LINES[5][lines])+'_CF01' + ': ' + str(L7_1),'cyan')
							print colored(str(LINES[5][lines])+'_CO01' + ': ' + str(L8_1),'cyan')
							print colored(str(LINES[5][lines])+'_AF01' + ': ' + str(L10_1),'cyan')
							print
						else:
							print
							print colored('Initial Guess Values G-1 for line Fitting will NOT be recorded!','yellow')
							print
							pass
					#################################################CENTRAL GAUSSIAN-1-C##################################################
					elif fix_ctr_gau_1 == True:
						print
						print colored('1-CTR-gaussian already fitted!','yellow')
						print colored('Values from fits header','yellow')
						try:
							CTRE_G_0_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CF01')#,float(CTRE_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct')
							AMPL_G_0_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF01')#,float(AMPL_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct')
							FWHM_G_0_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FF01')#,float(FWHM_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct')
							EW_0_1        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WF01')#,float(EW_0)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct')
							EWE_0_1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EF01')#,float(EWE_0)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct')

							CTRE_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLO1')#,float(CTRE_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Offst' + str(fit_type))
							AMPL_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALO1')#,float(AMPL_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Offst' + str(fit_type))
							FWHM_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FLO1')#,float(FWHM_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Offst' + str(fit_type))
							EW_O_1        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WLO1')#,float(EW_O)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Offst' + str(fit_type))
							EWE_O_1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_ELO1')#,float(EWE_O)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Offst' + str(fit_type))
							OFST_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_OFO1')#,float(OFST_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ofst 1GF Offst' + str(fit_type))

							CTRE_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLC1')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
							AMPL_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALC1')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
							SGMA_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_SLC1')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
							FWHM_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FLC1')#,float(FWHM_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
							EW_C_1        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WLC1')#,float(EW_C)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
							EWE_C_1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_ELC1')#,float(EWE_C)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
							CTRE_G_C_1_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CEC1')#,float(CTRE_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
							AMPL_G_C_1_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_AEC1')#,float(AMPL_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
							SGMA_G_C_1_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_SEC1')#,float(SGMA_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))

							chisqr_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CHL1')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 1GF' + str(fit_type))
							redchi_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CRL1')#,float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 Reduced 1GF' + str(fit_type))

						except KeyError:
							print
							print colored ('Gaussian Fit Parameters are not found on Fits Header!','yellow')
							print colored ('File  : ' + specfile_glx,'yellow')
							print colored ('Header: ' + str(LINES[5][lines-2])+'_CF01','yellow')
							print colored ('Gotta Fit first before fixing a component (CTR)!','yellow')
							print colored ('Or UnFix (fix_ctr_gau_1=False) For Plotting!','yellow')
							print colored ('Quitting!','yellow')
							print
							CTRE_G_0_1    = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_CGF0')#,float(CTRE_G_0) ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + 'Ctr  1GF Crct')
							AMPL_G_0_1    = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_AGF0')#,float(AMPL_G_0) ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + 'Amp  1GF Crct')
							FWHM_G_0_1    = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_FGF0')#,float(FWHM_G_0) ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + 'FWHM 1GF Crct')
							EW_0_1        = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_WGF0')#,float(EW_0)     ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + 'EW   1GF Crct')
							EWE_0_1       = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_EGF0')#,float(EWE_0)    ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + 'EWE  1GF Crct')

							CTRE_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_CGLO')#,float(CTRE_G_O)  ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' Ctr  1GF Offst' + str(fit_type))
							AMPL_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_AGLO')#,float(AMPL_G_O)  ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' Amp  1GF Offst' + str(fit_type))
							FWHM_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_FGLO')#,float(FWHM_G_O)  ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' FWHM 1GF Offst' + str(fit_type))
							EW_O_1        = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_WGLO')#,float(EW_O)      ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' EW   1GF Offst' + str(fit_type))
							EWE_O_1       = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_EGLO')#,float(EWE_O)     ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' EWE  1GF Offst' + str(fit_type))
							OFST_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_OFSO')#,float(OFST_G_O)  ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' Ofst 1GF Offst' + str(fit_type))

							CTRE_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_CGLC')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' Ctr  1GF Crct' + str(fit_type))
							AMPL_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_AGLC')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' Amp  1GF Crct' + str(fit_type))
							SGMA_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_SGLC')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' Sigm 1GF Crct' + str(fit_type))
							FWHM_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_FGLC')#,float(FWHM_G_C)  ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' FWHM 1GF Crct' + str(fit_type))
							EW_C_1        = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_WGLC')#,float(EW_C)      ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' EW   1GF Crct' + str(fit_type))
							EWE_C_1       = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_EGLC')#,float(EWE_C)     ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' EWE  1GF Crct' + str(fit_type))
							CTRE_G_C_1_E  = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_CLEC')#,float(CTRE_G_C_E),header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' Ctr  err 1GF Crct' + str(fit_type))
							AMPL_G_C_1_E  = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_ALEC')#,float(AMPL_G_C_E),header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' Amp  err 1GF Crct' + str(fit_type))
							SGMA_G_C_1_E  = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_SLEC')#,float(SGMA_G_C_E),header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' Sigm err 1GF Crct' + str(fit_type))

							chisqr_C_1    = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_CHGL')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' Chi2 1GF' + str(fit_type))
							redchi_C_1    = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_CRGL')#,float(redchi_C)  ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' Chi2 Reduced 1GF' + str(fit_type))							#quit()
					print
					print colored(str(LINES[0][lines-2])+'-'+str(LINES[3][lines-2])+'-CTR','cyan')
					print
					print colored(str(LINES[5][lines-2])+'_CLC1: ' + str(CTRE_G_C_1)  ,'cyan')
					print colored(str(LINES[5][lines-2])+'_ALC1: ' + str(AMPL_G_C_1)  ,'cyan')
					print colored(str(LINES[5][lines-2])+'_SLC1: ' + str(SGMA_G_C_1)  ,'cyan')
					print colored(str(LINES[5][lines-2])+'_FLC1: ' + str(FWHM_G_C_1)  ,'cyan')
					print colored(str(LINES[5][lines-2])+'_WLC1: ' + str(EW_C_1)      ,'cyan')
					print colored(str(LINES[5][lines-2])+'_ELC1: ' + str(EWE_C_1),'cyan')
					print colored('Fit Values Center, Amplitude, Sigma ('+fit_type+'):','cyan')
					print colored(str(CTRE_G_C_1)+', '+str(AMPL_G_C_1)+', '+str(SGMA_G_C_1),'cyan')
					print
					##################################################CENTRAL GAUSSIAN-1###################################################
					##################################################CENTRAL GAUSSIAN-2###################################################
					lmb_min_lim_line_ft = (LINES[0][lines-1]+L8_2) - MSK_NTMS*LINES[1][lines-1] ##IT WAS LINE CTR - LINE OFFSET
					lmb_max_lim_line_ft = (LINES[0][lines-1]+L8_2) + MSK_NTMS*LINES[1][lines-1]
					lmb_min_lim_line    = (LINES[0][lines-1]+L8_2)*(1+z_glx_Ps) - 1.5*MSK_NTMS*L2_2#- 20#L2_2 - 10 ##IT WAS LINE CTR - LINE OFFSET
					lmb_max_lim_line    = (LINES[0][lines-1]+L8_2)*(1+z_glx_Ps) + 1.5*MSK_NTMS*L2_2#+ 20#L2_2 + 10

					mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
					mask_ft    = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
					label_glx  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function
					idx_ctr_ft_reg = np.abs(lambda_glx[mask_ft] - (LINES[0][lines-1]+L8_2)).argmin()

					X0_f2DG    = (LINES[0][lines-1]+L8_2)
					SIGMA_f2DG = LINES[1][lines-1]
					A_f2DG     = -(1-(min(inten_glx[mask_ft])))
					A_f2DG     = -(1-inten_glx[mask_ft][idx_ctr_ft_reg])

					max_val    = -(1-min(inten_glx[mask_ft]))
					lambda_max = (lambda_glx[np.where(inten_glx==min(inten_glx[mask_ft]))[0]][0])					

					if pre_off_plt == True:
						plt.step(lambda_glx[mask_pl], inten_glx[mask_pl],
								where='mid',lw=3.0,alpha=0.5,linestyle=':',color='gray',
								label='Original Spectrum')
					elif pre_off_plt == False:
						pass
					hsw_nmb_med = np.ceil(np.median(inten_glx_hst[mask_ft]))
					hsw_nmb_med = np.ceil(np.median(inten_glx_hsw[mask_ft]))
					Header_Add(specfile_glx,str(LINES[5][lines-1])+'_NHT',float(hsw_nmb_med) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + '# glxs stk hst Fit Spec Reg (med)')
					Header_Add(specfile_glx,str(LINES[5][lines-1])+'_NHW',float(hsw_nmb_med) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + '# glxs stk hsw Fit Spec Reg (med)')
					print specfile_glx,str(LINES[5][lines-1])+'_NHT',float(hsw_nmb_med) 
					print specfile_glx,str(LINES[5][lines-1])+'_NHW',float(hsw_nmb_med) 
					initial_guess_O   = (X0_f2DG,A_f2DG,SIGMA_f2DG,max(inten_glx[mask_ft])-1)
					initial_guess_0   = (X0_f2DG,A_f2DG,SIGMA_f2DG)
					##################################################CENTRAL GAUSSIAN-2###################################################
					if fix_ctr_gau_2 == False:
						print
						print colored('Fitting 2nd line','magenta')
						print colored('2-0-Fitting Central line','magenta')
						print
						#################################################CENTRAL GAUSSIAN-2-0##################################################
						try:
							gmodel_0           = Model(func_1D_Gaussian)
							gmodel_0.set_param_hint('X_0'  , value=X0_f2DG   , min=X0_f2DG - (X0_f2DG*L7_2), max=X0_f2DG+(X0_f2DG*L7_2))
							#gmodel_0.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
							gmodel_0.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG  - (A_f2DG*L10_2), max=A_f2DG  + (A_f2DG*L10_2))#min=A_f2DG-0.001, max=A_f2DG)
							gmodel_0.set_param_hint('SIGMA', value=SIGMA_f2DG)
							pars_0             = gmodel_0.make_params()							
							result_0_2         = gmodel_0.fit(inten_glx[mask_ft],pars_0,
													X=lambda_glx[mask_ft],
													X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,
													nan_policy = 'omit')
							CTRE_G_0_2         = result_0_2.params['X_0'].value
							AMPL_G_0_2         = result_0_2.params['A'].value
							SGMA_G_0_2         = abs(result_0_2.params['SIGMA'].value)
							FWHM_G_0           = lw_sgma2fwhm(SGMA_G_0_2)
							W_0_2              = integrate.quad(lambda x: AMPL_G_0_2*np.exp(-((x)**2)/(2*SGMA_G_0_2**2)), -np.inf, np.inf)
							EW_0_2             = np.round(abs(np.asarray(W_0_2[0])),10)
							EWE_0_2            = np.round(abs(np.asarray(W_0_2[1])),10)
							data_fitted_0_2    = func_1D_Gaussian((lambda_glx[mask_ft]), CTRE_G_0_2,AMPL_G_0_2,SGMA_G_0_2)

							CTRE_G_0_2_E       = result_0_2.params['X_0'].stderr
							AMPL_G_0_2_E       = result_0_2.params['A'].stderr
							SGMA_G_0_2_E       = result_0_2.params['SIGMA'].stderr

							CTRE_G_0_2_cor     = result_0_2.params['X_0'].correl
							AMPL_G_0_2_cor     = result_0_2.params['A'].correl
							SGMA_G_0_2_cor     = result_0_2.params['SIGMA'].correl

							chisqr_0           = result_0_2.chisqr
							redchi_0           = result_0_2.redchi
						except (RuntimeError,ValueError,TypeError):
							popt_0, pcov_0   = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
							perr_0           = [999999.99999,999999.99999,999999.99999]
							CTRE_G_0_2         = 999999.99999
							AMPL_G_0_2         = 999999.99999
							SGMA_G_0_2         = 999999.99999
							FWHM_G_0         = 999999.99999
							EW_0_2             = 999999.99999
							EWE_0_2            = 999999.99999

							CTRE_G_0_2_E      = 999999.99999
							AMPL_G_0_2_E      = 999999.99999
							SGMA_G_0_2_E      = 999999.99999

							CTRE_G_0_2_cor    = 999999.99999
							AMPL_G_0_2_cor    = 999999.99999
							SGMA_G_0_2_cor    = 999999.99999

							chisqr_0        = 999999.99999
							redchi_0        = 999999.99999
						if fit_vls_hdr == True and fix_ctr_gau_2 ==False:
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CF02',float(CTRE_G_0_2) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct-2' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AF02',float(AMPL_G_0_2) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct-2' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_FF02',float(FWHM_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct-2' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WF02',float(EW_0_2)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct-2' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_EF02',float(EWE_0_2)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct-2' + str(fit_fnct) + '-' +str(fit_type))
							print
							print colored('The fit (CTR-0) values will be added to the fits headers!','magenta')
							print
						else:
							print
							print colored('The fit (CTR-0) values will not be added to the fits headers!','magenta')
							print
						#################################################CENTRAL GAUSSIAN-2-0##################################################
						#################################################CENTRAL GAUSSIAN-2-C##################################################
						try:
							gmodel_O           = Model(func_1D_Gaussian_O)
							gmodel_O.set_param_hint('X_0'   , value=X0_f2DG  , min=X0_f2DG - (X0_f2DG*L7_2), max=X0_f2DG + (X0_f2DG*L7_2))
							#gmodel_O.set_param_hint('A'     , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
							gmodel_O.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG  - (A_f2DG*L10_2), max=A_f2DG  + (A_f2DG*L10_2))#min=A_f2DG-0.001, max=A_f2DG)
							gmodel_O.set_param_hint('SIGMA' , value=SIGMA_f2DG)
							gmodel_O.set_param_hint('OFFSET', value=max(inten_glx[mask_ft])-1)
							pars_O             = gmodel_O.make_params()

							result_O_2         = gmodel_O.fit(inten_glx[mask_ft],pars_O,
													X=lambda_glx[mask_ft],X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,OFFSET=max(inten_glx[mask_ft])-1,
													nan_policy = 'omit')
							CTRE_G_O_2         = result_O_2.params['X_0'].value
							AMPL_G_O_2         = result_O_2.params['A'].value
							SGMA_G_O_2         = abs(result_O_2.params['SIGMA'].value)
							OFST_G_O_2         = abs(result_O_2.params['OFFSET'].value)
							FWHM_G_O_2         = lw_sgma2fwhm(SGMA_G_O_2)
							W_O_2              = integrate.quad(lambda x: AMPL_G_O_2*np.exp(-((x)**2)/(2*SGMA_G_O_2**2)), -np.inf, np.inf)
							EW_O_2             = np.round(abs(np.asarray(W_O_2[0])),10)
							EWE_O_2            = np.round(abs(np.asarray(W_O_2[1])),10)
							data_fitted_O_2    = func_1D_Gaussian_O((lambda_glx[mask_ft]),CTRE_G_O_2,AMPL_G_O_2,SGMA_G_O_2,OFST_G_O_2)

							CTRE_G_O_2_E       = result_O_2.params['X_0'].stderr
							AMPL_G_O_2_E       = result_O_2.params['A'].stderr
							SGMA_G_O_E         = result_O_2.params['SIGMA'].stderr

							CTRE_G_O_2_cor     = result_O_2.params['X_0'].correl
							AMPL_G_O_2_cor     = result_O_2.params['A'].correl
							SGMA_G_O_cor       = result_O_2.params['SIGMA'].correl

							chisqr_O_2         = result_O_2.chisqr
							redchi_O_2         = result_O_2.redchi
							
							#####################################################################################################################
							if ofs_ctr_fit == True:
								print
								print colored('Using Fitted Center From Offset Fit to Redefine Fitting Region!','yellow')
								print
								lmb_min_lim_line_ft = (CTRE_G_O_2-L8_2) - MSK_NTMS*LINES[1][lines-1] #IT WAS LINE CTR - LINE OFFSET
								lmb_max_lim_line_ft = (CTRE_G_O_2+L8_2) + MSK_NTMS*LINES[1][lines-1]
								#lmb_min_lim_line    = (CTRE_G_O-L8_2)*(1+z_glx_Ps) - 1.5*MSK_NTMS*L2_2#-20#L2_2 - 10
								#lmb_max_lim_line    = (CTRE_G_O+L8_2)*(1+z_glx_Ps) + 1.5*MSK_NTMS*L2_2#+20#L2_2 + 10
								#mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
								mask_ft     = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
							else:
								pass
							#####################################################################################################################
							#A_f2DG             = -(1-(min(inten_glx[mask_ft])))
							#inten_glx[mask_ft] = inten_glx[mask_ft] - OFST_G_O ####OFFSET - SHOULD BE APPLIED TO BE IDENTICAL TO METHOD GAUSS?
							initial_guess_C    = (X0_f2DG,A_f2DG,SIGMA_f2DG)#,max(inten_glx[mask_ft])-1)

							gmodel_C           = Model(func_1D_Gaussian)
							gmodel_C.set_param_hint('X_0'  , value=X0_f2DG   , min=X0_f2DG - (X0_f2DG*(X0_f2DG*L7_2)), max=X0_f2DG + (X0_f2DG*(X0_f2DG*L7_2)))
							#gmodel_C.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
							gmodel_C.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG  - (A_f2DG *(A_f2DG*L10_2)), max=A_f2DG  + (A_f2DG*(A_f2DG*L10_2)))#min=A_f2DG-0.001, max=A_f2DG)
							gmodel_C.set_param_hint('SIGMA', value=SIGMA_f2DG)
							pars_C             = gmodel_C.make_params()
							result_C_2         = gmodel_C.fit(inten_glx[mask_ft],pars_C,
													X=lambda_glx[mask_ft],X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,
													nan_policy = 'omit')
							CTRE_G_C_2         = result_C_2.params['X_0'].value
							AMPL_G_C_2         = result_C_2.params['A'].value
							SGMA_G_C_2         = abs(result_C_2.params['SIGMA'].value)
							FWHM_G_C_2         = lw_sgma2fwhm(SGMA_G_C_2)

							W_C_2              = integrate.quad(lambda x: AMPL_G_C_2*np.exp(-((x)**2)/(2*SGMA_G_C_2**2)), -np.inf, np.inf)
							EW_C_2             = np.round(abs(np.asarray(W_C_2[0])),10)
							EWE_C_2            = np.round(abs(np.asarray(W_C_2[1])),10)
							data_fitted_C      = func_1D_Gaussian((lambda_glx[mask_ft]), CTRE_G_C_2,AMPL_G_C_2,SGMA_G_C_2)

							CTRE_G_C_2_E       = result_C_2.params['X_0'].stderr
							AMPL_G_C_2_E       = result_C_2.params['A'].stderr
							SGMA_G_C_2_E       = result_C_2.params['SIGMA'].stderr

							CTRE_G_C_2_cor     = result_C_2.params['X_0'].correl
							AMPL_G_C_2_cor     = result_C_2.params['A'].correl
							SGMA_G_C_2_cor     = result_C_2.params['SIGMA'].correl

							AMPL_SNR_2           = AMPL_G_C_2
							CTRE_SNR_2           = CTRE_G_C_2
							SGMA_SNR_2           = abs(SGMA_G_C_2)

							if CTRE_G_C_2_E == None:
								CTRE_G_C_2_E = 999999.99999
							else:
								pass
							if AMPL_G_C_2_E == None:
								AMPL_G_C_2_E = 999999.99999
							else:
								pass
							if SGMA_G_C_2_E == None:
								SGMA_G_C_2_E = 999999.99999
							else:
								pass
							if CTRE_G_C_2_cor == None:
								CTRE_G_C_2_cor = 999999.99999
							else:
								pass
							if AMPL_G_C_2_cor == None:
								AMPL_G_C_2_cor = 999999.99999
							else:
								pass
							if SGMA_G_C_2_cor == None:
								SGMA_G_C_2_cor = 999999.99999
							else:
								pass
							chisqr_C_2        = result_C_2.chisqr
							redchi_C_2        = result_C_2.redchi
							##inten_glx[mask_ft] = inten_glx[mask_ft] + OFST_G_O #OFFSET +
						except (RuntimeError,ValueError,TypeError):
							print colored('RuntimeError','cyan')
							popt_C_2, pcov_C_2 = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
							perr_C_2           = [999999.99999,999999.99999,999999.99999]
							CTRE_G_C_2         = 999999.99999
							AMPL_G_C_2         = 999999.99999
							SGMA_G_C_2         = 999999.99999
							FWHM_G_C_2         = 999999.99999
							EW_C_2             = 999999.99999
							EWE_C_2            = 999999.99999

							CTRE_G_C_2_E       = 999999.99999
							AMPL_G_C_2_E       = 999999.99999
							SGMA_G_C_2_E       = 999999.99999
							CTRE_G_C_2_cor     = 999999.99999
							AMPL_G_C_2_cor     = 999999.99999
							SGMA_G_C_2_cor     = 999999.99999
							chisqr_C_2         = 999999.99999
							redchi_C_2         = 999999.99999

							popt_O_2 ,pcov_O_2 = [999999.99999,999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999,999999.99999]
							perr_O_2           = [999999.99999,999999.99999,999999.99999,999999.99999]
							CTRE_G_O_2         = 999999.99999
							AMPL_G_O_2         = 999999.99999
							SGMA_G_O_2         = 999999.99999
							OFST_G_O_2         = 999999.99999
							FWHM_G_O_2         = 999999.99999
							EW_O_2             = 999999.99999
							EWE_O_2            = 999999.99999

							CTRE_G_O_2_E       = 999999.99999
							AMPL_G_O_2_E       = 999999.99999
							SGMA_G_O_2_E       = 999999.99999
							CTRE_G_O_2_cor     = 999999.99999
							AMPL_G_O_2_cor     = 999999.99999
							SGMA_G_O_2_cor     = 999999.99999
							OFST_G_O_2_cor     = 999999.99999
							chisqr_O_2         = 999999.99999
							redchi_O_2         = 999999.99999

							AMPL_SNR_2         = 999999.99999
							CTRE_SNR_2         = 999999.99999
							SGMA_SNR_2         = 999999.99999
						print
						print colored(specfile_glx,'cyan')
						print
						print colored(str(LINES[0][lines-1])+'-'+str(LINES[3][lines-1]),'yellow')
						print
						print colored(str(LINES[5][lines-1])+'_CGLC: ' + str(CTRE_G_C_1)  ,'yellow')
						print colored(str(LINES[5][lines-1])+'_AGLC: ' + str(AMPL_G_C_1)  ,'yellow')
						print colored(str(LINES[5][lines-1])+'_SGLC: ' + str(SGMA_G_C_1)  ,'yellow')
						print colored(str(LINES[5][lines-1])+'_FGLC: ' + str(FWHM_G_C_1)  ,'yellow')
						print colored(str(LINES[5][lines-1])+'_WGLC: ' + str(EW_C_1)      ,'yellow')
						print colored(str(LINES[5][lines-1])+'_EGLC: ' + str(EWE_C_1),'yellow')
						print
						print
						#inten_glx[mask_ft] = inten_glx[mask_ft] + OFST_G_O

						if fit_vls_hdr == True and fix_ctr_gau_2==False:
							Header_Add(specfile_glx,'BSF_FCT',str(fit_fnct)                         ,header_comment = 'Fit function')
							Header_Add(specfile_glx,'BSF_MTH',str(fit_type)                         ,header_comment = 'Fit method')
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CLO2',float(CTRE_G_O_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  2-1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_ALO2',float(AMPL_G_O_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  2-1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_FLO2',float(FWHM_G_O_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 2-1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WLO2',float(EW_O_2)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   2-1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_ELO2',float(EWE_O_2)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  2-1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_OFO2',float(OFST_G_O_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ofst 2-1GF Offst' + str(fit_fnct) + '-' +str(fit_type))

							Header_Add(specfile_glx,str(LINES[5][lines])+'_CLC2',float(CTRE_G_C_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  2-1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_ALC2',float(AMPL_G_C_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  2-1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_SLC2',float(SGMA_G_C_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 2-1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_FLC2',float(FWHM_G_C_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 2-1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WLC2',float(EW_C_2)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   2-1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_ELC2',float(EWE_C_2)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  2-1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CEC2',float(CTRE_G_C_2_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 2-1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AEC2',float(AMPL_G_C_2_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 2-1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_SEC2',float(SGMA_G_C_2_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 2-1GF Crct' + str(fit_fnct) + '-' +str(fit_type))

							Header_Add(specfile_glx,str(LINES[5][lines])+'_CHL2',float(chisqr_C_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 2-1GF' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CRL2',float(redchi_C_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines-1]) + ' Chi2 Reduced 2-1GF' + str(fit_fnct) + '-' +str(fit_type))

							print
							print colored('The fit (CTR-C & CTR_O) values will be added to the fits headers!','magenta')
							print
						else:
							print
							print colored('The fit (CTR-C & CTR_O) values will not be added to the fits headers!','magenta')
							print

						if uft_lne_vls == False and fit_vls_hdr == True and int_vlf_hdr==True:
							print
							print colored('Initial Guess Values G-2 for line Fitting will be recorded!','yellow')
							print colored('Info input parameters (pre_gauss_shf, pre_gauss_ctr) in Spec_Stk_Stack_0.4.py!','yellow')
							print
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WF02',float(L1_2) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-1-2 Wdt-Fit  1GF-IntVal')         #LINES-1  Wdt-Fit  1GF-IntVal      WIDTH-FIT
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WP02',float(L2_2) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-2-2 Wdt-Plt  1GF-IntVal')         #LINES-2  Wdt-Plt  1GF-IntVal      WIDTH-PLT
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CF02',float(L7_2) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-7-2 Ctr Fit Bnds  1GF-IntVal')    #LINES-7  Ctr Fit Bnds  1GF-IntVal CTR-FIT-BNDS
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CO02',float(L8_2) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-8-2 Ctr Fit Ofst  1GF-IntVal')    #LINES-8  Ctr Fit Ofst  1GF-IntVal CTR-OFFSET
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AF02',float(L10_2),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-10-2 Amp Fit Bnds  1GF-IntVal')   #LINES-10 Ctr Fit Amp   1GF-IntVal LNE_AMP_BNDS

							print
							print colored('Initial Values: ','cyan')
							print colored('1: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'cyan')					
							print colored(str(LINES[5][lines])+'_WF02' + ': ' + str(L1_2),'cyan')
							print colored(str(LINES[5][lines])+'_WP02' + ': ' + str(L2_2),'cyan')
							print colored(str(LINES[5][lines])+'_CF02' + ': ' + str(L7_2),'cyan')
							print colored(str(LINES[5][lines])+'_CO02' + ': ' + str(L8_2),'cyan')
							print colored(str(LINES[5][lines])+'_AF02' + ': ' + str(L10_2),'cyan')
							print
						else:
							print
							print colored('Initial Guess Values G-1 for line Fitting will NOT be recorded!','yellow')
							print
							pass							
						#################################################CENTRAL GAUSSIAN-2-C##################################################					
					elif fix_ctr_gau_2 == True:
						print
						print colored('0 CTR-gaussian already fitted!','yellow')
						print colored('Values from fits header','yellow')
						try:
							CTRE_G_0_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CF02')#,float(CTRE_G_0) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'Ctr  1GF Crct')
							AMPL_G_0_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF02')#,float(AMPL_G_0) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'Amp  1GF Crct')
							FWHM_G_0_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FF02')#,float(FWHM_G_0) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'FWHM 1GF Crct')
							EW_0_2        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WF02')#,float(EW_0)     ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'EW   1GF Crct')
							EWE_0_2       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EF02')#,float(EWE_0)    ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'EWE  1GF Crct')

							CTRE_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLO2')#,float(CTRE_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ctr  1GF Offst' + str(fit_type))
							AMPL_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALO2')#,float(AMPL_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Amp  1GF Offst' + str(fit_type))
							FWHM_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FLO2')#,float(FWHM_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' FWHM 1GF Offst' + str(fit_type))
							EW_O_2        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WLO2')#,float(EW_O)      ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EW   1GF Offst' + str(fit_type))
							EWE_O_2       = Header_Get(specfile_glx,str(LINES[5][lines])+'_ELO2')#,float(EWE_O)     ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EWE  1GF Offst' + str(fit_type))
							OFST_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_OFO2')#,float(OFST_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ofst 1GF Offst' + str(fit_type))

							CTRE_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLC2')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ctr  1GF Crct' + str(fit_type))
							AMPL_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALC2')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Amp  1GF Crct' + str(fit_type))
							SGMA_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_SLC2')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Sigm 1GF Crct' + str(fit_type))
							FWHM_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FLC2')#,float(FWHM_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' FWHM 1GF Crct' + str(fit_type))
							EW_C_2        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WLC2')#,float(EW_C)      ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EW   1GF Crct' + str(fit_type))
							EWE_C_2       = Header_Get(specfile_glx,str(LINES[5][lines])+'_ELC2')#,float(EWE_C)     ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EWE  1GF Crct' + str(fit_type))
							CTRE_G_C_2_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CEC2')#,float(CTRE_G_C_E),header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ctr  err 1GF Crct' + str(fit_type))
							AMPL_G_C_2_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_AEC2')#,float(AMPL_G_C_E),header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Amp  err 1GF Crct' + str(fit_type))
							SGMA_G_C_2_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_SEC2')#,float(SGMA_G_C_E),header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Sigm err 1GF Crct' + str(fit_type))

							chisqr_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CHL2')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Chi2 1GF' + str(fit_type))
							redchi_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CRL2')#,float(redchi_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Chi2 Reduced 1GF' + str(fit_type))

						except KeyError:
							print
							print colored ('Gaussian Fit Parameters are not found on Fits Header!','yellow')
							print colored ('File  : ' + specfile_glx,'yellow')
							print colored ('Header: ' + str(LINES[5][lines-1])+'_CF01','yellow')
							print colored ('Gotta Fit first before fixing a component (CTR)!','yellow')
							print colored ('Or UnFix (fix_ctr_gau_2=False) For Plotting!','yellow')
							print colored ('Quitting!','yellow')
							print
							CTRE_G_0_2    = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_CGF0')#,float(CTRE_G_0) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'Ctr  1GF Crct')
							AMPL_G_0_2    = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_AGF0')#,float(AMPL_G_0) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'Amp  1GF Crct')
							FWHM_G_0_2    = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_FGF0')#,float(FWHM_G_0) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'FWHM 1GF Crct')
							EW_0_2        = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_WGF0')#,float(EW_0)     ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'EW   1GF Crct')
							EWE_0_2       = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_EGF0')#,float(EWE_0)    ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'EWE  1GF Crct')

							CTRE_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_CGLO')#,float(CTRE_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ctr  1GF Offst' + str(fit_type))
							AMPL_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_AGLO')#,float(AMPL_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Amp  1GF Offst' + str(fit_type))
							FWHM_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_FGLO')#,float(FWHM_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' FWHM 1GF Offst' + str(fit_type))
							EW_O_2        = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_WGLO')#,float(EW_O)      ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EW   1GF Offst' + str(fit_type))
							EWE_O_2       = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_EGLO')#,float(EWE_O)     ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EWE  1GF Offst' + str(fit_type))
							OFST_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_OFSO')#,float(OFST_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ofst 1GF Offst' + str(fit_type))

							CTRE_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_CGLC')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ctr  1GF Crct' + str(fit_type))
							AMPL_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_AGLC')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Amp  1GF Crct' + str(fit_type))
							SGMA_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_SGLC')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Sigm 1GF Crct' + str(fit_type))
							FWHM_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_FGLC')#,float(FWHM_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' FWHM 1GF Crct' + str(fit_type))
							EW_C_2        = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_WGLC')#,float(EW_C)      ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EW   1GF Crct' + str(fit_type))
							EWE_C_2       = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_EGLC')#,float(EWE_C)     ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EWE  1GF Crct' + str(fit_type))
							CTRE_G_C_2_E  = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_CLEC')#,float(CTRE_G_C_E),header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ctr  err 1GF Crct' + str(fit_type))
							AMPL_G_C_2_E  = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_ALEC')#,float(AMPL_G_C_E),header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Amp  err 1GF Crct' + str(fit_type))
							SGMA_G_C_2_E  = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_SLEC')#,float(SGMA_G_C_E),header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Sigm err 1GF Crct' + str(fit_type))

							chisqr_C_2    = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_CHGL')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Chi2 1GF' + str(fit_type))
							redchi_C_2    = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_CRGL')#,float(redchi_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Chi2 Reduced 1GF' + str(fit_type))
					print
					print colored(str(LINES[0][lines-1])+'-'+str(LINES[3][lines-1])+'-CTR','magenta')
					print
					print colored(str(LINES[5][lines-1])+'_CLC2: ' + str(CTRE_G_C_2)  ,'magenta')
					print colored(str(LINES[5][lines-1])+'_ALC2: ' + str(AMPL_G_C_2)  ,'magenta')
					print colored(str(LINES[5][lines-1])+'_SLC2: ' + str(SGMA_G_C_2)  ,'magenta')
					print colored(str(LINES[5][lines-1])+'_FLC2: ' + str(FWHM_G_C_2)  ,'magenta')
					print colored(str(LINES[5][lines-1])+'_WLC2: ' + str(EW_C_2)      ,'magenta')
					print colored(str(LINES[5][lines-1])+'_ELC2: ' + str(EWE_C_2),'magenta')
					print colored('Fit Values Center, Amplitude, Sigma ('+fit_type+'):','magenta')
					print colored(str(CTRE_G_C_2)+', '+str(AMPL_G_C_2)+', '+str(SGMA_G_C_2),'magenta')
					print
					##################################################CENTRAL GAUSSIAN-2###################################################
					###############################################COMPUTING TOTAL AREA###############################################
					print colored('Computing Flux Area','yellow')
					###############################################COMPUTING TOTAL AREA###############################################
					CTRE_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLC1')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
					AMPL_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALC1')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
					SGMA_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_SLC1')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))

					CTRE_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLC2')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ctr  1GF Crct' + str(fit_type))
					AMPL_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALC2')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Amp  1GF Crct' + str(fit_type))
					SGMA_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_SLC2')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Sigm 1GF Crct' + str(fit_type))

					print
					print colored('Computing Areas using info from fits headers.','yellow')
					print 'AMPL_G_C_1: ',str(AMPL_G_C_1),'SGMA_G_C_1: ',str(SGMA_G_C_1)
					print 'AMPL_G_C_2: ',str(AMPL_G_C_2),'SGMA_G_C_2: ',str(SGMA_G_C_2)					
					print

					W_C_1     = integrate.quad(lambda x: AMPL_G_C_1*np.exp(-((x)**2)/(2*SGMA_G_C_1**2)), -np.inf, np.inf)
					EW_C_1    = np.round(abs(np.asarray(W_C_1[0])),10)
					EWE_C_1   = np.round(abs(np.asarray(W_C_1[1])),10)

					W_C_2     = integrate.quad(lambda x: AMPL_G_C_2*np.exp(-((x)**2)/(2*SGMA_G_C_2**2)), -np.inf, np.inf)
					EW_C_2    = np.round(abs(np.asarray(W_C_2[0])),10)
					EWE_C_2   = np.round(abs(np.asarray(W_C_2[1])),10)

					W_C       = integrate.quad(lambda x:  AMPL_G_C_1*np.exp(-((x)**2)/(2*SGMA_G_C_1**2)) + 
												AMPL_G_C_2*np.exp(-((x)**2)/(2*SGMA_G_C_2**2)), 
												-np.inf, np.inf
												)
					EW_C      = np.round((np.asarray(W_C[0])),10)
					EWE_C     = np.round(abs(np.asarray(W_C[1])),10)

					if EW_C_1 == 999999.99999:
						EW_C_1 = 0
					else:
						pass
					if EW_C_2 == 999999.99999:
						EW_C_2 = 0
					else:
						pass
						
					print
					print colored('Areas     :','yellow')
					print colored('Area CTR-1: ' + str(EW_C_1),'yellow')
					print colored('Area CTR-2: ' + str(EW_C_2),'yellow')					
					print colored('Area CTR-B: ' + str(EW_C),'yellow')
					print					
					###############################################COMPUTING TOTAL AREA###############################################
					#############################################ADDING AREA TO FTIS HEADER#############################################
					if fit_vls_hdr == True:
						print
						print colored('The Areas values will be updated to the fits headers!','magenta')
						print
						print colored('Area CTR-1: '                  + str(EW_C_1)   + '-' +str(LINES[5][lines])+'_WMC1','yellow')
						print colored('Area CTR-2: '                  + str(EW_C_2)   + '-' +str(LINES[5][lines])+'_WMC2','yellow')
						print colored('Area CTR-B: '                  + str(EW_C)     + '-' +str(LINES[5][lines])+'_WGM1','yellow')
						print						
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WMC1',float(EW_C_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   C1-GF Crct' + str(fit_fnct) + '-' +str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EMC1',float(EWE_C_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  C1-GF Crct' + str(fit_fnct) + '-' +str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WMC2',float(EW_C_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   C2-GF Crct' + str(fit_fnct) + '-' +str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EMC2',float(EWE_C_2) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  C2-GF Crct' + str(fit_fnct) + '-' +str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WGM1',float(EW_C)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   C1-C2 Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EGM1',float(EWE_C)   ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  C1-C2 Crct' + str(fit_type))
					else:
						print
						print colored('The Areas values will not be updated to the fits headers!','magenta')
						print
					#############################################ADDING AREA TO FTIS HEADER#############################################
				elif 'Dbl' in LINES[3][lines] and fit_fnct=='gaussM' and fit_type == 'lmfit' and mke_lne_fit == True and uft_lne_vls == False:
					fit_typ = 'GM'
					#GAUSSIAN FIT
					MSK_NTMS=2.5
					print
					print colored('1D Gaussian Fit Mode Choosen: Lmfit (Offset)','cyan')
					print
					print 
					print colored('Double Line Fit (Ind)','yellow')
					print colored(LINES[3][lines-2]  + '-' + str(LINES[0][lines-2])   + '-' + str(LINES[1][lines-2]),'cyan')
					print LINES[3][lines]+ '-' + str(LINES[0][lines]) + '-'  + str(LINES[1][lines])
					print colored(LINES[3][lines-1]+ '-' + str(LINES[0][lines-1]) + '-' + str(LINES[1][lines-1]),'magenta')

					from lmfit import Model

					#####################################################Getting Line Fitting Initial Values From Statcked Spectrum Fits Header#####################################################
					if ivl_fts_hdr == True:
						try:
							L1_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WM01')        #LINES-1  Wdt-Fit  1GF-IntVal      WIDTH-FIT
							L2_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WM01')        #LINES-2  Wdt-Plt  1GF-IntVal      WIDTH-PLT
							L7_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CM01')        #LINES-7  Ctr Fit Bnds  1GF-IntVal CTR-FIT-BNDS
							L8_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CM01')        #LINES-8  Ctr Fit Ofst  1GF-IntVal CTR-OFFSET
							L10_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AM01')        #LINES-10 Ctr Fit Amp   1GF-IntVal LNE_AMP_BNDS

							L1_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WM02')        #LINES-1  Wdt-Fit  1GF-IntVal      WIDTH-FIT
							L2_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WM02')        #LINES-2  Wdt-Plt  1GF-IntVal      WIDTH-PLT
							L7_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CM02')        #LINES-7  Ctr Fit Bnds  1GF-IntVal CTR-FIT-BNDS
							L8_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CM02')        #LINES-8  Ctr Fit Ofst  1GF-IntVal CTR-OFFSET
							L10_2 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AM02')        #LINES-10 Ctr Fit Amp   1GF-IntVal LNE_AMP_BNDS

							print
							print colored('Initial fit variables from fits header!','yellow')
							print
							print colored('1: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'cyan')
							print colored('Headers:','cyan')
							print colored(str(LINES[5][lines])+'_WM01' + ' LINES-1 Wdt-Fit  1GF-IntVal      : ' + str(L1_1),'cyan')
							print colored(str(LINES[5][lines])+'_WM01' + ' LINES-2 Wdt-Plt  1GF-IntVal      : ' + str(L2_1),'cyan')
							print colored(str(LINES[5][lines])+'_CM01' + ' LINES-7 Ctr Fit Bnds  1GF-IntVal : ' + str(L7_1),'cyan')
							print colored(str(LINES[5][lines])+'_CM01' + ' LINES-8 Ctr Fit Ofst  1GF-IntVal : ' + str(L8_1),'cyan')
							print colored(str(LINES[5][lines])+'_AM01' + ' LINES-10 Amp Fit Bnds  1GF-IntVal: ' + str(L10_1),'cyan')
							print
							print colored('2: ' + LINES[3][lines-1]  + '-' + str(LINES[0][lines-1]),'magenta')
							print colored('Headers:','magenta')
							print colored(str(LINES[5][lines])+'_WM02' + ' LINES-1 Wdt-Fit  1GF-IntVal      : ' + str(L1_2),'magenta')
							print colored(str(LINES[5][lines])+'_WM02' + ' LINES-2 Wdt-Plt  1GF-IntVal      : ' + str(L2_2),'magenta')
							print colored(str(LINES[5][lines])+'_CM02' + ' LINES-7 Ctr Fit Bnds  1GF-IntVal : ' + str(L7_2),'magenta')
							print colored(str(LINES[5][lines])+'_CM02' + ' LINES-8 Ctr Fit Ofst  1GF-IntVal : ' + str(L8_2),'magenta')
							print colored(str(LINES[5][lines])+'_AM02' + ' LINES-10 Amp Fit Bnds  1GF-IntVal: ' + str(L10_2),'magenta')
							print colored('*****Success!******','yellow')
							print
						except KeyError:
							print
							print colored('Headers containing initial fit variables not found!','yellow')
							print colored('Run Spec_Stk_Stack first or use value from Lines_Dictionary.py with ivl_fts_hdr = False:','yellow')
							print colored('Headers:','yellow')
							print
							print colored('1: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'cyan')
							print colored(str(LINES[5][lines])+'_WF_0' + ' LINES-1 Wdt-Fit  1GF-IntVal','cyan')
							print colored(str(LINES[5][lines])+'_WP_0' + ' LINES-2 Wdt-Plt  1GF-IntVal','cyan')
							print colored(str(LINES[5][lines])+'_CF_0' + ' LINES-7 Ctr Fit Bnds  1GF-IntVal','cyan')
							print colored(str(LINES[5][lines])+'_CO_0' + ' LINES-8 Ctr Fit Ofst  1GF-IntVal','cyan')
							print colored(str(LINES[5][lines])+'_AF_0' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','cyan')
							print
							print colored('2: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'magenta')
							print colored(str(LINES[5][lines])+'_WF_0' + ' LINES-1 Wdt-Fit  1GF-IntVal','magenta')
							print colored(str(LINES[5][lines])+'_WP_0' + ' LINES-2 Wdt-Plt  1GF-IntVal','magenta')
							print colored(str(LINES[5][lines])+'_CF_0' + ' LINES-7 Ctr Fit Bnds  1GF-IntVal','magenta')
							print colored(str(LINES[5][lines])+'_CO_0' + ' LINES-8 Ctr Fit Ofst  1GF-IntVal','magenta')
							print colored(str(LINES[5][lines])+'_AF_0' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','magenta')
							print '*****'
							print
							print
							print colored('Initial fit variables from fits header!','yellow')
							L1_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WF01')        #LINES-1  Wdt-Fit  1GF-IntVal      WIDTH-FIT
							L2_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WP01')        #LINES-2  Wdt-Plt  1GF-IntVal      WIDTH-PLT
							L7_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CF01')        #LINES-7  Ctr Fit Bnds  1GF-IntVal CTR-FIT-BNDS
							L8_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CO01')        #LINES-8  Ctr Fit Ofst  1GF-IntVal CTR-OFFSET
							L10_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF01')        #LINES-10 Ctr Fit Amp   1GF-IntVal LNE_AMP_BNDS

							L1_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WF02')        #LINES-1  Wdt-Fit  1GF-IntVal      WIDTH-FIT
							L2_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WP02')        #LINES-2  Wdt-Plt  1GF-IntVal      WIDTH-PLT
							L7_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CF02')        #LINES-7  Ctr Fit Bnds  1GF-IntVal CTR-FIT-BNDS
							L8_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CO02')        #LINES-8  Ctr Fit Ofst  1GF-IntVal CTR-OFFSET
							L10_2 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF02')        #LINES-10 Ctr Fit Amp   1GF-IntVal LNE_AMP_BNDS

							print
							print colored('1: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'cyan')
							print colored('Headers:','cyan')
							print colored(str(LINES[5][lines])+'_WF01' + ' LINES-1 Wdt-Fit  1GF-IntVal      : ' + str(L1_1),'cyan')
							print colored(str(LINES[5][lines])+'_WP01' + ' LINES-2 Wdt-Plt  1GF-IntVal      : ' + str(L2_1),'cyan')
							print colored(str(LINES[5][lines])+'_CF01' + ' LINES-7 Ctr Fit Bnds  1GF-IntVal : ' + str(L7_1),'cyan')
							print colored(str(LINES[5][lines])+'_CO01' + ' LINES-8 Ctr Fit Ofst  1GF-IntVal : ' + str(L8_1),'cyan')
							print colored(str(LINES[5][lines])+'_AF01' + ' LINES-10 Amp Fit Bnds  1GF-IntVal: ' + str(L10_1),'cyan')
							print
							print colored('2: ' + LINES[3][lines-1]  + '-' + str(LINES[0][lines-1]),'magenta')
							print colored('Headers:','magenta')
							print colored(str(LINES[5][lines])+'_WF01' + ' LINES-1 Wdt-Fit  1GF-IntVal      : ' + str(L1_2),'magenta')
							print colored(str(LINES[5][lines])+'_WP01' + ' LINES-2 Wdt-Plt  1GF-IntVal      : ' + str(L2_2),'magenta')
							print colored(str(LINES[5][lines])+'_CF01' + ' LINES-7 Ctr Fit Bnds  1GF-IntVal : ' + str(L7_2),'magenta')
							print colored(str(LINES[5][lines])+'_CO01' + ' LINES-8 Ctr Fit Ofst  1GF-IntVal : ' + str(L8_2),'magenta')
							print colored(str(LINES[5][lines])+'_AF01' + ' LINES-10 Amp Fit Bnds  1GF-IntVal: ' + str(L10_2),'magenta')
							print colored('*****Success!******','yellow')
							print							
							#quit()
						try:
							L10_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AM01')        #LINES-8 Ctr Fit Ofst  1GF-IntVal LNE_AMP_BNDS
							L10_2 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AM02')        #LINES-8 Ctr Fit Ofst  1GF-IntVal LNE_AMP_BNDS
							print colored('1: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'cyan')
							print colored(str(LINES[5][lines])+'_AM01' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','cyan')
							print colored('2: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'magenta')
							print colored(str(LINES[5][lines])+'_AM02' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','magenta')
							print colored('*****Success!******','yellow')
							print
						except KeyError:
							print
							print colored('Header not found!','yellow')
							print colored('Adding Header with default valuee 0.001:','yellow')
							print colored('1: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'cyan')							
							print colored(str(LINES[5][lines])+'_AM01' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','cyan')
							print colored('2: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'magenta')							
							print colored(str(LINES[5][lines])+'_AM02' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','magenta')
							Header_Get_Add(specfile_glx,str(LINES[5][lines])+'_AM01',0.001,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-10 Amp Fit Bnds  1GF-IntVal')
							Header_Get_Add(specfile_glx,str(LINES[5][lines])+'_AM02',0.001,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-10 Amp Fit Bnds  1GF-IntVal')
							L10_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AM01')        #LINES-8 Ctr Fit Ofst  1GF-IntVal LNE_AMP_BNDS
							L10_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AM02')        #LINES-8 Ctr Fit Ofst  1GF-IntVal LNE_AMP_BNDS
							print colored('*****Success!******','yellow')
							print
						################FOR CASES WHERE KLINE WIIDHT ==0################
						if L1_1  == 0:
							L1_1  = 1#LINES[1][lines]
						else:
							pass
						if L1_2  == 0:
							L1_2  = 1#LINES[1][lines]
						else:
							pass
						################FOR CASES WHERE KLINE WIIDHT ==0################
					elif ivl_fts_hdr == False:
						L1_1  = LINES[1][lines-2]
						L2_1  = LINES[2][lines-2]
						L7_1  = LINES[7][lines-2]
						L8_1  = LINES[8][lines-2]
						L10_1 = LINES[10][lines-2]

						L1_2  = LINES[1][lines-1]
						L2_2  = LINES[2][lines-1]
						L7_2  = LINES[7][lines-1]
						L8_2  = LINES[8][lines-1]
						L10_2 = LINES[10][lines-1]
						print
						print colored('Initial fit variables from Lines_Dictionary.py!','yellow')
						print					
					print colored('Initial Values: ','cyan')
					print colored('1: ' + LINES[3][lines-2]  + '-' + str(LINES[0][lines-2]),'cyan')					
					print colored(str(LINES[5][lines-2])+'_WF01' + ': ' + str(L1_1),'cyan')
					print colored(str(LINES[5][lines-2])+'_WP01' + ': ' + str(L2_1),'cyan')
					print colored(str(LINES[5][lines-2])+'_CF01' + ': ' + str(L7_1),'cyan')
					print colored(str(LINES[5][lines-2])+'_CO01' + ': ' + str(L8_1),'cyan')
					print colored(str(LINES[5][lines-2])+'_AF01' + ': ' + str(L10_1),'cyan')
					print
					print colored('Initial Values: ','magenta')
					print colored('2: ' + LINES[3][lines-1]  + '-' + str(LINES[0][lines-1]),'magenta')					
					print colored(str(LINES[5][lines-1])+'_WF02' + ': ' + str(L1_2),'magenta')
					print colored(str(LINES[5][lines-1])+'_WP02' + ': ' + str(L2_2),'magenta')
					print colored(str(LINES[5][lines-1])+'_CF02' + ': ' + str(L7_2),'magenta')
					print colored(str(LINES[5][lines-1])+'_CO02' + ': ' + str(L8_2),'magenta')
					print colored(str(LINES[5][lines-1])+'_AF02' + ': ' + str(L10_2),'magenta')
					print
					#####################################################Getting Line Fitting Initial Values From Statcked Spectrum Fits Header#####################################################
					lmb_min_lim_line_ft = (LINES[0][lines-2]+L8_1) - MSK_NTMS*L1_1 ##IT WAS LINE CTR - LINE OFFSET
					lmb_max_lim_line_ft = (LINES[0][lines-2]+L8_1) + MSK_NTMS*L1_1
					lmb_min_lim_line    = (LINES[0][lines-2]+L8_1)*(1+z_glx_Ps) - 1.5*MSK_NTMS*L2_1#- 20#L2_1 - 10 ##IT WAS LINE CTR - LINE OFFSET
					lmb_max_lim_line    = (LINES[0][lines-2]+L8_1)*(1+z_glx_Ps) + 1.5*MSK_NTMS*L2_1#+ 20#L2_1 + 10

					mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
					mask_ft    = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
					label_glx  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function

					idx_ctr_ft_reg = np.abs(lambda_glx[mask_ft] - (LINES[0][lines-2]+L8_1)).argmin()

					X0_f2DG    = (LINES[0][lines-2]+L8_1)
					SIGMA_f2DG = L1_1
					A_f2DG     = -(1-(min(inten_glx[mask_ft])))
					A_f2DG     = -(1-inten_glx[mask_ft][idx_ctr_ft_reg])

					max_val    = -(1-min(inten_glx[mask_ft]))
					lambda_max = (lambda_glx[np.where(inten_glx==min(inten_glx[mask_ft]))[0]][0])					

					if pre_off_plt == True:
						plt.step(lambda_glx[mask_pl], inten_glx[mask_pl],
								where='mid',lw=3.0,alpha=0.5,linestyle=':',color='gray',
								label='Original Spectrum')
					elif pre_off_plt == False:
						pass

					hsw_nmb_med = np.ceil(np.median(inten_glx_hst[mask_ft]))
					hsw_nmb_med = np.ceil(np.median(inten_glx_hsw[mask_ft]))
					Header_Add(specfile_glx,str(LINES[5][lines-2])+'_NHT',float(hsw_nmb_med) ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + '# glxs stk hst Fit Spec Reg (med)')
					Header_Add(specfile_glx,str(LINES[5][lines-2])+'_NHW',float(hsw_nmb_med) ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + '# glxs stk hsw Fit Spec Reg (med)')
					print
					print specfile_glx,str(LINES[5][lines-2])+'_NHT',float(hsw_nmb_med)
					print specfile_glx,str(LINES[5][lines-2])+'_NHW',float(hsw_nmb_med)
					print

					initial_guess_O   = (X0_f2DG,A_f2DG,SIGMA_f2DG,max(inten_glx[mask_ft])-1)
					initial_guess_0   = (X0_f2DG,A_f2DG,SIGMA_f2DG)
				
					##################################################CENTRAL GAUSSIAN-1###################################################
					if fix_ctr_gau_1 == False:
						print
						print colored('Fitting 1st line','cyan')
						print colored('1-0-Fitting Central line','cyan')
						print
						#################################################CENTRAL GAUSSIAN-1-0##################################################
						try:
							gmodel_0           = Model(func_1D_Gaussian)
							gmodel_0.set_param_hint('X_0'  , value=X0_f2DG   , min=X0_f2DG - (X0_f2DG*L7_1), max=X0_f2DG + (X0_f2DG*L7_1))
							#gmodel_0.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
							gmodel_0.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG  - (A_f2DG*L10_1), max=A_f2DG  + (A_f2DG*L10_1))#min=A_f2DG-0.001, max=A_f2DG)
							gmodel_0.set_param_hint('SIGMA', value=SIGMA_f2DG)
							pars_0             = gmodel_0.make_params()							
							result_0_1         = gmodel_0.fit(inten_glx[mask_ft],pars_0,
													X=lambda_glx[mask_ft],
													X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,
													nan_policy = 'omit')
							CTRE_G_0_1         = result_0_1.params['X_0'].value
							AMPL_G_0_1         = result_0_1.params['A'].value
							SGMA_G_0_1         = abs(result_0_1.params['SIGMA'].value)
							FWHM_G_0_1         = lw_sgma2fwhm(SGMA_G_0_1)
							W_0_1              = integrate.quad(lambda x: AMPL_G_0_1*np.exp(-((x)**2)/(2*SGMA_G_0_1**2)), -np.inf, np.inf)
							EW_0_1             = np.round(abs(np.asarray(W_0_1[0])),10)
							EWE_0_1            = np.round(abs(np.asarray(W_0_1[1])),10)
							data_fitted_0      = func_1D_Gaussian((lambda_glx[mask_ft]), CTRE_G_0_1,AMPL_G_0_1,SGMA_G_0_1)

							CTRE_G_0_1_E       = result_0_1.params['X_0'].stderr
							AMPL_G_0_1_E       = result_0_1.params['A'].stderr
							SGMA_G_0_1_E       = result_0_1.params['SIGMA'].stderr

							CTRE_G_0_1_cor     = result_0_1.params['X_0'].correl
							AMPL_G_0_1_cor     = result_0_1.params['A'].correl
							SGMA_G_0_1_cor     = result_0_1.params['SIGMA'].correl

							chisqr_0_1         = result_0_1.chisqr
							redchi_0_1         = result_0_1.redchi
						except (RuntimeError,ValueError,TypeError):
							popt_0_1, pcov_0_1   = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
							perr_0_1           = [999999.99999,999999.99999,999999.99999]
							CTRE_G_0_1         = 999999.99999
							AMPL_G_0_1         = 999999.99999
							SGMA_G_0_1         = 999999.99999
							FWHM_G_0_1         = 999999.99999
							EW_0_1             = 999999.99999
							EWE_0_1            = 999999.99999

							CTRE_G_0_1_E      = 999999.99999
							AMPL_G_0_1_E      = 999999.99999
							SGMA_G_0_1_E      = 999999.99999

							CTRE_G_0_1_cor    = 999999.99999
							AMPL_G_0_1_cor    = 999999.99999
							SGMA_G_0_1_cor    = 999999.99999

							chisqr_0_1        = 999999.99999
							redchi_0_1        = 999999.99999
						if fit_vls_hdr == True and fix_ctr_gau_1 ==False:
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CM01',float(CTRE_G_0_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct-1' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AM01',float(AMPL_G_0_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct-1' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_FM01',float(FWHM_G_0_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct-1' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WM01',float(EW_0_1)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct-1' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_EM01',float(EWE_0_1)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct-1' + str(fit_fnct) + '-' +str(fit_type))
							print
							print colored('The fit (CTR-1-0) values will be added to the fits headers!','cyan')
							print
						else:
							print
							print colored('The fit (CTR-1-0) values will not be added to the fits headers!','cyan')
							print
						#################################################CENTRAL GAUSSIAN-1-0##################################################
						#################################################CENTRAL GAUSSIAN-1-C##################################################
						try:
							gmodel_O           = Model(func_1D_Gaussian_O)
							gmodel_O.set_param_hint('X_0'   , value=X0_f2DG  , min=X0_f2DG - (X0_f2DG*L7_1), max=X0_f2DG + (X0_f2DG*L7_1))
							#gmodel_O.set_param_hint('A'     , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
							gmodel_O.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG  - (A_f2DG*L10_1), max=A_f2DG  + (A_f2DG*L10_1))#min=A_f2DG-0.001, max=A_f2DG)
							gmodel_O.set_param_hint('SIGMA' , value=SIGMA_f2DG)
							gmodel_O.set_param_hint('OFFSET', value=max(inten_glx[mask_ft])-1)
							pars_O             = gmodel_O.make_params()

							result_O_1         = gmodel_O.fit(inten_glx[mask_ft],pars_O,
													X=lambda_glx[mask_ft],X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,OFFSET=max(inten_glx[mask_ft])-1,
													nan_policy = 'omit')
							CTRE_G_O_1         = result_O_1.params['X_0'].value
							AMPL_G_O_1         = result_O_1.params['A'].value
							SGMA_G_O_1         = abs(result_O_1.params['SIGMA'].value)
							OFST_G_O_1         = abs(result_O_1.params['OFFSET'].value)
							FWHM_G_O_1         = lw_sgma2fwhm(SGMA_G_O_1)
							W_O_1              = integrate.quad(lambda x: AMPL_G_O_1*np.exp(-((x)**2)/(2*SGMA_G_O_1**2)), -np.inf, np.inf)
							EW_O_1             = np.round(abs(np.asarray(W_O_1[0])),10)
							EWE_O_1            = np.round(abs(np.asarray(W_O_1[1])),10)
							data_fitted_O_1    = func_1D_Gaussian_O((lambda_glx[mask_ft]),CTRE_G_O_1,AMPL_G_O_1,SGMA_G_O_1,OFST_G_O_1)

							CTRE_G_O_E         = result_O_1.params['X_0'].stderr
							AMPL_G_O_E         = result_O_1.params['A'].stderr
							SGMA_G_O_E         = result_O_1.params['SIGMA'].stderr

							CTRE_G_O_cor       = result_O_1.params['X_0'].correl
							AMPL_G_O_cor       = result_O_1.params['A'].correl
							SGMA_G_O_cor       = result_O_1.params['SIGMA'].correl

							chisqr_O_1         = result_O_1.chisqr
							redchi_O_1         = result_O_1.redchi
							
							#####################################################################################################################
							if ofs_ctr_fit == True:
								print
								print colored('Using Fitted Center From Offset Fit to Redefine Fitting Region!','yellow')
								print
								lmb_min_lim_line_ft = (CTRE_G_O_1-L8_1) - MSK_NTMS*L1_1 #IT WAS LINE CTR - LINE OFFSET
								lmb_max_lim_line_ft = (CTRE_G_O_1+L8_1) + MSK_NTMS*L1_1
								#lmb_min_lim_line    = (CTRE_G_O-L8_1)*(1+z_glx_Ps) - 1.5*MSK_NTMS*L2_1#-20#L2_1 - 10
								#lmb_max_lim_line    = (CTRE_G_O+L8_1)*(1+z_glx_Ps) + 1.5*MSK_NTMS*L2_1#+20#L2_1 + 10
								#mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
								mask_ft     = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
							else:
								pass
							#####################################################################################################################
							#A_f2DG             = -(1-(min(inten_glx[mask_ft])))
							#inten_glx[mask_ft] = inten_glx[mask_ft] - OFST_G_O ####OFFSET - SHOULD BE APPLIED TO BE IDENTICAL TO METHOD GAUSS?
							initial_guess_C    = (X0_f2DG,A_f2DG,SIGMA_f2DG)#,max(inten_glx[mask_ft])-1)

							gmodel_C           = Model(func_1D_Gaussian)
							gmodel_C.set_param_hint('X_0'  , value=X0_f2DG, min=X0_f2DG - (X0_f2DG*(X0_f2DG*L7_1)), max=X0_f2DG + (X0_f2DG*(X0_f2DG*L7_1)))
							#gmodel_C.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
							gmodel_C.set_param_hint('A'    , value=A_f2DG , min=A_f2DG  - (A_f2DG*(A_f2DG*L10_1)) , max=A_f2DG  + (A_f2DG*(A_f2DG*L10_1)))
							gmodel_C.set_param_hint('SIGMA', value=SIGMA_f2DG)
							pars_C             = gmodel_C.make_params()
							result_C_1         = gmodel_C.fit(inten_glx[mask_ft],pars_C,
													X=lambda_glx[mask_ft],X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,
													nan_policy = 'omit')
							CTRE_G_C_1         = result_C_1.params['X_0'].value
							AMPL_G_C_1         = result_C_1.params['A'].value
							SGMA_G_C_1         = abs(result_C_1.params['SIGMA'].value)
							FWHM_G_C_1         = lw_sgma2fwhm(SGMA_G_C_1)
							W_C_1              = integrate.quad(lambda x: AMPL_G_C_1*np.exp(-((x)**2)/(2*SGMA_G_C_1**2)), -np.inf, np.inf)
							EW_C_1             = np.round(abs(np.asarray(W_C_1[0])),10)
							EWE_C_1            = np.round(abs(np.asarray(W_C_1[1])),10)
							data_fitted_C_1    = func_1D_Gaussian((lambda_glx[mask_ft]), CTRE_G_C_1,AMPL_G_C_1,SGMA_G_C_1)

							CTRE_G_C_1_E         = result_C_1.params['X_0'].stderr
							AMPL_G_C_1_E         = result_C_1.params['A'].stderr
							SGMA_G_C_1_E         = result_C_1.params['SIGMA'].stderr

							CTRE_G_C_1_cor       = result_C_1.params['X_0'].correl
							AMPL_G_C_1_cor       = result_C_1.params['A'].correl
							SGMA_G_C_1_cor       = result_C_1.params['SIGMA'].correl

							AMPL_SNR_1           = AMPL_G_C_1
							CTRE_SNR_1           = CTRE_G_C_1
							SGMA_SNR_1           = abs(SGMA_G_C_1)

							if CTRE_G_C_1_E == None:
								CTRE_G_C_1_E = 999999.99999
							else:
								pass
							if AMPL_G_C_1_E == None:
								AMPL_G_C_1_E = 999999.99999
							else:
								pass
							if SGMA_G_C_1_E == None:
								SGMA_G_C_1_E = 999999.99999
							else:
								pass
							if CTRE_G_C_1_cor == None:
								CTRE_G_C_1_cor = 999999.99999
							else:
								pass
							if AMPL_G_C_1_cor == None:
								AMPL_G_C_1_cor = 999999.99999
							else:
								pass
							if SGMA_G_C_1_cor == None:
								SGMA_G_C_1_cor = 999999.99999
							else:
								pass
							chisqr_C_1      = result_C_1.chisqr
							redchi_C_1      = result_C_1.redchi
							##inten_glx[mask_ft] = inten_glx[mask_ft] + OFST_G_O #OFFSET +
						except (RuntimeError,ValueError,TypeError):
							print colored('RuntimeError','cyan')
							popt_C_1, pcov_C_1 = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
							perr_C_1           = [999999.99999,999999.99999,999999.99999]
							CTRE_G_C_1         = 999999.99999
							AMPL_G_C_1         = 999999.99999
							SGMA_G_C_1         = 999999.99999
							FWHM_G_C_1         = 999999.99999
							EW_C_1             = 999999.99999
							EWE_C_1            = 999999.99999

							CTRE_G_C_1_E       = 999999.99999
							AMPL_G_C_1_E       = 999999.99999
							SGMA_G_C_1_E       = 999999.99999
							CTRE_G_C_1_cor     = 999999.99999
							AMPL_G_C_1_cor     = 999999.99999
							SGMA_G_C_1_cor     = 999999.99999
							chisqr_C_1         = 999999.99999
							redchi_C_1         = 999999.99999

							popt_O_1 ,pcov_O_1 = [999999.99999,999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999,999999.99999]
							perr_O_1           = [999999.99999,999999.99999,999999.99999,999999.99999]
							CTRE_G_O_1         = 999999.99999
							AMPL_G_O_1         = 999999.99999
							SGMA_G_O_1         = 999999.99999
							OFST_G_O_1         = 999999.99999
							FWHM_G_O_1         = 999999.99999
							EW_O_1             = 999999.99999
							EWE_O_1            = 999999.99999

							CTRE_G_O_1_E      = 999999.99999
							AMPL_G_O_1_E      = 999999.99999
							SGMA_G_O_1_E      = 999999.99999
							CTRE_G_O_1_cor    = 999999.99999
							AMPL_G_O_1_cor    = 999999.99999
							SGMA_G_O_1_cor    = 999999.99999
							OFST_G_O_1_cor    = 999999.99999
							chisqr_O_1        = 999999.99999
							redchi_O_1        = 999999.99999

							AMPL_SNR_1        = 999999.99999
							CTRE_SNR_1        = 999999.99999
							SGMA_SNR_1        = 999999.99999
						print
						print colored(specfile_glx,'cyan')
						print
						print colored(str(LINES[0][lines-2])+'-'+str(LINES[3][lines-2]),'cyan')
						print
						print colored(str(LINES[5][lines-2])+'_CGLC: ' + str(CTRE_G_C_1)  ,'cyan')
						print colored(str(LINES[5][lines-2])+'_AGLC: ' + str(AMPL_G_C_1)  ,'cyan')
						print colored(str(LINES[5][lines-2])+'_SGLC: ' + str(SGMA_G_C_1)  ,'cyan')
						print colored(str(LINES[5][lines-2])+'_FGLC: ' + str(FWHM_G_C_1)  ,'cyan')
						print colored(str(LINES[5][lines-2])+'_WGLC: ' + str(EW_C_1)      ,'cyan')
						print colored(str(LINES[5][lines-2])+'_EGLC: ' + str(EWE_C_1)     ,'cyan')
						print
						print
						#inten_glx[mask_ft] = inten_glx[mask_ft] + OFST_G_O
						if fit_vls_hdr == True and fix_ctr_gau_1==False:
							Header_Add(specfile_glx,'BSF_FCT',str(fit_fnct)                         ,header_comment = 'Fit function')
							Header_Add(specfile_glx,'BSF_MTH',str(fit_type)                         ,header_comment = 'Fit method')
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CMO1',float(CTRE_G_O_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AMO1',float(AMPL_G_O_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_FMO1',float(FWHM_G_O_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WMO1',float(EW_O_1)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_EMO1',float(EWE_O_1)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_OMO1',float(OFST_G_O_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ofst 1GF Offst' + str(fit_fnct) + '-' +str(fit_type))

							Header_Add(specfile_glx,str(LINES[5][lines])+'_CMC1',float(CTRE_G_C_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AMC1',float(AMPL_G_C_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_SMC1',float(SGMA_G_C_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_FMC1',float(FWHM_G_C_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WMC1',float(EW_C_1)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_EMC1',float(EWE_C_1)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CM1E',float(CTRE_G_C_1_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AM1E',float(AMPL_G_C_1_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_SM1E',float(SGMA_G_C_1_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_fnct) + '-' +str(fit_type))

							Header_Add(specfile_glx,str(LINES[5][lines])+'_CHM1',float(chisqr_C_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 1GF' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CRM1',float(redchi_C_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines-2]) + ' Chi2 Reduced 1GF' + str(fit_fnct) + '-' +str(fit_type))

							print
							print colored('The fit (CTR-1-C & CTR-1-O) values will be added to the fits headers!','cyan')
							print
						else:
							print
							print colored('The fit (CTR-1-C & CTR-1-O) values will not be added to the fits headers!','cyan')
							print

						if uft_lne_vls == False and fit_vls_hdr == True and int_vlf_hdr==True:
							print
							print colored('Initial Guess Values G-1 for line Fitting will be recorded!','yellow')
							print colored('Info input parameters (pre_gauss_shf, pre_gauss_ctr) in Spec_Stk_Stack_0.4.py!','yellow')
							print
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WM01',float(L1_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-1-1 Wdt-Fit  1GF-IntVal')         #LINES-1  Wdt-Fit  1GF-IntVal      WIDTH-FIT
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WM01',float(L2_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-2-1 Wdt-Plt  1GF-IntVal')         #LINES-2  Wdt-Plt  1GF-IntVal      WIDTH-PLT
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CM01',float(L7_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-7-1 Ctr Fit Bnds  1GF-IntVal')    #LINES-7  Ctr Fit Bnds  1GF-IntVal CTR-FIT-BNDS
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CM01',float(L8_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-8-1 Ctr Fit Ofst  1GF-IntVal')    #LINES-8  Ctr Fit Ofst  1GF-IntVal CTR-OFFSET
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AM01',float(L10_1),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-10-1 Amp Fit Bnds  1GF-IntVal')   #LINES-10 Ctr Fit Amp   1GF-IntVal LNE_AMP_BNDS

							print
							print colored('Initial Values: ','cyan')
							print colored('1: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'cyan')					
							print colored(str(LINES[5][lines])+'_WM01' + ': ' + str(L1_1),'cyan')
							print colored(str(LINES[5][lines])+'_WM01' + ': ' + str(L2_1),'cyan')
							print colored(str(LINES[5][lines])+'_CM01' + ': ' + str(L7_1),'cyan')
							print colored(str(LINES[5][lines])+'_CM01' + ': ' + str(L8_1),'cyan')
							print colored(str(LINES[5][lines])+'_AM01' + ': ' + str(L10_1),'cyan')
							print
						else:
							print
							print colored('Initial Guess Values G-1 for line Fitting will NOT be recorded!','yellow')
							print
							pass
					#################################################CENTRAL GAUSSIAN-1-C##################################################					
					elif fix_ctr_gau_1 == True:
						print
						print colored('1-CTR-gaussian already fitted!','yellow')
						print colored('Values from fits header','yellow')
						try:
							CTRE_G_0_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CM01')#,float(CTRE_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct')
							AMPL_G_0_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AM01')#,float(AMPL_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct')
							FWHM_G_0_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FM01')#,float(FWHM_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct')
							EW_0_1        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WM01')#,float(EW_0)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct')
							EWE_0_1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EM01')#,float(EWE_0)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct')

							CTRE_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CMO1')#,float(CTRE_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Offst' + str(fit_type))
							AMPL_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AMO1')#,float(AMPL_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Offst' + str(fit_type))
							FWHM_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FMO1')#,float(FWHM_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Offst' + str(fit_type))
							EW_O_1        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WMO1')#,float(EW_O)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Offst' + str(fit_type))
							EWE_O_1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EMO1')#,float(EWE_O)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Offst' + str(fit_type))
							OFST_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_OMO1')#,float(OFST_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ofst 1GF Offst' + str(fit_type))

							CTRE_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CMC1')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
							AMPL_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AMC1')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
							SGMA_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_SMC1')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
							FWHM_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FMC1')#,float(FWHM_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
							EW_C_1        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WMC1')#,float(EW_C)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
							EWE_C_1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EMC1')#,float(EWE_C)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
							CTRE_G_C_1_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CMC1')#,float(CTRE_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
							AMPL_G_C_1_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_AMC1')#,float(AMPL_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
							SGMA_G_C_1_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_SMC1')#,float(SGMA_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))

							chisqr_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CHM1')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 1GF' + str(fit_type))
							redchi_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CRM1')#,float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 Reduced 1GF' + str(fit_type))

						except KeyError:
							print
							print colored ('Gaussian Fit Parameters are not found on Fits Header!','yellow')
							print colored ('File  : ' + specfile_glx,'yellow')
							print colored ('Header: ' + str(LINES[5][lines-2])+'_CF01','yellow')
							print colored ('Gotta Fit first before fixing a component (CTR)!','yellow')
							print colored ('Or UnFix (fix_ctr_gau_1=False) For Plotting!','yellow')
							print colored ('Quitting!','yellow')
							print
							CTRE_G_0_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CF01')#,float(CTRE_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct')
							AMPL_G_0_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF01')#,float(AMPL_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct')
							FWHM_G_0_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FF01')#,float(FWHM_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct')
							EW_0_1        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WF01')#,float(EW_0)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct')
							EWE_0_1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EF01')#,float(EWE_0)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct')

							CTRE_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLO1')#,float(CTRE_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Offst' + str(fit_type))
							AMPL_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALO1')#,float(AMPL_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Offst' + str(fit_type))
							FWHM_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FLO1')#,float(FWHM_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Offst' + str(fit_type))
							EW_O_1        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WLO1')#,float(EW_O)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Offst' + str(fit_type))
							EWE_O_1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_ELO1')#,float(EWE_O)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Offst' + str(fit_type))
							OFST_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_OFO1')#,float(OFST_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ofst 1GF Offst' + str(fit_type))

							CTRE_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLC1')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
							AMPL_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALC1')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
							SGMA_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_SLC1')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
							FWHM_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FLC1')#,float(FWHM_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
							EW_C_1        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WLC1')#,float(EW_C)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
							EWE_C_1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_ELC1')#,float(EWE_C)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
							CTRE_G_C_1_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CEC1')#,float(CTRE_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
							AMPL_G_C_1_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_AEC1')#,float(AMPL_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
							SGMA_G_C_1_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_SEC1')#,float(SGMA_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))

							chisqr_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CHL1')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 1GF' + str(fit_type))
							redchi_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CRL1')#,float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 Reduced 1GF' + str(fit_type))
					print
					print colored(str(LINES[0][lines-2])+'-'+str(LINES[3][lines-2])+'-CTR','cyan')
					print colored('From: '+str(LINES[3][lines])+'-CTR','cyan')
					print
					print colored(str(LINES[5][lines])+'_CMC1: ' + str(CTRE_G_C_1)  ,'cyan')
					print colored(str(LINES[5][lines])+'_AMC1: ' + str(AMPL_G_C_1)  ,'cyan')
					print colored(str(LINES[5][lines])+'_SMC1: ' + str(SGMA_G_C_1)  ,'cyan')
					print colored(str(LINES[5][lines])+'_FMC1: ' + str(FWHM_G_C_1)  ,'cyan')
					print colored(str(LINES[5][lines])+'_WMC1: ' + str(EW_C_1)      ,'cyan')
					print colored(str(LINES[5][lines])+'_EMC1: ' + str(EWE_C_1),'cyan')
					print colored('Fit Values Center, Amplitude, Sigma ('+fit_type+'):','cyan')
					print colored(str(CTRE_G_C_1)+', '+str(AMPL_G_C_1)+', '+str(SGMA_G_C_1),'cyan')
					print
					##################################################CENTRAL GAUSSIAN-1###################################################
					lmb_min_lim_line_ft = (LINES[0][lines-1]+L8_2) - MSK_NTMS*LINES[1][lines-1] ##IT WAS LINE CTR - LINE OFFSET
					lmb_max_lim_line_ft = (LINES[0][lines-1]+L8_2) + MSK_NTMS*LINES[1][lines-1]
					lmb_min_lim_line    = (LINES[0][lines-1]+L8_2)*(1+z_glx_Ps) - 1.5*MSK_NTMS*L2_2#- 20#L2_2 - 10 ##IT WAS LINE CTR - LINE OFFSET
					lmb_max_lim_line    = (LINES[0][lines-1]+L8_2)*(1+z_glx_Ps) + 1.5*MSK_NTMS*L2_2#+ 20#L2_2 + 10

					mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
					mask_ft    = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
					label_glx  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function
					idx_ctr_ft_reg = np.abs(lambda_glx[mask_ft] - (LINES[0][lines-1]+L8_2)).argmin()

					X0_f2DG    = (LINES[0][lines-1]+L8_2)
					SIGMA_f2DG = LINES[1][lines-1]
					A_f2DG     = -(1-(min(inten_glx[mask_ft])))
					A_f2DG     = -(1-inten_glx[mask_ft][idx_ctr_ft_reg])

					max_val    = -(1-min(inten_glx[mask_ft]))
					lambda_max = (lambda_glx[np.where(inten_glx==min(inten_glx[mask_ft]))[0]][0])					

					if pre_off_plt == True:
						plt.step(lambda_glx[mask_pl], inten_glx[mask_pl],
								where='mid',lw=3.0,alpha=0.5,linestyle=':',color='gray',
								label='Original Spectrum')
					elif pre_off_plt == False:
						pass

					hsw_nmb_med = np.ceil(np.median(inten_glx_hst[mask_ft]))
					hsw_nmb_med = np.ceil(np.median(inten_glx_hsw[mask_ft]))
					Header_Add(specfile_glx,str(LINES[5][lines-1])+'_NHT',float(hsw_nmb_med) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + '# glxs stk hst Fit Spec Reg (med)')
					Header_Add(specfile_glx,str(LINES[5][lines-1])+'_NHW',float(hsw_nmb_med) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + '# glxs stk hsw Fit Spec Reg (med)')
					print specfile_glx,str(LINES[5][lines-1])+'_NHT',float(hsw_nmb_med) 
					print specfile_glx,str(LINES[5][lines-1])+'_NHW',float(hsw_nmb_med) 

					initial_guess_O   = (X0_f2DG,A_f2DG,SIGMA_f2DG,max(inten_glx[mask_ft])-1)
					initial_guess_0   = (X0_f2DG,A_f2DG,SIGMA_f2DG)
					##################################################CENTRAL GAUSSIAN-2###################################################
					if fix_ctr_gau_2 == False:
						print
						print colored('Fitting 2nd line','magenta')
						print colored('2-0-Fitting Central line','magenta')
						print
						#################################################CENTRAL GAUSSIAN-2-0##################################################
						try:
							gmodel_0           = Model(func_1D_Gaussian)
							gmodel_0.set_param_hint('X_0'  , value=X0_f2DG , min=X0_f2DG - (X0_f2DG*L7_2), max=X0_f2DG + (X0_f2DG*L7_2))
							#gmodel_0.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
							gmodel_0.set_param_hint('A'    , value=A_f2DG  , min=A_f2DG  - (A_f2DG*L10_2), max=A_f2DG  + (A_f2DG*L10_2))
							gmodel_0.set_param_hint('SIGMA', value=SIGMA_f2DG)
							pars_0             = gmodel_0.make_params()							
							result_0_2         = gmodel_0.fit(inten_glx[mask_ft],pars_0,
													X=lambda_glx[mask_ft],
													X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,
													nan_policy = 'omit')
							CTRE_G_0_2         = result_0_2.params['X_0'].value
							AMPL_G_0_2         = result_0_2.params['A'].value
							SGMA_G_0_2         = abs(result_0_2.params['SIGMA'].value)
							FWHM_G_0           = lw_sgma2fwhm(SGMA_G_0_2)
							W_0_2              = integrate.quad(lambda x: AMPL_G_0_2*np.exp(-((x)**2)/(2*SGMA_G_0_2**2)), -np.inf, np.inf)
							EW_0_2             = np.round(abs(np.asarray(W_0_2[0])),10)
							EWE_0_2            = np.round(abs(np.asarray(W_0_2[1])),10)
							data_fitted_0_2    = func_1D_Gaussian((lambda_glx[mask_ft]), CTRE_G_0_2,AMPL_G_0_2,SGMA_G_0_2)

							CTRE_G_0_2_E       = result_0_2.params['X_0'].stderr
							AMPL_G_0_2_E       = result_0_2.params['A'].stderr
							SGMA_G_0_2_E       = result_0_2.params['SIGMA'].stderr

							CTRE_G_0_2_cor     = result_0_2.params['X_0'].correl
							AMPL_G_0_2_cor     = result_0_2.params['A'].correl
							SGMA_G_0_2_cor     = result_0_2.params['SIGMA'].correl

							chisqr_0           = result_0_2.chisqr
							redchi_0           = result_0_2.redchi
						except (RuntimeError,ValueError,TypeError):
							popt_0, pcov_0   = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
							perr_0           = [999999.99999,999999.99999,999999.99999]
							CTRE_G_0_2         = 999999.99999
							AMPL_G_0_2         = 999999.99999
							SGMA_G_0_2         = 999999.99999
							FWHM_G_0         = 999999.99999
							EW_0_2             = 999999.99999
							EWE_0_2            = 999999.99999

							CTRE_G_0_2_E      = 999999.99999
							AMPL_G_0_2_E      = 999999.99999
							SGMA_G_0_2_E      = 999999.99999

							CTRE_G_0_2_cor    = 999999.99999
							AMPL_G_0_2_cor    = 999999.99999
							SGMA_G_0_2_cor    = 999999.99999

							chisqr_0        = 999999.99999
							redchi_0        = 999999.99999
						if fit_vls_hdr == True and fix_ctr_gau_2 ==False:
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CM02',float(CTRE_G_0_2) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct-2' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AM02',float(AMPL_G_0_2) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct-2' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_FM02',float(FWHM_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct-2' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WM02',float(EW_0_2)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct-2' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_EM02',float(EWE_0_2)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct-2' + str(fit_fnct) + '-' +str(fit_type))
							print
							print colored('The fit (CTR-2-0) values will be added to the fits headers!','magenta')
							print
						else:
							print
							print colored('The fit (CTR-2-0) values will not be added to the fits headers!','magenta')
							print
						#################################################CENTRAL GAUSSIAN-2-0##################################################
						#################################################CENTRAL GAUSSIAN-2-C##################################################
						try:
							gmodel_O           = Model(func_1D_Gaussian_O)
							gmodel_O.set_param_hint('X_0'   , value=X0_f2DG , min=X0_f2DG - (X0_f2DG*L7_2), max=X0_f2DG + (X0_f2DG*L7_2))
							#gmodel_O.set_param_hint('A'     , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
							gmodel_O.set_param_hint('A'     , value=A_f2DG  , min=A_f2DG  - (A_f2DG*L10_2), max=A_f2DG  + (A_f2DG*L10_2))
							gmodel_O.set_param_hint('SIGMA' , value=SIGMA_f2DG)
							gmodel_O.set_param_hint('OFFSET', value=max(inten_glx[mask_ft])-1)
							pars_O             = gmodel_O.make_params()

							result_O_2         = gmodel_O.fit(inten_glx[mask_ft],pars_O,
													X=lambda_glx[mask_ft],X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,OFFSET=max(inten_glx[mask_ft])-1,
													nan_policy = 'omit')
							CTRE_G_O_2         = result_O_2.params['X_0'].value
							AMPL_G_O_2         = result_O_2.params['A'].value
							SGMA_G_O_2         = abs(result_O_2.params['SIGMA'].value)
							OFST_G_O_2         = abs(result_O_2.params['OFFSET'].value)
							FWHM_G_O_2         = lw_sgma2fwhm(SGMA_G_O_2)
							W_O_2              = integrate.quad(lambda x: AMPL_G_O_2*np.exp(-((x)**2)/(2*SGMA_G_O_2**2)), -np.inf, np.inf)
							EW_O_2             = np.round(abs(np.asarray(W_O_2[0])),10)
							EWE_O_2            = np.round(abs(np.asarray(W_O_2[1])),10)
							data_fitted_O_2    = func_1D_Gaussian_O((lambda_glx[mask_ft]),CTRE_G_O_2,AMPL_G_O_2,SGMA_G_O_2,OFST_G_O_2)

							CTRE_G_O_2_E       = result_O_2.params['X_0'].stderr
							AMPL_G_O_2_E       = result_O_2.params['A'].stderr
							SGMA_G_O_E         = result_O_2.params['SIGMA'].stderr

							CTRE_G_O_2_cor     = result_O_2.params['X_0'].correl
							AMPL_G_O_2_cor     = result_O_2.params['A'].correl
							SGMA_G_O_cor       = result_O_2.params['SIGMA'].correl

							chisqr_O_2         = result_O_2.chisqr
							redchi_O_2         = result_O_2.redchi
							
							#####################################################################################################################
							if ofs_ctr_fit == True:
								print
								print colored('Using Fitted Center From Offset Fit to Redefine Fitting Region!','yellow')
								print
								lmb_min_lim_line_ft = (CTRE_G_O_2-L8_2) - MSK_NTMS*LINES[1][lines-1] #IT WAS LINE CTR - LINE OFFSET
								lmb_max_lim_line_ft = (CTRE_G_O_2+L8_2) + MSK_NTMS*LINES[1][lines-1]
								#lmb_min_lim_line    = (CTRE_G_O-L8_2)*(1+z_glx_Ps) - 1.5*MSK_NTMS*L2_2#-20#L2_2 - 10
								#lmb_max_lim_line    = (CTRE_G_O+L8_2)*(1+z_glx_Ps) + 1.5*MSK_NTMS*L2_2#+20#L2_2 + 10
								#mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
								mask_ft     = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
							else:
								pass
							#####################################################################################################################
							#A_f2DG             = -(1-(min(inten_glx[mask_ft])))
							#inten_glx[mask_ft] = inten_glx[mask_ft] - OFST_G_O ####OFFSET - SHOULD BE APPLIED TO BE IDENTICAL TO METHOD GAUSS?
							initial_guess_C    = (X0_f2DG,A_f2DG,SIGMA_f2DG)#,max(inten_glx[mask_ft])-1)

							gmodel_C           = Model(func_1D_Gaussian)
							gmodel_C.set_param_hint('X_0'  , value=X0_f2DG, min=X0_f2DG - (X0_f2DG*(X0_f2DG*L7_2)), max=X0_f2DG + (X0_f2DG*(X0_f2DG*L7_2)))
							#gmodel_C.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
							gmodel_C.set_param_hint('A'    , value=A_f2DG , min=A_f2DG  - (A_f2DG*(A_f2DG*L10_2)) , max=A_f2DG  + (A_f2DG*(A_f2DG*L10_2)))
							gmodel_C.set_param_hint('SIGMA', value=SIGMA_f2DG)
							pars_C             = gmodel_C.make_params()
							result_C_2         = gmodel_C.fit(inten_glx[mask_ft],pars_C,
													X=lambda_glx[mask_ft],X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,
													nan_policy = 'omit')
							CTRE_G_C_2         = result_C_2.params['X_0'].value
							AMPL_G_C_2         = result_C_2.params['A'].value
							SGMA_G_C_2         = abs(result_C_2.params['SIGMA'].value)
							FWHM_G_C_2         = lw_sgma2fwhm(SGMA_G_C_2)

							W_C_2              = integrate.quad(lambda x: AMPL_G_C_2*np.exp(-((x)**2)/(2*SGMA_G_C_2**2)), -np.inf, np.inf)
							EW_C_2             = np.round(abs(np.asarray(W_C_2[0])),10)
							EWE_C_2            = np.round(abs(np.asarray(W_C_2[1])),10)
							data_fitted_C      = func_1D_Gaussian((lambda_glx[mask_ft]), CTRE_G_C_2,AMPL_G_C_2,SGMA_G_C_2)

							CTRE_G_C_2_E       = result_C_2.params['X_0'].stderr
							AMPL_G_C_2_E       = result_C_2.params['A'].stderr
							SGMA_G_C_2_E       = result_C_2.params['SIGMA'].stderr

							CTRE_G_C_2_cor     = result_C_2.params['X_0'].correl
							AMPL_G_C_2_cor     = result_C_2.params['A'].correl
							SGMA_G_C_2_cor     = result_C_2.params['SIGMA'].correl

							AMPL_SNR_2           = AMPL_G_C_2
							CTRE_SNR_2           = CTRE_G_C_2
							SGMA_SNR_2           = abs(SGMA_G_C_2)

							if CTRE_G_C_2_E == None:
								CTRE_G_C_2_E = 999999.99999
							else:
								pass
							if AMPL_G_C_2_E == None:
								AMPL_G_C_2_E = 999999.99999
							else:
								pass
							if SGMA_G_C_2_E == None:
								SGMA_G_C_2_E = 999999.99999
							else:
								pass
							if CTRE_G_C_2_cor == None:
								CTRE_G_C_2_cor = 999999.99999
							else:
								pass
							if AMPL_G_C_2_cor == None:
								AMPL_G_C_2_cor = 999999.99999
							else:
								pass
							if SGMA_G_C_2_cor == None:
								SGMA_G_C_2_cor = 999999.99999
							else:
								pass
							chisqr_C_2        = result_C_2.chisqr
							redchi_C_2        = result_C_2.redchi
							##inten_glx[mask_ft] = inten_glx[mask_ft] + OFST_G_O #OFFSET +
						except (RuntimeError,ValueError,TypeError):
							print colored('RuntimeError','cyan')
							popt_C_2, pcov_C_2 = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
							perr_C_2           = [999999.99999,999999.99999,999999.99999]
							CTRE_G_C_2         = 999999.99999
							AMPL_G_C_2         = 999999.99999
							SGMA_G_C_2         = 999999.99999
							FWHM_G_C_2         = 999999.99999
							EW_C_2             = 999999.99999
							EWE_C_2            = 999999.99999

							CTRE_G_C_2_E       = 999999.99999
							AMPL_G_C_2_E       = 999999.99999
							SGMA_G_C_2_E       = 999999.99999
							CTRE_G_C_2_cor     = 999999.99999
							AMPL_G_C_2_cor     = 999999.99999
							SGMA_G_C_2_cor     = 999999.99999
							chisqr_C_2         = 999999.99999
							redchi_C_2         = 999999.99999

							popt_O_2 ,pcov_O_2 = [999999.99999,999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999,999999.99999]
							perr_O_2           = [999999.99999,999999.99999,999999.99999,999999.99999]
							CTRE_G_O_2         = 999999.99999
							AMPL_G_O_2         = 999999.99999
							SGMA_G_O_2         = 999999.99999
							OFST_G_O_2         = 999999.99999
							FWHM_G_O_2         = 999999.99999
							EW_O_2             = 999999.99999
							EWE_O_2            = 999999.99999

							CTRE_G_O_2_E       = 999999.99999
							AMPL_G_O_2_E       = 999999.99999
							SGMA_G_O_2_E       = 999999.99999
							CTRE_G_O_2_cor     = 999999.99999
							AMPL_G_O_2_cor     = 999999.99999
							SGMA_G_O_2_cor     = 999999.99999
							OFST_G_O_2_cor     = 999999.99999
							chisqr_O_2         = 999999.99999
							redchi_O_2         = 999999.99999

							AMPL_SNR_2         = 999999.99999
							CTRE_SNR_2         = 999999.99999
							SGMA_SNR_2         = 999999.99999
						print
						print colored(specfile_glx,'cyan')
						print
						print colored(str(LINES[0][lines-1])+'-'+str(LINES[3][lines-1]),'yellow')
						print
						print colored(str(LINES[5][lines])+'_CGLC: ' + str(CTRE_G_C_2)  ,'yellow')
						print colored(str(LINES[5][lines])+'_AGLC: ' + str(AMPL_G_C_2)  ,'yellow')
						print colored(str(LINES[5][lines])+'_SGLC: ' + str(SGMA_G_C_2)  ,'yellow')
						print colored(str(LINES[5][lines])+'_FGLC: ' + str(FWHM_G_C_2)  ,'yellow')
						print colored(str(LINES[5][lines])+'_WGLC: ' + str(EW_C_2)      ,'yellow')
						print colored(str(LINES[5][lines])+'_EGLC: ' + str(EWE_C_2),'yellow')
						print
						print
						#inten_glx[mask_ft] = inten_glx[mask_ft] + OFST_G_O

						if fit_vls_hdr == True and fix_ctr_gau_2==False:
							Header_Add(specfile_glx,'BSF_FCT',str(fit_fnct)                         ,header_comment = 'Fit function')
							Header_Add(specfile_glx,'BSF_MTH',str(fit_type)                         ,header_comment = 'Fit method')
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CMO2',float(CTRE_G_O_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  2-1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AMO2',float(AMPL_G_O_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  2-1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_FMO2',float(FWHM_G_O_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 2-1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WMO2',float(EW_O_2)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   2-1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_EMO2',float(EWE_O_2)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  2-1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_OMO2',float(OFST_G_O_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ofst 2-1GF Offst' + str(fit_fnct) + '-' +str(fit_type))

							Header_Add(specfile_glx,str(LINES[5][lines])+'_CMC2',float(CTRE_G_C_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  2-1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AMC2',float(AMPL_G_C_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  2-1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_SMC2',float(SGMA_G_C_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 2-1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_FMC2',float(FWHM_G_C_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 2-1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WMC2',float(EW_C_2)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   2-1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_EMC2',float(EWE_C_2)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  2-1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CM2E',float(CTRE_G_C_2_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 2-1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AM2E',float(AMPL_G_C_2_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 2-1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_SM2E',float(SGMA_G_C_2_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 2-1GF Crct' + str(fit_fnct) + '-' +str(fit_type))

							Header_Add(specfile_glx,str(LINES[5][lines])+'_CHM2',float(chisqr_C_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 2-1GF' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CRM2',float(redchi_C_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines-1]) + ' Chi2 Reduced 2-1GF' + str(fit_fnct) + '-' +str(fit_type))

							print
							print colored('The fit (CTR-2-C & CTR-2-O) values will be added to the fits headers!','magenta')
							print
						else:
							print
							print colored('The fit (CTR-2-C & CTR-2-O) values will not be added to the fits headers!','magenta')
							print

						if uft_lne_vls == False and fit_vls_hdr == True and int_vlf_hdr==True:
							print
							print colored('Initial Guess Values G-2 for line Fitting will be recorded!','magenta')
							print colored('Info input parameters (pre_gauss_shf, pre_gauss_ctr) in Spec_Stk_Stack_0.4.py!','magenta')
							print
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WM02',float(L1_2) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-1-2 Wdt-Fit  1GF-IntVal')         #LINES-1  Wdt-Fit  1GF-IntVal      WIDTH-FIT
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WM02',float(L2_2) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-2-2 Wdt-Plt  1GF-IntVal')         #LINES-2  Wdt-Plt  1GF-IntVal      WIDTH-PLT
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CM02',float(L7_2) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-7-2 Ctr Fit Bnds  1GF-IntVal')    #LINES-7  Ctr Fit Bnds  1GF-IntVal CTR-FIT-BNDS
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CM02',float(L8_2) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-8-2 Ctr Fit Ofst  1GF-IntVal')    #LINES-8  Ctr Fit Ofst  1GF-IntVal CTR-OFFSET
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AM02',float(L10_2),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-10-2 Amp Fit Bnds  1GF-IntVal')   #LINES-10 Ctr Fit Amp   1GF-IntVal LNE_AMP_BNDS

							print
							print colored('Initial Values: ','magenta')
							print colored('1: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'magenta')					
							print colored(str(LINES[5][lines])+'_WM02' + ': ' + str(L1_2),'magenta')
							print colored(str(LINES[5][lines])+'_WM02' + ': ' + str(L2_2),'magenta')
							print colored(str(LINES[5][lines])+'_CM02' + ': ' + str(L7_2),'magenta')
							print colored(str(LINES[5][lines])+'_CM02' + ': ' + str(L8_2),'magenta')
							print colored(str(LINES[5][lines])+'_AM02' + ': ' + str(L10_2),'magenta')
							print
						else:
							print
							print colored('Initial Guess Values G-2 for line Fitting will NOT be recorded!','yellow')
							print
							pass							
						#################################################CENTRAL GAUSSIAN-2-C##################################################					
					elif fix_ctr_gau_2 == True:
						print
						print colored('2-CTR-gaussian already fitted!','yellow')
						print colored('Values from fits header','yellow')
						print colored(LINES[3][lines],'yellow')
						print
						try:
							CTRE_G_0_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CM02')#,float(CTRE_G_0) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'Ctr  1GF Crct')
							AMPL_G_0_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AM02')#,float(AMPL_G_0) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'Amp  1GF Crct')
							FWHM_G_0_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FM02')#,float(FWHM_G_0) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'FWHM 1GF Crct')
							EW_0_2        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WM02')#,float(EW_0)     ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'EW   1GF Crct')
							EWE_0_2       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EM02')#,float(EWE_0)    ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'EWE  1GF Crct')

							CTRE_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CMO2')#,float(CTRE_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ctr  1GF Offst' + str(fit_type))
							AMPL_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AMO2')#,float(AMPL_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Amp  1GF Offst' + str(fit_type))
							FWHM_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FMO2')#,float(FWHM_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' FWHM 1GF Offst' + str(fit_type))
							EW_O_2        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WMO2')#,float(EW_O)      ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EW   1GF Offst' + str(fit_type))
							EWE_O_2       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EMO2')#,float(EWE_O)     ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EWE  1GF Offst' + str(fit_type))
							OFST_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_OMO2')#,float(OFST_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ofst 1GF Offst' + str(fit_type))

							CTRE_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CMC2')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ctr  1GF Crct' + str(fit_type))
							AMPL_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AMC2')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Amp  1GF Crct' + str(fit_type))
							SGMA_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_SMC2')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Sigm 1GF Crct' + str(fit_type))
							FWHM_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FMC2')#,float(FWHM_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' FWHM 1GF Crct' + str(fit_type))
							EW_C_2        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WMC2')#,float(EW_C)      ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EW   1GF Crct' + str(fit_type))
							EWE_C_2       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EMC2')#,float(EWE_C)     ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EWE  1GF Crct' + str(fit_type))
							CTRE_G_C_2_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CMC2')#,float(CTRE_G_C_E),header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ctr  err 1GF Crct' + str(fit_type))
							AMPL_G_C_2_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_AMC2')#,float(AMPL_G_C_E),header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Amp  err 1GF Crct' + str(fit_type))
							SGMA_G_C_2_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_SMC2')#,float(SGMA_G_C_E),header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Sigm err 1GF Crct' + str(fit_type))

							chisqr_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CHM2')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Chi2 1GF' + str(fit_type))
							redchi_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CRM2')#,float(redchi_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Chi2 Reduced 1GF' + str(fit_type))

						except KeyError:
							print
							print colored ('Gaussian Fit Parameters are not found on Fits Header!','yellow')
							print colored ('File  : ' + specfile_glx,'yellow')
							print colored ('Header: ' + str(LINES[5][lines-1])+'_CF01','yellow')
							print colored ('Gotta Fit first before fixing a component (CTR)!','yellow')
							print colored ('Or UnFix (fix_ctr_gau_2=False) For Plotting!','yellow')
							print colored ('Quitting!','yellow')
							print
							CTRE_G_0_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CF02')#,float(CTRE_G_0) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'Ctr  1GF Crct')
							AMPL_G_0_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF02')#,float(AMPL_G_0) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'Amp  1GF Crct')
							FWHM_G_0_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FF02')#,float(FWHM_G_0) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'FWHM 1GF Crct')
							EW_0_2        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WF02')#,float(EW_0)     ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'EW   1GF Crct')
							EWE_0_2       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EF02')#,float(EWE_0)    ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'EWE  1GF Crct')

							CTRE_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLO2')#,float(CTRE_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ctr  1GF Offst' + str(fit_type))
							AMPL_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALO2')#,float(AMPL_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Amp  1GF Offst' + str(fit_type))
							FWHM_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FLO2')#,float(FWHM_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' FWHM 1GF Offst' + str(fit_type))
							EW_O_2        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WLO2')#,float(EW_O)      ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EW   1GF Offst' + str(fit_type))
							EWE_O_2       = Header_Get(specfile_glx,str(LINES[5][lines])+'_ELO2')#,float(EWE_O)     ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EWE  1GF Offst' + str(fit_type))
							OFST_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_OFO2')#,float(OFST_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ofst 1GF Offst' + str(fit_type))

							CTRE_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLC2')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ctr  1GF Crct' + str(fit_type))
							AMPL_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALC2')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Amp  1GF Crct' + str(fit_type))
							SGMA_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_SLC2')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Sigm 1GF Crct' + str(fit_type))
							FWHM_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FLC2')#,float(FWHM_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' FWHM 1GF Crct' + str(fit_type))
							EW_C_2        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WLC2')#,float(EW_C)      ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EW   1GF Crct' + str(fit_type))
							EWE_C_2       = Header_Get(specfile_glx,str(LINES[5][lines])+'_ELC2')#,float(EWE_C)     ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EWE  1GF Crct' + str(fit_type))
							CTRE_G_C_2_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CEC2')#,float(CTRE_G_C_E),header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ctr  err 1GF Crct' + str(fit_type))
							AMPL_G_C_2_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_AEC2')#,float(AMPL_G_C_E),header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Amp  err 1GF Crct' + str(fit_type))
							SGMA_G_C_2_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_SEC2')#,float(SGMA_G_C_E),header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Sigm err 1GF Crct' + str(fit_type))

							chisqr_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CHL2')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Chi2 1GF' + str(fit_type))
							redchi_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CRL2')#,float(redchi_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Chi2 Reduced 1GF' + str(fit_type))
					print
					print colored(str(LINES[0][lines-1])+'-'+str(LINES[3][lines-1])+'-CTR','magenta')
					print colored('From '+str(LINES[3][lines])+'-CTR','cyan')
					print
					print colored(str(LINES[5][lines])+'_CMC2: ' + str(CTRE_G_C_2)  ,'magenta')
					print colored(str(LINES[5][lines])+'_AMC2: ' + str(AMPL_G_C_2)  ,'magenta')
					print colored(str(LINES[5][lines])+'_SMC2: ' + str(SGMA_G_C_2)  ,'magenta')
					print colored(str(LINES[5][lines])+'_FMC2: ' + str(FWHM_G_C_2)  ,'magenta')
					print colored(str(LINES[5][lines])+'_WMC2: ' + str(EW_C_2)      ,'magenta')
					print colored(str(LINES[5][lines])+'_EMC2: ' + str(EWE_C_2),'magenta')
					print colored('Fit Values Center, Amplitude, Sigma ('+fit_type+'):','magenta')
					print colored(str(CTRE_G_C_2)+', '+str(AMPL_G_C_2)+', '+str(SGMA_G_C_2),'magenta')
					print
					##################################################CENTRAL GAUSSIAN-2###################################################	
					CTRE_G_0 = CTRE_G_0_1
					#####################################################PRE GAUSSIAN#################################################
					if fix_pre_gau == False and pst_shf_lim>0:
						###########################################DEFINING PRE-PST REGIONS##################################################
						if ofs_ctr_fit == True:
							print
							print colored('Using Fitted Center From Offset Fit to Redefine Fitting Region!','yellow')
							print
							lmb_min_lim_line_ft = (CTRE_G_0-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
							lmb_max_lim_line_ft = (CTRE_G_0+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]
							mask_ft_pre = (lambda_glx <= LINES[0][lines] - pre_shf_ctr + pre_shf_lim) & (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim)
							mask_ft_pst = (lambda_glx >= LINES[0][lines] + pst_shf_ctr - pst_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
							mask_ft_plp = (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
							X0_f2DG_indx_PRE       = np.where(inten_glx[mask_ft_pre]==(max(inten_glx[mask_ft_pre])))[0]
							X0_f2DG_indx_PST       = np.where(inten_glx[mask_ft_pst]==(max(inten_glx[mask_ft_pst])))[0]
						else:
							print
							print colored('Using Expected Line Center to Define Fitting Region!','yellow')
							print
							mask_ft_pre = (lambda_glx <= LINES[0][lines] - pre_shf_ctr + pre_shf_lim) & (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim)
							mask_ft_pst = (lambda_glx >= LINES[0][lines] + pst_shf_ctr - pst_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
							mask_ft_plp = (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
							X0_f2DG_indx_PRE       = np.where(inten_glx[mask_ft_pre]==(max(inten_glx[mask_ft_pre])))[0]
							X0_f2DG_indx_PST       = np.where(inten_glx[mask_ft_pst]==(max(inten_glx[mask_ft_pst])))[0]
							
						print
						print colored('Region limits for fitting.','yellow')
						print colored('Line Center    : ' + str(LINES[0][lines]),'cyan')
						print colored('pre_shf_ctr    : ' + str(pre_shf_ctr),'cyan')
						print colored('pre_shf_lim    : ' + str(pre_shf_lim),'cyan')
						print colored('Line Center    : ' + str(LINES[0][lines] - pre_shf_ctr),'cyan')
						print colored('Lower Limit    : ' + str(LINES[0][lines] - (pre_shf_ctr-pre_shf_lim)),'cyan')
						print colored('Upper Limit    : ' + str(LINES[0][lines] - (pre_shf_ctr+pre_shf_lim)),'cyan')
						print 
						print colored('Central    : ' + str(LINES[0][lines]),'cyan')
						print colored('Central-PRE: ' + str(pre_shf_ctr) + '-' + str(LINES[0][lines]-pre_shf_ctr),'cyan')
						print colored('Central+PST: ' + str(pst_shf_ctr) + '-' + str(LINES[0][lines]+pst_shf_ctr),'cyan')
						print
						print colored('Limits:','cyan')
						print 'Central: lambda_glx >= ',lmb_min_lim_line_ft  ,'-','lambda_glx <= ',lmb_max_lim_line_ft
						print 'PRE    : lambda_glx >= ',LINES[0][lines] - pre_shf_ctr - pre_shf_lim,'-','lambda_glx <= ',LINES[0][lines] - pre_shf_ctr + pre_shf_lim
						print 'PST    : lambda_glx >= ',LINES[0][lines] + pst_shf_ctr - pst_shf_lim,'-','lambda_glx <= ',LINES[0][lines] + pst_shf_ctr + pst_shf_lim
						print
						print 'Total  : lambda_glx >= ',LINES[0][lines] - pre_shf_ctr - pre_shf_lim,'-','lambda_glx <= ',LINES[0][lines] - pre_shf_ctr + pst_shf_lim
						print
						###########################################DEFINING PRE-PST REGIONS##################################################
						X0_f2DG_indx_PRE       = np.where(inten_glx[mask_ft_pre]==(max(inten_glx[mask_ft_pre])))[0]
						x_a = lambda_glx[mask_ft_pre][X0_f2DG_indx_PRE]
						y_a = inten_glx[mask_ft_pre][X0_f2DG_indx_PRE]
						#inten_glx[mask_ft_plp] = inten_glx[mask_ft_plp] - OFST_G_O #OFFSET -
	 					try:
							print
							print colored('1-Fitting gaussian before line','cyan')
							print
							X0_f2DG_indx_PRE       = np.where(inten_glx[mask_ft_pre]==(max(inten_glx[mask_ft_pre])))[0]
							A_f2DG_PRE             = (max(inten_glx[mask_ft_pre])-1)
							X0_f2DG_PRE            = LINES[0][lines] - pre_shf_ctr
							SIGMA_f2DG_PRE         = SIGMA_f2DG/2.5
							initial_guess_C_PRE    = (X0_f2DG_PRE,A_f2DG_PRE,SIGMA_f2DG_PRE)
							
							x_a = lambda_glx[mask_ft_pre][X0_f2DG_indx_PRE]
							y_a = inten_glx[mask_ft_pre][X0_f2DG_indx_PRE]
							
							print
							print colored('Initial Guess Values PRE : ','cyan')
							print colored(initial_guess_C_PRE,'cyan')
							print X0_f2DG,pre_shf_ctr,X0_f2DG-pre_shf_ctr
							print
							
							gmodel_C_PRE           = Model(func_1D_Gaussian_Emm)
							gmodel_C_PRE.set_param_hint('X_0'  , value=X0_f2DG_PRE , min=X0_f2DG_PRE-(X0_f2DG_PRE*LINES[7][lines]), max=X0_f2DG_PRE+(X0_f2DG_PRE*LINES[7][lines]))
							#gmodel_C_PRE.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
							gmodel_C_PRE.set_param_hint('A'    , value=A_f2DG_PRE  , min=A_f2DG_PRE -(A_f2DG_PRE*LINES[10][lines]), max=A_f2DG_PRE +(A_f2DG_PRE*LINES[10][lines]))#min=A_f2DG-0.001, max=A_f2DG)
							gmodel_C_PRE.set_param_hint('SIGMA', value=SIGMA_f2DG_PRE)
							pars_C_PRE             = gmodel_C_PRE.make_params()
							result_C_PRE           = gmodel_C_PRE.fit(inten_glx[mask_ft_pre],pars_C_PRE,
													X=lambda_glx[mask_ft_pre],X_0=X0_f2DG_PRE,A=A_f2DG_PRE,SIGMA=SIGMA_f2DG_PRE,
													nan_policy = 'omit')
							CTRE_G_C_PRE           = result_C_PRE.params['X_0'].value
							AMPL_G_C_PRE           = result_C_PRE.params['A'].value
							SGMA_G_C_PRE           = abs(result_C_PRE.params['SIGMA'].value)
							FWHM_G_C_PRE           = lw_sgma2fwhm(SGMA_G_C_PRE)

							W_C_PRE                = integrate.quad(lambda x: AMPL_G_C_PRE*np.exp(-((x)**2)/(2*SGMA_G_C_PRE**2)), -np.inf, np.inf)
							EW_C_PRE               = np.round(abs(np.asarray(W_C_PRE[0])),10)
							EWE_C_PRE              = np.round(abs(np.asarray(W_C_PRE[1])),10)
							data_fitted_C_PRE      = func_1D_Gaussian_Emm((lambda_glx[mask_ft_pre]), CTRE_G_C_PRE,AMPL_G_C_PRE,SGMA_G_C_PRE)
							
							CTRE_G_C_PRE_E         = result_C_PRE.params['X_0'].stderr
							AMPL_G_C_PRE_E         = result_C_PRE.params['A'].stderr
							SGMA_G_C_PRE_E         = result_C_PRE.params['SIGMA'].stderr
							
							CTRE_G_C_PRE_cor       = result_C_PRE.params['X_0'].correl
							AMPL_G_C_PRE_cor       = result_C_PRE.params['A'].correl
							SGMA_G_C_PRE_cor       = result_C_PRE.params['SIGMA'].correl
							
							AMPL_SNR               = AMPL_G_C_PRE
							CTRE_SNR               = CTRE_G_C_PRE
							SGMA_SNR               = abs(SGMA_G_C_PRE)
							
							if CTRE_G_C_PRE_E == None or np.isnan(CTRE_G_C_PRE_E):
								CTRE_G_C_PRE_E = 999999.99999
							else:
								pass
							if AMPL_G_C_PRE_E == None:
								AMPL_G_C_PRE_E = 999999.99999
							else:
								pass
							if SGMA_G_C_PRE_E == None:
								SGMA_G_C_PRE_E = 999999.99999
							else:
								pass
							if CTRE_G_C_PRE_cor == None:
								CTRE_G_C_PRE_cor = 999999.99999
							else:
								pass
							if AMPL_G_C_PRE_cor == None:
								AMPL_G_C_PRE_cor = 999999.99999
							else:
								pass
							if SGMA_G_C_PRE_cor == None:
								SGMA_G_C_PRE_cor = 999999.99999
							else:
								pass
							chisqr_C_PRE           = result_C_PRE.chisqr
							redchi_C_PRE           = result_C_PRE.redchi
							
							
							W_C_PR1    = integrate.quad(lambda x: AMPL_G_C_PRE*np.exp(-((x)**2)/(2*SGMA_G_C_PRE**2)), x_a, np.inf)
							EW_C_PR1   = np.round(abs(np.asarray(W_C_PR1[0])),10)
							EWE_C_PR1  = np.round(abs(np.asarray(W_C_PR1[1])),10)
							#inten_glx[mask_ft_plp] = inten_glx[mask_ft_plp] + OFST_G_O #OFFSET +
						#except (RuntimeError,ValueError,TypeError):
						except (RuntimeError,ValueError,TypeError):
							print colored('RuntimeError','cyan')
							popt_C_PRE, pcov_C_PRE  = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
							perr_C_PRE          = [999999.99999,999999.99999,999999.99999]
							CTRE_G_C_PRE        = 999999.99999
							AMPL_G_C_PRE        = 999999.99999
							SGMA_G_C_PRE        = 999999.99999
							FWHM_G_C_PRE        = 999999.99999
							EW_C_PRE            = 999999.99999
							EWE_C_PRE           = 999999.99999
							
							CTRE_G_C_PRE_E      = 999999.99999
							AMPL_G_C_PRE_E      = 999999.99999
							SGMA_G_C_PRE_E      = 999999.99999
							CTRE_G_C_PRE_cor    = 999999.99999
							AMPL_G_C_PRE_cor    = 999999.99999
							SGMA_G_C_PRE_cor    = 999999.99999
							chisqr_C_PRE        = 999999.99999
							redchi_C_PRE        = 999999.99999
							
						if fit_vls_hdr == True and fix_pre_gau == False:						
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CHML',float(chisqr_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 1GF' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CRML',float(redchi_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 Reduced 1GF' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CGM1',float(CTRE_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AGM1',float(AMPL_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_SGM1',float(SGMA_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_FGM1',float(FWHM_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WGM1',float(EW_C_PRE)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_EGM1',float(EWE_C_PRE)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CME1',float(CTRE_G_C_PRE_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AME1',float(AMPL_G_C_PRE_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_SME1',float(SGMA_G_C_PRE_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))
							
							Header_Add(specfile_glx,str(LINES[5][lines])+'_XAM1',float(x_a),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PRE GAU-LNR X1 COO')
							Header_Add(specfile_glx,str(LINES[5][lines])+'_YAM1',float(y_a),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PRE GAU-LNR Y1 COO')
							print
							print colored('The fit (PRE) values will be added to the fits headers!','magenta')
							print
						else:
							print
							print colored('The fit (PRE) values will not be added to the fits headers!','magenta')
							print
							pass
						if uft_lne_vls == False and fit_vls_hdr == True and int_vlf_hdr==True:
							print
							print colored('Initial Guess Values for line Fitting will be recorded!','yellow')
							print colored('Info input parameters (pre_gauss_shf, pre_gauss_ctr) in Spec_Stk_Stack_0.4.py!','yellow')
							print
							Header_Add(specfile_glx,str(LINES[5][lines])+'_GSM1',float(pre_shf_lim) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Shf from expt ctr wvl for PRE G-1')
							Header_Add(specfile_glx,str(LINES[5][lines])+'_GCM1',float(pre_shf_ctr) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Gaussian Ctr Int Val for PRE G-1')
						else:
							print
							print colored('Initial Guess Values for line Fitting will NOT be recorded!','yellow')
							print
							pass
						#inten_glx[mask_ft_plp] = inten_glx[mask_ft_plp] + OFST_G_O #OFFSET -						
					elif fix_pre_gau == True or (fix_pre_gau == False and pre_shf_lim<=0):
						try:
							print
							print colored('1 PRE-gaussian already fitted!','yellow')
							print colored('Values from fits header','yellow')
							#chisqr_C       = Header_Get(specfile_glx,str(LINES[5][lines])+'_CHML')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 1GF' + str(fit_type))
							#redchi_C       = Header_Get(specfile_glx,str(LINES[5][lines])+'_CRML')#,float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 Reduced 1GF' + str(fit_type))
							CTRE_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGM1')#,float(CTRE_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
							AMPL_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGM1')#,float(AMPL_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
							SGMA_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGM1')#,float(SGMA_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
							FWHM_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGM1')#,float(FWHM_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
							EW_C_PRE       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGM1')#,float(EW_C_PRE)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
							EWE_C_PRE      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGM1')#,float(EWE_C_PRE)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
							CTRE_G_C_PRE_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_CME1')#,float(CTRE_G_C_PRE_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
							AMPL_G_C_PRE_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_AME1')#,float(AMPL_G_C_PRE_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
							SGMA_G_C_PRE_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_SME1')#,float(SGMA_G_C_PRE_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))
							
							x_a            = Header_Get(specfile_glx,str(LINES[5][lines])+'_XAM1')#,float(x_a),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PRE GAU-LNR X1 COO')
							y_a            = Header_Get(specfile_glx,str(LINES[5][lines])+'_YAM1')#,float(y_a),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PRE GAU-LNR Y1 COO')
							
							pre_shf_lim    = Header_Get(specfile_glx,str(LINES[5][lines])+'_GSM1')#,float(pre_shf_lim) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Shf from expt ctr wvl for PRE G-1')
							pre_shf_ctr    = Header_Get(specfile_glx,str(LINES[5][lines])+'_GCM1')#,float(pre_shf_ctr) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Gaussian Ctr Int Val for PRE G-1')
							
						except KeyError:
							print
							print colored ('Gaussian Fit Parameters are not found on Fits Header!' ,'yellow')
							print colored ('File  : ' + specfile_glx,'yellow')
							print colored ('Header: ' + str(LINES[5][lines])+'_CGM1','yellow')
							print colored ('Gotta Fit first before fixing a component (PRE)!','yellow')
							print colored ('Or UnFix (fix_pre_gau=False) For Plotting!','yellow')
							print colored ('Quitting!','yellow')
							print 'line 8598'
							print
							quit()
					print
					print colored(str(LINES[0][lines])+'-'+str(LINES[3][lines])+'-PRE','cyan')
					print
					print '******************************************************************************'
					print colored('Boundaries for Gaussian Fitting (PRE-CTR): ' + str(pre_shf_ctr),'cyan')
					print colored('Boundaries for Gaussian Fitting (PRE-LIM): ' + str(pre_shf_lim),'cyan')
					print '******************************************************************************'					
					print
					print colored(str(LINES[5][lines])+'_CGM1: ' + str(CTRE_G_C_PRE)  ,'cyan')
					print colored(str(LINES[5][lines])+'_AGM1: ' + str(AMPL_G_C_PRE)  ,'cyan')
					print colored(str(LINES[5][lines])+'_SGM1: ' + str(SGMA_G_C_PRE)  ,'cyan')
					print colored(str(LINES[5][lines])+'_FGM1: ' + str(FWHM_G_C_PRE)  ,'cyan')
					print colored(str(LINES[5][lines])+'_WGM1: ' + str(EW_C_PRE)      ,'cyan')
					print colored(str(LINES[5][lines])+'_EGM1: ' + str(EWE_C_PRE),'cyan')
					print
					print colored(str(LINES[5][lines])+'_XAM1 : ' + str(x_a),'cyan')
					print colored(str(LINES[5][lines])+'_YAM1 : ' + str(y_a),'cyan')
					print colored(str(LINES[5][lines])+'_GSM1 : ' + str(pre_shf_lim),'cyan')
					print colored(str(LINES[5][lines])+'_GCM1 : ' + str(pre_shf_ctr),'cyan')
					print
					print colored('Fit Values (PRE) Center, Amplitude, Sigma ('+fit_type+'):','cyan')
					print colored(str(CTRE_G_C_PRE)+', '+str(AMPL_G_C_PRE)+', '+str(SGMA_G_C_PRE),'cyan')
					print
					#####################################################PRE GAUSSIAN#################################################
					###################################################POST GAUSSIAN##################################################
					if fix_pst_gau == False and pst_shf_lim>0:
						###########################################DEFINING PRE-PST REGIONS##################################################
						if ofs_ctr_fit == True:
							print
							print colored('Using Fitted Center From Offset Fit to Redefine Fitting Region!','yellow')
							print
							lmb_min_lim_line_ft = (CTRE_G_0-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
							lmb_max_lim_line_ft = (CTRE_G_0+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]
							mask_ft_pre = (lambda_glx <= LINES[0][lines] - pre_shf_ctr + pre_shf_lim) & (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim)
							mask_ft_pst = (lambda_glx >= LINES[0][lines] + pst_shf_ctr - pst_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
							mask_ft_plp = (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
							X0_f2DG_indx_PRE       = np.where(inten_glx[mask_ft_pre]==(max(inten_glx[mask_ft_pre])))[0]
							X0_f2DG_indx_PST       = np.where(inten_glx[mask_ft_pst]==(max(inten_glx[mask_ft_pst])))[0]
						else:
							print
							print colored('Using Expected Line Center to Define Fitting Region!','yellow')
							print
							mask_ft_pre = (lambda_glx <= LINES[0][lines] - pre_shf_ctr + pre_shf_lim) & (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim)
							mask_ft_pst = (lambda_glx >= LINES[0][lines] + pst_shf_ctr - pst_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
							mask_ft_plp = (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
							X0_f2DG_indx_PRE       = np.where(inten_glx[mask_ft_pre]==(max(inten_glx[mask_ft_pre])))[0]
							X0_f2DG_indx_PST       = np.where(inten_glx[mask_ft_pst]==(max(inten_glx[mask_ft_pst])))[0]
							
						print
						print colored('Region limits for fitting.','yellow')
						print colored('Line Center    : ' + str(LINES[0][lines]),'cyan')
						print colored('pst_shf_ctr    : ' + str(pst_shf_ctr),'cyan')
						print colored('pst_shf_lim    : ' + str(pst_shf_lim),'cyan')
						print colored('Line Center    : ' + str(LINES[0][lines] + pst_shf_ctr),'cyan')
						print colored('Lower Limit    : ' + str(LINES[0][lines] - (pst_shf_ctr-pst_shf_lim)),'cyan')
						print colored('Upper Limit    : ' + str(LINES[0][lines] - (pst_shf_ctr+pst_shf_lim)),'cyan')
						print 
						print colored('Central    : ' + str(LINES[0][lines]),'cyan')
						print colored('Central-PRE: ' + str(pre_shf_ctr) + '-' + str(LINES[0][lines]-pre_shf_ctr),'cyan')
						print colored('Central+PST: ' + str(pst_shf_ctr) + '-' + str(LINES[0][lines]+pst_shf_ctr),'cyan')
						print
						print colored('Limits:','yellow')
						print 'Central: lambda_glx >= ',lmb_min_lim_line_ft  ,'-','lambda_glx <= ',lmb_max_lim_line_ft
						print 'PRE    : lambda_glx >= ',LINES[0][lines] - pre_shf_ctr-pre_shf_lim,'-','lambda_glx <= ',LINES[0][lines] - pre_shf_ctr+pre_shf_lim
						print 'PST    : lambda_glx >= ',LINES[0][lines] + pst_shf_ctr-pst_shf_lim,'-','lambda_glx <= ',LINES[0][lines] + pst_shf_ctr+pst_shf_lim
						print
						print 'Total  : lambda_glx >= ',LINES[0][lines] - pre_shf_ctr-pre_shf_lim,'-','lambda_glx <= ',LINES[0][lines] - pre_shf_ctr+pst_shf_lim
						print
						###########################################DEFINING PRE-PST REGIONS##################################################						
						X0_f2DG_indx_PST       = np.where(inten_glx[mask_ft_pst]==(max(inten_glx[mask_ft_pst])))[0]
						x_b = lambda_glx[mask_ft_pst][X0_f2DG_indx_PST]
						y_b = inten_glx[mask_ft_pst][X0_f2DG_indx_PST]
						try:
							print colored('2-Fitting gaussian after line','cyan')
							#inten_glx[mask_ft_plp] = inten_glx[mask_ft_plp] - OFST_G_O #OFFSET
							X0_f2DG_indx_PST       = np.where(inten_glx[mask_ft_pst]==(max(inten_glx[mask_ft_pst])))[0]
							A_f2DG_PST             = (max(inten_glx[mask_ft_pst])-1)
							X0_f2DG_PST            = LINES[0][lines] + pst_shf_ctr#
							SIGMA_f2DG_PST         = SIGMA_f2DG/2
							initial_guess_C_PST    = (X0_f2DG_PST,A_f2DG_PST,SIGMA_f2DG_PST)#,max(inten_glx[mask_ft_pst])-1)
							
							print
							print colored('Initial Guess Values PST : ','cyan')
							print colored(initial_guess_C_PST,'cyan')
							print
							
							gmodel_C_PST           = Model(func_1D_Gaussian_Emm)
							gmodel_C_PST.set_param_hint('X_0'  , value=X0_f2DG_PST , min=X0_f2DG_PST-(X0_f2DG_PST*LINES[7][lines]), max=X0_f2DG_PST+(X0_f2DG_PST*LINES[7][lines]))
							#gmodel_C_PST.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
							gmodel_C_PST.set_param_hint('A'    , value=A_f2DG_PST  , min=A_f2DG_PST -(A_f2DG_PST*LINES[10][lines]), max=A_f2DG_PST +(A_f2DG_PST*LINES[10][lines]))#min=A_f2DG_PST-0.001, max=A_f2DG_PST)
							gmodel_C_PST.set_param_hint('SIGMA', value=SIGMA_f2DG_PST)
							pars_C_PST             = gmodel_C_PST.make_params()
							result_C_PST           = gmodel_C_PST.fit(inten_glx[mask_ft_pst],pars_C_PST,
													X=lambda_glx[mask_ft_pst],X_0=X0_f2DG_PST,A=A_f2DG_PST,SIGMA=SIGMA_f2DG_PST,
													nan_policy = 'omit')
							CTRE_G_C_PST           = result_C_PST.params['X_0'].value
							AMPL_G_C_PST           = result_C_PST.params['A'].value
							SGMA_G_C_PST           = abs(result_C_PST.params['SIGMA'].value)
							FWHM_G_C_PST           = lw_sgma2fwhm(SGMA_G_C_PST)

							W_C_PST                = integrate.quad(lambda x: AMPL_G_C_PST*np.exp(-((x)**2)/(2*SGMA_G_C_PST**2)), -np.inf, np.inf)
							EW_C_PST               = np.round(abs(np.asarray(W_C_PST[0])),10)
							EWE_C_PST              = np.round(abs(np.asarray(W_C_PST[1])),10)
							data_fitted_C_PST      = func_1D_Gaussian_Emm((lambda_glx[mask_ft_pst]), CTRE_G_C_PST,AMPL_G_C_PST,SGMA_G_C_PST)
							
							CTRE_G_C_PST_E         = result_C_PST.params['X_0'].stderr
							AMPL_G_C_PST_E         = result_C_PST.params['A'].stderr
							SGMA_G_C_PST_E         = result_C_PST.params['SIGMA'].stderr
							
							CTRE_G_C_PST_cor       = result_C_PST.params['X_0'].correl
							AMPL_G_C_PST_cor       = result_C_PST.params['A'].correl
							SGMA_G_C_PST_cor       = result_C_PST.params['SIGMA'].correl
							
							AMPL_SNR           = AMPL_G_C_PST
							CTRE_SNR           = CTRE_G_C_PST
							SGMA_SNR           = abs(SGMA_G_C_PST)
							
							if CTRE_G_C_PST_E == None:
								CTRE_G_C_PST_E = 999999.99999
							else:
								pass
							if AMPL_G_C_PST_E == None:
								AMPL_G_C_PST_E = 999999.99999
							else:
								pass
							if SGMA_G_C_PST_E == None:
								SGMA_G_C_PST_E = 999999.99999
							else:
								pass
							if CTRE_G_C_PST_cor == None:
								CTRE_G_C_PST_cor = 999999.99999
							else:
								pass
							if AMPL_G_C_PST_cor == None:
								AMPL_G_C_PST_cor = 999999.99999
							else:
								pass
							if SGMA_G_C_PST_cor == None:
								SGMA_G_C_PST_cor = 999999.99999
							else:
								pass
							chisqr_C_PST           = result_C_PST.chisqr
							redchi_C_PST           = result_C_PST.redchi
							
							W_C_PS2    = integrate.quad(lambda x: AMPL_G_C_PST*np.exp(-((x)**2)/(2*SGMA_G_C_PST**2)), -np.inf, x_b)
							EW_C_PS2   = np.round(abs(np.asarray(W_C_PS2[0])),10)
							EWE_C_PS2  = np.round(abs(np.asarray(W_C_PS2[1])),10)
							#inten_glx[mask_ft_plp] = inten_glx[mask_ft_plp] - OFST_G_O #OFFSET +
						except (RuntimeError,ValueError,TypeError):
							print colored('RuntimeError','cyan')
							popt_C_PST, pcov_C_PST  = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
							perr_C_PST          = [999999.99999,999999.99999,999999.99999]
							CTRE_G_C_PST        = 999999.99999
							AMPL_G_C_PST        = 999999.99999
							SGMA_G_C_PST        = 999999.99999
							FWHM_G_C_PST        = 999999.99999
							EW_C_PST            = 999999.99999
							EWE_C_PST           = 999999.99999
							
														
							CTRE_G_C_PST_E      = 999999.99999
							AMPL_G_C_PST_E      = 999999.99999
							SGMA_G_C_PST_E      = 999999.99999
							CTRE_G_C_PST_cor    = 999999.99999
							AMPL_G_C_PST_cor    = 999999.99999
							SGMA_G_C_PST_cor    = 999999.99999
							chisqr_C_PST        = 999999.99999
							redchi_C_PST        = 999999.99999
														
						if fit_vls_hdr == True and fix_pst_gau == False:
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CGM2',float(CTRE_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AGM2',float(AMPL_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_SGM2',float(SGMA_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_FGM2',float(FWHM_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WGM2',float(EW_C_PST)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_EGM2',float(EWE_C_PST)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CME2',float(CTRE_G_C_PST_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AME2',float(AMPL_G_C_PST_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_SME2',float(SGMA_G_C_PST_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))
							
							Header_Add(specfile_glx,str(LINES[5][lines])+'_XAM2',float(x_b),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PST GAU-LNR X2 COO')
							Header_Add(specfile_glx,str(LINES[5][lines])+'_YAM2',float(y_b),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PST GAU-LNR Y2 COO')
						else:
							print
							print colored('The fit (PST) values will not be added to the fits headers!','magenta')
							print
							pass
						if uft_lne_vls == False and fit_vls_hdr == True and int_vlf_hdr==True:
							print
							print colored('Initial Guess Values for line Fitting will be recorded!','yellow')
							print colored('Info input parameters (pre_gauss_shf, pre_gauss_ctr) in Spec_Stk_Stack_0.4.py!','yellow')
							print
							Header_Add(specfile_glx,str(LINES[5][lines])+'_GSM2',float(pst_shf_lim) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Shf from expt ctr wvl for PST G-2')
							Header_Add(specfile_glx,str(LINES[5][lines])+'_GCM2',float(pst_shf_ctr) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Gaussian Ctr Int Val for PST G-2')
						else:
							print
							print colored('Initial Guess Values for line Fitting will NOT be recorded!','yellow')
							print
							pass
						#inten_glx[mask_ft_plp] = inten_glx[mask_ft_plp] + OFST_G_O #OFFSET -
					elif fix_pst_gau == True or (fix_pst_gau == False and pst_shf_lim<=0):
						try:
							print
							print colored('2 PST-gaussian already fitted!','yellow')
							print colored('Values from fits header','yellow')
							CTRE_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGM2')#,float(CTRE_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
							AMPL_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGM2')#,float(AMPL_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
							SGMA_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGM2')#,float(SGMA_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
							FWHM_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGM2')#,float(FWHM_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
							EW_C_PST       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGM2')#,float(EW_C_PST)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
							EWE_C_PST      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGM2')#,float(EWE_C_PST)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
							CTRE_G_C_PST_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_CME2')#,float(CTRE_G_C_PST_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
							AMPL_G_C_PST_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_AME2')#,float(AMPL_G_C_PST_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
							SGMA_G_C_PST_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_SME2')#,float(SGMA_G_C_PST_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))
							
							x_b            = Header_Get(specfile_glx,str(LINES[5][lines])+'_XAM2')#,float(x_b),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PST GAU-LNR X2 COO')
							y_b            = Header_Get(specfile_glx,str(LINES[5][lines])+'_YAM2')#,float(y_b),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PST GAU-LNR Y2 COO')
							
							pst_shf_lim    = Header_Get(specfile_glx,str(LINES[5][lines])+'_GSM2')#,float(pre_shf_lim) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Shf from expt ctr wvl for PRE G-1')
							pst_shf_ctr    = Header_Get(specfile_glx,str(LINES[5][lines])+'_GCM2')#,float(pre_shf_ctr) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Gaussian Ctr Int Val for PRE G-1')
						except KeyError:
							print
							print colored ('Gaussian Fit Parameters are not found on Fits Header!','yellow')
							print colored ('File  : ' + specfile_glx,'yellow')
							print colored ('Header: ' + str(LINES[5][lines])+'_CF0M','yellow')
							print colored ('Gotta Fit first before fixing a component (PST)!','yellow')
							print colored ('Or UnFix (fix_pst_gau=False) For Plotting!','yellow')
							print colored ('Quitting!','yellow')
							print
							print 'line 8828'
							quit()
					print
					print colored(str(LINES[0][lines])+'-'+str(LINES[3][lines])+'-PST','magenta')
					print
					print '******************************************************************************'
					print colored('Boundaries for Gaussian Fitting (PST-CTR): ' + str(pst_shf_ctr),'magenta')					
					print colored('Boundaries for Gaussian Fitting (PST-LIM): ' + str(pst_shf_lim),'magenta')
					print '******************************************************************************'
					print
					print colored(str(LINES[5][lines])+'_CGM2: ' + str(CTRE_G_C_PST)  ,'magenta')
					print colored(str(LINES[5][lines])+'_AGM2: ' + str(AMPL_G_C_PST)  ,'magenta')
					print colored(str(LINES[5][lines])+'_SGM2: ' + str(SGMA_G_C_PST)  ,'magenta')
					print colored(str(LINES[5][lines])+'_FGM2: ' + str(FWHM_G_C_PST)  ,'magenta')
					print colored(str(LINES[5][lines])+'_WGM2: ' + str(EW_C_PST)      ,'magenta')
					print colored(str(LINES[5][lines])+'_EGM2: ' + str(EWE_C_PST),'magenta')
					print
					print colored(str(LINES[5][lines])+'_GSM2 : ' + str(pst_shf_lim),'magenta')
					print colored(str(LINES[5][lines])+'_GCM2 : ' + str(pst_shf_ctr),'magenta')
					print colored(str(LINES[5][lines])+'_XAM2 : ' + str(x_b),'magenta')
					print colored(str(LINES[5][lines])+'_YAM2 : ' + str(y_b),'magenta')
					print
					print colored('Fit Values (PST) Center, Amplitude, Sigma ('+fit_type+'):','magenta')
					print colored(str(CTRE_G_C_PST)+', '+str(AMPL_G_C_PST)+', '+str(SGMA_G_C_PST),'magenta')
					print					
					###################################################POST GAUSSIAN##################################################										

					###################################################MDL GAUSSIAN###################################################
					if fix_mdl_gau == False:# and mdl_shf_lim>0:
						if mdl_shf_lim>0:
							#########################################DEFINING PRE-PST-MDL REGIONS################################################
							if ofs_ctr_fit == True:
								print
								print colored('Using Fitted Center From Offset Fit to Redefine Fitting Region!','yellow')
								print
								lmb_min_lim_line_ft = (CTRE_G_0-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
								lmb_max_lim_line_ft = (CTRE_G_0+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]
								mask_ft_pre = (lambda_glx <= LINES[0][lines] - pre_shf_ctr + pre_shf_lim) & (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim)
								mask_ft_pst = (lambda_glx >= LINES[0][lines] + pst_shf_ctr - pst_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
								mask_ft_plp = (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
								mask_ft_mdl = (lambda_glx >= LINES[0][lines] + mdl_shf_ctr - mdl_shf_lim) & (lambda_glx <= LINES[0][lines] + mdl_shf_ctr + mdl_shf_lim)
								X0_f2DG_indx_PRE       = np.where(inten_glx[mask_ft_pre]==(max(inten_glx[mask_ft_pre])))[0]
								X0_f2DG_indx_PST       = np.where(inten_glx[mask_ft_pst]==(max(inten_glx[mask_ft_pst])))[0]
								X0_f2DG_indx_MDL       = np.where(inten_glx[mask_ft_mdl]==(max(inten_glx[mask_ft_mdl])))[0]
							else:
								print
								print colored('Using Expected Line Center to Define Fitting Region!','yellow')
								print
								mask_ft_pre = (lambda_glx <= LINES[0][lines] - pre_shf_ctr + pre_shf_lim) & (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim)
								mask_ft_pst = (lambda_glx >= LINES[0][lines] + pst_shf_ctr - pst_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
								mask_ft_plp = (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
								mask_ft_mdl = (lambda_glx >= LINES[0][lines] + mdl_shf_ctr - mdl_shf_lim) & (lambda_glx <= LINES[0][lines] + mdl_shf_ctr + mdl_shf_lim)
								X0_f2DG_indx_PRE       = np.where(inten_glx[mask_ft_pre]==(max(inten_glx[mask_ft_pre])))[0]
								X0_f2DG_indx_PST       = np.where(inten_glx[mask_ft_pst]==(max(inten_glx[mask_ft_pst])))[0]
								X0_f2DG_indx_MDL       = np.where(inten_glx[mask_ft_mdl]==(max(inten_glx[mask_ft_mdl])))[0]
							print
							print colored('Region limits for fitting.','yellow')
							print colored('Line Center    : ' + str(LINES[0][lines]),'cyan')
							print colored('pst_shf_ctr    : ' + str(pst_shf_ctr),'cyan')
							print colored('pst_shf_lim    : ' + str(pst_shf_lim),'cyan')
							print colored('Line Center    : ' + str(LINES[0][lines] + pst_shf_ctr),'cyan')
							print colored('Lower Limit    : ' + str(LINES[0][lines] - (pst_shf_ctr-pst_shf_lim)),'cyan')
							print colored('Upper Limit    : ' + str(LINES[0][lines] - (pst_shf_ctr+pst_shf_lim)),'cyan')
							print 
							print colored('Central    : ' + str(LINES[0][lines]),'cyan')
							print colored('Central-PRE: ' + str(pre_shf_ctr) + '-' + str(LINES[0][lines]-pre_shf_ctr),'cyan')
							print colored('Central+PST: ' + str(pst_shf_ctr) + '-' + str(LINES[0][lines]+pst_shf_ctr),'cyan')
							print colored('Central+MDL: ' + str(mdl_shf_ctr) + '-' + str(LINES[0][lines]+mdl_shf_ctr),'cyan')
							print
							print colored('Limits:','yellow')
							print 'Central: lambda_glx >= ',lmb_min_lim_line_ft  ,'-','lambda_glx <= ',lmb_max_lim_line_ft
							print 'PRE    : lambda_glx >= ',LINES[0][lines] - pre_shf_ctr-pre_shf_lim,'-','lambda_glx <= ',LINES[0][lines] - pre_shf_ctr+pre_shf_lim
							print 'PST    : lambda_glx >= ',LINES[0][lines] + pst_shf_ctr-pst_shf_lim,'-','lambda_glx <= ',LINES[0][lines] + pst_shf_ctr+pst_shf_lim
							print 'MDL    : lambda_glx >= ',LINES[0][lines] + mdl_shf_ctr-mdl_shf_lim,'-','lambda_glx <= ',LINES[0][lines] + mdl_shf_ctr+mdl_shf_lim
							print
							print 'Total  : lambda_glx >= ',LINES[0][lines] - pre_shf_ctr-pre_shf_lim,'-','lambda_glx <= ',LINES[0][lines] - pre_shf_ctr+pst_shf_lim
							print
							#########################################DEFINING PRE-PST-MDL REGIONS################################################
							X0_f2DG_indx_MDL       = np.where(inten_glx[mask_ft_mdl]==(max(inten_glx[mask_ft_mdl])))[0]
							x_c = lambda_glx[mask_ft_mdl][X0_f2DG_indx_MDL]
							y_c = inten_glx[mask_ft_mdl][X0_f2DG_indx_MDL]
							try:
								print colored('3-Fitting gaussian between lines','green')
								#inten_glx[mask_ft_plp] = inten_glx[mask_ft_plp] - OFST_G_O #OFFSET
								X0_f2DG_indx_MDL       = np.where(inten_glx[mask_ft_mdl]==(max(inten_glx[mask_ft_mdl])))[0]
								A_f2DG_MDL             = (max(inten_glx[mask_ft_mdl])-1)
								X0_f2DG_MDL            = LINES[0][lines] + mdl_shf_ctr#
								SIGMA_f2DG_MDL         = SIGMA_f2DG/2
								initial_guess_C_MDL    = (X0_f2DG_MDL,A_f2DG_MDL,SIGMA_f2DG_MDL)#,max(inten_glx[mask_ft_mdl])-1)
								
								print
								print colored('Initial Guess Values MDL : ','green')
								print colored(initial_guess_C_MDL,'green')
								print
								
								gmodel_C_MDL           = Model(func_1D_Gaussian_Emm)
								gmodel_C_MDL.set_param_hint('X_0'  , value=X0_f2DG_MDL , min=X0_f2DG_MDL-(X0_f2DG_MDL*LINES[7][lines]), max=X0_f2DG_MDL+(X0_f2DG_MDL*LINES[7][lines]))
								#gmodel_C_MDL.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
								gmodel_C_MDL.set_param_hint('A'    , value=A_f2DG_MDL  , min=A_f2DG_MDL -(A_f2DG_MDL*LINES[10][lines]), max=A_f2DG_MDL +(A_f2DG_MDL*LINES[10][lines]))#min=A_f2DG_MDL-0.001, max=A_f2DG_MDL)
								gmodel_C_MDL.set_param_hint('SIGMA', value=SIGMA_f2DG_MDL)
								pars_C_MDL             = gmodel_C_MDL.make_params()
								result_C_MDL           = gmodel_C_MDL.fit(inten_glx[mask_ft_mdl],pars_C_MDL,
														X=lambda_glx[mask_ft_mdl],X_0=X0_f2DG_MDL,A=A_f2DG_MDL,SIGMA=SIGMA_f2DG_MDL,
														nan_policy = 'omit')
								CTRE_G_C_MDL           = result_C_MDL.params['X_0'].value
								AMPL_G_C_MDL           = result_C_MDL.params['A'].value
								SGMA_G_C_MDL           = abs(result_C_MDL.params['SIGMA'].value)
								FWHM_G_C_MDL           = lw_sgma2fwhm(SGMA_G_C_MDL)

								W_C_MDL                = integrate.quad(lambda x: AMPL_G_C_MDL*np.exp(-((x)**2)/(2*SGMA_G_C_MDL**2)), -np.inf, np.inf)
								EW_C_MDL               = np.round(abs(np.asarray(W_C_MDL[0])),10)
								EWE_C_MDL              = np.round(abs(np.asarray(W_C_MDL[1])),10)
								data_fitted_C_MDL      = func_1D_Gaussian_Emm((lambda_glx[mask_ft_mdl]), CTRE_G_C_MDL,AMPL_G_C_MDL,SGMA_G_C_MDL)
								
								CTRE_G_C_MDL_E         = result_C_MDL.params['X_0'].stderr
								AMPL_G_C_MDL_E         = result_C_MDL.params['A'].stderr
								SGMA_G_C_MDL_E         = result_C_MDL.params['SIGMA'].stderr
								
								CTRE_G_C_MDL_cor       = result_C_MDL.params['X_0'].correl
								AMPL_G_C_MDL_cor       = result_C_MDL.params['A'].correl
								SGMA_G_C_MDL_cor       = result_C_MDL.params['SIGMA'].correl
								
								AMPL_SNR               = AMPL_G_C_MDL
								CTRE_SNR               = CTRE_G_C_MDL
								SGMA_SNR               = abs(SGMA_G_C_MDL)
								
								if CTRE_G_C_MDL_E == None:
									CTRE_G_C_MDL_E = 999999.99999
								else:
									pass
								if AMPL_G_C_MDL_E == None:
									AMPL_G_C_MDL_E = 999999.99999
								else:
									pass
								if SGMA_G_C_MDL_E == None:
									SGMA_G_C_MDL_E = 999999.99999
								else:
									pass
								if CTRE_G_C_MDL_cor == None:
									CTRE_G_C_MDL_cor = 999999.99999
								else:
									pass
								if AMPL_G_C_MDL_cor == None:
									AMPL_G_C_MDL_cor = 999999.99999
								else:
									pass
								if SGMA_G_C_MDL_cor == None:
									SGMA_G_C_MDL_cor = 999999.99999
								else:
									pass
								chisqr_C_MDL           = result_C_MDL.chisqr
								redchi_C_MDL           = result_C_MDL.redchi
								
								W_C_PS3    = integrate.quad(lambda x: AMPL_G_C_MDL*np.exp(-((x)**2)/(2*SGMA_G_C_MDL**2)), -np.inf, x_c)
								EW_C_PS3   = np.round(abs(np.asarray(W_C_PS3[0])),10)
								EWE_C_PS3  = np.round(abs(np.asarray(W_C_PS3[1])),10)
								#inten_glx[mask_ft_plp] = inten_glx[mask_ft_plp] - OFST_G_O #OFFSET +
							except (RuntimeError,ValueError,TypeError):
								print colored('RuntimeError','green')
								popt_C_MDL, pcov_C_MDL  = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
								perr_C_MDL          = [999999.99999,999999.99999,999999.99999]
								CTRE_G_C_MDL        = 999999.99999
								AMPL_G_C_MDL        = 999999.99999
								SGMA_G_C_MDL        = 999999.99999
								FWHM_G_C_MDL        = 999999.99999
								EW_C_MDL            = 999999.99999
								EWE_C_MDL           = 999999.99999
								
															
								CTRE_G_C_MDL_E      = 999999.99999
								AMPL_G_C_MDL_E      = 999999.99999
								SGMA_G_C_MDL_E      = 999999.99999
								CTRE_G_C_MDL_cor    = 999999.99999
								AMPL_G_C_MDL_cor    = 999999.99999
								SGMA_G_C_MDL_cor    = 999999.99999
								chisqr_C_MDL        = 999999.99999
								redchi_C_MDL        = 999999.99999
						else:
							popt_C_MDL, pcov_C_MDL  = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
							perr_C_MDL          = [999999.99999,999999.99999,999999.99999]
							CTRE_G_C_MDL        = 999999.99999
							AMPL_G_C_MDL        = 999999.99999
							SGMA_G_C_MDL        = 999999.99999
							FWHM_G_C_MDL        = 999999.99999
							EW_C_MDL            = 999999.99999
							EWE_C_MDL           = 999999.99999
							
														
							CTRE_G_C_MDL_E      = 999999.99999
							AMPL_G_C_MDL_E      = 999999.99999
							SGMA_G_C_MDL_E      = 999999.99999
							CTRE_G_C_MDL_cor    = 999999.99999
							AMPL_G_C_MDL_cor    = 999999.99999
							SGMA_G_C_MDL_cor    = 999999.99999
							chisqr_C_MDL        = 999999.99999
							redchi_C_MDL        = 999999.99999
							
							x_c                 = 999999.99999
							y_c                 = 999999.99999							
						if fit_vls_hdr == True and fix_mdl_gau == False:
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CGM3',float(CTRE_G_C_MDL)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AGM3',float(AMPL_G_C_MDL)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_SGM3',float(SGMA_G_C_MDL)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_FGM3',float(FWHM_G_C_MDL)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WGM3',float(EW_C_MDL)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_EGM3',float(EWE_C_MDL)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CME2',float(CTRE_G_C_MDL_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AME2',float(AMPL_G_C_MDL_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_SME2',float(SGMA_G_C_MDL_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))
							
							Header_Add(specfile_glx,str(LINES[5][lines])+'_XAM3',float(x_c),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' MDL GAU-LNR X3 COO')
							Header_Add(specfile_glx,str(LINES[5][lines])+'_YAM3',float(y_c),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' MDL GAU-LNR Y3 COO')
						else:
							print
							print colored('The fit (MDL) values will not be added to the fits headers!','green')
							print
							pass
						if uft_lne_vls == False and fit_vls_hdr == True and int_vlf_hdr==True:
							print
							print colored('Initial Guess Values for line Fitting will be recorded!','yellow')
							print colored('Info input parameters (pre_gauss_shf, pre_gauss_ctr) in Spec_Stk_Stack_0.4.py!','yellow')
							print
							Header_Add(specfile_glx,str(LINES[5][lines])+'_GSM3',float(mdl_shf_lim) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Shf from expt ctr wvl for MDL G-3')
							Header_Add(specfile_glx,str(LINES[5][lines])+'_GCM3',float(mdl_shf_ctr) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Gaussian Ctr Int Val for MDL G-3')
						else:
							print
							print colored('Initial Guess Values for line Fitting will NOT be recorded!','yellow')
							print
							pass
						#inten_glx[mask_ft_plp] = inten_glx[mask_ft_plp] + OFST_G_O #OFFSET -
					elif fix_mdl_gau == True:# or (fix_mdl_gau == False and mdl_shf_lim<=0):
						try:
							print
							print colored('3- MDL-gaussian already fitted!','yellow')
							print colored('Values from fits header','yellow')
							CTRE_G_C_MDL   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGM3')#,float(CTRE_G_C_MDL)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
							AMPL_G_C_MDL   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGM3')#,float(AMPL_G_C_MDL)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
							SGMA_G_C_MDL   = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGM3')#,float(SGMA_G_C_MDL)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
							FWHM_G_C_MDL   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGM3')#,float(FWHM_G_C_MDL)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
							EW_C_MDL       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGM3')#,float(EW_C_MDL)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
							EWE_C_MDL      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGM3')#,float(EWE_C_MDL)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
							CTRE_G_C_MDL_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_CME2')#,float(CTRE_G_C_MDL_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
							AMPL_G_C_MDL_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_AME2')#,float(AMPL_G_C_MDL_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
							SGMA_G_C_MDL_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_SME2')#,float(SGMA_G_C_MDL_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))
							
							x_c            = Header_Get(specfile_glx,str(LINES[5][lines])+'_XAM3')#,float(x_c),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PST GAU-LNR X2 COO')
							y_c            = Header_Get(specfile_glx,str(LINES[5][lines])+'_YAM3')#,float(y_c),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PST GAU-LNR Y2 COO')
							EW_C_PS3       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WRM3')#,float(EW_C_PS3),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])   + ' EW   PST' + str(fit_type))
							EWE_C_PS3      = Header_Get(specfile_glx,str(LINES[5][lines])+'_ERM3')#,float(EWE_C_PS3),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])  + ' EWE  PST' + str(fit_type))
							
							mdl_shf_lim    = Header_Get(specfile_glx,str(LINES[5][lines])+'_GSM3')#,float(pre_shf_lim) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Shf from expt ctr wvl for PRE G-1')
							mdl_shf_ctr    = Header_Get(specfile_glx,str(LINES[5][lines])+'_GCM3')#,float(pre_shf_ctr) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Gaussian Ctr Int Val for PRE G-1')
						except KeyError:
							print
							print colored ('Gaussian Fit Parameters are not found on Fits Header!','yellow')
							print colored ('File  : ' + specfile_glx,'yellow')
							print colored ('Header: ' + str(LINES[5][lines])+'_CF0M','yellow')
							print colored ('Gotta Fit first before fixing a component (PST)!','yellow')
							print colored ('Or UnFix (fix_pst_gau=False) For Plotting!','yellow')
							print colored ('Quitting!','yellow')
							print 'line 9088'
							print
							quit()
					print
					print colored(str(LINES[0][lines])+'-'+str(LINES[3][lines])+'-MDL','green')
					print
					print '******************************************************************************'
					print colored('Boundaries for Gaussian Fitting (PST-CTR): ' + str(mdl_shf_ctr),'green')					
					print colored('Boundaries for Gaussian Fitting (PST-LIM): ' + str(mdl_shf_lim),'green')
					print '******************************************************************************'
					print
					print colored(str(LINES[5][lines])+'_CGM3: ' + str(CTRE_G_C_MDL)  ,'green')
					print colored(str(LINES[5][lines])+'_AGM3: ' + str(AMPL_G_C_MDL)  ,'green')
					print colored(str(LINES[5][lines])+'_SGM3: ' + str(SGMA_G_C_MDL)  ,'green')
					print colored(str(LINES[5][lines])+'_FGM3: ' + str(FWHM_G_C_MDL)  ,'green')
					print colored(str(LINES[5][lines])+'_WGM3: ' + str(EW_C_MDL)      ,'green')
					print colored(str(LINES[5][lines])+'_EGM3: ' + str(EWE_C_MDL),'green')
					print
					print colored(str(LINES[5][lines])+'_GSM3 : ' + str(mdl_shf_lim),'green')
					print colored(str(LINES[5][lines])+'_GCM3 : ' + str(mdl_shf_ctr),'green')
					print colored(str(LINES[5][lines])+'_XAM3 : ' + str(x_c),'green')
					print colored(str(LINES[5][lines])+'_YAM3 : ' + str(y_c),'green')
					print
					print colored('Fit Values (PST) Center, Amplitude, Sigma ('+fit_type+'):','green')
					print colored(str(CTRE_G_C_MDL)+', '+str(AMPL_G_C_MDL)+', '+str(SGMA_G_C_MDL),'green')
					print					
					###################################################MDL GAUSSIAN##################################################						
					###############################################COMPUTING TOTAL AREA###############################################
					print colored('Computing Flux Area','yellow')
					#############################################COMPUTING LINEAR AREA###################################################
					slope_line1 = (y_a-y_b)/(x_a-x_b)
					slope_line2 = (y_b-y_a)/(x_b-x_a)
					b1 = y_a - (slope_line1*x_a)
					b2 = y_b - (slope_line1*x_b)
					print
					print  colored('Computing Linear Area considering peak points:','yellow')
					print 'Point A: ',x_a,y_a
					print 'Point B: ',x_b,y_b
					print 'Slope: ',slope_line1
					print 'Slope: ',slope_line2
					print 'b: ',b1,b2
					print
					#############################################COMPUTING LINEAR AREA###################################################
					###############################################COMPUTING TOTAL AREA###############################################
					CTRE_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CMC1')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
					AMPL_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AMC1')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
					SGMA_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_SMC1')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))

					CTRE_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CMC2')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ctr  1GF Crct' + str(fit_type))
					AMPL_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AMC2')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Amp  1GF Crct' + str(fit_type))
					SGMA_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_SMC2')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Sigm 1GF Crct' + str(fit_type))

					CTRE_G_C_PRE  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGM1')#,float(CTRE_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
					AMPL_G_C_PRE  = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGM1')#,float(AMPL_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
					SGMA_G_C_PRE  = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGM1')#,float(SGMA_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))

					CTRE_G_C_PST  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGM2')#,float(CTRE_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
					AMPL_G_C_PST  = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGM2')#,float(AMPL_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
					SGMA_G_C_PST  = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGM2')#,float(SGMA_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))

					CTRE_G_C_MDL  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGM3')#,float(CTRE_G_C_MDL)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
					AMPL_G_C_MDL  = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGM3')#,float(AMPL_G_C_MDL)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
					SGMA_G_C_MDL  = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGM3')#,float(SGMA_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))

					print
					print colored('Computing Areas using info from fits headers.','yellow')
					print 'CTRE_G_C_1: ',str(CTRE_G_C_1),' AMPL_G_C-1: ',str(AMPL_G_C_1),' SGMA_G_C-1: ',str(SGMA_G_C_1)
					print 'CTRE_G_C_2: ',str(CTRE_G_C_2),' AMPL_G_C-2: ',str(AMPL_G_C_2),' SGMA_G_C-2: ',str(SGMA_G_C_2)
					print 'CTRE_G_C_PRE: ',str(CTRE_G_C_PRE),' AMPL_G_C_PRE: ',str(AMPL_G_C_PRE),' SGMA_G_C_PRE: ',str(SGMA_G_C_PRE)
					print 'CTRE_G_C_PST: ',str(CTRE_G_C_PST),' AMPL_G_C_PST: ',str(AMPL_G_C_PST),' SGMA_G_C_PST: ',str(SGMA_G_C_PST)
					print 'CTRE_G_C_MDL: ',str(CTRE_G_C_MDL),' AMPL_G_C_MDL: ',str(AMPL_G_C_MDL),' SGMA_G_C_MDL: ',str(SGMA_G_C_PST)
					print

					W_C_1     = integrate.quad(lambda x: AMPL_G_C_1*np.exp(-((x)**2)/(2*SGMA_G_C_1**2)), -np.inf, np.inf)
					EW_C_1    = np.round(abs(np.asarray(W_C_1[0])),10)
					EWE_C_1   = np.round(abs(np.asarray(W_C_1[1])),10)

					W_C_2     = integrate.quad(lambda x: AMPL_G_C_2*np.exp(-((x)**2)/(2*SGMA_G_C_2**2)), -np.inf, np.inf)
					EW_C_2    = np.round(abs(np.asarray(W_C_2[0])),10)
					EWE_C_2   = np.round(abs(np.asarray(W_C_2[1])),10)

					W_C_PRE   = integrate.quad(lambda x: AMPL_G_C_PRE*np.exp(-((x)**2)/(2*SGMA_G_C_PRE**2)), -np.inf, np.inf)
					EW_C_PRE  = np.round(abs(np.asarray(W_C_PRE[0])),10)
					EWE_C_PRE = np.round(abs(np.asarray(W_C_PRE[1])),10)


					W_C_PST   = integrate.quad(lambda x: AMPL_G_C_PST*np.exp(-((x)**2)/(2*SGMA_G_C_PST**2)), -np.inf, np.inf)
					EW_C_PST  = np.round(abs(np.asarray(W_C_PST[0])),10)
					EWE_C_PST = np.round(abs(np.asarray(W_C_PST[1])),10)

					W_C_MDL   = integrate.quad(lambda x: AMPL_G_C_MDL*np.exp(-((x)**2)/(2*SGMA_G_C_MDL**2)), -np.inf, np.inf)
					EW_C_MDL  = np.round(abs(np.asarray(W_C_MDL[0])),10)
					EWE_C_MDL = np.round(abs(np.asarray(W_C_MDL[1])),10)

					W_PLP     = integrate.quad(lambda x: AMPL_G_C_2*np.exp(-((x)**2)/(2*SGMA_G_C_2**2))    + 
												AMPL_G_C_PRE*np.exp(-((x)**2)/(2*SGMA_G_C_PRE**2))+ 
												AMPL_G_C_PRE*np.exp(-((x)**2)/(2*SGMA_G_C_PRE**2))+
												AMPL_G_C_PST*np.exp(-((x)**2)/(2*SGMA_G_C_PST**2)),
												-np.inf, np.inf
												)
					EW_PLP    = np.round((np.asarray(W_PLP[0])),10)
					EWE_PLP   = np.round(abs(np.asarray(W_PLP[1])),10)

					if EW_C_1 == 999999.99999:
						EW_C_1 = 0
					else:
						pass
					if EW_C_2 == 999999.99999:
						EW_C_2 = 0
					else:
						pass
					if EW_C_PRE == 999999.99999:
						EW_C_PRE = 0
					else:
						pass
					if EW_C_PST == 999999.99999:
						EW_C_PST = 0
					else:
						pass						
					EWMT    = EW_C_1 + EW_C_2 + EW_C_PRE + EW_C_PST #+ EW_C_LNR

					print
					print colored('Areas     :','yellow')
					print colored('Area CTR-1: ' + str(EW_C_1),'yellow')
					print colored('Area CTR-2: ' + str(EW_C_2),'yellow')					
					print colored('Area PRE-G: ' + str(EW_C_PRE),'blue')
					print colored('Area PST-G: ' + str(EW_C_PST),'magenta')
					print colored('Area MDL-G: ' + str(EW_C_MDL),'green')
					print colored('Area PRE-CTR1-CTR2-PST: ' + str(EW_PLP),'yellow')
					print					
					###############################################COMPUTING TOTAL AREA###############################################
					#############################################ADDING AREA TO FTIS HEADER#############################################
					if fit_vls_hdr == True:
						print
						print colored('The Areas values will be updated to the fits headers!','magenta')
						print
						print colored('Area CTR-1: '                  + str(EW_C_1)   + '-' +str(LINES[5][lines])+'_WMC1','blue')
						print colored('Area CTR-2: '                  + str(EW_C_2)   + '-' +str(LINES[5][lines])+'_WMC2','red')
						print colored('Area PRE-G: '                  + str(EW_C_PRE) + '-' +str(LINES[5][lines])+'_WGM1','cyan')
						print colored('Area PST-G: '                  + str(EW_C_PST) + '-' +str(LINES[5][lines])+'_WGM2','magenta')
						print colored('Area MDL-G: '                  + str(EW_C_MDL) + '-' +str(LINES[5][lines])+'_WGM3','green')
						print colored('Area PLP-G: '                  + str(EW_PLP)   + '-' +str(LINES[5][lines])+'_WMPP','yellow')
						print colored('Area TOT=PRE-CTR1-CTR2-PST: '  + str(EWMT)     + '-' +str(LINES[5][lines])+'_WMPT','yellow')
						print						
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WMC1',float(EW_C_1)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   C1-GF Crct' + str(fit_fnct) + '-' +str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EMC1',float(EWE_C_1)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  C1-GF Crct' + str(fit_fnct) + '-' +str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WMC2',float(EW_C_2)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   C2-GF Crct' + str(fit_fnct) + '-' +str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EMC2',float(EWE_C_2)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  C2-GF Crct' + str(fit_fnct) + '-' +str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WGM1',float(EW_C_PRE)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   PRE Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EGM1',float(EWE_C_PRE)   ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  PRE Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WGM2',float(EW_C_PST)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   PST Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EGM2',float(EWE_C_PST)   ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  PST Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WGM3',float(EW_C_MDL)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   MDL Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EGM3',float(EWE_C_MDL)   ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  MDL Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WMPP',float(EW_C_PST)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   PRE-C1-C2-PST Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EMPP',float(EWE_C_PST)   ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  PRE-C1-C2-PST Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WMPT',float(EWE_C_PST)   ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' WE   PLP Crct' + str(fit_type))

					else:
						print
						print colored('The Areas values will not be updated to the fits headers!','magenta')
						print
					#############################################ADDING AREA TO FTIS HEADER#############################################
					#################################DEFINE AREA FOR LATER ON SUBSTRACT OFFSET FOR PLOTING###############################
					###########################################DEFINING PRE-PST REGIONS##################################################
					if ofs_ctr_fit == True:
						print
						print colored('Using Fitted Center From Offset Fit to Redefine Fitting Region!','yellow')
						print
						lmb_min_lim_line_ft = (CTRE_G_0-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
						lmb_max_lim_line_ft = (CTRE_G_0+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]
						mask_ft_pre = (lambda_glx <= LINES[0][lines] - pre_shf_ctr + pre_shf_lim) & (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim)
						mask_ft_pst = (lambda_glx >= LINES[0][lines] + pst_shf_ctr - pst_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
						mask_ft_plp = (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
						mask_ft_mdl = (lambda_glx >= LINES[0][lines] + mdl_shf_ctr - mdl_shf_lim) & (lambda_glx <= LINES[0][lines] + mdl_shf_ctr + mdl_shf_lim)
						X0_f2DG_indx_PRE       = np.where(inten_glx[mask_ft_pre]==(max(inten_glx[mask_ft_pre])))[0]
						X0_f2DG_indx_PST       = np.where(inten_glx[mask_ft_pst]==(max(inten_glx[mask_ft_pst])))[0]
						X0_f2DG_indx_MDL       = np.where(inten_glx[mask_ft_mdl]==(max(inten_glx[mask_ft_mdl])))[0]
					else:
						print
						print colored('Using Expected Line Center to Define Fitting Region!','yellow')
						print
						mask_ft_pre = (lambda_glx <= LINES[0][lines] - pre_shf_ctr + pre_shf_lim) & (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim)
						mask_ft_pst = (lambda_glx >= LINES[0][lines] + pst_shf_ctr - pst_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
						mask_ft_plp = (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
						mask_ft_mdl = (lambda_glx >= LINES[0][lines] + mdl_shf_ctr - mdl_shf_lim) & (lambda_glx <= LINES[0][lines] + mdl_shf_ctr + mdl_shf_lim)
						try:
							X0_f2DG_indx_PRE = np.where(inten_glx[mask_ft_pre]==(max(inten_glx[mask_ft_pre])))[0]
						except ValueError:
							X0_f2DG_indx_PRE = LINES[0][lines]

						try:
							X0_f2DG_indx_PST = np.where(inten_glx[mask_ft_pst]==(max(inten_glx[mask_ft_pst])))[0]
						except ValueError:
							X0_f2DG_indx_PST = LINES[0][lines]

						try:
							X0_f2DG_indx_MDL = np.where(inten_glx[mask_ft_mdl]==(max(inten_glx[mask_ft_mdl])))[0]
						except ValueError:
							X0_f2DG_indx_MDL = LINES[0][lines]

						
					print
					print colored('Region limits for fitting.','yellow')
					print colored('Central    : ' + str(LINES[0][lines]),'yellow')
					print colored('Central-PRE: ' + str(pre_shf_ctr) + '-' + str(LINES[0][lines]-pre_shf_ctr),'cyan')
					print colored('Central+PST: ' + str(pst_shf_ctr) + '-' + str(LINES[0][lines]+pst_shf_ctr),'magenta')
					print colored('Central+MDL: ' + str(mdl_shf_ctr) + '-' + str(LINES[0][lines]+mdl_shf_ctr),'green')
					print
					print colored('Limits:','yellow')
					print 'Central: lambda_glx >= ',lmb_min_lim_line_ft  ,'-','lambda_glx <= ',lmb_max_lim_line_ft
					print 'PRE    : lambda_glx <= ',LINES[0][lines] - pre_shf_ctr+pre_shf_lim,'-','lambda_glx >= ',LINES[0][lines] - pre_shf_ctr-pre_shf_lim
					print 'PST    : lambda_glx >= ',LINES[0][lines] + pst_shf_ctr-pst_shf_lim,'-','lambda_glx <= ',LINES[0][lines] + pst_shf_ctr+pst_shf_lim
					print 'MDL    : lambda_glx >= ',LINES[0][lines] + mdl_shf_ctr-mdl_shf_lim,'-','lambda_glx <= ',LINES[0][lines] + mdl_shf_ctr+mdl_shf_lim
					print
					print 'Total  : lambda_glx >= ',LINES[0][lines] - pre_shf_ctr-pre_shf_lim,'-','lambda_glx <= ',LINES[0][lines] - pre_shf_ctr+pst_shf_lim
					print
					############################################DEFINING PRE-PST REGIONS##################################################
					##################################DEFINE AREA FOR LATER ON SUBSTRACT OFFSET FOR PLOTING###############################
				elif 'Dbl' not in LINES[3][lines] and fit_fnct=='gauss'   and fit_type == 'lmfit' and mke_lne_fit == True and uft_lne_vls == False:
					fit_typ = 'G'
					#GAUSSIAN FIT
					MSK_NTMS=2.5
					print
					print colored('1D Gaussian Fit Mode Choosen: Lmfit (Offset)','cyan')
					print
					from lmfit import Model

					lmb_min_lim_line_ft = (LINES[0][lines]-LINES[8][lines]) - MSK_NTMS*LINES[1][lines]  #IT WAS LINE CTR - LINE OFFSET
					lmb_max_lim_line_ft = (LINES[0][lines]+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]
					lmb_min_lim_line    = (LINES[0][lines]-LINES[8][lines])*(1+z_glx_Ps) - 1.5*MSK_NTMS*LINES[2][lines]#- 20#LINES[2][lines] - 10  #IT WAS LINE CTR - LINE OFFSET
					lmb_max_lim_line    = (LINES[0][lines]+LINES[8][lines])*(1+z_glx_Ps) + 1.5*MSK_NTMS*LINES[2][lines]#+ 20#LINES[2][lines] + 10

					mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
					mask_ft    = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
					label_glx  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function

					X0_f2DG    = (LINES[0][lines]+LINES[8][lines])
					SIGMA_f2DG = LINES[1][lines]
					A_f2DG     = -(1-(min(inten_glx[mask_ft])))

					max_val    = -(1-min(inten_glx[mask_ft]))
					lambda_max = (lambda_glx[np.where(inten_glx==min(inten_glx[mask_ft]))[0]][0])					

					if pre_off_plt == True:
						plt.step(lambda_glx[mask_pl], inten_glx[mask_pl],
								where='mid',lw=3.0,alpha=0.5,linestyle=':',color='gray',
								label='Original Spectrum')
					elif pre_off_plt == False:
						pass

					hsw_nmb_med = np.ceil(np.median(inten_glx_hst[mask_ft]))
					hsw_nmb_med = np.ceil(np.median(inten_glx_hsw[mask_ft]))
					Header_Add(specfile_glx,str(LINES[5][lines])+'_NHT',float(hsw_nmb_med) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + '# glxs stk hst Fit Spec Reg (med)')
					Header_Add(specfile_glx,str(LINES[5][lines])+'_NHW',float(hsw_nmb_med) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + '# glxs stk hsw Fit Spec Reg (med)')
					print specfile_glx,str(LINES[5][lines])+'_NHT',float(hsw_nmb_med) 
					print specfile_glx,str(LINES[5][lines])+'_NHW',float(hsw_nmb_med) 

					initial_guess_O   = (X0_f2DG,A_f2DG,SIGMA_f2DG,max(inten_glx[mask_ft])-1)
					initial_guess_0   = (X0_f2DG,A_f2DG,SIGMA_f2DG)
					try:
						gmodel_0           = Model(func_1D_Gaussian)
						gmodel_0.set_param_hint('X_0'  , value=X0_f2DG   , min=X0_f2DG-(X0_f2DG*LINES[7][lines]), max=X0_f2DG+(X0_f2DG*LINES[7][lines]))
						#gmodel_0.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
						gmodel_0.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG  - (A_f2DG*LINES[10][lines]) , max=A_f2DG  + (A_f2DG*LINES[10][lines]))#min=A_f2DG-0.001, max=A_f2DG)
						gmodel_0.set_param_hint('SIGMA', value=SIGMA_f2DG)
						pars_0             = gmodel_0.make_params()							
						result_0           = gmodel_0.fit(inten_glx[mask_ft],pars_0,
												X=lambda_glx[mask_ft],
												X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,
												nan_policy = 'omit')
						CTRE_G_0           = result_0.params['X_0'].value
						AMPL_G_0           = result_0.params['A'].value
						SGMA_G_0           = abs(result_0.params['SIGMA'].value)
						FWHM_G_0           = lw_sgma2fwhm(SGMA_G_0)
						W_0                = integrate.quad(lambda x: AMPL_G_0*np.exp(-((x)**2)/(2*SGMA_G_0**2)), -np.inf, np.inf)
						EW_0               = np.round(abs(np.asarray(W_0[0])),3)
						EWE_0              = np.round(abs(np.asarray(W_0[1])),10)
						data_fitted_0      = func_1D_Gaussian((lambda_glx[mask_ft]), CTRE_G_0,AMPL_G_0,SGMA_G_0)

						CTRE_G_0_E         = result_0.params['X_0'].stderr
						AMPL_G_0_E         = result_0.params['A'].stderr
						SGMA_G_0_E         = result_0.params['SIGMA'].stderr

						CTRE_G_0_cor       = result_0.params['X_0'].correl
						AMPL_G_0_cor       = result_0.params['A'].correl
						SGMA_G_0_cor       = result_0.params['SIGMA'].correl

						chisqr_0           = result_0.chisqr
						redchi_0           = result_0.redchi
					except (RuntimeError,ValueError,TypeError):
						popt_0, pcov_0     = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
						perr_0             = [999999.99999,999999.99999,999999.99999]
						CTRE_G_0           = 999999.99999
						AMPL_G_0           = 999999.99999
						SGMA_G_0           = 999999.99999
						FWHM_G_0           = 999999.99999
						EW_0               = 999999.99999
						EWE_0              = 999999.99999

						CTRE_G_0_E         = 999999.99999
						AMPL_G_0_E         = 999999.99999
						SGMA_G_0_E         = 999999.99999

						CTRE_G_0_cor       = 999999.99999
						AMPL_G_0_cor       = 999999.99999
						SGMA_G_0_cor       = 999999.99999

						chisqr_0           = 999999.99999
						redchi_0           = 999999.99999
					if fit_vls_hdr == True:
						Header_Add(specfile_glx,str(LINES[5][lines])+'_CGF0',float(CTRE_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_AGF0',float(AMPL_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_SGF0',float(SGMA_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'SGMA 1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_FGF0',float(FWHM_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WGF0',float(EW_0)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EGF0',float(EWE_0)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct')
					else:
						print
						print colored('The fit values will not be added to the fits headers!','magenta')
						print
					try:
						gmodel_O           = Model(func_1D_Gaussian_O)
						gmodel_O.set_param_hint('X_0'   , value=X0_f2DG   , min=X0_f2DG-(X0_f2DG*LINES[7][lines]), max=X0_f2DG+(X0_f2DG*LINES[7][lines]))
						#gmodel_O.set_param_hint('A'     , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
						gmodel_O.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG  - (A_f2DG*LINES[10][lines]) , max=A_f2DG  + (A_f2DG*LINES[10][lines]))#min=A_f2DG-0.001, max=A_f2DG)
						gmodel_O.set_param_hint('SIGMA' , value=SIGMA_f2DG)
						gmodel_O.set_param_hint('OFFSET', value=max(inten_glx[mask_ft])-1)
						pars_O             = gmodel_O.make_params()

						result_O           = gmodel_O.fit(inten_glx[mask_ft],pars_O,
												X=lambda_glx[mask_ft],X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,OFFSET=max(inten_glx[mask_ft])-1,
												nan_policy = 'omit')
						CTRE_G_O           = result_O.params['X_0'].value
						AMPL_G_O           = result_O.params['A'].value
						SGMA_G_O           = abs(result_O.params['SIGMA'].value)
						OFST_G_O           = abs(result_O.params['OFFSET'].value)
						FWHM_G_O           = lw_sgma2fwhm(SGMA_G_O)
						W_O                = integrate.quad(lambda x: AMPL_G_O*np.exp(-((x)**2)/(2*SGMA_G_O**2)), -np.inf, np.inf)
						EW_O               = np.round(abs(np.asarray(W_O[0])),3)
						EWE_O              = np.round(abs(np.asarray(W_O[1])),10)
						data_fitted_O      = func_1D_Gaussian_O((lambda_glx[mask_ft]),CTRE_G_O,AMPL_G_O,SGMA_G_O,OFST_G_O)

						CTRE_G_O_E         = result_O.params['X_0'].stderr
						AMPL_G_O_E         = result_O.params['A'].stderr
						SGMA_G_O_E         = result_O.params['SIGMA'].stderr

						CTRE_G_O_cor       = result_O.params['X_0'].correl
						AMPL_G_O_cor       = result_O.params['A'].correl
						SGMA_G_O_cor       = result_O.params['SIGMA'].correl

						chisqr_O           = result_O.chisqr
						redchi_O           = result_O.redchi
						
						#####################################################################################################################
						if ofs_ctr_fit == True:
							print
							print colored('Using Fitted Center From Offset Fit to Redefine Fitting Region!','yellow')
							print
							lmb_min_lim_line_ft = (CTRE_G_O-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
							lmb_max_lim_line_ft = (CTRE_G_O+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]
							#lmb_min_lim_line    = (CTRE_G_O-LINES[8][lines])*(1+z_glx_Ps) - 1.5*MSK_NTMS*LINES[2][lines]#-20#LINES[2][lines] - 10
							#lmb_max_lim_line    = (CTRE_G_O+LINES[8][lines])*(1+z_glx_Ps) + 1.5*MSK_NTMS*LINES[2][lines]#+20#LINES[2][lines] + 10
							#mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
							mask_ft     = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
						else:
							pass
						#####################################################################################################################

						inten_glx[mask_ft] = inten_glx[mask_ft] - OFST_G_O #MENOS OFFSET
						A_f2DG             = -(1-(min(inten_glx[mask_ft])))
						initial_guess_C    = (X0_f2DG,A_f2DG,SIGMA_f2DG)#,max(inten_glx[mask_ft])-1)

						gmodel_C           = Model(func_1D_Gaussian)
						gmodel_C.set_param_hint('X_0'  , value=X0_f2DG   , min=X0_f2DG-(X0_f2DG*LINES[7][lines]), max=X0_f2DG+(X0_f2DG*LINES[7][lines]))
						#gmodel_C.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
						gmodel_C.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG  - (A_f2DG*LINES[10][lines]) , max=A_f2DG  + (A_f2DG*LINES[10][lines]))#min=A_f2DG-0.001, max=A_f2DG)
						gmodel_C.set_param_hint('SIGMA', value=SIGMA_f2DG)
						pars_C             = gmodel_C.make_params()
						result_C           = gmodel_C.fit(inten_glx[mask_ft],pars_C,
												X=lambda_glx[mask_ft],X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,
												nan_policy = 'omit')
						CTRE_G_C           = result_C.params['X_0'].value
						AMPL_G_C           = result_C.params['A'].value
						SGMA_G_C           = abs(result_C.params['SIGMA'].value)
						FWHM_G_C           = lw_sgma2fwhm(SGMA_G_C)
						W_C                = integrate.quad(lambda x: AMPL_G_C*np.exp(-((x)**2)/(2*SGMA_G_C**2)), -np.inf, np.inf)

						EW_C               = np.round(abs(np.asarray(W_C[0])),3)
						EWE_C              = np.round(abs(np.asarray(W_C[1])),10)
						data_fitted_C      = func_1D_Gaussian((lambda_glx[mask_ft]), CTRE_G_C,AMPL_G_C,SGMA_G_C)

						CTRE_G_C_E         = result_C.params['X_0'].stderr
						AMPL_G_C_E         = result_C.params['A'].stderr
						SGMA_G_C_E         = result_C.params['SIGMA'].stderr

						CTRE_G_C_cor       = result_C.params['X_0'].correl
						AMPL_G_C_cor       = result_C.params['A'].correl
						SGMA_G_C_cor       = result_C.params['SIGMA'].correl

						AMPL_SNR           = AMPL_G_C
						CTRE_SNR           = CTRE_G_C
						SGMA_SNR           = abs(SGMA_G_C)

						if CTRE_G_C_E == None:
							CTRE_G_C_E = 999999.99999
						else:
							pass
						if AMPL_G_C_E == None:
							AMPL_G_C_E = 999999.99999
						else:
							pass
						if SGMA_G_C_E == None:
							SGMA_G_C_E = 999999.99999
						else:
							pass
						if CTRE_G_C_cor == None:
							CTRE_G_C_cor = 999999.99999
						else:
							pass
						if AMPL_G_C_cor == None:
							AMPL_G_C_cor = 999999.99999
						else:
							pass
						if SGMA_G_C_cor == None:
							SGMA_G_C_cor = 999999.99999
						else:
							pass
						chisqr_C           = result_C.chisqr
						redchi_C           = result_C.redchi
					except (RuntimeError,ValueError,TypeError):
						print colored('RuntimeError','cyan')
						popt_C, pcov_C  = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
						perr_C          = [999999.99999,999999.99999,999999.99999]
						CTRE_G_C        = 999999.99999
						AMPL_G_C        = 999999.99999
						SGMA_G_C        = 999999.99999
						FWHM_G_C        = 999999.99999
						EW_C            = 999999.99999
						EWE_C           = 999999.99999

						CTRE_G_C_E      = 999999.99999
						AMPL_G_C_E      = 999999.99999
						SGMA_G_C_E      = 999999.99999
						CTRE_G_C_cor    = 999999.99999
						AMPL_G_C_cor    = 999999.99999
						SGMA_G_C_cor    = 999999.99999
						chisqr_C        = 999999.99999
						redchi_C        = 999999.99999

						popt_O, pcov_O  = [999999.99999,999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999,999999.99999]
						perr_O          = [999999.99999,999999.99999,999999.99999,999999.99999]
						CTRE_G_O        = 999999.99999
						AMPL_G_O        = 999999.99999
						SGMA_G_O        = 999999.99999
						OFST_G_O        = 999999.99999
						FWHM_G_O        = 999999.99999
						EW_O            = 999999.99999
						EWE_O           = 999999.99999

						CTRE_G_O_E      = 999999.99999
						AMPL_G_O_E      = 999999.99999
						SGMA_G_O_E      = 999999.99999
						CTRE_G_O_cor    = 999999.99999
						AMPL_G_O_cor    = 999999.99999
						SGMA_G_O_cor    = 999999.99999
						OFST_G_O_cor    = 999999.99999
						chisqr_O        = 999999.99999
						redchi_O        = 999999.99999

						AMPL_SNR        = 999999.99999
						CTRE_SNR        = 999999.99999
						SGMA_SNR        = 999999.99999

					print
					print colored(specfile_glx,'cyan')
					print
					print colored(str(LINES[0][lines])+'-'+str(LINES[3][lines]),'yellow')
					print
					print colored(str(LINES[5][lines])+'_CGLC: ' + str(CTRE_G_C)  ,'yellow')
					print colored(str(LINES[5][lines])+'_AGLC: ' + str(AMPL_G_C)  ,'yellow')
					print colored(str(LINES[5][lines])+'_SGLC: ' + str(SGMA_G_C)  ,'yellow')
					print colored(str(LINES[5][lines])+'_FGLC: ' + str(FWHM_G_C)  ,'yellow')
					print colored(str(LINES[5][lines])+'_WGLC: ' + str(EW_C)      ,'yellow')
					print colored(str(LINES[5][lines])+'_EGLC: ' + str(EWE_C),'yellow')
					print
					print
					print
					print colored('Fit Values Center, Amplitude, Sigma ('+fit_type+'):','yellow')
					print colored(str(CTRE_G_C)+', '+str(AMPL_G_C)+', '+str(SGMA_G_C),'yellow')
					print
					print
					print colored('Fit Values Center, Amplitude, Sigma ('+fit_type+'):','yellow')
					print colored(str(CTRE_G_C)+', '+str(AMPL_G_C)+', '+str(SGMA_G_C),'yellow')
					print

					if fit_vls_hdr == True:
						Header_Add(specfile_glx,'BSF_FCT',str(fit_fnct)                       ,header_comment = 'Fit function')
						Header_Add(specfile_glx,'BSF_MTH',str(fit_type)                       ,header_comment = 'Fit method')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_CGLO',float(CTRE_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Offst' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_AGLO',float(AMPL_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Offst' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_SGLO',float(SGMA_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Offst' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_FGLO',float(FWHM_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Offst' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WGLO',float(EW_O)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Offst' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EGLO',float(EWE_O)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Offst' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_OFSO',float(OFST_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ofst 1GF Offst' + str(fit_type))

						Header_Add(specfile_glx,str(LINES[5][lines])+'_CGLC',float(CTRE_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_AGLC',float(AMPL_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_SGLC',float(SGMA_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_FGLC',float(FWHM_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WGLC',float(EW_C)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EGLC',float(EWE_C)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_CLEC',float(CTRE_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_ALEC',float(AMPL_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_SLEC',float(SGMA_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))

						Header_Add(specfile_glx,str(LINES[5][lines])+'_CHGL',float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 1GF' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_CRGL',float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 Reduced 1GF' + str(fit_type))
					else:
						print
						print colored('The fit values will not be added to the fits headers!','magenta')
						print
						pass

					###############################################COMPUTING TOTAL AREA###############################################
					Header_Get(specfile_glx,str(LINES[5][lines])+'_AGLC')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type)
					Header_Get(specfile_glx,str(LINES[5][lines])+'_SGLC')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type)

					print colored('Computing Flux Area','yellow')
					print
					print colored('Computing Area using info from fits headers.','yellow')
					print 'AMPL_G_C_CRC: ',str(AMPL_G_C),'SGMA_G_CRC: ',str(SGMA_G_C)
					print

					W_C   = integrate.quad(lambda x: AMPL_G_C*np.exp(-((x)**2)/(2*SGMA_G_C**2)), -np.inf, np.inf)
					EW_C  = np.round(abs(np.asarray(W_C[0])),10)
					EWE_C = np.round(abs(np.asarray(W_C[1])),10)

					print
					print colored('Areas     :','yellow')
					print colored('Area CRC-G: ' + str(EW_C),'yellow')
					print
					################################################COMPUTING TOTAL AREA################################################
					#############################################ADDING AREA TO FTIS HEADER#############################################
					if fit_vls_hdr == True:
						print
						print colored('The Areas values will be updated to the fits headers!','magenta')
						print
						print colored('Area CRC-G: ' + str(EW_C)   + '-' +str(LINES[5][lines])+'_WGLC','yellow')
						print

						Header_Add(specfile_glx,str(LINES[5][lines])+'_WGLC',float(EW_C)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EGLC',float(EWE_C)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
						print
						print colored('The LINEAR AND TOTAL Areas values will not be updated to the fits headers!','magenta')
						print
					else:
						pass
					#############################################ADDING AREA TO FTIS HEADER#############################################
				elif 'Dbl' not in LINES[3][lines] and fit_fnct=='gaussM'  and fit_type == 'lmfit' and mke_lne_fit == True and uft_lne_vls == False:
					fit_typ = 'GM'
					#GAUSSIAN FIT
					MSK_NTMS=2.5
					print
					print colored('1D Gaussian Fit Mode Choosen: Lmfit (Offset)','cyan')
					print
					from lmfit import Model

	
					#####################################################Getting Line Fitting Initial Values From Statcked Spectrum Fits Header#####################################################
					if ivl_fts_hdr == True:
						try:
							L1_0  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WF_0')        #LINES-1 Wdt-Fit  1GF-IntVal      WIDTH-FIT
							L2_0  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WP_0')        #LINES-2 Wdt-Plt  1GF-IntVal      WIDTH-PLT
							L7_0  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CF_0')        #LINES-7 Ctr Fit Bnds  1GF-IntVal CTR-FIT-BNDS
							L8_0  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CO_0')        #LINES-8 Ctr Fit Ofst  1GF-IntVal CTR-OFFSET
							L10_0 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF_0')       #LINES-8 Ctr Fit Ofst  1GF-IntVal LNE_AMP_BNDS
							print
							print colored('Initial fit variables from fits header!','yellow')
							print colored('Headers:','yellow')
							print
							print colored(str(LINES[5][lines])+'_WF_0' + ' LINES-1 Wdt-Fit  1GF-IntVal      : ' + str(L1_0),'yellow')
							print colored(str(LINES[5][lines])+'_WP_0' + ' LINES-2 Wdt-Plt  1GF-IntVal      : ' + str(L2_0),'yellow')
							print colored(str(LINES[5][lines])+'_CF_0' + ' LINES-7 Ctr Fit Bnds  1GF-IntVal : ' + str(L7_0),'yellow')
							print colored(str(LINES[5][lines])+'_CO_0' + ' LINES-8 Ctr Fit Ofst  1GF-IntVal : ' + str(L8_0),'yellow')
							print colored(str(LINES[5][lines])+'_AF_0' + ' LINES-10 Amp Fit Bnds  1GF-IntVal: ' + str(L10_0),'yellow')
							print colored('*****Success!******','magenta')
							print
						except ValueError:
							print
							print colored('Headers containing initial fit variables not found!','yellow')
							print colored('Run Spec_Stk_Stack first or use value from Lines_Dictionary.py with ivl_fts_hdr = False:','yellow')
							print colored('Headers:','yellow')
							print
							print colored(str(LINES[5][lines])+'_WF_0' + ' LINES-1 Wdt-Fit  1GF-IntVal','yellow')
							print colored(str(LINES[5][lines])+'_WP_0' + ' LINES-2 Wdt-Plt  1GF-IntVal','yellow')
							print colored(str(LINES[5][lines])+'_CF_0' + ' LINES-7 Ctr Fit Bnds  1GF-IntVal','yellow')
							print colored(str(LINES[5][lines])+'_CO_0' + ' LINES-8 Ctr Fit Ofst  1GF-IntVal','yellow')
							print colored(str(LINES[5][lines])+'_AF_0' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','yellow')
							print '*****'
							print
							quit()
						try:
							L10_0 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF_0')        #LINES-8 Ctr Fit Ofst  1GF-IntVal LNE_AMP_BNDS
							print colored(str(LINES[5][lines])+'_AF_0' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','yellow')
							print colored('*****Success!******','magenta')
							print
						except KeyError:
							print
							print colored('Header not found!','yellow')
							print colored('Adding Header with default valuee 0.001:','yellow')
							print colored(str(LINES[5][lines])+'_AF_0' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','yellow')
							Header_Get_Add(specfile_glx,str(LINES[5][lines])+'_AF_0',0.001,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-10 Amp Fit Bnds  1GF-IntVal')
							L10_0 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF_0')        #LINES-8 Ctr Fit Ofst  1GF-IntVal LNE_AMP_BNDS
							print colored('*****Success!******','magenta')
							print
						################FOR CASES WHERE KLINE WIIDHT ==0################
						if L1_0  == 0:
							L1_0  = 1#LINES[1][lines]
						else:
							pass
						################FOR CASES WHERE KLINE WIIDHT ==0################
					elif ivl_fts_hdr == False:
						L1_0  = LINES[1][lines]
						L2_0  = LINES[2][lines]
						L7_0  = LINES[7][lines]
						L8_0  = LINES[8][lines]
						L10_0 = LINES[10][lines]
						print
						print colored('Initial fit variables from Lines_Dictionary.py!','yellow')
						print					
					print str(LINES[5][lines])+'_WF_0' + ': ' + str(L1_0)
					print str(LINES[5][lines])+'_WP_0' + ': ' + str(L2_0)
					print str(LINES[5][lines])+'_CF_0' + ': ' + str(L7_0)
					print str(LINES[5][lines])+'_CO_0' + ': ' + str(L8_0)
					print str(LINES[5][lines])+'_AF_0' + ': ' + str(L10_0)
					#quit()

					#####################################################Getting Line Fitting Initial Values From Statcked Spectrum Fits Header#####################################################

					lmb_min_lim_line_ft = (LINES[0][lines]-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] ##IT WAS LINE CTR - LINE OFFSET
					lmb_max_lim_line_ft = (LINES[0][lines]+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]
					lmb_min_lim_line    = (LINES[0][lines]-LINES[8][lines])*(1+z_glx_Ps) - 1.5*MSK_NTMS*LINES[2][lines]#- 20#LINES[2][lines] - 10 ##IT WAS LINE CTR - LINE OFFSET
					lmb_max_lim_line    = (LINES[0][lines]+LINES[8][lines])*(1+z_glx_Ps) + 1.5*MSK_NTMS*LINES[2][lines]#+ 20#LINES[2][lines] + 10

					mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
					mask_ft    = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
					label_glx  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function

					X0_f2DG    = (LINES[0][lines]+LINES[8][lines])
					SIGMA_f2DG = LINES[1][lines]
					A_f2DG     = -(1-(min(inten_glx[mask_ft])))

					max_val    = -(1-min(inten_glx[mask_ft]))
					lambda_max = (lambda_glx[np.where(inten_glx==min(inten_glx[mask_ft]))[0]][0])					

					if pre_off_plt == True:
						plt.step(lambda_glx[mask_pl], inten_glx[mask_pl],
								where='mid',lw=3.0,alpha=0.5,linestyle=':',color='gray',
								label='Original Spectrum')
					elif pre_off_plt == False:
						pass

					hsw_nmb_med = np.ceil(np.median(inten_glx_hst[mask_ft]))
					hsw_nmb_med = np.ceil(np.median(inten_glx_hsw[mask_ft]))
					Header_Add(specfile_glx,str(LINES[5][lines])+'_NHT',float(hsw_nmb_med) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + '# glxs stk hst Fit Spec Reg (med)')
					Header_Add(specfile_glx,str(LINES[5][lines])+'_NHW',float(hsw_nmb_med) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + '# glxs stk hsw Fit Spec Reg (med)')
					print specfile_glx,str(LINES[5][lines])+'_NHT',float(hsw_nmb_med) 
					print specfile_glx,str(LINES[5][lines])+'_NHW',float(hsw_nmb_med) 

					initial_guess_O   = (X0_f2DG,A_f2DG,SIGMA_f2DG,max(inten_glx[mask_ft])-1)
					initial_guess_0   = (X0_f2DG,A_f2DG,SIGMA_f2DG)
				
					##################################################CENTRAL GAUSSIAN###################################################
					if fix_ctr_gau == False:
						print
						print colored('0-Fitting Central line','cyan')
						print
						#################################################CENTRAL GAUSSIAN-0##################################################
						try:
							gmodel_0           = Model(func_1D_Gaussian)
							gmodel_0.set_param_hint('X_0'  , value=X0_f2DG   , min=X0_f2DG-(X0_f2DG*LINES[7][lines]), max=X0_f2DG+(X0_f2DG*LINES[7][lines]))
							#gmodel_0.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
							gmodel_0.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG  - (A_f2DG*LINES[10][lines]) , max=A_f2DG  + (A_f2DG*LINES[10][lines]))#min=A_f2DG-0.001, max=A_f2DG)
							gmodel_0.set_param_hint('SIGMA', value=SIGMA_f2DG)
							pars_0             = gmodel_0.make_params()							
							result_0           = gmodel_0.fit(inten_glx[mask_ft],pars_0,
													X=lambda_glx[mask_ft],
													X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,
													nan_policy = 'omit')
							CTRE_G_0           = result_0.params['X_0'].value
							AMPL_G_0           = result_0.params['A'].value
							SGMA_G_0           = abs(result_0.params['SIGMA'].value)
							FWHM_G_0           = lw_sgma2fwhm(SGMA_G_0)
							W_0                = integrate.quad(lambda x: AMPL_G_0*np.exp(-((x)**2)/(2*SGMA_G_0**2)), -np.inf, np.inf)
							EW_0               = np.round(abs(np.asarray(W_0[0])),10)
							EWE_0              = np.round(abs(np.asarray(W_0[1])),10)
							data_fitted_0      = func_1D_Gaussian((lambda_glx[mask_ft]), CTRE_G_0,AMPL_G_0,SGMA_G_0)

							CTRE_G_0_E         = result_0.params['X_0'].stderr
							AMPL_G_0_E         = result_0.params['A'].stderr
							SGMA_G_0_E         = result_0.params['SIGMA'].stderr

							CTRE_G_0_cor       = result_0.params['X_0'].correl
							AMPL_G_0_cor       = result_0.params['A'].correl
							SGMA_G_0_cor       = result_0.params['SIGMA'].correl

							chisqr_0           = result_0.chisqr
							redchi_0           = result_0.redchi
						except (RuntimeError,ValueError,TypeError):
							popt_0, pcov_0   = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
							perr_0           = [999999.99999,999999.99999,999999.99999]
							CTRE_G_0         = 999999.99999
							AMPL_G_0         = 999999.99999
							SGMA_G_0         = 999999.99999
							FWHM_G_0         = 999999.99999
							EW_0             = 999999.99999
							EWE_0            = 999999.99999

							CTRE_G_0_E      = 999999.99999
							AMPL_G_0_E      = 999999.99999
							SGMA_G_0_E      = 999999.99999

							CTRE_G_0_cor    = 999999.99999
							AMPL_G_0_cor    = 999999.99999
							SGMA_G_0_cor    = 999999.99999

							chisqr_0        = 999999.99999
							redchi_0        = 999999.99999
						if fit_vls_hdr == True and fix_ctr_gau ==False:
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CF0M',float(CTRE_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AF0M',float(AMPL_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_FF0M',float(FWHM_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WF0M',float(EW_0)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_EF0M',float(EWE_0)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							print
							print colored('The fit (CTR-0) values will be added to the fits headers!','magenta')
							print
						else:
							print
							print colored('The fit (CTR-0) values will not be added to the fits headers!','magenta')
							print
						#################################################CENTRAL GAUSSIAN-0##################################################
						#################################################CENTRAL GAUSSIAN-C##################################################
						try:
							gmodel_O           = Model(func_1D_Gaussian_O)
							gmodel_O.set_param_hint('X_0'   , value=X0_f2DG   , min=X0_f2DG-(X0_f2DG*LINES[7][lines]), max=X0_f2DG+(X0_f2DG*LINES[7][lines]))
							#gmodel_O.set_param_hint('A'     , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
							gmodel_O.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG  - (A_f2DG*LINES[10][lines]) , max=A_f2DG  + (A_f2DG*LINES[10][lines]))#min=A_f2DG-0.001, max=A_f2DG)
							gmodel_O.set_param_hint('SIGMA' , value=SIGMA_f2DG)
							gmodel_O.set_param_hint('OFFSET', value=max(inten_glx[mask_ft])-1)
							pars_O             = gmodel_O.make_params()

							result_O           = gmodel_O.fit(inten_glx[mask_ft],pars_O,
													X=lambda_glx[mask_ft],X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,OFFSET=max(inten_glx[mask_ft])-1,
													nan_policy = 'omit')
							CTRE_G_O           = result_O.params['X_0'].value
							AMPL_G_O           = result_O.params['A'].value
							SGMA_G_O           = abs(result_O.params['SIGMA'].value)
							OFST_G_O           = abs(result_O.params['OFFSET'].value)
							FWHM_G_O           = lw_sgma2fwhm(SGMA_G_O)
							W_O                = integrate.quad(lambda x: AMPL_G_O*np.exp(-((x)**2)/(2*SGMA_G_O**2)), -np.inf, np.inf)
							EW_O               = np.round(abs(np.asarray(W_O[0])),10)
							EWE_O              = np.round(abs(np.asarray(W_O[1])),10)
							data_fitted_O      = func_1D_Gaussian_O((lambda_glx[mask_ft]),CTRE_G_O,AMPL_G_O,SGMA_G_O,OFST_G_O)

							CTRE_G_O_E         = result_O.params['X_0'].stderr
							AMPL_G_O_E         = result_O.params['A'].stderr
							SGMA_G_O_E         = result_O.params['SIGMA'].stderr

							CTRE_G_O_cor       = result_O.params['X_0'].correl
							AMPL_G_O_cor       = result_O.params['A'].correl
							SGMA_G_O_cor       = result_O.params['SIGMA'].correl

							chisqr_O           = result_O.chisqr
							redchi_O           = result_O.redchi
							
							#####################################################################################################################
							if ofs_ctr_fit == True:
								print
								print colored('Using Fitted Center From Offset Fit to Redefine Fitting Region!','yellow')
								print
								lmb_min_lim_line_ft = (CTRE_G_O-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
								lmb_max_lim_line_ft = (CTRE_G_O+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]
								#lmb_min_lim_line    = (CTRE_G_O-LINES[8][lines])*(1+z_glx_Ps) - 1.5*MSK_NTMS*LINES[2][lines]#-20#LINES[2][lines] - 10
								#lmb_max_lim_line    = (CTRE_G_O+LINES[8][lines])*(1+z_glx_Ps) + 1.5*MSK_NTMS*LINES[2][lines]#+20#LINES[2][lines] + 10
								#mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
								mask_ft     = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
							else:
								pass
							#####################################################################################################################

							
							A_f2DG             = -(1-(min(inten_glx[mask_ft])))
							#inten_glx[mask_ft] = inten_glx[mask_ft] - OFST_G_O ####OFFSET - SHOULD BE APPLIED TO BE IDENTICAL TO METHOD GAUSS?
							initial_guess_C    = (X0_f2DG,A_f2DG,SIGMA_f2DG)#,max(inten_glx[mask_ft])-1)

							gmodel_C           = Model(func_1D_Gaussian)
							gmodel_C.set_param_hint('X_0'  , value=X0_f2DG   , min=X0_f2DG-(X0_f2DG*LINES[7][lines]), max=X0_f2DG+(X0_f2DG*LINES[7][lines]))
							#gmodel_C.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
							gmodel_C.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG  - (A_f2DG*LINES[10][lines]) , max=A_f2DG  + (A_f2DG*LINES[10][lines]))#min=A_f2DG-0.001, max=A_f2DG)
							gmodel_C.set_param_hint('SIGMA', value=SIGMA_f2DG)
							pars_C             = gmodel_C.make_params()
							result_C           = gmodel_C.fit(inten_glx[mask_ft],pars_C,
													X=lambda_glx[mask_ft],X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,
													nan_policy = 'omit')
							CTRE_G_C           = result_C.params['X_0'].value
							AMPL_G_C           = result_C.params['A'].value
							SGMA_G_C           = abs(result_C.params['SIGMA'].value)
							FWHM_G_C           = lw_sgma2fwhm(SGMA_G_C)
							W_C                = integrate.quad(lambda x: AMPL_G_C*np.exp(-((x)**2)/(2*SGMA_G_C**2)), -np.inf, np.inf)

							EW_C               = np.round(abs(np.asarray(W_C[0])),10)
							EWE_C              = np.round(abs(np.asarray(W_C[1])),10)
							data_fitted_C      = func_1D_Gaussian((lambda_glx[mask_ft]), CTRE_G_C,AMPL_G_C,SGMA_G_C)

							CTRE_G_C_E         = result_C.params['X_0'].stderr
							AMPL_G_C_E         = result_C.params['A'].stderr
							SGMA_G_C_E         = result_C.params['SIGMA'].stderr

							CTRE_G_C_cor       = result_C.params['X_0'].correl
							AMPL_G_C_cor       = result_C.params['A'].correl
							SGMA_G_C_cor       = result_C.params['SIGMA'].correl

							AMPL_SNR           = AMPL_G_C
							CTRE_SNR           = CTRE_G_C
							SGMA_SNR           = abs(SGMA_G_C)

							if CTRE_G_C_E == None:
								CTRE_G_C_E = 999999.99999
							else:
								pass
							if AMPL_G_C_E == None:
								AMPL_G_C_E = 999999.99999
							else:
								pass
							if SGMA_G_C_E == None:
								SGMA_G_C_E = 999999.99999
							else:
								pass
							if CTRE_G_C_cor == None:
								CTRE_G_C_cor = 999999.99999
							else:
								pass
							if AMPL_G_C_cor == None:
								AMPL_G_C_cor = 999999.99999
							else:
								pass
							if SGMA_G_C_cor == None:
								SGMA_G_C_cor = 999999.99999
							else:
								pass
							chisqr_C        = result_C.chisqr
							redchi_C        = result_C.redchi
							##inten_glx[mask_ft] = inten_glx[mask_ft] + OFST_G_O #OFFSET +
						except (RuntimeError,ValueError,TypeError):
							print colored('RuntimeError','cyan')
							popt_C, pcov_C = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
							perr_C          = [999999.99999,999999.99999,999999.99999]
							CTRE_G_C        = 999999.99999
							AMPL_G_C        = 999999.99999
							SGMA_G_C        = 999999.99999
							FWHM_G_C        = 999999.99999
							EW_C            = 999999.99999
							EWE_C           = 999999.99999

							CTRE_G_C_E      = 999999.99999
							AMPL_G_C_E      = 999999.99999
							SGMA_G_C_E      = 999999.99999
							CTRE_G_C_cor    = 999999.99999
							AMPL_G_C_cor    = 999999.99999
							SGMA_G_C_cor    = 999999.99999
							chisqr_C        = 999999.99999
							redchi_C        = 999999.99999

							popt_O ,pcov_O  = [999999.99999,999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999,999999.99999]
							perr_O          = [999999.99999,999999.99999,999999.99999,999999.99999]
							CTRE_G_O        = 999999.99999
							AMPL_G_O        = 999999.99999
							SGMA_G_O        = 999999.99999
							OFST_G_O        = 999999.99999
							FWHM_G_O        = 999999.99999
							EW_O            = 999999.99999
							EWE_O           = 999999.99999

							CTRE_G_O_E      = 999999.99999
							AMPL_G_O_E      = 999999.99999
							SGMA_G_O_E      = 999999.99999
							CTRE_G_O_cor    = 999999.99999
							AMPL_G_O_cor    = 999999.99999
							SGMA_G_O_cor    = 999999.99999
							OFST_G_O_cor    = 999999.99999
							chisqr_O        = 999999.99999
							redchi_O        = 999999.99999

							AMPL_SNR     = 999999.99999
							CTRE_SNR     = 999999.99999
							SGMA_SNR     = 999999.99999
						print
						print colored(specfile_glx,'cyan')
						print
						print colored(str(LINES[0][lines])+'-'+str(LINES[3][lines]),'yellow')
						print
						print colored(str(LINES[5][lines])+'_CGLC: ' + str(CTRE_G_C)  ,'yellow')
						print colored(str(LINES[5][lines])+'_AGLC: ' + str(AMPL_G_C)  ,'yellow')
						print colored(str(LINES[5][lines])+'_SGLC: ' + str(SGMA_G_C)  ,'yellow')
						print colored(str(LINES[5][lines])+'_FGLC: ' + str(FWHM_G_C)  ,'yellow')
						print colored(str(LINES[5][lines])+'_WGLC: ' + str(EW_C)      ,'yellow')
						print colored(str(LINES[5][lines])+'_EGLC: ' + str(EWE_C),'yellow')
						print
						print
						#inten_glx[mask_ft] = inten_glx[mask_ft] + OFST_G_O

						if fit_vls_hdr == True and fix_ctr_gau==False:
							Header_Add(specfile_glx,'BSF_FCT',str(fit_fnct)                       ,header_comment = 'Fit function')
							Header_Add(specfile_glx,'BSF_MTH',str(fit_type)                       ,header_comment = 'Fit method')
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CLOM',float(CTRE_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_ALOM',float(AMPL_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_FLOM',float(FWHM_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WLOM',float(EW_O)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_ELOM',float(EWE_O)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_OFOM',float(OFST_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ofst 1GF Offst' + str(fit_fnct) + '-' +str(fit_type))

							Header_Add(specfile_glx,str(LINES[5][lines])+'_CLCM',float(CTRE_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_ALCM',float(AMPL_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_SLCM',float(SGMA_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_FLCM',float(FWHM_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WLCM',float(EW_C)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_ELCM',float(EWE_C)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CECM',float(CTRE_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AECM',float(AMPL_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_SECM',float(SGMA_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_fnct) + '-' +str(fit_type))

							Header_Add(specfile_glx,str(LINES[5][lines])+'_CHLM',float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 1GF' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CRLM',float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 Reduced 1GF' + str(fit_fnct) + '-' +str(fit_type))

							print
							print colored('The fit (CTR-C & CTR_O) values will be added to the fits headers!','magenta')
							print
						else:
							print
							print colored('The fit (CTR-C & CTR_O) values will not be added to the fits headers!','magenta')
							print
						#################################################CENTRAL GAUSSIAN-C##################################################					
					elif fix_ctr_gau == True:
						print
						print colored('0 CTR-gaussian already fitted!','yellow')
						print colored('Values from fits header','yellow')
						try:
							CTRE_G_0    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CF0M')#,float(CTRE_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct')
							AMPL_G_0    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF0M')#,float(AMPL_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct')
							FWHM_G_0    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FF0M')#,float(FWHM_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct')
							EW_0        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WF0M')#,float(EW_0)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct')
							EWE_0       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EF0M')#,float(EWE_0)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct')

							CTRE_G_O    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLOM')#,float(CTRE_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Offst' + str(fit_type))
							AMPL_G_O    = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALOM')#,float(AMPL_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Offst' + str(fit_type))
							FWHM_G_O    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FLOM')#,float(FWHM_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Offst' + str(fit_type))
							EW_O        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WLOM')#,float(EW_O)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Offst' + str(fit_type))
							EWE_O       = Header_Get(specfile_glx,str(LINES[5][lines])+'_ELOM')#,float(EWE_O)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Offst' + str(fit_type))
							OFST_G_O    = Header_Get(specfile_glx,str(LINES[5][lines])+'_OFOM')#,float(OFST_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ofst 1GF Offst' + str(fit_type))

							CTRE_G_C    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLCM')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
							AMPL_G_C    = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALCM')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
							SGMA_G_C    = Header_Get(specfile_glx,str(LINES[5][lines])+'_SLCM')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
							FWHM_G_C    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FLCM')#,float(FWHM_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
							EW_C        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WLCM')#,float(EW_C)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
							EWE_C       = Header_Get(specfile_glx,str(LINES[5][lines])+'_ELCM')#,float(EWE_C)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
							CTRE_G_C_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CECM')#,float(CTRE_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
							AMPL_G_C_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_AECM')#,float(AMPL_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
							SGMA_G_C_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_SECM')#,float(SGMA_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))

							chisqr_C    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CHLM')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 1GF' + str(fit_type))
							redchi_C    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CRLM')#,float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 Reduced 1GF' + str(fit_type))

						except KeyError:
							print
							print colored ('Gaussian Fit Parameters are not found on Fits Header!','yellow')
							print colored ('File  : ' + specfile_glx,'yellow')
							print colored ('Header: ' + str(LINES[5][lines])+'_CF0M','yellow')
							print colored ('Gotta Fit first before fixing a component (CTR)!','yellow')
							print colored ('Or UnFix (fix_ctr_gau=False) For Plotting!','yellow')
							print colored ('Quitting!','yellow')
							print
							CTRE_G_0    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGF0')#,float(CTRE_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct')
							AMPL_G_0    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGF0')#,float(AMPL_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct')
							FWHM_G_0    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGF0')#,float(FWHM_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct')
							EW_0        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGF0')#,float(EW_0)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct')
							EWE_0       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGF0')#,float(EWE_0)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct')

							CTRE_G_O    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGLO')#,float(CTRE_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Offst' + str(fit_type))
							AMPL_G_O    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGLO')#,float(AMPL_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Offst' + str(fit_type))
							FWHM_G_O    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGLO')#,float(FWHM_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Offst' + str(fit_type))
							EW_O        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGLO')#,float(EW_O)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Offst' + str(fit_type))
							EWE_O       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGLO')#,float(EWE_O)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Offst' + str(fit_type))
							OFST_G_O    = Header_Get(specfile_glx,str(LINES[5][lines])+'_OFSO')#,float(OFST_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ofst 1GF Offst' + str(fit_type))

							CTRE_G_C    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGLC')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
							AMPL_G_C    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGLC')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
							SGMA_G_C    = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGLC')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
							FWHM_G_C    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGLC')#,float(FWHM_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
							EW_C        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGLC')#,float(EW_C)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
							EWE_C       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGLC')#,float(EWE_C)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
							CTRE_G_C_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLEC')#,float(CTRE_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
							AMPL_G_C_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALEC')#,float(AMPL_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
							SGMA_G_C_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_SLEC')#,float(SGMA_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))

							chisqr_C    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CHGL')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 1GF' + str(fit_type))
							redchi_C    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CRGL')#,float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 Reduced 1GF' + str(fit_type))							#quit()
					print
					print colored(str(LINES[0][lines])+'-'+str(LINES[3][lines])+'-CTR','green')
					print
					print colored(str(LINES[5][lines])+'_CLCM: ' + str(CTRE_G_C)  ,'green')
					print colored(str(LINES[5][lines])+'_ALCM: ' + str(AMPL_G_C)  ,'green')
					print colored(str(LINES[5][lines])+'_SLCM: ' + str(SGMA_G_C)  ,'green')
					print colored(str(LINES[5][lines])+'_FLCM: ' + str(FWHM_G_C)  ,'green')
					print colored(str(LINES[5][lines])+'_WLCM: ' + str(EW_C)      ,'green')
					print colored(str(LINES[5][lines])+'_ELCM: ' + str(EWE_C),'green')
					print colored('Fit Values Center, Amplitude, Sigma ('+fit_type+'):','green')
					print colored(str(CTRE_G_C)+', '+str(AMPL_G_C)+', '+str(SGMA_G_C),'green')
					print
					##################################################CENTRAL GAUSSIAN###################################################
					#####################################################PRE GAUSSIAN####################################################
					if fix_pre_gau == False:
						###########################################DEFINING PRE-PST REGIONS##################################################
						if ofs_ctr_fit == True:
							print
							print colored('Using Fitted Center From Offset Fit to Redefine Fitting Region!','yellow')
							print
							lmb_min_lim_line_ft = (CTRE_G_0-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
							lmb_max_lim_line_ft = (CTRE_G_0+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]
							mask_ft_pre = (lambda_glx <= LINES[0][lines] - pre_shf_ctr + pre_shf_lim) & (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim)
							mask_ft_pst = (lambda_glx >= LINES[0][lines] + pst_shf_ctr - pst_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
							mask_ft_plp = (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
							X0_f2DG_indx_PRE       = np.where(inten_glx[mask_ft_pre]==(max(inten_glx[mask_ft_pre])))[0]
							X0_f2DG_indx_PST       = np.where(inten_glx[mask_ft_pst]==(max(inten_glx[mask_ft_pst])))[0]
						else:
							print
							print colored('Using Expected Line Center to Define Fitting Region!','yellow')
							print
							mask_ft_pre = (lambda_glx <= LINES[0][lines] - pre_shf_ctr + pre_shf_lim) & (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim)
							mask_ft_pst = (lambda_glx >= LINES[0][lines] + pst_shf_ctr - pst_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
							mask_ft_plp = (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
							X0_f2DG_indx_PRE       = np.where(inten_glx[mask_ft_pre]==(max(inten_glx[mask_ft_pre])))[0]
							X0_f2DG_indx_PST       = np.where(inten_glx[mask_ft_pst]==(max(inten_glx[mask_ft_pst])))[0]

						print
						print colored('Region limits for fitting.','yellow')
						print colored('Central    : ' + str(LINES[0][lines]),'yellow')
						print colored('Central-PRE: ' + str(pre_shf_ctr) + '-' + str(LINES[0][lines]-pre_shf_ctr),'yellow')
						print colored('Central+PST: ' + str(pst_shf_ctr) + '-' + str(LINES[0][lines]+pst_shf_ctr),'yellow')
						print
						print colored('Limits:','yellow')
						print 'Central: lambda_glx >= ',lmb_min_lim_line_ft  ,'-','lambda_glx <= ',lmb_max_lim_line_ft
						print 'PRE    : lambda_glx >= ',LINES[0][lines] - pre_shf_ctr-pre_shf_lim,'-','lambda_glx <= ',LINES[0][lines] - pre_shf_ctr+pre_shf_lim
						print 'PST    : lambda_glx >= ',LINES[0][lines] + pst_shf_ctr-pst_shf_lim,'-','lambda_glx <= ',LINES[0][lines] + pst_shf_ctr+pst_shf_lim
						print
						print 'Total  : lambda_glx >= ',LINES[0][lines] - pre_shf_ctr-pre_shf_lim,'-','lambda_glx <= ',LINES[0][lines] - pre_shf_ctr+pst_shf_lim
						print
						###########################################DEFINING PRE-PST REGIONS##################################################
						X0_f2DG_indx_PRE       = np.where(inten_glx[mask_ft_pre]==(max(inten_glx[mask_ft_pre])))[0]
						x_a = lambda_glx[mask_ft_pre][X0_f2DG_indx_PRE]
						y_a = inten_glx[mask_ft_pre][X0_f2DG_indx_PRE]
						#inten_glx[mask_ft_plp] = inten_glx[mask_ft_plp] - OFST_G_O #OFFSET -
	 					try:
							print
							print colored('1-Fitting gaussian before line','cyan')
							print
							X0_f2DG_indx_PRE       = np.where(inten_glx[mask_ft_pre]==(max(inten_glx[mask_ft_pre])))[0]
							A_f2DG_PRE             = (max(inten_glx[mask_ft_pre])-1)
							X0_f2DG_PRE            = X0_f2DG-pre_shf_ctr#-2.5#lambda_glx[mask_ft_pre][X0_f2DG_indx_PRE]#X0_f2DG-pre_shf_lim#2.5#-2.5#SIGMA_f2DG/2#pre_shf_lim#lambda_glx[mask_ft_pre][X0_f2DG_indx_PRE]#X0_f2DG-2.5#
							SIGMA_f2DG_PRE         = SIGMA_f2DG/2.5
							initial_guess_C_PRE    = (X0_f2DG_PRE,A_f2DG_PRE,SIGMA_f2DG_PRE)

							x_a = lambda_glx[mask_ft_pre][X0_f2DG_indx_PRE]
							y_a = inten_glx[mask_ft_pre][X0_f2DG_indx_PRE]

							print
							print colored('Initial Guess Values PRE : ','cyan')
							print colored(initial_guess_C_PRE,'cyan')
							print

							gmodel_C_PRE           = Model(func_1D_Gaussian_Emm)
							gmodel_C_PRE.set_param_hint('X_0'  , value=X0_f2DG_PRE , min=X0_f2DG_PRE-(X0_f2DG_PRE*LINES[7][lines]), max=X0_f2DG_PRE+(X0_f2DG_PRE*LINES[7][lines]))
							#gmodel_C_PRE.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
							gmodel_C_PRE.set_param_hint('A'    , value=A_f2DG_PRE  , min=A_f2DG_PRE -(A_f2DG_PRE*LINES[10][lines]), max=A_f2DG_PRE +(A_f2DG_PRE*LINES[10][lines]))#min=A_f2DG-0.001, max=A_f2DG)
							gmodel_C_PRE.set_param_hint('SIGMA', value=SIGMA_f2DG_PRE)
							pars_C_PRE             = gmodel_C_PRE.make_params()
							result_C_PRE           = gmodel_C_PRE.fit(inten_glx[mask_ft_pre],pars_C_PRE,
													X=lambda_glx[mask_ft_pre],X_0=X0_f2DG_PRE,A=A_f2DG_PRE,SIGMA=SIGMA_f2DG_PRE,
													nan_policy = 'omit')
							CTRE_G_C_PRE           = result_C_PRE.params['X_0'].value
							AMPL_G_C_PRE           = result_C_PRE.params['A'].value
							SGMA_G_C_PRE           = abs(result_C_PRE.params['SIGMA'].value)
							FWHM_G_C_PRE           = lw_sgma2fwhm(SGMA_G_C_PRE)
							W_C_PRE                = integrate.quad(lambda x: AMPL_G_C_PRE*np.exp(-((x)**2)/(2*SGMA_G_C_PRE**2)), -np.inf, np.inf)

							EW_C_PRE               = np.round(abs(np.asarray(W_C_PRE[0])),10)
							EWE_C_PRE              = np.round(abs(np.asarray(W_C_PRE[1])),10)
							data_fitted_C_PRE      = func_1D_Gaussian_Emm((lambda_glx[mask_ft_pre]), CTRE_G_C_PRE,AMPL_G_C_PRE,SGMA_G_C_PRE)

							CTRE_G_C_PRE_E         = result_C_PRE.params['X_0'].stderr
							AMPL_G_C_PRE_E         = result_C_PRE.params['A'].stderr
							SGMA_G_C_PRE_E         = result_C_PRE.params['SIGMA'].stderr

							CTRE_G_C_PRE_cor       = result_C_PRE.params['X_0'].correl
							AMPL_G_C_PRE_cor       = result_C_PRE.params['A'].correl
							SGMA_G_C_PRE_cor       = result_C_PRE.params['SIGMA'].correl

							AMPL_SNR               = AMPL_G_C_PRE
							CTRE_SNR               = CTRE_G_C_PRE
							SGMA_SNR               = abs(SGMA_G_C_PRE)

							if CTRE_G_C_PRE_E == None or np.isnan(CTRE_G_C_PRE_E):
								CTRE_G_C_PRE_E = 999999.99999
							else:
								pass
							if AMPL_G_C_PRE_E == None:
								AMPL_G_C_PRE_E = 999999.99999
							else:
								pass
							if SGMA_G_C_PRE_E == None:
								SGMA_G_C_PRE_E = 999999.99999
							else:
								pass
							if CTRE_G_C_PRE_cor == None:
								CTRE_G_C_PRE_cor = 999999.99999
							else:
								pass
							if AMPL_G_C_PRE_cor == None:
								AMPL_G_C_PRE_cor = 999999.99999
							else:
								pass
							if SGMA_G_C_PRE_cor == None:
								SGMA_G_C_PRE_cor = 999999.99999
							else:
								pass
							chisqr_C_PRE           = result_C_PRE.chisqr
							redchi_C_PRE           = result_C_PRE.redchi


							W_C_PR1    = integrate.quad(lambda x: AMPL_G_C_PRE*np.exp(-((x)**2)/(2*SGMA_G_C_PRE**2)), x_a, np.inf)
							EW_C_PR1   = np.round(abs(np.asarray(W_C_PR1[0])),10)
							EWE_C_PR1  = np.round(abs(np.asarray(W_C_PR1[1])),10)
							#inten_glx[mask_ft_plp] = inten_glx[mask_ft_plp] + OFST_G_O #OFFSET +
						#except (RuntimeError,ValueError,TypeError):
						except (RuntimeError,ValueError,TypeError):
							print colored('RuntimeError','cyan')
							popt_C_PRE, pcov_C_PRE  = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
							perr_C_PRE          = [999999.99999,999999.99999,999999.99999]
							CTRE_G_C_PRE        = 999999.99999
							AMPL_G_C_PRE        = 999999.99999
							SGMA_G_C_PRE        = 999999.99999
							FWHM_G_C_PRE        = 999999.99999
							EW_C_PRE            = 999999.99999
							EWE_C_PRE           = 999999.99999

							CTRE_G_C_PRE_E      = 999999.99999
							AMPL_G_C_PRE_E      = 999999.99999
							SGMA_G_C_PRE_E      = 999999.99999
							CTRE_G_C_PRE_cor    = 999999.99999
							AMPL_G_C_PRE_cor    = 999999.99999
							SGMA_G_C_PRE_cor    = 999999.99999
							chisqr_C_PRE        = 999999.99999
							redchi_C_PRE        = 999999.99999

							EW_C_PR1            = 999999.99999
							EWE_C_PR1           = 999999.99999
						if fit_vls_hdr == True and fix_pre_gau == False:						
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CHGL',float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 1GF' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CRGL',float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 Reduced 1GF' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CGL1',float(CTRE_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AGL1',float(AMPL_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_SGL1',float(SGMA_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_FGL1',float(FWHM_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WGL1',float(EW_C_PRE)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_EGL1',float(EWE_C_PRE)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CLE1',float(CTRE_G_C_PRE_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_ALE1',float(AMPL_G_C_PRE_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_SLE1',float(SGMA_G_C_PRE_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))

							Header_Add(specfile_glx,str(LINES[5][lines])+'_XA1',float(x_a),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PRE GAU-LNR X1 COO')
							Header_Add(specfile_glx,str(LINES[5][lines])+'_YA1',float(y_a),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PRE GAU-LNR Y1 COO')
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WPR1',float(EW_C_PR1),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])   + ' EW   PRE' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_EPR1',float(EWE_C_PR1),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])  + ' EWE  PRE' + str(fit_type))
							print
							print colored('The fit (PRE) values will be added to the fits headers!','magenta')
							print
						else:
							print
							print colored('The fit (PRE) values will not be added to the fits headers!','magenta')
							print
							pass
						if uft_lne_vls == False and fit_vls_hdr == True and int_vlf_hdr==True:
							print
							print colored('Initial Guess Values for line Fitting will be recorded!','yellow')
							print colored('Info input parameters (pre_gauss_shf, pre_gauss_ctr) in Spec_Stk_Stack_0.4.py!','yellow')
							print
							Header_Add(specfile_glx,str(LINES[5][lines])+'_GS1',float(pre_shf_lim) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Shf from expt ctr wvl for PRE G-1')
							Header_Add(specfile_glx,str(LINES[5][lines])+'_GC1',float(pre_shf_ctr) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Gaussian Ctr Int Val for PRE G-1')
						else:
							print
							print colored('Initial Guess Values for line Fitting will NOT be recorded!','yellow')
							print
							pass
						#inten_glx[mask_ft_plp] = inten_glx[mask_ft_plp] + OFST_G_O #OFFSET -						
					elif fix_pre_gau == True:
						try:
							print
							print colored('1 PRE-gaussian already fitted!','yellow')
							print colored('Values from fits header','yellow')
							chisqr_C       = Header_Get(specfile_glx,str(LINES[5][lines])+'_CHGL')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 1GF' + str(fit_type))
							redchi_C       = Header_Get(specfile_glx,str(LINES[5][lines])+'_CRGL')#,float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 Reduced 1GF' + str(fit_type))
							CTRE_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGL1')#,float(CTRE_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
							AMPL_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGL1')#,float(AMPL_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
							SGMA_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGL1')#,float(SGMA_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
							FWHM_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGL1')#,float(FWHM_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
							EW_C_PRE       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGL1')#,float(EW_C_PRE)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
							EWE_C_PRE      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGL1')#,float(EWE_C_PRE)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
							CTRE_G_C_PRE_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLE1')#,float(CTRE_G_C_PRE_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
							AMPL_G_C_PRE_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALE1')#,float(AMPL_G_C_PRE_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
							SGMA_G_C_PRE_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_SLE1')#,float(SGMA_G_C_PRE_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))

							x_a            = Header_Get(specfile_glx,str(LINES[5][lines])+'_XA1')#,float(x_a),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PRE GAU-LNR X1 COO')
							y_a            = Header_Get(specfile_glx,str(LINES[5][lines])+'_YA1')#,float(y_a),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PRE GAU-LNR Y1 COO')
							EW_C_PR1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WPR1')#,float(EW_C_PR1),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])   + ' EW   PRE' + str(fit_type))
							EWE_C_PR1      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EPR1')#,float(EWE_C_PR1),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])  + ' EWE  PRE' + str(fit_type))

							pre_shf_lim    = Header_Get(specfile_glx,str(LINES[5][lines])+'_GS1')#,float(pre_shf_lim) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Shf from expt ctr wvl for PRE G-1')
							pre_shf_ctr    = Header_Get(specfile_glx,str(LINES[5][lines])+'_GC1')#,float(pre_shf_ctr) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Gaussian Ctr Int Val for PRE G-1')

						except KeyError:
							print
							print colored ('Gaussian Fit Parameters are not found on Fits Header!' ,'yellow')
							print colored ('File  : ' + specfile_glx,'yellow')
							print colored ('Header: ' + str(LINES[5][lines])+'_CF0M','yellow')
							print colored ('Gotta Fit first before fixing a component (PRE)!','yellow')
							print colored ('Or UnFix (fix_pre_gau=False) For Plotting!','yellow')
							print colored ('Quitting!','yellow')
							print
							quit()
					print
					print colored(str(LINES[0][lines])+'-'+str(LINES[3][lines])+'-PRE','cyan')
					print
					print '******************************************************************************'
					print colored('Boundaries for Gaussian Fitting (PRE-CTR): ' + str(pre_shf_ctr),'cyan')
					print colored('Boundaries for Gaussian Fitting (PRE-LIM): ' + str(pre_shf_lim),'cyan')
					print '******************************************************************************'					
					print
					print colored(str(LINES[5][lines])+'_CGL1: ' + str(CTRE_G_C_PRE)  ,'cyan')
					print colored(str(LINES[5][lines])+'_AGL1: ' + str(AMPL_G_C_PRE)  ,'cyan')
					print colored(str(LINES[5][lines])+'_SGL1: ' + str(SGMA_G_C_PRE)  ,'cyan')
					print colored(str(LINES[5][lines])+'_FGL1: ' + str(FWHM_G_C_PRE)  ,'cyan')
					print colored(str(LINES[5][lines])+'_WGL1: ' + str(EW_C_PRE)      ,'cyan')
					print colored(str(LINES[5][lines])+'_EGL1: ' + str(EWE_C_PRE),'cyan')
					print
					print colored(str(LINES[5][lines])+'_XA1 : ' + str(x_a),'cyan')
					print colored(str(LINES[5][lines])+'_YA1 : ' + str(y_a),'cyan')
					print colored(str(LINES[5][lines])+'_WPR1: ' + str(EW_C_PR1),'cyan')
					print colored(str(LINES[5][lines])+'_EPR1: ' + str(EWE_C_PR1),'cyan')
					print colored(str(LINES[5][lines])+'_GS1 : ' + str(pre_shf_lim),'cyan')
					print colored(str(LINES[5][lines])+'_GC1 : ' + str(pre_shf_ctr),'cyan')
					print
					print colored('Fit Values (PRE) Center, Amplitude, Sigma ('+fit_type+'):','cyan')
					print colored(str(CTRE_G_C_PRE)+', '+str(AMPL_G_C_PRE)+', '+str(SGMA_G_C_PRE),'cyan')
					print
					#####################################################PRE GAUSSIAN#################################################
					###################################################POST GAUSSIAN##################################################
					if fix_pst_gau == False:
						###########################################DEFINING PRE-PST REGIONS##################################################
						if ofs_ctr_fit == True:
							print
							print colored('Using Fitted Center From Offset Fit to Redefine Fitting Region!','yellow')
							print
							lmb_min_lim_line_ft = (CTRE_G_0-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
							lmb_max_lim_line_ft = (CTRE_G_0+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]
							mask_ft_pre = (lambda_glx <= LINES[0][lines] - pre_shf_ctr + pre_shf_lim) & (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim)
							mask_ft_pst = (lambda_glx >= LINES[0][lines] + pst_shf_ctr - pst_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
							mask_ft_plp = (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
							X0_f2DG_indx_PRE       = np.where(inten_glx[mask_ft_pre]==(max(inten_glx[mask_ft_pre])))[0]
							X0_f2DG_indx_PST       = np.where(inten_glx[mask_ft_pst]==(max(inten_glx[mask_ft_pst])))[0]
						else:
							print
							print colored('Using Expected Line Center to Define Fitting Region!','yellow')
							print
							mask_ft_pre = (lambda_glx <= LINES[0][lines] - pre_shf_ctr + pre_shf_lim) & (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim)
							mask_ft_pst = (lambda_glx >= LINES[0][lines] + pst_shf_ctr - pst_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
							mask_ft_plp = (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
							X0_f2DG_indx_PRE       = np.where(inten_glx[mask_ft_pre]==(max(inten_glx[mask_ft_pre])))[0]
							X0_f2DG_indx_PST       = np.where(inten_glx[mask_ft_pst]==(max(inten_glx[mask_ft_pst])))[0]

						print
						print colored('Region limits for fitting.','yellow')
						print colored('Central    : ' + str(LINES[0][lines]),'yellow')
						print colored('Central-PRE: ' + str(pre_shf_ctr) + '-' + str(LINES[0][lines]-pre_shf_ctr),'yellow')
						print colored('Central+PST: ' + str(pst_shf_ctr) + '-' + str(LINES[0][lines]+pst_shf_ctr),'yellow')
						print
						print colored('Limits:','yellow')
						print 'Central: lambda_glx >= ',lmb_min_lim_line_ft  ,'-','lambda_glx <= ',lmb_max_lim_line_ft
						print 'PRE    : lambda_glx >= ',LINES[0][lines] - pre_shf_ctr-pre_shf_lim,'-','lambda_glx <= ',LINES[0][lines] - pre_shf_ctr+pre_shf_lim
						print 'PST    : lambda_glx >= ',LINES[0][lines] + pst_shf_ctr-pst_shf_lim,'-','lambda_glx <= ',LINES[0][lines] + pst_shf_ctr+pst_shf_lim
						print
						print 'Total  : lambda_glx >= ',LINES[0][lines] - pre_shf_ctr-pre_shf_lim,'-','lambda_glx <= ',LINES[0][lines] - pre_shf_ctr+pst_shf_lim
						print
						###########################################DEFINING PRE-PST REGIONS##################################################						
						X0_f2DG_indx_PST       = np.where(inten_glx[mask_ft_pst]==(max(inten_glx[mask_ft_pst])))[0]
						x_b = lambda_glx[mask_ft_pst][X0_f2DG_indx_PST]
						y_b = inten_glx[mask_ft_pst][X0_f2DG_indx_PST]
						try:
							print colored('2-Fitting gaussian after line','cyan')
							#inten_glx[mask_ft_plp] = inten_glx[mask_ft_plp] - OFST_G_O #OFFSET
							X0_f2DG_indx_PST       = np.where(inten_glx[mask_ft_pst]==(max(inten_glx[mask_ft_pst])))[0]
							A_f2DG_PST             = (max(inten_glx[mask_ft_pst])-1)
							X0_f2DG_PST            = X0_f2DG+pst_shf_ctr#+2.5#lambda_glx[mask_ft_pst][X0_f2DG_indx_PST]#X0_f2DG+pst_shf_lim#+SIGMA_f2DG/2#pst_shf_lim#lambda_glx[mask_ft_pst][X0_f2DG_indx_PST]#X0_f2DG+20
							SIGMA_f2DG_PST         = SIGMA_f2DG/2
							initial_guess_C_PST    = (X0_f2DG_PST,A_f2DG_PST,SIGMA_f2DG_PST)#,max(inten_glx[mask_ft_pst])-1)

							print
							print colored('Initial Guess Values PST : ','cyan')
							print colored(initial_guess_C_PST,'cyan')
							print

							gmodel_C_PST           = Model(func_1D_Gaussian_Emm)
							gmodel_C_PST.set_param_hint('X_0'  , value=X0_f2DG_PST , min=X0_f2DG_PST-(X0_f2DG_PST*LINES[7][lines]), max=X0_f2DG_PST+(X0_f2DG_PST*LINES[7][lines]))
							#gmodel_C_PST.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
							gmodel_C_PST.set_param_hint('A'    , value=A_f2DG_PST  , min=A_f2DG_PST -(A_f2DG_PST*LINES[10][lines]), max=A_f2DG_PST +(A_f2DG_PST*LINES[10][lines]))#min=A_f2DG_PST-0.001, max=A_f2DG_PST)
							gmodel_C_PST.set_param_hint('SIGMA', value=SIGMA_f2DG_PST)
							pars_C_PST             = gmodel_C_PST.make_params()
							result_C_PST           = gmodel_C_PST.fit(inten_glx[mask_ft_pst],pars_C_PST,
													X=lambda_glx[mask_ft_pst],X_0=X0_f2DG_PST,A=A_f2DG_PST,SIGMA=SIGMA_f2DG_PST,
													nan_policy = 'omit')
							CTRE_G_C_PST           = result_C_PST.params['X_0'].value
							AMPL_G_C_PST           = result_C_PST.params['A'].value
							SGMA_G_C_PST           = abs(result_C_PST.params['SIGMA'].value)
							FWHM_G_C_PST           = lw_sgma2fwhm(SGMA_G_C_PST)
							W_C_PST                = integrate.quad(lambda x: AMPL_G_C_PST*np.exp(-((x)**2)/(2*SGMA_G_C_PST**2)), -np.inf, np.inf)

							EW_C_PST               = np.round(abs(np.asarray(W_C_PST[0])),10)
							EWE_C_PST              = np.round(abs(np.asarray(W_C_PST[1])),10)
							data_fitted_C_PST      = func_1D_Gaussian_Emm((lambda_glx[mask_ft_pst]), CTRE_G_C_PST,AMPL_G_C_PST,SGMA_G_C_PST)

							CTRE_G_C_PST_E         = result_C_PST.params['X_0'].stderr
							AMPL_G_C_PST_E         = result_C_PST.params['A'].stderr
							SGMA_G_C_PST_E         = result_C_PST.params['SIGMA'].stderr

							CTRE_G_C_PST_cor       = result_C_PST.params['X_0'].correl
							AMPL_G_C_PST_cor       = result_C_PST.params['A'].correl
							SGMA_G_C_PST_cor       = result_C_PST.params['SIGMA'].correl

							AMPL_SNR           = AMPL_G_C_PST
							CTRE_SNR           = CTRE_G_C_PST
							SGMA_SNR           = abs(SGMA_G_C_PST)

							if CTRE_G_C_PST_E == None:
								CTRE_G_C_PST_E = 999999.99999
							else:
								pass
							if AMPL_G_C_PST_E == None:
								AMPL_G_C_PST_E = 999999.99999
							else:
								pass
							if SGMA_G_C_PST_E == None:
								SGMA_G_C_PST_E = 999999.99999
							else:
								pass
							if CTRE_G_C_PST_cor == None:
								CTRE_G_C_PST_cor = 999999.99999
							else:
								pass
							if AMPL_G_C_PST_cor == None:
								AMPL_G_C_PST_cor = 999999.99999
							else:
								pass
							if SGMA_G_C_PST_cor == None:
								SGMA_G_C_PST_cor = 999999.99999
							else:
								pass
							chisqr_C_PST           = result_C_PST.chisqr
							redchi_C_PST           = result_C_PST.redchi

							W_C_PS2    = integrate.quad(lambda x: AMPL_G_C_PST*np.exp(-((x)**2)/(2*SGMA_G_C_PST**2)), -np.inf, x_b)
							EW_C_PS2   = np.round(abs(np.asarray(W_C_PS2[0])),10)
							EWE_C_PS2  = np.round(abs(np.asarray(W_C_PS2[1])),10)
							#inten_glx[mask_ft_plp] = inten_glx[mask_ft_plp] - OFST_G_O #OFFSET +
						except (RuntimeError,ValueError,TypeError):
							print colored('RuntimeError','cyan')
							popt_C_PST, pcov_C_PST  = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
							perr_C_PST          = [999999.99999,999999.99999,999999.99999]
							CTRE_G_C_PST        = 999999.99999
							AMPL_G_C_PST        = 999999.99999
							SGMA_G_C_PST        = 999999.99999
							FWHM_G_C_PST        = 999999.99999
							EW_C_PST            = 999999.99999
							EWE_C_PST           = 999999.99999

							
							CTRE_G_C_PST_E      = 999999.99999
							AMPL_G_C_PST_E      = 999999.99999
							SGMA_G_C_PST_E      = 999999.99999
							CTRE_G_C_PST_cor    = 999999.99999
							AMPL_G_C_PST_cor    = 999999.99999
							SGMA_G_C_PST_cor    = 999999.99999
							chisqr_C_PST        = 999999.99999
							redchi_C_PST        = 999999.99999

							EW_C_PR2            = 999999.99999
							EWE_C_PR2           = 999999.99999

						if fit_vls_hdr == True and fix_pst_gau == False:
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CGL2',float(CTRE_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AGL2',float(AMPL_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_SGL2',float(SGMA_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_FGL2',float(FWHM_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WGL2',float(EW_C_PST)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_EGL2',float(EWE_C_PST)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CLE2',float(CTRE_G_C_PST_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_ALE2',float(AMPL_G_C_PST_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_SLE2',float(SGMA_G_C_PST_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))

							Header_Add(specfile_glx,str(LINES[5][lines])+'_XA2',float(x_b),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PST GAU-LNR X2 COO')
							Header_Add(specfile_glx,str(LINES[5][lines])+'_YA2',float(y_b),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PST GAU-LNR Y2 COO')
							#Header_Add(specfile_glx,str(LINES[5][lines])+'_WPS2',float(EW_C_PS2),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])   + ' EW   PST' + str(fit_type))
							#Header_Add(specfile_glx,str(LINES[5][lines])+'_EPS2',float(EWE_C_PS2),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])  + ' EWE  PST' + str(fit_type))
						else:
							print
							print colored('The fit (PST) values will not be added to the fits headers!','magenta')
							print
							pass
						if uft_lne_vls == False and fit_vls_hdr == True and int_vlf_hdr==True:
							print
							print colored('Initial Guess Values for line Fitting will be recorded!','yellow')
							print colored('Info input parameters (pre_gauss_shf, pre_gauss_ctr) in Spec_Stk_Stack_0.4.py!','yellow')
							print
							Header_Add(specfile_glx,str(LINES[5][lines])+'_GS2',float(pst_shf_lim) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Shf from expt ctr wvl for PST G-2')
							Header_Add(specfile_glx,str(LINES[5][lines])+'_GC2',float(pst_shf_ctr) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Gaussian Ctr Int Val for PST G-2')
						else:
							print
							print colored('Initial Guess Values for line Fitting will NOT be recorded!','yellow')
							print
							pass
						#inten_glx[mask_ft_plp] = inten_glx[mask_ft_plp] + OFST_G_O #OFFSET -
					elif fix_pst_gau == True:
						try:
							print
							print colored('2 PST-gaussian already fitted!','yellow')
							print colored('Values from fits header','yellow')
							CTRE_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGL2')#,float(CTRE_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
							AMPL_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGL2')#,float(AMPL_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
							SGMA_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGL2')#,float(SGMA_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
							FWHM_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGL2')#,float(FWHM_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
							EW_C_PST       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGL2')#,float(EW_C_PST)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
							EWE_C_PST      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGL2')#,float(EWE_C_PST)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
							CTRE_G_C_PST_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLE2')#,float(CTRE_G_C_PST_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
							AMPL_G_C_PST_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALE2')#,float(AMPL_G_C_PST_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
							SGMA_G_C_PST_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_SLE2')#,float(SGMA_G_C_PST_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))

							x_b         = Header_Get(specfile_glx,str(LINES[5][lines])+'_XA2')#,float(x_b),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PST GAU-LNR X2 COO')
							y_b         = Header_Get(specfile_glx,str(LINES[5][lines])+'_YA2')#,float(y_b),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PST GAU-LNR Y2 COO')
							EW_C_PS2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_WPS2')#,float(EW_C_PS2),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])   + ' EW   PST' + str(fit_type))
							EWE_C_PS2   = Header_Get(specfile_glx,str(LINES[5][lines])+'_EPS2')#,float(EWE_C_PS2),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])  + ' EWE  PST' + str(fit_type))

							pst_shf_lim    = Header_Get(specfile_glx,str(LINES[5][lines])+'_GS2')#,float(pre_shf_lim) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Shf from expt ctr wvl for PRE G-1')
							pst_shf_ctr    = Header_Get(specfile_glx,str(LINES[5][lines])+'_GC2')#,float(pre_shf_ctr) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Gaussian Ctr Int Val for PRE G-1')
						except KeyError:
							print
							print colored ('Gaussian Fit Parameters are not found on Fits Header!','yellow')
							print colored ('File  : ' + specfile_glx,'yellow')
							print colored ('Header: ' + str(LINES[5][lines])+'_CF0M','yellow')
							print colored ('Gotta Fit first before fixing a component (PST)!','yellow')
							print colored ('Or UnFix (fix_pst_gau=False) For Plotting!','yellow')
							print colored ('Quitting!','yellow')
							print
							quit()
					print
					print colored(str(LINES[0][lines])+'-'+str(LINES[3][lines])+'-PST','magenta')
					print
					print '******************************************************************************'
					print colored('Boundaries for Gaussian Fitting (PST-CTR): ' + str(pst_shf_ctr),'magenta')					
					print colored('Boundaries for Gaussian Fitting (PST-LIM): ' + str(pst_shf_lim),'magenta')
					print '******************************************************************************'
					print
					print colored(str(LINES[5][lines])+'_CGL2: ' + str(CTRE_G_C_PST)  ,'magenta')
					print colored(str(LINES[5][lines])+'_AGL2: ' + str(AMPL_G_C_PST)  ,'magenta')
					print colored(str(LINES[5][lines])+'_SGL2: ' + str(SGMA_G_C_PST)  ,'magenta')
					print colored(str(LINES[5][lines])+'_FGL2: ' + str(FWHM_G_C_PST)  ,'magenta')
					print colored(str(LINES[5][lines])+'_WGL2: ' + str(EW_C_PST)      ,'magenta')
					print colored(str(LINES[5][lines])+'_EGL2: ' + str(EWE_C_PST),'magenta')
					print
					print colored(str(LINES[5][lines])+'_GS2 : ' + str(pst_shf_lim),'magenta')
					print colored(str(LINES[5][lines])+'_GC2 : ' + str(pst_shf_ctr),'magenta')
					print colored(str(LINES[5][lines])+'_XA2 : ' + str(x_b),'magenta')
					print colored(str(LINES[5][lines])+'_YA2 : ' + str(y_b),'magenta')
					#print colored(str(LINES[5][lines])+'_WPS2: ' + str(EW_C_PS2),'magenta')
					#print colored(str(LINES[5][lines])+'_EPS2: ' + str(EWE_C_PS2),'magenta')
					print
					print colored('Fit Values (PST) Center, Amplitude, Sigma ('+fit_type+'):','magenta')
					print colored(str(CTRE_G_C_PST)+', '+str(AMPL_G_C_PST)+', '+str(SGMA_G_C_PST),'magenta')
					print					
					###################################################POST GAUSSIAN##################################################										

					###############################################COMPUTING TOTAL AREA###############################################
					print colored('Computing Flux Area','yellow')
					#############################################COMPUTING LINEAR AREA##################################################
					slope_line1 = (y_a-y_b)/(x_a-x_b)
					slope_line2 = (y_b-y_a)/(x_b-x_a)
					b1 = y_a - (slope_line1*x_a)
					b2 = y_b - (slope_line1*x_b)
					print
					print colored('Linear Parameters considering peak points:','yellow')
					print 'Point A: ',x_a,y_a
					print 'Point B: ',x_b,y_b
					print 'Slope: ',slope_line1
					print 'Slope: ',slope_line2
					print 'b: ',b1,b2
					print
					#############################################COMPUTING LINEAR AREA##################################################
					################################################COMPUTING TOTAL AREA################################################
					CTRE_G_C_PRE = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGL1')#,float(CTRE_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
					AMPL_G_C_PRE = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGL1')#,float(AMPL_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
					SGMA_G_C_PRE = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGL1')#,float(SGMA_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))

					CTRE_G_C     = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLCM')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
					AMPL_G_C     = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALCM')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
					SGMA_G_C     = Header_Get(specfile_glx,str(LINES[5][lines])+'_SLCM')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))

					CTRE_G_C_PST = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGL2')#,float(CTRE_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
					AMPL_G_C_PST = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGL2')#,float(AMPL_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
					SGMA_G_C_PST = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGL2')#,float(SGMA_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))

					print
					print colored('Computing Areas using info from fits headers.','yellow')
					print 'AMPL_G_C: ',str(AMPL_G_C),'SGMA_G_C: ',str(SGMA_G_C)
					print 'AMPL_G_C_PRE: ',str(AMPL_G_C_PRE),'SGMA_G_C_PRE: ',str(SGMA_G_C_PRE)
					print 'AMPL_G_C_PST: ',str(AMPL_G_C_PST),'SGMA_G_C_PST: ',str(SGMA_G_C_PST)
					print

					W_C       = integrate.quad(lambda x: AMPL_G_C*np.exp(-((x)**2)/(2*SGMA_G_C**2)), -np.inf, np.inf)
					EW_C      = np.round((np.asarray(W_C[0])),10)
					EWE_C     = np.round(abs(np.asarray(W_C[1])),10)

					W_C_PRE   = integrate.quad(lambda x: AMPL_G_C_PRE*np.exp(-((x)**2)/(2*SGMA_G_C_PRE**2)), -np.inf, np.inf)
					EW_C_PRE  = np.round((np.asarray(W_C_PRE[0])),10)
					EWE_C_PRE = np.round(abs(np.asarray(W_C_PRE[1])),10)

					W_C_PST   = integrate.quad(lambda x: AMPL_G_C_PST*np.exp(-((x)**2)/(2*SGMA_G_C_PST**2)), -np.inf, np.inf)
					EW_C_PST  = np.round((np.asarray(W_C_PST[0])),10)
					EWE_C_PST = np.round(abs(np.asarray(W_C_PST[1])),10)

					###############ALTERNATTIVE##############
					#####ROOTS ARE NEEDED FOR INT LIMITS#####
					#W_PLP   = integrate.quad(lambda x: AMPL_G_C*np.exp(-((x)**2)/(2*SGMA_G_C**2)) +
												#(AMPL_G_C_PST*np.exp(-((x-(CTRE_G_C_PST-CTRE_G_C))**2)/(2*SGMA_G_C_PST**2)))+
												#(AMPL_G_C_PRE*np.exp(-((x-(CTRE_G_C_PRE-CTRE_G_C))**2)/(2*SGMA_G_C_PRE**2))), 
												##-np.inf, np.inf
												#lmb_min_lim_line_ft-CTRE_G_C,lmb_max_lim_line_ft-CTRE_G_C
												#)
					#EW_PLP  = np.round((np.asarray(W_PLP[0])),10)
					#EWE_PLP = np.round(abs(np.asarray(W_PLP[1])),10)
					#EWMT    = EW_C + EW_C_PRE + EW_C_PST #+ EW_C_LNR
					#print CTRE_G_C
					#print CTRE_G_C_PRE 
					#print CTRE_G_C_PST
					#print (CTRE_G_C_PST-CTRE_G_C)
					#print (CTRE_G_C_PRE-CTRE_G_C)
					#print lmb_min_lim_line_ft-CTRE_G_C
					#print lmb_max_lim_line_ft-CTRE_G_C
					###############ALTERNATTIVE##############
					W_PLP   = integrate.quad(lambda x: AMPL_G_C*np.exp(-((x)**2)/(2*SGMA_G_C**2)) +
												(AMPL_G_C_PST*np.exp(-((x)**2)/(2*SGMA_G_C_PST**2)))+
												(AMPL_G_C_PRE*np.exp(-((x)**2)/(2*SGMA_G_C_PRE**2))), 
												-np.inf, np.inf
												)
					EW_PLP  = np.round((np.asarray(W_PLP[0])),10)
					EWE_PLP = np.round(abs(np.asarray(W_PLP[1])),10)

					if EW_C_PRE == 999999.99999:
						EW_C_PRE = 0
					else:
						pass
					if EWE_C_PST == 999999.99999:
						EWE_C_PST = 0
					else:
						pass
					if EW_C == 999999.99999:
						EW_C = 0
					else:
						pass

					EWMT    = EW_C  + EW_C_PRE  + EW_C_PST  #+ EW_C_LNR
					EWEMT   = EWE_C + EWE_C_PRE + EWE_C_PST #+ EW_C_LNR

					print
					print colored('Areas     :','yellow')
					print colored('Area CTR-G: ' + str(EW_C),'yellow')
					print colored('Area PRE-G: ' + str(EW_C_PRE),'blue')
					print colored('Area PST-G: ' + str(EW_C_PST),'magenta')
					print colored('Area PRE-CTR-PST: ' + str(EW_PLP),'yellow')
					print colored('Area TOT=PRE-CTR-PST: ' + str(EWMT),'yellow')
					print
					################################################COMPUTING TOTAL AREA################################################
					#############################################ADDING AREA TO FTIS HEADER#############################################
					if fit_vls_hdr == True:
						print
						print colored('The Areas values will be updated to the fits headers!','magenta')
						print
						print colored('Area CTR-G: '           + str(EW_C)     + '-' +str(LINES[5][lines])+'_WLCM','yellow')
						print colored('Area PRE-G: '           + str(EW_C_PRE) + '-' +str(LINES[5][lines])+'_ELCM','yellow')
						print colored('Area PST-G: '           + str(EW_C_PST) + '-' +str(LINES[5][lines])+'_WPST','yellow')
						print colored('Area PRE-CTR-PST: '     + str(EW_PLP)   + '-' +str(LINES[5][lines])+'_WPLP','yellow')
						print colored('Area TOT=PRE-CTR-PST: ' + str(EWMT)     + '-' +str(LINES[5][lines])+'_WTOT','yellow')
						print
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WLCM',float(EW_C)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines])  + ' EW CTR'  + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_ELCM',float(EWE_C)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines])  + ' EWE CTR' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WGL1',float(EW_C_PRE) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines])  + ' EW PRE'  + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EGL1',float(EWE_C_PRE),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])  + ' EWE PRE' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WGL2',float(EW_C_PST) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines])  + ' EW PST'  + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EGL2',float(EWE_C_PST),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])  + ' EWE PST' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WPLP',float(EW_PLP)   ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines])  + ' EW CTR-PRE-PST'  + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WEPL',float(EWE_PLP)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines])  + ' EWE CTR-PRE-PST' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WTOT',float(EWMT)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines])  + ' EW TOT'  + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WETT',float(EWMT)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines])  + ' EWE TOT' + str(fit_type))
					else:
						print
						print colored('The LINEAR AND TOTAL Areas values will not be updated to the fits headers!','magenta')
						print
					#############################################ADDING AREA TO FTIS HEADER#############################################						
					#################################DEFINE AREA FOR LATER ON SUBSTRACT OFFSET FOR PLOTING###############################
					###########################################DEFINING PRE-PST REGIONS##################################################
					if ofs_ctr_fit == True:
						print
						print colored('Using Fitted Center From Offset Fit to Redefine Fitting Region!','yellow')
						print
						lmb_min_lim_line_ft = (CTRE_G_0-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
						lmb_max_lim_line_ft = (CTRE_G_0+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]
						mask_ft_pre = (lambda_glx <= LINES[0][lines] - pre_shf_ctr + pre_shf_lim) & (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim)
						mask_ft_pst = (lambda_glx >= LINES[0][lines] + pst_shf_ctr - pst_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
						mask_ft_plp = (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
						X0_f2DG_indx_PRE       = np.where(inten_glx[mask_ft_pre]==(max(inten_glx[mask_ft_pre])))[0]
						X0_f2DG_indx_PST       = np.where(inten_glx[mask_ft_pst]==(max(inten_glx[mask_ft_pst])))[0]
					else:
						print
						print colored('Using Expected Line Center to Define Fitting Region!','yellow')
						print
						mask_ft_pre = (lambda_glx <= LINES[0][lines] - pre_shf_ctr + pre_shf_lim) & (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim)
						mask_ft_pst = (lambda_glx >= LINES[0][lines] + pst_shf_ctr - pst_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
						mask_ft_plp = (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
						X0_f2DG_indx_PRE       = np.where(inten_glx[mask_ft_pre]==(max(inten_glx[mask_ft_pre])))[0]
						X0_f2DG_indx_PST       = np.where(inten_glx[mask_ft_pst]==(max(inten_glx[mask_ft_pst])))[0]

					print
					print colored('Region limits for fitting.','yellow')
					print colored('Central    : ' + str(LINES[0][lines]),'yellow')
					print colored('Central-PRE: ' + str(pre_shf_ctr) + '-' + str(LINES[0][lines]-pre_shf_ctr),'yellow')
					print colored('Central+PST: ' + str(pst_shf_ctr) + '-' + str(LINES[0][lines]+pst_shf_ctr),'yellow')
					print
					print colored('Limits:','yellow')
					print 'Central: lambda_glx >= ',lmb_min_lim_line_ft  ,'-','lambda_glx <= ',lmb_max_lim_line_ft
					print 'PRE    : lambda_glx <= ',LINES[0][lines] - pre_shf_ctr+pre_shf_lim,'-','lambda_glx >= ',LINES[0][lines] - pre_shf_ctr-pre_shf_lim
					print 'PST    : lambda_glx >= ',LINES[0][lines] + pst_shf_ctr-pst_shf_lim,'-','lambda_glx <= ',LINES[0][lines] + pst_shf_ctr+pst_shf_lim
					print
					print 'Total  : lambda_glx >= ',LINES[0][lines] - pre_shf_ctr-pre_shf_lim,'-','lambda_glx <= ',LINES[0][lines] - pre_shf_ctr+pst_shf_lim
					print
					###########################################DEFINING PRE-PST REGIONS##################################################
					#################################DEFINE AREA FOR LATER ON SUBSTRACT OFFSET FOR PLOTING###############################
				elif 'Dbl' in LINES[3][lines] and fit_fnct=='gauss' and fit_type == 'lmfit' and uft_lne_vls == True:
					print 'Line-fitting Cleaning Method. To be checked Fnc_Stk_Plt.py def(Plot_Idp_Spc_Lne) line 10731!'
					fit_typ = 'G'
					#GAUSSIAN FIT
					MSK_NTMS=2.5
					print
					print colored('1D Gaussian Fit Mode Choosen: Lmfit (Offset)','cyan')
					print
					print 
					print colored('Double Line Fit (Ind)','yellow')
					print colored(LINES[3][lines-2]  + '-' + str(LINES[0][lines-2])   + '-' + str(LINES[1][lines-2]),'cyan')
					print LINES[3][lines]+ '-' + str(LINES[0][lines]) + '-'  + str(LINES[1][lines])
					print colored(LINES[3][lines-1]+ '-' + str(LINES[0][lines-1]) + '-' + str(LINES[1][lines-1]),'magenta')

					from lmfit import Model
	
					########################Getting Line Fitting Initial Values From Statcked Spectrum Fits Header#########################
					if ivl_fts_hdr == True:
						try:
							L1_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WF01')        #LINES-1  Wdt-Fit  1GF-IntVal      WIDTH-FIT
							L2_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WP01')        #LINES-2  Wdt-Plt  1GF-IntVal      WIDTH-PLT
							L7_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CF01')        #LINES-7  Ctr Fit Bnds  1GF-IntVal CTR-FIT-BNDS
							L8_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CO01')        #LINES-8  Ctr Fit Ofst  1GF-IntVal CTR-OFFSET
							L10_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF01')        #LINES-10 Ctr Fit Amp   1GF-IntVal LNE_AMP_BNDS

							L1_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WF02')        #LINES-1  Wdt-Fit  1GF-IntVal      WIDTH-FIT
							L2_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WP02')        #LINES-2  Wdt-Plt  1GF-IntVal      WIDTH-PLT
							L7_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CF02')        #LINES-7  Ctr Fit Bnds  1GF-IntVal CTR-FIT-BNDS
							L8_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CO02')        #LINES-8  Ctr Fit Ofst  1GF-IntVal CTR-OFFSET
							L10_2 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF02')        #LINES-10 Ctr Fit Amp   1GF-IntVal LNE_AMP_BNDS

							print
							print colored('Initial fit variables from fits header!','yellow')
							print
							print colored('1: ' + LINES[3][lines-2]  + '-' + str(LINES[0][lines-2]),'cyan')
							print colored('Headers:','cyan')
							print colored(str(LINES[5][lines])+'_WF01' + ' LINES-1 Wdt-Fit  1GF-IntVal      : ' + str(L1_1),'cyan')
							print colored(str(LINES[5][lines])+'_WP01' + ' LINES-2 Wdt-Plt  1GF-IntVal      : ' + str(L2_1),'cyan')
							print colored(str(LINES[5][lines])+'_CF01' + ' LINES-7 Ctr Fit Bnds  1GF-IntVal : ' + str(L7_1),'cyan')
							print colored(str(LINES[5][lines])+'_CO01' + ' LINES-8 Ctr Fit Ofst  1GF-IntVal : ' + str(L8_1),'cyan')
							print colored(str(LINES[5][lines])+'_AF01' + ' LINES-10 Amp Fit Bnds  1GF-IntVal: ' + str(L10_1),'cyan')
							print
							print colored('2: ' + LINES[3][lines-1]  + '-' + str(LINES[0][lines-1]),'magenta')
							print colored('Headers:','magenta')
							print colored(str(LINES[5][lines])+'_WF02' + ' LINES-1 Wdt-Fit  1GF-IntVal      : ' + str(L1_2),'magenta')
							print colored(str(LINES[5][lines])+'_WP02' + ' LINES-2 Wdt-Plt  1GF-IntVal      : ' + str(L2_2),'magenta')
							print colored(str(LINES[5][lines])+'_CF02' + ' LINES-7 Ctr Fit Bnds  1GF-IntVal : ' + str(L7_2),'magenta')
							print colored(str(LINES[5][lines])+'_CO02' + ' LINES-8 Ctr Fit Ofst  1GF-IntVal : ' + str(L8_2),'magenta')
							print colored(str(LINES[5][lines])+'_AF02' + ' LINES-10 Amp Fit Bnds  1GF-IntVal: ' + str(L10_2),'magenta')
							print colored('*****Success!******','yellow')
							print
						except ValueError:
							print
							print colored('Headers containing initial fit variables not found!','yellow')
							print colored('Run Spec_Stk_Stack first or use value from Lines_Dictionary.py with ivl_fts_hdr = False:','yellow')
							print colored('Headers:','yellow')
							print
							print colored('1: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'cyan')
							print colored(str(LINES[5][lines])+'_WF_0' + ' LINES-1 Wdt-Fit  1GF-IntVal','cyan')
							print colored(str(LINES[5][lines])+'_WP_0' + ' LINES-2 Wdt-Plt  1GF-IntVal','cyan')
							print colored(str(LINES[5][lines])+'_CF_0' + ' LINES-7 Ctr Fit Bnds  1GF-IntVal','cyan')
							print colored(str(LINES[5][lines])+'_CO_0' + ' LINES-8 Ctr Fit Ofst  1GF-IntVal','cyan')
							print colored(str(LINES[5][lines])+'_AF_0' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','cyan')
							print
							print colored('2: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'magenta')
							print colored(str(LINES[5][lines])+'_WF_0' + ' LINES-1 Wdt-Fit  1GF-IntVal','magenta')
							print colored(str(LINES[5][lines])+'_WP_0' + ' LINES-2 Wdt-Plt  1GF-IntVal','magenta')
							print colored(str(LINES[5][lines])+'_CF_0' + ' LINES-7 Ctr Fit Bnds  1GF-IntVal','magenta')
							print colored(str(LINES[5][lines])+'_CO_0' + ' LINES-8 Ctr Fit Ofst  1GF-IntVal','magenta')
							print colored(str(LINES[5][lines])+'_AF_0' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','magenta')
							print '*****'
							print
							quit()
						try:
							L10_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF_0')        #LINES-8 Ctr Fit Ofst  1GF-IntVal LNE_AMP_BNDS
							L10_2 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF_0')        #LINES-8 Ctr Fit Ofst  1GF-IntVal LNE_AMP_BNDS
							print colored('1: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'cyan')
							print colored(str(LINES[5][lines])+'_AF_0' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','cyan')
							print colored('2: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'magenta')
							print colored(str(LINES[5][lines])+'_AF_0' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','magenta')
							print colored('*****Success!******','yellow')
							print
						except KeyError:
							print
							print colored('Header not found!','yellow')
							print colored('Adding Header with default valuee 0.001:','yellow')
							print colored('1: ' + LINES[3][lines-2]  + '-' + str(LINES[0][lines-2]),'cyan')							
							print colored(str(LINES[5][lines-2])+'_AF01' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','cyan')
							print colored('2: ' + LINES[3][lines-1]  + '-' + str(LINES[0][lines-1]),'magenta')							
							print colored(str(LINES[5][lines-1])+'_AF02' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','magenta')
							Header_Get_Add(specfile_glx,str(LINES[5][lines])+'_AF01',0.001,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' LINES-10 Amp Fit Bnds  1GF-IntVal')
							Header_Get_Add(specfile_glx,str(LINES[5][lines])+'_AF02',0.001,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' LINES-10 Amp Fit Bnds  1GF-IntVal')
							L10_1 = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_AF01')        #LINES-8 Ctr Fit Ofst  1GF-IntVal LNE_AMP_BNDS
							L10_1 = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_AF02')        #LINES-8 Ctr Fit Ofst  1GF-IntVal LNE_AMP_BNDS
							print colored('*****Success!******','yellow')
							print
						################FOR CASES WHERE KLINE WIIDHT ==0################
						if L1_1  == 0:
							L1_1  = 1#LINES[1][lines]
						else:
							pass
						if L1_2  == 0:
							L1_2  = 1#LINES[1][lines]
						else:
							pass
						################FOR CASES WHERE KLINE WIIDHT ==0################
					elif ivl_fts_hdr == False:
						L1_1  = LINES[1][lines-2]
						L2_1  = LINES[2][lines-2]
						L7_1  = LINES[7][lines-2]
						L8_1  = LINES[8][lines-2]
						L10_1 = LINES[10][lines-2]

						L1_2  = LINES[1][lines-1]
						L2_2  = LINES[2][lines-1]
						L7_2  = LINES[7][lines-1]
						L8_2  = LINES[8][lines-1]
						L10_2 = LINES[10][lines-1]
						print
						print colored('Initial fit variables from Lines_Dictionary.py!','yellow')
						print					
					print colored('Initial Values: ','cyan')
					print colored('1: ' + LINES[3][lines-2]  + '-' + str(LINES[0][lines-2]),'cyan')					
					print colored(str(LINES[5][lines])+'_WF01' + ': ' + str(L1_1),'cyan')
					print colored(str(LINES[5][lines])+'_WP01' + ': ' + str(L2_1),'cyan')
					print colored(str(LINES[5][lines])+'_CF01' + ': ' + str(L7_1),'cyan')
					print colored(str(LINES[5][lines])+'_CO01' + ': ' + str(L8_1),'cyan')
					print colored(str(LINES[5][lines])+'_AF01' + ': ' + str(L10_1),'cyan')
					print
					print colored('Initial Values: ','magenta')
					print colored('2: ' + LINES[3][lines-1]  + '-' + str(LINES[0][lines-1]),'magenta')					
					print colored(str(LINES[5][lines])+'_WF02' + ': ' + str(L1_2),'magenta')
					print colored(str(LINES[5][lines])+'_WP02' + ': ' + str(L2_2),'magenta')
					print colored(str(LINES[5][lines])+'_CF02' + ': ' + str(L7_2),'magenta')
					print colored(str(LINES[5][lines])+'_CO02' + ': ' + str(L8_2),'magenta')
					print colored(str(LINES[5][lines])+'_AF02' + ': ' + str(L10_2),'magenta')
					print
					########################Getting Line Fitting Initial Values From Statcked Spectrum Fits Header#########################
					##################################################CENTRAL GAUSSIAN-1###################################################
					lmb_min_lim_line_ft = (LINES[0][lines-2]+L8_1) - MSK_NTMS*L1_1 ##IT WAS LINE CTR - LINE OFFSET
					lmb_max_lim_line_ft = (LINES[0][lines-2]+L8_1) + MSK_NTMS*L1_1
					lmb_min_lim_line    = (LINES[0][lines-2]+L8_1)*(1+z_glx_Ps) - 1.5*MSK_NTMS*L2_1#- 20#L2_1 - 10 ##IT WAS LINE CTR - LINE OFFSET
					lmb_max_lim_line    = (LINES[0][lines-2]+L8_1)*(1+z_glx_Ps) + 1.5*MSK_NTMS*L2_1#+ 20#L2_1 + 10

					mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
					mask_ft    = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
					label_glx  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function

					idx_ctr_ft_reg = np.abs(lambda_glx[mask_ft] - (LINES[0][lines-2]+L8_1)).argmin()

					X0_f2DG    = (LINES[0][lines-2]+L8_1)
					SIGMA_f2DG = L1_1
					A_f2DG     = -(1-(min(inten_glx[mask_ft])))
					A_f2DG     = -(1-inten_glx[mask_ft][idx_ctr_ft_reg])

					max_val    = -(1-min(inten_glx[mask_ft]))
					lambda_max = (lambda_glx[np.where(inten_glx==min(inten_glx[mask_ft]))[0]][0])					

					if pre_off_plt == True:
						plt.step(lambda_glx[mask_pl], inten_glx[mask_pl],
								where='mid',lw=3.0,alpha=0.5,linestyle=':',color='gray',
								label='Original Spectrum')
					elif pre_off_plt == False:
						pass

					hsw_nmb_med = np.ceil(np.median(inten_glx_hst[mask_ft]))
					hsw_nmb_med = np.ceil(np.median(inten_glx_hsw[mask_ft]))
					Header_Add(specfile_glx,str(LINES[5][lines-2])+'_NHT',float(hsw_nmb_med) ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + '# glxs stk hst Fit Spec Reg (med)')
					Header_Add(specfile_glx,str(LINES[5][lines-2])+'_NHW',float(hsw_nmb_med) ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + '# glxs stk hsw Fit Spec Reg (med)')
					print
					print specfile_glx,str(LINES[5][lines-2])+'_NHT',float(hsw_nmb_med)
					print specfile_glx,str(LINES[5][lines-2])+'_NHW',float(hsw_nmb_med)
					print

					initial_guess_O   = (X0_f2DG,A_f2DG,SIGMA_f2DG,max(inten_glx[mask_ft])-1)
					initial_guess_0   = (X0_f2DG,A_f2DG,SIGMA_f2DG)
				
					#################################################CENTRAL GAUSSIAN-1-C##################################################
					if fix_ctr_gau_1 == False:
						print
						print colored('Fitting 1st line','cyan')
						print colored('1-0-Fitting Central line','cyan')
						print
						#################################################CENTRAL GAUSSIAN-1-0##################################################
						'''
						try:
							gmodel_0           = Model(func_1D_Gaussian)
							gmodel_0.set_param_hint('X_0'  , value=X0_f2DG   , min=X0_f2DG - (X0_f2DG*L7_1), max=X0_f2DG + (X0_f2DG*L7_1))
							#gmodel_0.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
							gmodel_0.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG  - (A_f2DG*L10_1), max=A_f2DG  + (A_f2DG*L10_1))#min=A_f2DG-0.001, max=A_f2DG)
							gmodel_0.set_param_hint('SIGMA', value=SIGMA_f2DG)
							pars_0             = gmodel_0.make_params()							
							result_0_1         = gmodel_0.fit(inten_glx[mask_ft],pars_0,
													X=lambda_glx[mask_ft],
													X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,
													nan_policy = 'omit')
							CTRE_G_0_1         = result_0_1.params['X_0'].value
							AMPL_G_0_1         = result_0_1.params['A'].value
							SGMA_G_0_1         = abs(result_0_1.params['SIGMA'].value)
							FWHM_G_0_1         = lw_sgma2fwhm(SGMA_G_0_1)
							W_0_1              = integrate.quad(lambda x: AMPL_G_0_1*np.exp(-((x)**2)/(2*SGMA_G_0_1**2)), -np.inf, np.inf)
							EW_0_1             = np.round(abs(np.asarray(W_0_1[0])),10)
							EWE_0_1            = np.round(abs(np.asarray(W_0_1[1])),10)
							data_fitted_0      = func_1D_Gaussian((lambda_glx[mask_ft]), CTRE_G_0_1,AMPL_G_0_1,SGMA_G_0_1)

							CTRE_G_0_1_E       = result_0_1.params['X_0'].stderr
							AMPL_G_0_1_E       = result_0_1.params['A'].stderr
							SGMA_G_0_1_E       = result_0_1.params['SIGMA'].stderr

							CTRE_G_0_1_cor     = result_0_1.params['X_0'].correl
							AMPL_G_0_1_cor     = result_0_1.params['A'].correl
							SGMA_G_0_1_cor     = result_0_1.params['SIGMA'].correl

							chisqr_0_1         = result_0_1.chisqr
							redchi_0_1         = result_0_1.redchi
						except (RuntimeError,ValueError,TypeError):
							popt_0, pcov_0   = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
							perr_0           = [999999.99999,999999.99999,999999.99999]
							CTRE_G_0         = 999999.99999
							AMPL_G_0         = 999999.99999
							SGMA_G_0         = 999999.99999
							FWHM_G_0         = 999999.99999
							EW_0             = 999999.99999
							EWE_0            = 999999.99999

							CTRE_G_0_E      = 999999.99999
							AMPL_G_0_E      = 999999.99999
							SGMA_G_0_E      = 999999.99999

							CTRE_G_0_cor    = 999999.99999
							AMPL_G_0_cor    = 999999.99999
							SGMA_G_0_cor    = 999999.99999

							chisqr_0        = 999999.99999
							redchi_0        = 999999.99999
						'''
						popt_0_1, pcov_0_1   = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
						perr_0_1             = [999999.99999,999999.99999,999999.99999]
						CTRE_G_0_1           = 999999.99999
						AMPL_G_0_1           = 999999.99999
						SGMA_G_0_1           = 999999.99999
						FWHM_G_0_1           = 999999.99999
						EW_0_1               = 999999.99999
						EWE_0_1              = 999999.99999

						CTRE_G_0_1_E    = 999999.99999
						AMPL_G_0_1_E    = 999999.99999
						SGMA_G_0_1_E    = 999999.99999

						CTRE_G_0_cor    = 999999.99999
						AMPL_G_0_cor    = 999999.99999
						SGMA_G_0_cor    = 999999.99999

						chisqr_0_1        = 999999.99999
						redchi_0_1        = 999999.99999
						if fit_vls_hdr == True and fix_ctr_gau_1 ==False:
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CF01',float(CTRE_G_0_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct-1' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AF01',float(AMPL_G_0_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct-1' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_FF01',float(FWHM_G_0_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct-1' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WF01',float(EW_0_1)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct-1' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_EF01',float(EWE_0_1)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct-1' + str(fit_fnct) + '-' +str(fit_type))
							print
							print colored('**************************CLEANING**************************','yellow')
							print colored('The fit (CTR-1-0) values will be added to the fits headers!','cyan')
							print colored('**************************CLEANING**************************','yellow')
							print
						else:
							print
							print colored('The fit (CTR-1-0) values will not be added to the fits headers!','cyan')
							print
						#################################################CENTRAL GAUSSIAN-1-0##################################################
						#################################################CENTRAL GAUSSIAN-1-C##################################################
						'''
						try:
							gmodel_O           = Model(func_1D_Gaussian_O)
							gmodel_O.set_param_hint('X_0'   , value=X0_f2DG   , min=X0_f2DG-(X0_f2DG*L7_1), max=X0_f2DG+(X0_f2DG*L7_1))
							#gmodel_O.set_param_hint('A'     , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
							gmodel_O.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG  - (A_f2DG*L10_1) , max=A_f2DG  + (A_f2DG*L10_1))#min=A_f2DG-0.001, max=A_f2DG)
							gmodel_O.set_param_hint('SIGMA' , value=SIGMA_f2DG)
							gmodel_O.set_param_hint('OFFSET', value=max(inten_glx[mask_ft])-1)
							pars_O             = gmodel_O.make_params()

							result_O_1         = gmodel_O.fit(inten_glx[mask_ft],pars_O,
													X=lambda_glx[mask_ft],X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,OFFSET=max(inten_glx[mask_ft])-1,
													nan_policy = 'omit')
							CTRE_G_O_1         = result_O_1.params['X_0'].value
							AMPL_G_O_1         = result_O_1.params['A'].value
							SGMA_G_O_1         = abs(result_O_1.params['SIGMA'].value)
							OFST_G_O_1         = abs(result_O_1.params['OFFSET'].value)
							FWHM_G_O_1         = lw_sgma2fwhm(SGMA_G_O_1)
							W_O_1              = integrate.quad(lambda x: AMPL_G_O_1*np.exp(-((x)**2)/(2*SGMA_G_O_1**2)), -np.inf, np.inf)
							EW_O_1             = np.round(abs(np.asarray(W_O_1[0])),10)
							EWE_O_1            = np.round(abs(np.asarray(W_O_1[1])),10)
							data_fitted_O_1    = func_1D_Gaussian_O((lambda_glx[mask_ft]),CTRE_G_O_1,AMPL_G_O_1,SGMA_G_O_1,OFST_G_O_1)

							CTRE_G_O_E         = result_O_1.params['X_0'].stderr
							AMPL_G_O_E         = result_O_1.params['A'].stderr
							SGMA_G_O_E         = result_O_1.params['SIGMA'].stderr

							CTRE_G_O_cor       = result_O_1.params['X_0'].correl
							AMPL_G_O_cor       = result_O_1.params['A'].correl
							SGMA_G_O_cor       = result_O_1.params['SIGMA'].correl

							chisqr_O_1         = result_O_1.chisqr
							redchi_O_1         = result_O_1.redchi
							
							#####################################################################################################################
							if ofs_ctr_fit == True:
								print
								print colored('Using Fitted Center From Offset Fit to Redefine Fitting Region!','yellow')
								print
								lmb_min_lim_line_ft = (CTRE_G_O_1-L8_1) - MSK_NTMS*L1_1 #IT WAS LINE CTR - LINE OFFSET
								lmb_max_lim_line_ft = (CTRE_G_O_1+L8_1) + MSK_NTMS*L1_1
								#lmb_min_lim_line    = (CTRE_G_O-L8_1)*(1+z_glx_Ps) - 1.5*MSK_NTMS*L2_1#-20#L2_1 - 10
								#lmb_max_lim_line    = (CTRE_G_O+L8_1)*(1+z_glx_Ps) + 1.5*MSK_NTMS*L2_1#+20#L2_1 + 10
								#mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
								mask_ft     = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
							else:
								pass
							#####################################################################################################################
							#A_f2DG             = -(1-(min(inten_glx[mask_ft])))
							#inten_glx[mask_ft] = inten_glx[mask_ft] - OFST_G_O ####OFFSET - SHOULD BE APPLIED TO BE IDENTICAL TO METHOD GAUSS?
							initial_guess_C    = (X0_f2DG,A_f2DG,SIGMA_f2DG)#,max(inten_glx[mask_ft])-1)

							gmodel_C           = Model(func_1D_Gaussian)
							gmodel_C.set_param_hint('X_0'  , value=X0_f2DG   , min=X0_f2DG-(X0_f2DG*L7_1), max=X0_f2DG+(X0_f2DG*L7_1))
							#gmodel_C.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
							gmodel_C.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG  - (A_f2DG*L10_1) , max=A_f2DG  + (A_f2DG*L10_1))#min=A_f2DG-0.001, max=A_f2DG)
							gmodel_C.set_param_hint('SIGMA', value=SIGMA_f2DG)
							pars_C             = gmodel_C.make_params()
							result_C_1         = gmodel_C.fit(inten_glx[mask_ft],pars_C,
													X=lambda_glx[mask_ft],X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,
													nan_policy = 'omit')
							CTRE_G_C_1         = result_C_1.params['X_0'].value
							AMPL_G_C_1         = result_C_1.params['A'].value
							SGMA_G_C_1         = abs(result_C_1.params['SIGMA'].value)
							FWHM_G_C_1         = lw_sgma2fwhm(SGMA_G_C_1)

							W_C_1              = integrate.quad(lambda x: AMPL_G_C_1*np.exp(-((x)**2)/(2*SGMA_G_C_1**2)), -np.inf, np.inf)
							EW_C_1             = np.round(abs(np.asarray(W_C_1[0])),10)
							EWE_C_1            = np.round(abs(np.asarray(W_C_1[1])),10)
							data_fitted_C_1    = func_1D_Gaussian((lambda_glx[mask_ft]), CTRE_G_C_1,AMPL_G_C_1,SGMA_G_C_1)

							CTRE_G_C_1_E         = result_C_1.params['X_0'].stderr
							AMPL_G_C_1_E         = result_C_1.params['A'].stderr
							SGMA_G_C_1_E         = result_C_1.params['SIGMA'].stderr

							CTRE_G_C_1_cor       = result_C_1.params['X_0'].correl
							AMPL_G_C_1_cor       = result_C_1.params['A'].correl
							SGMA_G_C_1_cor       = result_C_1.params['SIGMA'].correl

							AMPL_SNR_1           = AMPL_G_C_1
							CTRE_SNR_1           = CTRE_G_C_1
							SGMA_SNR_1           = abs(SGMA_G_C_1)

							if CTRE_G_C_1_E == None:
								CTRE_G_C_1_E = 999999.99999
							else:
								pass
							if AMPL_G_C_1_E == None:
								AMPL_G_C_1_E = 999999.99999
							else:
								pass
							if SGMA_G_C_1_E == None:
								SGMA_G_C_1_E = 999999.99999
							else:
								pass
							if CTRE_G_C_1_cor == None:
								CTRE_G_C_1_cor = 999999.99999
							else:
								pass
							if AMPL_G_C_1_cor == None:
								AMPL_G_C_1_cor = 999999.99999
							else:
								pass
							if SGMA_G_C_1_cor == None:
								SGMA_G_C_1_cor = 999999.99999
							else:
								pass
							chisqr_C_1      = result_C_1.chisqr
							redchi_C_1      = result_C_1.redchi
							##inten_glx[mask_ft] = inten_glx[mask_ft] + OFST_G_O #OFFSET +
						except (RuntimeError,ValueError,TypeError):
							print colored('RuntimeError','cyan')
							popt_C_1, pcov_C_1 = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
							perr_C_1           = [999999.99999,999999.99999,999999.99999]
							CTRE_G_C_1         = 999999.99999
							AMPL_G_C_1         = 999999.99999
							SGMA_G_C_1         = 999999.99999
							FWHM_G_C_1         = 999999.99999
							EW_C_1             = 999999.99999
							EWE_C_1            = 999999.99999

							CTRE_G_C_1_E       = 999999.99999
							AMPL_G_C_1_E       = 999999.99999
							SGMA_G_C_1_E       = 999999.99999
							CTRE_G_C_1_cor     = 999999.99999
							AMPL_G_C_1_cor     = 999999.99999
							SGMA_G_C_1_cor     = 999999.99999
							chisqr_C_1         = 999999.99999
							redchi_C_1         = 999999.99999

							popt_O_1 ,pcov_O_1 = [999999.99999,999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999,999999.99999]
							perr_O_1           = [999999.99999,999999.99999,999999.99999,999999.99999]
							CTRE_G_O_1         = 999999.99999
							AMPL_G_O_1         = 999999.99999
							SGMA_G_O_1         = 999999.99999
							OFST_G_O_1         = 999999.99999
							FWHM_G_O_1         = 999999.99999
							EW_O_1             = 999999.99999
							EWE_O_1            = 999999.99999

							CTRE_G_O_1_E      = 999999.99999
							AMPL_G_O_1_E      = 999999.99999
							SGMA_G_O_1_E      = 999999.99999
							CTRE_G_O_1_cor    = 999999.99999
							AMPL_G_O_1_cor    = 999999.99999
							SGMA_G_O_1_cor    = 999999.99999
							OFST_G_O_1_cor    = 999999.99999
							chisqr_O_1        = 999999.99999
							redchi_O_1        = 999999.99999

							AMPL_SNR_1        = 999999.99999
							CTRE_SNR_1        = 999999.99999
							SGMA_SNR_1        = 999999.99999
						'''
						print colored('Clean Line','cyan')
						popt_C_1, pcov_C_1 = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
						perr_C_1           = [999999.99999,999999.99999,999999.99999]
						CTRE_G_C_1         = 999999.99999
						AMPL_G_C_1         = 999999.99999
						SGMA_G_C_1         = 999999.99999
						FWHM_G_C_1         = 999999.99999
						EW_C_1             = 999999.99999
						EWE_C_1            = 999999.99999

						CTRE_G_C_1_E       = 999999.99999
						AMPL_G_C_1_E       = 999999.99999
						SGMA_G_C_1_E       = 999999.99999
						CTRE_G_C_1_cor     = 999999.99999
						AMPL_G_C_1_cor     = 999999.99999
						SGMA_G_C_1_cor     = 999999.99999
						chisqr_C_1         = 999999.99999
						redchi_C_1         = 999999.99999

						popt_O_1 ,pcov_O_1 = [999999.99999,999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999,999999.99999]
						perr_O_1           = [999999.99999,999999.99999,999999.99999,999999.99999]
						CTRE_G_O_1         = 999999.99999
						AMPL_G_O_1         = 999999.99999
						SGMA_G_O_1         = 999999.99999
						OFST_G_O_1         = 999999.99999
						FWHM_G_O_1         = 999999.99999
						EW_O_1             = 999999.99999
						EWE_O_1            = 999999.99999

						CTRE_G_O_1_E      = 999999.99999
						AMPL_G_O_1_E      = 999999.99999
						SGMA_G_O_1_E      = 999999.99999
						CTRE_G_O_1_cor    = 999999.99999
						AMPL_G_O_1_cor    = 999999.99999
						SGMA_G_O_1_cor    = 999999.99999
						OFST_G_O_1_cor    = 999999.99999
						chisqr_O_1        = 999999.99999
						redchi_O_1        = 999999.99999

						AMPL_SNR_1        = 999999.99999
						CTRE_SNR_1        = 999999.99999
						SGMA_SNR_1        = 999999.99999						
						print
						print colored(specfile_glx,'cyan')
						print
						print colored(str(LINES[0][lines-2])+'-'+str(LINES[3][lines-2]),'cyan')
						print
						print colored(str(LINES[5][lines-2])+'_CGLC: ' + str(CTRE_G_C_1)  ,'cyan')
						print colored(str(LINES[5][lines-2])+'_AGLC: ' + str(AMPL_G_C_1)  ,'cyan')
						print colored(str(LINES[5][lines-2])+'_SGLC: ' + str(SGMA_G_C_1)  ,'cyan')
						print colored(str(LINES[5][lines-2])+'_FGLC: ' + str(FWHM_G_C_1)  ,'cyan')
						print colored(str(LINES[5][lines-2])+'_WGLC: ' + str(EW_C_1)      ,'cyan')
						print colored(str(LINES[5][lines-2])+'_EGLC: ' + str(EWE_C_1)     ,'cyan')
						print
						print
						#inten_glx[mask_ft] = inten_glx[mask_ft] + OFST_G_O
						if fit_vls_hdr == True and fix_ctr_gau_1==False:
							Header_Add(specfile_glx,'BSF_FCT',str(fit_fnct)                         ,header_comment = 'Fit function')
							Header_Add(specfile_glx,'BSF_MTH',str(fit_type)                         ,header_comment = 'Fit method')
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CLO1',float(CTRE_G_O_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_ALO1',float(AMPL_G_O_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_FLO1',float(FWHM_G_O_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WLO1',float(EW_O_1)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_ELO1',float(EWE_O_1)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_OFO1',float(OFST_G_O_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ofst 1GF Offst' + str(fit_fnct) + '-' +str(fit_type))

							Header_Add(specfile_glx,str(LINES[5][lines])+'_CLC1',float(CTRE_G_C_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_ALC1',float(AMPL_G_C_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_SLC1',float(SGMA_G_C_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_FLC1',float(FWHM_G_C_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WLC1',float(EW_C_1)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_ELC1',float(EWE_C_1)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CEC1',float(CTRE_G_C_1_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AEC1',float(AMPL_G_C_1_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_SEC1',float(SGMA_G_C_1_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_fnct) + '-' +str(fit_type))

							Header_Add(specfile_glx,str(LINES[5][lines])+'_CHL1',float(chisqr_C_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 1GF' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CRL1',float(redchi_C_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines-2]) + ' Chi2 Reduced 1GF' + str(fit_fnct) + '-' +str(fit_type))

							print
							print colored('*******************************CLEANING*******************************','yellow')
							print colored('The fit (CTR-1-C & CTR-1-O) values will be added to the fits headers!','cyan')
							print colored('*******************************CLEANING*******************************','yellow')
							print
						else:
							print
							print colored('The fit (CTR-1-C & CTR-1-O) values will not be added to the fits headers!','cyan')
							print

						if uft_lne_vls == False and fit_vls_hdr == True and int_vlf_hdr==True:
							print
							print colored('Initial Guess Values G-1 for line Fitting will be recorded!','yellow')
							print colored('Info input parameters (pre_gauss_shf, pre_gauss_ctr) in Spec_Stk_Stack_0.4.py!','yellow')
							print
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WF01',float(L1_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-1-1 Wdt-Fit  1GF-IntVal')         #LINES-1  Wdt-Fit  1GF-IntVal      WIDTH-FIT
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WP01',float(L2_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-2-1 Wdt-Plt  1GF-IntVal')         #LINES-2  Wdt-Plt  1GF-IntVal      WIDTH-PLT
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CF01',float(L7_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-7-1 Ctr Fit Bnds  1GF-IntVal')    #LINES-7  Ctr Fit Bnds  1GF-IntVal CTR-FIT-BNDS
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CO01',float(L8_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-8-1 Ctr Fit Ofst  1GF-IntVal')    #LINES-8  Ctr Fit Ofst  1GF-IntVal CTR-OFFSET
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AF01',float(L10_1),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-10-1 Amp Fit Bnds  1GF-IntVal')   #LINES-10 Ctr Fit Amp   1GF-IntVal LNE_AMP_BNDS

							print
							print colored('Initial Values: ','cyan')
							print colored('1: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'cyan')					
							print colored(str(LINES[5][lines])+'_WF01' + ': ' + str(L1_1),'cyan')
							print colored(str(LINES[5][lines])+'_WP01' + ': ' + str(L2_1),'cyan')
							print colored(str(LINES[5][lines])+'_CF01' + ': ' + str(L7_1),'cyan')
							print colored(str(LINES[5][lines])+'_CO01' + ': ' + str(L8_1),'cyan')
							print colored(str(LINES[5][lines])+'_AF01' + ': ' + str(L10_1),'cyan')
							print
						else:
							print
							print colored('Initial Guess Values G-1 for line Fitting will NOT be recorded!','yellow')
							print
							pass
					#################################################CENTRAL GAUSSIAN-1-C##################################################
					elif fix_ctr_gau_1 == True:
						print
						print colored('1st CTR-gaussian already fitted!','yellow')
						print colored('Values from fits header','yellow')
						try:
							CTRE_G_0_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CF01')#,float(CTRE_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct')
							AMPL_G_0_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF01')#,float(AMPL_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct')
							FWHM_G_0_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FF01')#,float(FWHM_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct')
							EW_0_1        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WF01')#,float(EW_0)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct')
							EWE_0_1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EF01')#,float(EWE_0)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct')

							CTRE_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLO1')#,float(CTRE_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Offst' + str(fit_type))
							AMPL_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALO1')#,float(AMPL_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Offst' + str(fit_type))
							FWHM_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FLO1')#,float(FWHM_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Offst' + str(fit_type))
							EW_O_1        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WLO1')#,float(EW_O)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Offst' + str(fit_type))
							EWE_O_1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_ELO1')#,float(EWE_O)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Offst' + str(fit_type))
							OFST_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_OFO1')#,float(OFST_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ofst 1GF Offst' + str(fit_type))

							CTRE_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLC1')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
							AMPL_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALC1')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
							SGMA_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_SLC1')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
							FWHM_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FLC1')#,float(FWHM_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
							EW_C_1        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WLC1')#,float(EW_C)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
							EWE_C_1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_ELC1')#,float(EWE_C)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
							CTRE_G_C_1_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CEC1')#,float(CTRE_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
							AMPL_G_C_1_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_AEC1')#,float(AMPL_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
							SGMA_G_C_1_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_SEC1')#,float(SGMA_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))

							chisqr_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CHL1')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 1GF' + str(fit_type))
							redchi_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CRL1')#,float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 Reduced 1GF' + str(fit_type))

						except KeyError:
							print
							print colored ('Gaussian Fit Parameters are not found on Fits Header!','yellow')
							print colored ('File  : ' + specfile_glx,'yellow')
							print colored ('Header: ' + str(LINES[5][lines-2])+'_CF01','yellow')
							print colored ('Gotta Fit first before fixing a component (CTR)!','yellow')
							print colored ('Or UnFix (fix_ctr_gau_1=False) For Plotting!','yellow')
							print colored ('Quitting!','yellow')
							print
							CTRE_G_0_1    = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_CGF0')#,float(CTRE_G_0) ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + 'Ctr  1GF Crct')
							AMPL_G_0_1    = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_AGF0')#,float(AMPL_G_0) ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + 'Amp  1GF Crct')
							FWHM_G_0_1    = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_FGF0')#,float(FWHM_G_0) ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + 'FWHM 1GF Crct')
							EW_0_1        = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_WGF0')#,float(EW_0)     ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + 'EW   1GF Crct')
							EWE_0_1       = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_EGF0')#,float(EWE_0)    ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + 'EWE  1GF Crct')

							CTRE_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_CGLO')#,float(CTRE_G_O)  ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' Ctr  1GF Offst' + str(fit_type))
							AMPL_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_AGLO')#,float(AMPL_G_O)  ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' Amp  1GF Offst' + str(fit_type))
							FWHM_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_FGLO')#,float(FWHM_G_O)  ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' FWHM 1GF Offst' + str(fit_type))
							EW_O_1        = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_WGLO')#,float(EW_O)      ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' EW   1GF Offst' + str(fit_type))
							EWE_O_1       = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_EGLO')#,float(EWE_O)     ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' EWE  1GF Offst' + str(fit_type))
							OFST_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_OFSO')#,float(OFST_G_O)  ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' Ofst 1GF Offst' + str(fit_type))

							CTRE_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_CGLC')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' Ctr  1GF Crct' + str(fit_type))
							AMPL_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_AGLC')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' Amp  1GF Crct' + str(fit_type))
							SGMA_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_SGLC')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' Sigm 1GF Crct' + str(fit_type))
							FWHM_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_FGLC')#,float(FWHM_G_C)  ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' FWHM 1GF Crct' + str(fit_type))
							EW_C_1        = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_WGLC')#,float(EW_C)      ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' EW   1GF Crct' + str(fit_type))
							EWE_C_1       = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_EGLC')#,float(EWE_C)     ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' EWE  1GF Crct' + str(fit_type))
							CTRE_G_C_1_E  = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_CLEC')#,float(CTRE_G_C_E),header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' Ctr  err 1GF Crct' + str(fit_type))
							AMPL_G_C_1_E  = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_ALEC')#,float(AMPL_G_C_E),header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' Amp  err 1GF Crct' + str(fit_type))
							SGMA_G_C_1_E  = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_SLEC')#,float(SGMA_G_C_E),header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' Sigm err 1GF Crct' + str(fit_type))

							chisqr_C_1    = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_CHGL')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' Chi2 1GF' + str(fit_type))
							redchi_C_1    = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_CRGL')#,float(redchi_C)  ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' Chi2 Reduced 1GF' + str(fit_type))							#quit()
					print
					print colored(str(LINES[0][lines-2])+'-'+str(LINES[3][lines-2])+'-CTR','cyan')
					print
					print colored(str(LINES[5][lines-2])+'_CLC1: ' + str(CTRE_G_C_1)  ,'cyan')
					print colored(str(LINES[5][lines-2])+'_ALC1: ' + str(AMPL_G_C_1)  ,'cyan')
					print colored(str(LINES[5][lines-2])+'_SLC1: ' + str(SGMA_G_C_1)  ,'cyan')
					print colored(str(LINES[5][lines-2])+'_FLC1: ' + str(FWHM_G_C_1)  ,'cyan')
					print colored(str(LINES[5][lines-2])+'_WLC1: ' + str(EW_C_1)      ,'cyan')
					print colored(str(LINES[5][lines-2])+'_ELC1: ' + str(EWE_C_1),'cyan')
					print colored('Fit Values Center, Amplitude, Sigma ('+fit_type+'):','cyan')
					print colored(str(CTRE_G_C_1)+', '+str(AMPL_G_C_1)+', '+str(SGMA_G_C_1),'cyan')
					print
					##################################################CENTRAL GAUSSIAN-1###################################################
					##################################################CENTRAL GAUSSIAN-2###################################################
					lmb_min_lim_line_ft = (LINES[0][lines-1]+L8_2) - MSK_NTMS*LINES[1][lines-1] ##IT WAS LINE CTR - LINE OFFSET
					lmb_max_lim_line_ft = (LINES[0][lines-1]+L8_2) + MSK_NTMS*LINES[1][lines-1]
					lmb_min_lim_line    = (LINES[0][lines-1]+L8_2)*(1+z_glx_Ps) - 1.5*MSK_NTMS*L2_2#- 20#L2_2 - 10 ##IT WAS LINE CTR - LINE OFFSET
					lmb_max_lim_line    = (LINES[0][lines-1]+L8_2)*(1+z_glx_Ps) + 1.5*MSK_NTMS*L2_2#+ 20#L2_2 + 10

					mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
					mask_ft    = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
					label_glx  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function
					idx_ctr_ft_reg = np.abs(lambda_glx[mask_ft] - (LINES[0][lines-1]+L8_2)).argmin()

					X0_f2DG    = (LINES[0][lines-1]+L8_2)
					SIGMA_f2DG = LINES[1][lines-1]
					A_f2DG     = -(1-(min(inten_glx[mask_ft])))
					A_f2DG     = -(1-inten_glx[mask_ft][idx_ctr_ft_reg])

					max_val    = -(1-min(inten_glx[mask_ft]))
					lambda_max = (lambda_glx[np.where(inten_glx==min(inten_glx[mask_ft]))[0]][0])					

					if pre_off_plt == True:
						plt.step(lambda_glx[mask_pl], inten_glx[mask_pl],
								where='mid',lw=3.0,alpha=0.5,linestyle=':',color='gray',
								label='Original Spectrum')
					elif pre_off_plt == False:
						pass
					hsw_nmb_med = np.ceil(np.median(inten_glx_hst[mask_ft]))
					hsw_nmb_med = np.ceil(np.median(inten_glx_hsw[mask_ft]))
					Header_Add(specfile_glx,str(LINES[5][lines-1])+'_NHT',float(hsw_nmb_med) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + '# glxs stk hst Fit Spec Reg (med)')
					Header_Add(specfile_glx,str(LINES[5][lines-1])+'_NHW',float(hsw_nmb_med) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + '# glxs stk hsw Fit Spec Reg (med)')
					print specfile_glx,str(LINES[5][lines-1])+'_NHT',float(hsw_nmb_med) 
					print specfile_glx,str(LINES[5][lines-1])+'_NHW',float(hsw_nmb_med) 
					initial_guess_O   = (X0_f2DG,A_f2DG,SIGMA_f2DG,max(inten_glx[mask_ft])-1)
					initial_guess_0   = (X0_f2DG,A_f2DG,SIGMA_f2DG)
					##################################################CENTRAL GAUSSIAN-2###################################################
					if fix_ctr_gau_2 == False:
						print
						print colored('Fitting 2nd line','magenta')
						print colored('2-0-Fitting Central line','magenta')
						print
						#################################################CENTRAL GAUSSIAN-2-0##################################################
						'''
						try:
							gmodel_0           = Model(func_1D_Gaussian)
							gmodel_0.set_param_hint('X_0'  , value=X0_f2DG   , min=X0_f2DG - (X0_f2DG*L7_2), max=X0_f2DG+(X0_f2DG*L7_2))
							#gmodel_0.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
							gmodel_0.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG  - (A_f2DG*L10_2), max=A_f2DG  + (A_f2DG*L10_2))#min=A_f2DG-0.001, max=A_f2DG)
							gmodel_0.set_param_hint('SIGMA', value=SIGMA_f2DG)
							pars_0             = gmodel_0.make_params()							
							result_0_2         = gmodel_0.fit(inten_glx[mask_ft],pars_0,
													X=lambda_glx[mask_ft],
													X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,
													nan_policy = 'omit')
							CTRE_G_0_2         = result_0_2.params['X_0'].value
							AMPL_G_0_2         = result_0_2.params['A'].value
							SGMA_G_0_2         = abs(result_0_2.params['SIGMA'].value)
							FWHM_G_0           = lw_sgma2fwhm(SGMA_G_0_2)
							W_0_2              = integrate.quad(lambda x: AMPL_G_0_2*np.exp(-((x)**2)/(2*SGMA_G_0_2**2)), -np.inf, np.inf)
							EW_0_2             = np.round(abs(np.asarray(W_0_2[0])),10)
							EWE_0_2            = np.round(abs(np.asarray(W_0_2[1])),10)
							data_fitted_0_2    = func_1D_Gaussian((lambda_glx[mask_ft]), CTRE_G_0_2,AMPL_G_0_2,SGMA_G_0_2)

							CTRE_G_0_2_E       = result_0_2.params['X_0'].stderr
							AMPL_G_0_2_E       = result_0_2.params['A'].stderr
							SGMA_G_0_2_E       = result_0_2.params['SIGMA'].stderr

							CTRE_G_0_2_cor     = result_0_2.params['X_0'].correl
							AMPL_G_0_2_cor     = result_0_2.params['A'].correl
							SGMA_G_0_2_cor     = result_0_2.params['SIGMA'].correl

							chisqr_0           = result_0_2.chisqr
							redchi_0           = result_0_2.redchi
						except (RuntimeError,ValueError,TypeError):
							popt_0, pcov_0   = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
							perr_0           = [999999.99999,999999.99999,999999.99999]
							CTRE_G_0_2         = 999999.99999
							AMPL_G_0_2         = 999999.99999
							SGMA_G_0_2         = 999999.99999
							FWHM_G_0         = 999999.99999
							EW_0_2             = 999999.99999
							EWE_0_2            = 999999.99999

							CTRE_G_0_2_E      = 999999.99999
							AMPL_G_0_2_E      = 999999.99999
							SGMA_G_0_2_E      = 999999.99999

							CTRE_G_0_2_cor    = 999999.99999
							AMPL_G_0_2_cor    = 999999.99999
							SGMA_G_0_2_cor    = 999999.99999

							chisqr_0        = 999999.99999
							redchi_0        = 999999.99999
						'''
						popt_0, pcov_0   = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
						perr_0           = [999999.99999,999999.99999,999999.99999]
						CTRE_G_0_2         = 999999.99999
						AMPL_G_0_2         = 999999.99999
						SGMA_G_0_2         = 999999.99999
						FWHM_G_0         = 999999.99999
						EW_0_2             = 999999.99999
						EWE_0_2            = 999999.99999

						CTRE_G_0_2_E      = 999999.99999
						AMPL_G_0_2_E      = 999999.99999
						SGMA_G_0_2_E      = 999999.99999

						CTRE_G_0_2_cor    = 999999.99999
						AMPL_G_0_2_cor    = 999999.99999
						SGMA_G_0_2_cor    = 999999.99999

						chisqr_0        = 999999.99999
						redchi_0        = 999999.99999
						if fit_vls_hdr == True and fix_ctr_gau_2 ==False:
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CF02',float(CTRE_G_0_2) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct-2' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AF02',float(AMPL_G_0_2) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct-2' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_FF02',float(FWHM_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct-2' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WF02',float(EW_0_2)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct-2' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_EF02',float(EWE_0_2)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct-2' + str(fit_fnct) + '-' +str(fit_type))
							print
							print colored('**************************CLEANING**************************','yellow')
							print colored('The fit (CTR-0) values will be added to the fits headers!','magenta')
							print colored('**************************CLEANING**************************','yellow')
							print
						else:
							print
							print colored('The fit (CTR-0) values will not be added to the fits headers!','magenta')
							print
						#################################################CENTRAL GAUSSIAN-2-0##################################################
						#################################################CENTRAL GAUSSIAN-2-C##################################################
						'''
						try:
							gmodel_O           = Model(func_1D_Gaussian_O)
							gmodel_O.set_param_hint('X_0'   , value=X0_f2DG  , min=X0_f2DG - (X0_f2DG*L7_2), max=X0_f2DG + (X0_f2DG*L7_2))
							#gmodel_O.set_param_hint('A'     , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
							gmodel_O.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG  - (A_f2DG*L10_2), max=A_f2DG  + (A_f2DG*L10_2))#min=A_f2DG-0.001, max=A_f2DG)
							gmodel_O.set_param_hint('SIGMA' , value=SIGMA_f2DG)
							gmodel_O.set_param_hint('OFFSET', value=max(inten_glx[mask_ft])-1)
							pars_O             = gmodel_O.make_params()

							result_O_2         = gmodel_O.fit(inten_glx[mask_ft],pars_O,
													X=lambda_glx[mask_ft],X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,OFFSET=max(inten_glx[mask_ft])-1,
													nan_policy = 'omit')
							CTRE_G_O_2         = result_O_2.params['X_0'].value
							AMPL_G_O_2         = result_O_2.params['A'].value
							SGMA_G_O_2         = abs(result_O_2.params['SIGMA'].value)
							OFST_G_O_2         = abs(result_O_2.params['OFFSET'].value)
							FWHM_G_O_2         = lw_sgma2fwhm(SGMA_G_O_2)
							W_O_2              = integrate.quad(lambda x: AMPL_G_O_2*np.exp(-((x)**2)/(2*SGMA_G_O_2**2)), -np.inf, np.inf)
							EW_O_2             = np.round(abs(np.asarray(W_O_2[0])),10)
							EWE_O_2            = np.round(abs(np.asarray(W_O_2[1])),10)
							data_fitted_O_2    = func_1D_Gaussian_O((lambda_glx[mask_ft]),CTRE_G_O_2,AMPL_G_O_2,SGMA_G_O_2,OFST_G_O_2)

							CTRE_G_O_2_E       = result_O_2.params['X_0'].stderr
							AMPL_G_O_2_E       = result_O_2.params['A'].stderr
							SGMA_G_O_E         = result_O_2.params['SIGMA'].stderr

							CTRE_G_O_2_cor     = result_O_2.params['X_0'].correl
							AMPL_G_O_2_cor     = result_O_2.params['A'].correl
							SGMA_G_O_cor       = result_O_2.params['SIGMA'].correl

							chisqr_O_2         = result_O_2.chisqr
							redchi_O_2         = result_O_2.redchi
							
							#####################################################################################################################
							if ofs_ctr_fit == True:
								print
								print colored('Using Fitted Center From Offset Fit to Redefine Fitting Region!','yellow')
								print
								lmb_min_lim_line_ft = (CTRE_G_O_2-L8_2) - MSK_NTMS*LINES[1][lines-1] #IT WAS LINE CTR - LINE OFFSET
								lmb_max_lim_line_ft = (CTRE_G_O_2+L8_2) + MSK_NTMS*LINES[1][lines-1]
								#lmb_min_lim_line    = (CTRE_G_O-L8_2)*(1+z_glx_Ps) - 1.5*MSK_NTMS*L2_2#-20#L2_2 - 10
								#lmb_max_lim_line    = (CTRE_G_O+L8_2)*(1+z_glx_Ps) + 1.5*MSK_NTMS*L2_2#+20#L2_2 + 10
								#mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
								mask_ft     = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
							else:
								pass
							#####################################################################################################################
							#A_f2DG             = -(1-(min(inten_glx[mask_ft])))
							#inten_glx[mask_ft] = inten_glx[mask_ft] - OFST_G_O ####OFFSET - SHOULD BE APPLIED TO BE IDENTICAL TO METHOD GAUSS?
							initial_guess_C    = (X0_f2DG,A_f2DG,SIGMA_f2DG)#,max(inten_glx[mask_ft])-1)

							gmodel_C           = Model(func_1D_Gaussian)
							gmodel_C.set_param_hint('X_0'  , value=X0_f2DG   , min=X0_f2DG - (X0_f2DG*(X0_f2DG*L7_2)), max=X0_f2DG + (X0_f2DG*(X0_f2DG*L7_2)))
							#gmodel_C.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
							gmodel_C.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG  - (A_f2DG *(A_f2DG*L10_2)), max=A_f2DG  + (A_f2DG*(A_f2DG*L10_2)))#min=A_f2DG-0.001, max=A_f2DG)
							gmodel_C.set_param_hint('SIGMA', value=SIGMA_f2DG)
							pars_C             = gmodel_C.make_params()
							result_C_2         = gmodel_C.fit(inten_glx[mask_ft],pars_C,
													X=lambda_glx[mask_ft],X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,
													nan_policy = 'omit')
							CTRE_G_C_2         = result_C_2.params['X_0'].value
							AMPL_G_C_2         = result_C_2.params['A'].value
							SGMA_G_C_2         = abs(result_C_2.params['SIGMA'].value)
							FWHM_G_C_2         = lw_sgma2fwhm(SGMA_G_C_2)

							W_C_2              = integrate.quad(lambda x: AMPL_G_C_2*np.exp(-((x)**2)/(2*SGMA_G_C_2**2)), -np.inf, np.inf)
							EW_C_2             = np.round(abs(np.asarray(W_C_2[0])),10)
							EWE_C_2            = np.round(abs(np.asarray(W_C_2[1])),10)
							data_fitted_C      = func_1D_Gaussian((lambda_glx[mask_ft]), CTRE_G_C_2,AMPL_G_C_2,SGMA_G_C_2)

							CTRE_G_C_2_E       = result_C_2.params['X_0'].stderr
							AMPL_G_C_2_E       = result_C_2.params['A'].stderr
							SGMA_G_C_2_E       = result_C_2.params['SIGMA'].stderr

							CTRE_G_C_2_cor     = result_C_2.params['X_0'].correl
							AMPL_G_C_2_cor     = result_C_2.params['A'].correl
							SGMA_G_C_2_cor     = result_C_2.params['SIGMA'].correl

							AMPL_SNR_2           = AMPL_G_C_2
							CTRE_SNR_2           = CTRE_G_C_2
							SGMA_SNR_2           = abs(SGMA_G_C_2)

							if CTRE_G_C_2_E == None:
								CTRE_G_C_2_E = 999999.99999
							else:
								pass
							if AMPL_G_C_2_E == None:
								AMPL_G_C_2_E = 999999.99999
							else:
								pass
							if SGMA_G_C_2_E == None:
								SGMA_G_C_2_E = 999999.99999
							else:
								pass
							if CTRE_G_C_2_cor == None:
								CTRE_G_C_2_cor = 999999.99999
							else:
								pass
							if AMPL_G_C_2_cor == None:
								AMPL_G_C_2_cor = 999999.99999
							else:
								pass
							if SGMA_G_C_2_cor == None:
								SGMA_G_C_2_cor = 999999.99999
							else:
								pass
							chisqr_C_2        = result_C_2.chisqr
							redchi_C_2        = result_C_2.redchi
							##inten_glx[mask_ft] = inten_glx[mask_ft] + OFST_G_O #OFFSET +
						except (RuntimeError,ValueError,TypeError):
							print colored('RuntimeError','cyan')
							popt_C_2, pcov_C_2 = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
							perr_C_2           = [999999.99999,999999.99999,999999.99999]
							CTRE_G_C_2         = 999999.99999
							AMPL_G_C_2         = 999999.99999
							SGMA_G_C_2         = 999999.99999
							FWHM_G_C_2         = 999999.99999
							EW_C_2             = 999999.99999
							EWE_C_2            = 999999.99999

							CTRE_G_C_2_E       = 999999.99999
							AMPL_G_C_2_E       = 999999.99999
							SGMA_G_C_2_E       = 999999.99999
							CTRE_G_C_2_cor     = 999999.99999
							AMPL_G_C_2_cor     = 999999.99999
							SGMA_G_C_2_cor     = 999999.99999
							chisqr_C_2         = 999999.99999
							redchi_C_2         = 999999.99999

							popt_O_2 ,pcov_O_2 = [999999.99999,999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999,999999.99999]
							perr_O_2           = [999999.99999,999999.99999,999999.99999,999999.99999]
							CTRE_G_O_2         = 999999.99999
							AMPL_G_O_2         = 999999.99999
							SGMA_G_O_2         = 999999.99999
							OFST_G_O_2         = 999999.99999
							FWHM_G_O_2         = 999999.99999
							EW_O_2             = 999999.99999
							EWE_O_2            = 999999.99999

							CTRE_G_O_2_E       = 999999.99999
							AMPL_G_O_2_E       = 999999.99999
							SGMA_G_O_2_E       = 999999.99999
							CTRE_G_O_2_cor     = 999999.99999
							AMPL_G_O_2_cor     = 999999.99999
							SGMA_G_O_2_cor     = 999999.99999
							OFST_G_O_2_cor     = 999999.99999
							chisqr_O_2         = 999999.99999
							redchi_O_2         = 999999.99999

							AMPL_SNR_2         = 999999.99999
							CTRE_SNR_2         = 999999.99999
							SGMA_SNR_2         = 999999.99999
						'''
						print colored('Clean Line','cyan')
						popt_C_2, pcov_C_2 = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
						perr_C_2           = [999999.99999,999999.99999,999999.99999]
						CTRE_G_C_2         = 999999.99999
						AMPL_G_C_2         = 999999.99999
						SGMA_G_C_2         = 999999.99999
						FWHM_G_C_2         = 999999.99999
						EW_C_2             = 999999.99999
						EWE_C_2            = 999999.99999

						CTRE_G_C_2_E       = 999999.99999
						AMPL_G_C_2_E       = 999999.99999
						SGMA_G_C_2_E       = 999999.99999
						CTRE_G_C_2_cor     = 999999.99999
						AMPL_G_C_2_cor     = 999999.99999
						SGMA_G_C_2_cor     = 999999.99999
						chisqr_C_2         = 999999.99999
						redchi_C_2         = 999999.99999

						popt_O_2 ,pcov_O_2 = [999999.99999,999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999,999999.99999]
						perr_O_2           = [999999.99999,999999.99999,999999.99999,999999.99999]
						CTRE_G_O_2         = 999999.99999
						AMPL_G_O_2         = 999999.99999
						SGMA_G_O_2         = 999999.99999
						OFST_G_O_2         = 999999.99999
						FWHM_G_O_2         = 999999.99999
						EW_O_2             = 999999.99999
						EWE_O_2            = 999999.99999

						CTRE_G_O_2_E       = 999999.99999
						AMPL_G_O_2_E       = 999999.99999
						SGMA_G_O_2_E       = 999999.99999
						CTRE_G_O_2_cor     = 999999.99999
						AMPL_G_O_2_cor     = 999999.99999
						SGMA_G_O_2_cor     = 999999.99999
						OFST_G_O_2_cor     = 999999.99999
						chisqr_O_2         = 999999.99999
						redchi_O_2         = 999999.99999

						AMPL_SNR_2         = 999999.99999
						CTRE_SNR_2         = 999999.99999
						SGMA_SNR_2         = 999999.99999						
						print
						print colored(specfile_glx,'cyan')
						print
						print colored(str(LINES[0][lines-1])+'-'+str(LINES[3][lines-1]),'yellow')
						print
						print colored(str(LINES[5][lines-1])+'_CGLC: ' + str(CTRE_G_C_1)  ,'yellow')
						print colored(str(LINES[5][lines-1])+'_AGLC: ' + str(AMPL_G_C_1)  ,'yellow')
						print colored(str(LINES[5][lines-1])+'_SGLC: ' + str(SGMA_G_C_1)  ,'yellow')
						print colored(str(LINES[5][lines-1])+'_FGLC: ' + str(FWHM_G_C_1)  ,'yellow')
						print colored(str(LINES[5][lines-1])+'_WGLC: ' + str(EW_C_1)      ,'yellow')
						print colored(str(LINES[5][lines-1])+'_EGLC: ' + str(EWE_C_1),'yellow')
						print
						print
						#inten_glx[mask_ft] = inten_glx[mask_ft] + OFST_G_O

						if fit_vls_hdr == True and fix_ctr_gau_2==False:
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CLO2',float(CTRE_G_O_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  2-1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_ALO2',float(AMPL_G_O_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  2-1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_FLO2',float(FWHM_G_O_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 2-1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WLO2',float(EW_O_2)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   2-1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_ELO2',float(EWE_O_2)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  2-1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_OFO2',float(OFST_G_O_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ofst 2-1GF Offst' + str(fit_fnct) + '-' +str(fit_type))

							Header_Add(specfile_glx,str(LINES[5][lines])+'_CLC2',float(CTRE_G_C_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  2-1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_ALC2',float(AMPL_G_C_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  2-1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_SLC2',float(SGMA_G_C_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 2-1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_FLC2',float(FWHM_G_C_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 2-1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WLC2',float(EW_C_2)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   2-1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_ELC2',float(EWE_C_2)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  2-1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CEC2',float(CTRE_G_C_2_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 2-1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AEC2',float(AMPL_G_C_2_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 2-1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_SEC2',float(SGMA_G_C_2_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 2-1GF Crct' + str(fit_fnct) + '-' +str(fit_type))

							Header_Add(specfile_glx,str(LINES[5][lines])+'_CHL2',float(chisqr_C_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 2-1GF' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CRL2',float(redchi_C_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines-1]) + ' Chi2 Reduced 2-1GF' + str(fit_fnct) + '-' +str(fit_type))

							print
							print colored('*****************************CLEANING*****************************','yellow')
							print colored('The fit (CTR-C & CTR_O) values will be added to the fits headers!','magenta')
							print colored('*****************************CLEANING*****************************','yellow')
							print
						else:
							print
							print colored('The fit (CTR-C & CTR_O) values will not be added to the fits headers!','magenta')
							print

						if uft_lne_vls == False and fit_vls_hdr == True and int_vlf_hdr==True:
							print
							print colored('Initial Guess Values G-2 for line Fitting will be recorded!','yellow')
							print colored('Info input parameters (pre_gauss_shf, pre_gauss_ctr) in Spec_Stk_Stack_0.4.py!','yellow')
							print
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WF02',float(L1_2) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-1-2 Wdt-Fit  1GF-IntVal')         #LINES-1  Wdt-Fit  1GF-IntVal      WIDTH-FIT
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WP02',float(L2_2) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-2-2 Wdt-Plt  1GF-IntVal')         #LINES-2  Wdt-Plt  1GF-IntVal      WIDTH-PLT
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CF02',float(L7_2) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-7-2 Ctr Fit Bnds  1GF-IntVal')    #LINES-7  Ctr Fit Bnds  1GF-IntVal CTR-FIT-BNDS
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CO02',float(L8_2) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-8-2 Ctr Fit Ofst  1GF-IntVal')    #LINES-8  Ctr Fit Ofst  1GF-IntVal CTR-OFFSET
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AF02',float(L10_2),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-10-2 Amp Fit Bnds  1GF-IntVal')   #LINES-10 Ctr Fit Amp   1GF-IntVal LNE_AMP_BNDS

							print
							print colored('Initial Values: ','cyan')
							print colored('1: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'cyan')					
							print colored(str(LINES[5][lines])+'_WF02' + ': ' + str(L1_2),'cyan')
							print colored(str(LINES[5][lines])+'_WP02' + ': ' + str(L2_2),'cyan')
							print colored(str(LINES[5][lines])+'_CF02' + ': ' + str(L7_2),'cyan')
							print colored(str(LINES[5][lines])+'_CO02' + ': ' + str(L8_2),'cyan')
							print colored(str(LINES[5][lines])+'_AF02' + ': ' + str(L10_2),'cyan')
							print
						else:
							print
							print colored('Initial Guess Values G-2 for line Fitting will NOT be recorded!','yellow')
							print
							pass							
						#################################################CENTRAL GAUSSIAN-2-C##################################################					
					elif fix_ctr_gau_2 == True:
						print
						print colored('2nd CTR-gaussian already fitted!','yellow')
						print colored('Values from fits header','yellow')
						try:
							CTRE_G_0_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CF02')#,float(CTRE_G_0) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'Ctr  1GF Crct')
							AMPL_G_0_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF02')#,float(AMPL_G_0) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'Amp  1GF Crct')
							FWHM_G_0_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FF02')#,float(FWHM_G_0) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'FWHM 1GF Crct')
							EW_0_2        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WF02')#,float(EW_0)     ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'EW   1GF Crct')
							EWE_0_2       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EF02')#,float(EWE_0)    ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'EWE  1GF Crct')

							CTRE_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLO2')#,float(CTRE_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ctr  1GF Offst' + str(fit_type))
							AMPL_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALO2')#,float(AMPL_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Amp  1GF Offst' + str(fit_type))
							FWHM_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FLO2')#,float(FWHM_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' FWHM 1GF Offst' + str(fit_type))
							EW_O_2        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WLO2')#,float(EW_O)      ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EW   1GF Offst' + str(fit_type))
							EWE_O_2       = Header_Get(specfile_glx,str(LINES[5][lines])+'_ELO2')#,float(EWE_O)     ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EWE  1GF Offst' + str(fit_type))
							OFST_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_OFO2')#,float(OFST_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ofst 1GF Offst' + str(fit_type))

							CTRE_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLC2')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ctr  1GF Crct' + str(fit_type))
							AMPL_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALC2')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Amp  1GF Crct' + str(fit_type))
							SGMA_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_SLC2')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Sigm 1GF Crct' + str(fit_type))
							FWHM_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FLC2')#,float(FWHM_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' FWHM 1GF Crct' + str(fit_type))
							EW_C_2        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WLC2')#,float(EW_C)      ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EW   1GF Crct' + str(fit_type))
							EWE_C_2       = Header_Get(specfile_glx,str(LINES[5][lines])+'_ELC2')#,float(EWE_C)     ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EWE  1GF Crct' + str(fit_type))
							CTRE_G_C_2_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CEC2')#,float(CTRE_G_C_E),header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ctr  err 1GF Crct' + str(fit_type))
							AMPL_G_C_2_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_AEC2')#,float(AMPL_G_C_E),header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Amp  err 1GF Crct' + str(fit_type))
							SGMA_G_C_2_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_SEC2')#,float(SGMA_G_C_E),header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Sigm err 1GF Crct' + str(fit_type))

							chisqr_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CHL2')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Chi2 1GF' + str(fit_type))
							redchi_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CRL2')#,float(redchi_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Chi2 Reduced 1GF' + str(fit_type))

						except KeyError:
							print
							print colored ('Gaussian Fit Parameters are not found on Fits Header!','yellow')
							print colored ('File  : ' + specfile_glx,'yellow')
							print colored ('Header: ' + str(LINES[5][lines-1])+'_CF01','yellow')
							print colored ('Gotta Fit first before fixing a component (CTR)!','yellow')
							print colored ('Or UnFix (fix_ctr_gau_2=False) For Plotting!','yellow')
							print colored ('Quitting!','yellow')
							print
							CTRE_G_0_2    = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_CGF0')#,float(CTRE_G_0) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'Ctr  1GF Crct')
							AMPL_G_0_2    = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_AGF0')#,float(AMPL_G_0) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'Amp  1GF Crct')
							FWHM_G_0_2    = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_FGF0')#,float(FWHM_G_0) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'FWHM 1GF Crct')
							EW_0_2        = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_WGF0')#,float(EW_0)     ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'EW   1GF Crct')
							EWE_0_2       = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_EGF0')#,float(EWE_0)    ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'EWE  1GF Crct')

							CTRE_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_CGLO')#,float(CTRE_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ctr  1GF Offst' + str(fit_type))
							AMPL_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_AGLO')#,float(AMPL_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Amp  1GF Offst' + str(fit_type))
							FWHM_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_FGLO')#,float(FWHM_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' FWHM 1GF Offst' + str(fit_type))
							EW_O_2        = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_WGLO')#,float(EW_O)      ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EW   1GF Offst' + str(fit_type))
							EWE_O_2       = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_EGLO')#,float(EWE_O)     ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EWE  1GF Offst' + str(fit_type))
							OFST_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_OFSO')#,float(OFST_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ofst 1GF Offst' + str(fit_type))

							CTRE_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_CGLC')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ctr  1GF Crct' + str(fit_type))
							AMPL_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_AGLC')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Amp  1GF Crct' + str(fit_type))
							SGMA_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_SGLC')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Sigm 1GF Crct' + str(fit_type))
							FWHM_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_FGLC')#,float(FWHM_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' FWHM 1GF Crct' + str(fit_type))
							EW_C_2        = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_WGLC')#,float(EW_C)      ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EW   1GF Crct' + str(fit_type))
							EWE_C_2       = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_EGLC')#,float(EWE_C)     ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EWE  1GF Crct' + str(fit_type))
							CTRE_G_C_2_E  = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_CLEC')#,float(CTRE_G_C_E),header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ctr  err 1GF Crct' + str(fit_type))
							AMPL_G_C_2_E  = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_ALEC')#,float(AMPL_G_C_E),header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Amp  err 1GF Crct' + str(fit_type))
							SGMA_G_C_2_E  = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_SLEC')#,float(SGMA_G_C_E),header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Sigm err 1GF Crct' + str(fit_type))

							chisqr_C_2    = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_CHGL')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Chi2 1GF' + str(fit_type))
							redchi_C_2    = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_CRGL')#,float(redchi_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Chi2 Reduced 1GF' + str(fit_type))
					print
					print colored(str(LINES[0][lines-1])+'-'+str(LINES[3][lines-1])+'-CTR','magenta')
					print
					print colored(str(LINES[5][lines-1])+'_CLC2: ' + str(CTRE_G_C_2)  ,'magenta')
					print colored(str(LINES[5][lines-1])+'_ALC2: ' + str(AMPL_G_C_2)  ,'magenta')
					print colored(str(LINES[5][lines-1])+'_SLC2: ' + str(SGMA_G_C_2)  ,'magenta')
					print colored(str(LINES[5][lines-1])+'_FLC2: ' + str(FWHM_G_C_2)  ,'magenta')
					print colored(str(LINES[5][lines-1])+'_WLC2: ' + str(EW_C_2)      ,'magenta')
					print colored(str(LINES[5][lines-1])+'_ELC2: ' + str(EWE_C_2),'magenta')
					print colored('Fit Values Center, Amplitude, Sigma ('+fit_type+'):','magenta')
					print colored(str(CTRE_G_C_2)+', '+str(AMPL_G_C_2)+', '+str(SGMA_G_C_2),'magenta')
					print
					##################################################CENTRAL GAUSSIAN-2###################################################
					###############################################COMPUTING TOTAL AREA###############################################
					print colored('Computing Flux Area','yellow')
					###############################################COMPUTING TOTAL AREA###############################################
					CTRE_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLC1')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
					AMPL_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALC1')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
					SGMA_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_SLC1')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))

					CTRE_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLC2')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ctr  1GF Crct' + str(fit_type))
					AMPL_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALC2')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Amp  1GF Crct' + str(fit_type))
					SGMA_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_SLC2')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Sigm 1GF Crct' + str(fit_type))

					print
					print colored('Computing Areas using info from fits headers.','yellow')
					print 'AMPL_G_C_1: ',str(AMPL_G_C_1),'SGMA_G_C_1: ',str(SGMA_G_C_1)
					print 'AMPL_G_C_2: ',str(AMPL_G_C_2),'SGMA_G_C_2: ',str(SGMA_G_C_2)					
					print

					W_C_1     = integrate.quad(lambda x: AMPL_G_C_1*np.exp(-((x)**2)/(2*SGMA_G_C_1**2)), -np.inf, np.inf)
					EW_C_1    = np.round(abs(np.asarray(W_C_1[0])),10)
					EWE_C_1   = np.round(abs(np.asarray(W_C_1[1])),10)

					W_C_2     = integrate.quad(lambda x: AMPL_G_C_2*np.exp(-((x)**2)/(2*SGMA_G_C_2**2)), -np.inf, np.inf)
					EW_C_2    = np.round(abs(np.asarray(W_C_2[0])),10)
					EWE_C_2   = np.round(abs(np.asarray(W_C_2[1])),10)

					W_C       = integrate.quad(lambda x:  AMPL_G_C_1*np.exp(-((x)**2)/(2*SGMA_G_C_1**2)) + 
												AMPL_G_C_2*np.exp(-((x)**2)/(2*SGMA_G_C_2**2)), 
												-np.inf, np.inf
												)
					EW_C      = np.round((np.asarray(W_C[0])),10)
					EWE_C     = np.round(abs(np.asarray(W_C[1])),10)

					if EW_C_1 == 999999.99999:
						EW_C_1 = 0
					else:
						pass
					if EW_C_2 == 999999.99999:
						EW_C_2 = 0
					else:
						pass
						
					print
					print colored('Areas     :','yellow')
					print colored('Area CTR-1: ' + str(EW_C_1),'yellow')
					print colored('Area CTR-2: ' + str(EW_C_2),'yellow')					
					print colored('Area CTR-B: ' + str(EW_C),'yellow')
					print					
					###############################################COMPUTING TOTAL AREA###############################################
					#############################################ADDING AREA TO FTIS HEADER#############################################
					if fit_vls_hdr == True:
						print
						print colored('The Areas values will be updated to the fits headers!','magenta')
						print
						print colored('Area CTR-1: '                  + str(EW_C_1)   + '-' +str(LINES[5][lines])+'_WMC1','yellow')
						print colored('Area CTR-2: '                  + str(EW_C_2)   + '-' +str(LINES[5][lines])+'_WMC2','yellow')
						print colored('Area CTR-B: '                  + str(EW_C)     + '-' +str(LINES[5][lines])+'_WGM1','yellow')
						print						
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WMC1',float(EW_C_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   C1-GF Crct' + str(fit_fnct) + '-' +str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EMC1',float(EWE_C_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  C1-GF Crct' + str(fit_fnct) + '-' +str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WMC2',float(EW_C_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   C2-GF Crct' + str(fit_fnct) + '-' +str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EMC2',float(EWE_C_2) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  C2-GF Crct' + str(fit_fnct) + '-' +str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WGM1',float(EW_C)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   C1-C2 Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EGM1',float(EWE_C)   ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  C1-C2 Crct' + str(fit_type))
					else:
						print
						print colored('The Areas values will not be updated to the fits headers!','magenta')
						print
					#############################################ADDING AREA TO FTIS HEADER#############################################
				elif 'Dbl' in LINES[3][lines] and fit_fnct=='gaussM' and fit_type == 'lmfit' and uft_lne_vls == True:
					print 'Line-fitting Cleaning Method. To be checked Fnc_Stk_Plt.py def(Plot_Idp_Spc_Lne) line 11920!'
					fit_typ = 'GM'
					#GAUSSIAN FIT
					MSK_NTMS=2.5
					print
					print colored('1D Gaussian Fit Mode Choosen: Lmfit (Offset)','cyan')
					print
					print 
					print colored('Double Line Fit (Ind)','yellow')
					print colored(LINES[3][lines-2]  + '-' + str(LINES[0][lines-2])   + '-' + str(LINES[1][lines-2]),'cyan')
					print LINES[3][lines]+ '-' + str(LINES[0][lines]) + '-'  + str(LINES[1][lines])
					print colored(LINES[3][lines-1]+ '-' + str(LINES[0][lines-1]) + '-' + str(LINES[1][lines-1]),'magenta')

					from lmfit import Model

					#####################################################Getting Line Fitting Initial Values From Statcked Spectrum Fits Header#####################################################
					if ivl_fts_hdr == True:
						try:
							L1_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WM01')        #LINES-1  Wdt-Fit  1GF-IntVal      WIDTH-FIT
							L2_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WM01')        #LINES-2  Wdt-Plt  1GF-IntVal      WIDTH-PLT
							L7_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CM01')        #LINES-7  Ctr Fit Bnds  1GF-IntVal CTR-FIT-BNDS
							L8_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CM01')        #LINES-8  Ctr Fit Ofst  1GF-IntVal CTR-OFFSET
							L10_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AM01')        #LINES-10 Ctr Fit Amp   1GF-IntVal LNE_AMP_BNDS

							L1_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WM02')        #LINES-1  Wdt-Fit  1GF-IntVal      WIDTH-FIT
							L2_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WM02')        #LINES-2  Wdt-Plt  1GF-IntVal      WIDTH-PLT
							L7_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CM02')        #LINES-7  Ctr Fit Bnds  1GF-IntVal CTR-FIT-BNDS
							L8_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CM02')        #LINES-8  Ctr Fit Ofst  1GF-IntVal CTR-OFFSET
							L10_2 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AM02')        #LINES-10 Ctr Fit Amp   1GF-IntVal LNE_AMP_BNDS

							print
							print colored('Initial fit variables from fits header!','yellow')
							print
							print colored('1: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'cyan')
							print colored('Headers:','cyan')
							print colored(str(LINES[5][lines])+'_WM01' + ' LINES-1 Wdt-Fit  1GF-IntVal      : ' + str(L1_1),'cyan')
							print colored(str(LINES[5][lines])+'_WM01' + ' LINES-2 Wdt-Plt  1GF-IntVal      : ' + str(L2_1),'cyan')
							print colored(str(LINES[5][lines])+'_CM01' + ' LINES-7 Ctr Fit Bnds  1GF-IntVal : ' + str(L7_1),'cyan')
							print colored(str(LINES[5][lines])+'_CM01' + ' LINES-8 Ctr Fit Ofst  1GF-IntVal : ' + str(L8_1),'cyan')
							print colored(str(LINES[5][lines])+'_AM01' + ' LINES-10 Amp Fit Bnds  1GF-IntVal: ' + str(L10_1),'cyan')
							print
							print colored('2: ' + LINES[3][lines-1]  + '-' + str(LINES[0][lines-1]),'magenta')
							print colored('Headers:','magenta')
							print colored(str(LINES[5][lines])+'_WM02' + ' LINES-1 Wdt-Fit  1GF-IntVal      : ' + str(L1_2),'magenta')
							print colored(str(LINES[5][lines])+'_WM02' + ' LINES-2 Wdt-Plt  1GF-IntVal      : ' + str(L2_2),'magenta')
							print colored(str(LINES[5][lines])+'_CM02' + ' LINES-7 Ctr Fit Bnds  1GF-IntVal : ' + str(L7_2),'magenta')
							print colored(str(LINES[5][lines])+'_CM02' + ' LINES-8 Ctr Fit Ofst  1GF-IntVal : ' + str(L8_2),'magenta')
							print colored(str(LINES[5][lines])+'_AM02' + ' LINES-10 Amp Fit Bnds  1GF-IntVal: ' + str(L10_2),'magenta')
							print colored('*****Success!******','yellow')
							print
						except KeyError:
							print
							print colored('Headers containing initial fit variables not found!','yellow')
							print colored('Run Spec_Stk_Stack first or use value from Lines_Dictionary.py with ivl_fts_hdr = False:','yellow')
							print colored('Headers:','yellow')
							print
							print colored('1: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'cyan')
							print colored(str(LINES[5][lines])+'_WF_0' + ' LINES-1 Wdt-Fit  1GF-IntVal','cyan')
							print colored(str(LINES[5][lines])+'_WP_0' + ' LINES-2 Wdt-Plt  1GF-IntVal','cyan')
							print colored(str(LINES[5][lines])+'_CF_0' + ' LINES-7 Ctr Fit Bnds  1GF-IntVal','cyan')
							print colored(str(LINES[5][lines])+'_CO_0' + ' LINES-8 Ctr Fit Ofst  1GF-IntVal','cyan')
							print colored(str(LINES[5][lines])+'_AF_0' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','cyan')
							print
							print colored('2: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'magenta')
							print colored(str(LINES[5][lines])+'_WF_0' + ' LINES-1 Wdt-Fit  1GF-IntVal','magenta')
							print colored(str(LINES[5][lines])+'_WP_0' + ' LINES-2 Wdt-Plt  1GF-IntVal','magenta')
							print colored(str(LINES[5][lines])+'_CF_0' + ' LINES-7 Ctr Fit Bnds  1GF-IntVal','magenta')
							print colored(str(LINES[5][lines])+'_CO_0' + ' LINES-8 Ctr Fit Ofst  1GF-IntVal','magenta')
							print colored(str(LINES[5][lines])+'_AF_0' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','magenta')
							print '*****'
							print
							print
							print colored('Initial fit variables from fits header!','yellow')
							L1_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WF01')        #LINES-1  Wdt-Fit  1GF-IntVal      WIDTH-FIT
							L2_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WP01')        #LINES-2  Wdt-Plt  1GF-IntVal      WIDTH-PLT
							L7_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CF01')        #LINES-7  Ctr Fit Bnds  1GF-IntVal CTR-FIT-BNDS
							L8_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CO01')        #LINES-8  Ctr Fit Ofst  1GF-IntVal CTR-OFFSET
							L10_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF01')        #LINES-10 Ctr Fit Amp   1GF-IntVal LNE_AMP_BNDS

							L1_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WF02')        #LINES-1  Wdt-Fit  1GF-IntVal      WIDTH-FIT
							L2_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WP02')        #LINES-2  Wdt-Plt  1GF-IntVal      WIDTH-PLT
							L7_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CF02')        #LINES-7  Ctr Fit Bnds  1GF-IntVal CTR-FIT-BNDS
							L8_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CO02')        #LINES-8  Ctr Fit Ofst  1GF-IntVal CTR-OFFSET
							L10_2 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF02')        #LINES-10 Ctr Fit Amp   1GF-IntVal LNE_AMP_BNDS

							print
							print colored('1: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'cyan')
							print colored('Headers:','cyan')
							print colored(str(LINES[5][lines])+'_WF01' + ' LINES-1 Wdt-Fit  1GF-IntVal      : ' + str(L1_1),'cyan')
							print colored(str(LINES[5][lines])+'_WP01' + ' LINES-2 Wdt-Plt  1GF-IntVal      : ' + str(L2_1),'cyan')
							print colored(str(LINES[5][lines])+'_CF01' + ' LINES-7 Ctr Fit Bnds  1GF-IntVal : ' + str(L7_1),'cyan')
							print colored(str(LINES[5][lines])+'_CO01' + ' LINES-8 Ctr Fit Ofst  1GF-IntVal : ' + str(L8_1),'cyan')
							print colored(str(LINES[5][lines])+'_AF01' + ' LINES-10 Amp Fit Bnds  1GF-IntVal: ' + str(L10_1),'cyan')
							print
							print colored('2: ' + LINES[3][lines-1]  + '-' + str(LINES[0][lines-1]),'magenta')
							print colored('Headers:','magenta')
							print colored(str(LINES[5][lines])+'_WF01' + ' LINES-1 Wdt-Fit  1GF-IntVal      : ' + str(L1_2),'magenta')
							print colored(str(LINES[5][lines])+'_WP01' + ' LINES-2 Wdt-Plt  1GF-IntVal      : ' + str(L2_2),'magenta')
							print colored(str(LINES[5][lines])+'_CF01' + ' LINES-7 Ctr Fit Bnds  1GF-IntVal : ' + str(L7_2),'magenta')
							print colored(str(LINES[5][lines])+'_CO01' + ' LINES-8 Ctr Fit Ofst  1GF-IntVal : ' + str(L8_2),'magenta')
							print colored(str(LINES[5][lines])+'_AF01' + ' LINES-10 Amp Fit Bnds  1GF-IntVal: ' + str(L10_2),'magenta')
							print colored('*****Success!******','yellow')
							print							
							#quit()
						try:
							L10_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AM01')        #LINES-8 Ctr Fit Ofst  1GF-IntVal LNE_AMP_BNDS
							L10_2 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AM02')        #LINES-8 Ctr Fit Ofst  1GF-IntVal LNE_AMP_BNDS
							print colored('1: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'cyan')
							print colored(str(LINES[5][lines])+'_AM01' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','cyan')
							print colored('2: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'magenta')
							print colored(str(LINES[5][lines])+'_AM02' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','magenta')
							print colored('*****Success!******','yellow')
							print
						except KeyError:
							print
							print colored('Header not found!','yellow')
							print colored('Adding Header with default valuee 0.001:','yellow')
							print colored('1: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'cyan')							
							print colored(str(LINES[5][lines])+'_AM01' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','cyan')
							print colored('2: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'magenta')							
							print colored(str(LINES[5][lines])+'_AM02' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','magenta')
							Header_Get_Add(specfile_glx,str(LINES[5][lines])+'_AM01',0.001,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-10 Amp Fit Bnds  1GF-IntVal')
							Header_Get_Add(specfile_glx,str(LINES[5][lines])+'_AM02',0.001,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-10 Amp Fit Bnds  1GF-IntVal')
							L10_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AM01')        #LINES-8 Ctr Fit Ofst  1GF-IntVal LNE_AMP_BNDS
							L10_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AM02')        #LINES-8 Ctr Fit Ofst  1GF-IntVal LNE_AMP_BNDS
							print colored('*****Success!******','yellow')
							print
						################FOR CASES WHERE KLINE WIIDHT ==0################
						if L1_1  == 0:
							L1_1  = 1#LINES[1][lines]
						else:
							pass
						if L1_2  == 0:
							L1_2  = 1#LINES[1][lines]
						else:
							pass
						################FOR CASES WHERE KLINE WIIDHT ==0################
					elif ivl_fts_hdr == False:
						L1_1  = LINES[1][lines-2]
						L2_1  = LINES[2][lines-2]
						L7_1  = LINES[7][lines-2]
						L8_1  = LINES[8][lines-2]
						L10_1 = LINES[10][lines-2]

						L1_2  = LINES[1][lines-1]
						L2_2  = LINES[2][lines-1]
						L7_2  = LINES[7][lines-1]
						L8_2  = LINES[8][lines-1]
						L10_2 = LINES[10][lines-1]
						print
						print colored('Initial fit variables from Lines_Dictionary.py!','yellow')
						print					
					print colored('Initial Values: ','cyan')
					print colored('1: ' + LINES[3][lines-2]  + '-' + str(LINES[0][lines-2]),'cyan')					
					print colored(str(LINES[5][lines-2])+'_WF01' + ': ' + str(L1_1),'cyan')
					print colored(str(LINES[5][lines-2])+'_WP01' + ': ' + str(L2_1),'cyan')
					print colored(str(LINES[5][lines-2])+'_CF01' + ': ' + str(L7_1),'cyan')
					print colored(str(LINES[5][lines-2])+'_CO01' + ': ' + str(L8_1),'cyan')
					print colored(str(LINES[5][lines-2])+'_AF01' + ': ' + str(L10_1),'cyan')
					print
					print colored('Initial Values: ','magenta')
					print colored('2: ' + LINES[3][lines-1]  + '-' + str(LINES[0][lines-1]),'magenta')					
					print colored(str(LINES[5][lines-1])+'_WF02' + ': ' + str(L1_2),'magenta')
					print colored(str(LINES[5][lines-1])+'_WP02' + ': ' + str(L2_2),'magenta')
					print colored(str(LINES[5][lines-1])+'_CF02' + ': ' + str(L7_2),'magenta')
					print colored(str(LINES[5][lines-1])+'_CO02' + ': ' + str(L8_2),'magenta')
					print colored(str(LINES[5][lines-1])+'_AF02' + ': ' + str(L10_2),'magenta')
					print
					#####################################################Getting Line Fitting Initial Values From Statcked Spectrum Fits Header#####################################################
					lmb_min_lim_line_ft = (LINES[0][lines-2]+L8_1) - MSK_NTMS*L1_1 ##IT WAS LINE CTR - LINE OFFSET
					lmb_max_lim_line_ft = (LINES[0][lines-2]+L8_1) + MSK_NTMS*L1_1
					lmb_min_lim_line    = (LINES[0][lines-2]+L8_1)*(1+z_glx_Ps) - 1.5*MSK_NTMS*L2_1#- 20#L2_1 - 10 ##IT WAS LINE CTR - LINE OFFSET
					lmb_max_lim_line    = (LINES[0][lines-2]+L8_1)*(1+z_glx_Ps) + 1.5*MSK_NTMS*L2_1#+ 20#L2_1 + 10

					mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
					mask_ft    = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
					label_glx  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function

					idx_ctr_ft_reg = np.abs(lambda_glx[mask_ft] - (LINES[0][lines-2]+L8_1)).argmin()

					X0_f2DG    = (LINES[0][lines-2]+L8_1)
					SIGMA_f2DG = L1_1
					A_f2DG     = -(1-(min(inten_glx[mask_ft])))
					A_f2DG     = -(1-inten_glx[mask_ft][idx_ctr_ft_reg])

					max_val    = -(1-min(inten_glx[mask_ft]))
					lambda_max = (lambda_glx[np.where(inten_glx==min(inten_glx[mask_ft]))[0]][0])					

					if pre_off_plt == True:
						plt.step(lambda_glx[mask_pl], inten_glx[mask_pl],
								where='mid',lw=3.0,alpha=0.5,linestyle=':',color='gray',
								label='Original Spectrum')
					elif pre_off_plt == False:
						pass

					hsw_nmb_med = np.ceil(np.median(inten_glx_hst[mask_ft]))
					hsw_nmb_med = np.ceil(np.median(inten_glx_hsw[mask_ft]))
					Header_Add(specfile_glx,str(LINES[5][lines-2])+'_NHT',float(hsw_nmb_med) ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + '# glxs stk hst Fit Spec Reg (med)')
					Header_Add(specfile_glx,str(LINES[5][lines-2])+'_NHW',float(hsw_nmb_med) ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + '# glxs stk hsw Fit Spec Reg (med)')
					print
					print specfile_glx,str(LINES[5][lines-2])+'_NHT',float(hsw_nmb_med)
					print specfile_glx,str(LINES[5][lines-2])+'_NHW',float(hsw_nmb_med)
					print

					initial_guess_O   = (X0_f2DG,A_f2DG,SIGMA_f2DG,max(inten_glx[mask_ft])-1)
					initial_guess_0   = (X0_f2DG,A_f2DG,SIGMA_f2DG)
				
					##################################################CENTRAL GAUSSIAN-1###################################################
					if fix_ctr_gau_1 == False:
						print
						print colored('Fitting 1st line','cyan')
						print colored('1-0-Fitting Central line','cyan')
						print
						#################################################CENTRAL GAUSSIAN-1-0##################################################
						'''
						try:
							gmodel_0           = Model(func_1D_Gaussian)
							gmodel_0.set_param_hint('X_0'  , value=X0_f2DG   , min=X0_f2DG - (X0_f2DG*L7_1), max=X0_f2DG + (X0_f2DG*L7_1))
							#gmodel_0.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
							gmodel_0.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG  - (A_f2DG*L10_1), max=A_f2DG  + (A_f2DG*L10_1))#min=A_f2DG-0.001, max=A_f2DG)
							gmodel_0.set_param_hint('SIGMA', value=SIGMA_f2DG)
							pars_0             = gmodel_0.make_params()							
							result_0_1         = gmodel_0.fit(inten_glx[mask_ft],pars_0,
													X=lambda_glx[mask_ft],
													X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,
													nan_policy = 'omit')
							CTRE_G_0_1         = result_0_1.params['X_0'].value
							AMPL_G_0_1         = result_0_1.params['A'].value
							SGMA_G_0_1         = abs(result_0_1.params['SIGMA'].value)
							FWHM_G_0_1         = lw_sgma2fwhm(SGMA_G_0_1)
							W_0_1              = integrate.quad(lambda x: AMPL_G_0_1*np.exp(-((x)**2)/(2*SGMA_G_0_1**2)), -np.inf, np.inf)
							EW_0_1             = np.round(abs(np.asarray(W_0_1[0])),10)
							EWE_0_1            = np.round(abs(np.asarray(W_0_1[1])),10)
							data_fitted_0      = func_1D_Gaussian((lambda_glx[mask_ft]), CTRE_G_0_1,AMPL_G_0_1,SGMA_G_0_1)

							CTRE_G_0_1_E       = result_0_1.params['X_0'].stderr
							AMPL_G_0_1_E       = result_0_1.params['A'].stderr
							SGMA_G_0_1_E       = result_0_1.params['SIGMA'].stderr

							CTRE_G_0_1_cor     = result_0_1.params['X_0'].correl
							AMPL_G_0_1_cor     = result_0_1.params['A'].correl
							SGMA_G_0_1_cor     = result_0_1.params['SIGMA'].correl

							chisqr_0_1         = result_0_1.chisqr
							redchi_0_1         = result_0_1.redchi
						except (RuntimeError,ValueError,TypeError):
							popt_0, pcov_0   = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
							perr_0           = [999999.99999,999999.99999,999999.99999]
							CTRE_G_0         = 999999.99999
							AMPL_G_0         = 999999.99999
							SGMA_G_0         = 999999.99999
							FWHM_G_0         = 999999.99999
							EW_0             = 999999.99999
							EWE_0            = 999999.99999

							CTRE_G_0_E      = 999999.99999
							AMPL_G_0_E      = 999999.99999
							SGMA_G_0_E      = 999999.99999

							CTRE_G_0_cor    = 999999.99999
							AMPL_G_0_cor    = 999999.99999
							SGMA_G_0_cor    = 999999.99999

							chisqr_0        = 999999.99999
							redchi_0        = 999999.99999
						'''
						popt_0_1, pcov_0_1   = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
						perr_0_1           = [999999.99999,999999.99999,999999.99999]
						CTRE_G_0_1         = 999999.99999
						AMPL_G_0_1         = 999999.99999
						SGMA_G_0_1         = 999999.99999
						FWHM_G_0_1         = 999999.99999
						EW_0_1             = 999999.99999
						EWE_0_1            = 999999.99999

						CTRE_G_0_1_E      = 999999.99999
						AMPL_G_0_1_E      = 999999.99999
						SGMA_G_0_1_E      = 999999.99999

						CTRE_G_0_1_cor    = 999999.99999
						AMPL_G_0_1_cor    = 999999.99999
						SGMA_G_0_1_cor    = 999999.99999

						chisqr_0        = 999999.99999						
						if fit_vls_hdr == True and fix_ctr_gau_1 ==False:
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CM01',float(CTRE_G_0_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct-1' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AM01',float(AMPL_G_0_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct-1' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_FM01',float(FWHM_G_0_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct-1' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WM01',float(EW_0_1)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct-1' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_EM01',float(EWE_0_1)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct-1' + str(fit_fnct) + '-' +str(fit_type))
							print
							print colored('The fit (CTR-1-0) values will be added to the fits headers!','cyan')
							print 'aaaaa'
							print
						else:
							print
							print colored('The fit (CTR-1-0) values will not be added to the fits headers!','cyan')
							print
						#################################################CENTRAL GAUSSIAN-1-0##################################################
						#################################################CENTRAL GAUSSIAN-1-C##################################################
						'''
						try:
							gmodel_O           = Model(func_1D_Gaussian_O)
							gmodel_O.set_param_hint('X_0'   , value=X0_f2DG  , min=X0_f2DG - (X0_f2DG*L7_1), max=X0_f2DG + (X0_f2DG*L7_1))
							#gmodel_O.set_param_hint('A'     , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
							gmodel_O.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG  - (A_f2DG*L10_1), max=A_f2DG  + (A_f2DG*L10_1))#min=A_f2DG-0.001, max=A_f2DG)
							gmodel_O.set_param_hint('SIGMA' , value=SIGMA_f2DG)
							gmodel_O.set_param_hint('OFFSET', value=max(inten_glx[mask_ft])-1)
							pars_O             = gmodel_O.make_params()

							result_O_1         = gmodel_O.fit(inten_glx[mask_ft],pars_O,
													X=lambda_glx[mask_ft],X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,OFFSET=max(inten_glx[mask_ft])-1,
													nan_policy = 'omit')
							CTRE_G_O_1         = result_O_1.params['X_0'].value
							AMPL_G_O_1         = result_O_1.params['A'].value
							SGMA_G_O_1         = abs(result_O_1.params['SIGMA'].value)
							OFST_G_O_1         = abs(result_O_1.params['OFFSET'].value)
							FWHM_G_O_1         = lw_sgma2fwhm(SGMA_G_O_1)
							W_O_1              = integrate.quad(lambda x: AMPL_G_O_1*np.exp(-((x)**2)/(2*SGMA_G_O_1**2)), -np.inf, np.inf)
							EW_O_1             = np.round(abs(np.asarray(W_O_1[0])),10)
							EWE_O_1            = np.round(abs(np.asarray(W_O_1[1])),10)
							data_fitted_O_1    = func_1D_Gaussian_O((lambda_glx[mask_ft]),CTRE_G_O_1,AMPL_G_O_1,SGMA_G_O_1,OFST_G_O_1)

							CTRE_G_O_E         = result_O_1.params['X_0'].stderr
							AMPL_G_O_E         = result_O_1.params['A'].stderr
							SGMA_G_O_E         = result_O_1.params['SIGMA'].stderr

							CTRE_G_O_cor       = result_O_1.params['X_0'].correl
							AMPL_G_O_cor       = result_O_1.params['A'].correl
							SGMA_G_O_cor       = result_O_1.params['SIGMA'].correl

							chisqr_O_1         = result_O_1.chisqr
							redchi_O_1         = result_O_1.redchi
							
							#####################################################################################################################
							if ofs_ctr_fit == True:
								print
								print colored('Using Fitted Center From Offset Fit to Redefine Fitting Region!','yellow')
								print
								lmb_min_lim_line_ft = (CTRE_G_O_1-L8_1) - MSK_NTMS*L1_1 #IT WAS LINE CTR - LINE OFFSET
								lmb_max_lim_line_ft = (CTRE_G_O_1+L8_1) + MSK_NTMS*L1_1
								#lmb_min_lim_line    = (CTRE_G_O-L8_1)*(1+z_glx_Ps) - 1.5*MSK_NTMS*L2_1#-20#L2_1 - 10
								#lmb_max_lim_line    = (CTRE_G_O+L8_1)*(1+z_glx_Ps) + 1.5*MSK_NTMS*L2_1#+20#L2_1 + 10
								#mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
								mask_ft     = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
							else:
								pass
							#####################################################################################################################
							#A_f2DG             = -(1-(min(inten_glx[mask_ft])))
							#inten_glx[mask_ft] = inten_glx[mask_ft] - OFST_G_O ####OFFSET - SHOULD BE APPLIED TO BE IDENTICAL TO METHOD GAUSS?
							initial_guess_C    = (X0_f2DG,A_f2DG,SIGMA_f2DG)#,max(inten_glx[mask_ft])-1)

							gmodel_C           = Model(func_1D_Gaussian)
							gmodel_C.set_param_hint('X_0'  , value=X0_f2DG, min=X0_f2DG - (X0_f2DG*(X0_f2DG*L7_1)), max=X0_f2DG + (X0_f2DG*(X0_f2DG*L7_1)))
							#gmodel_C.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
							gmodel_C.set_param_hint('A'    , value=A_f2DG , min=A_f2DG  - (A_f2DG*(A_f2DG*L10_1)) , max=A_f2DG  + (A_f2DG*(A_f2DG*L10_1)))
							gmodel_C.set_param_hint('SIGMA', value=SIGMA_f2DG)
							pars_C             = gmodel_C.make_params()
							result_C_1         = gmodel_C.fit(inten_glx[mask_ft],pars_C,
													X=lambda_glx[mask_ft],X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,
													nan_policy = 'omit')
							CTRE_G_C_1         = result_C_1.params['X_0'].value
							AMPL_G_C_1         = result_C_1.params['A'].value
							SGMA_G_C_1         = abs(result_C_1.params['SIGMA'].value)
							FWHM_G_C_1         = lw_sgma2fwhm(SGMA_G_C_1)
							W_C_1              = integrate.quad(lambda x: AMPL_G_C_1*np.exp(-((x)**2)/(2*SGMA_G_C_1**2)), -np.inf, np.inf)
							EW_C_1             = np.round(abs(np.asarray(W_C_1[0])),10)
							EWE_C_1            = np.round(abs(np.asarray(W_C_1[1])),10)
							data_fitted_C_1    = func_1D_Gaussian((lambda_glx[mask_ft]), CTRE_G_C_1,AMPL_G_C_1,SGMA_G_C_1)

							CTRE_G_C_1_E         = result_C_1.params['X_0'].stderr
							AMPL_G_C_1_E         = result_C_1.params['A'].stderr
							SGMA_G_C_1_E         = result_C_1.params['SIGMA'].stderr

							CTRE_G_C_1_cor       = result_C_1.params['X_0'].correl
							AMPL_G_C_1_cor       = result_C_1.params['A'].correl
							SGMA_G_C_1_cor       = result_C_1.params['SIGMA'].correl

							AMPL_SNR_1           = AMPL_G_C_1
							CTRE_SNR_1           = CTRE_G_C_1
							SGMA_SNR_1           = abs(SGMA_G_C_1)

							if CTRE_G_C_1_E == None:
								CTRE_G_C_1_E = 999999.99999
							else:
								pass
							if AMPL_G_C_1_E == None:
								AMPL_G_C_1_E = 999999.99999
							else:
								pass
							if SGMA_G_C_1_E == None:
								SGMA_G_C_1_E = 999999.99999
							else:
								pass
							if CTRE_G_C_1_cor == None:
								CTRE_G_C_1_cor = 999999.99999
							else:
								pass
							if AMPL_G_C_1_cor == None:
								AMPL_G_C_1_cor = 999999.99999
							else:
								pass
							if SGMA_G_C_1_cor == None:
								SGMA_G_C_1_cor = 999999.99999
							else:
								pass
							chisqr_C_1      = result_C_1.chisqr
							redchi_C_1      = result_C_1.redchi
							##inten_glx[mask_ft] = inten_glx[mask_ft] + OFST_G_O #OFFSET +
						except (RuntimeError,ValueError,TypeError):
							print colored('RuntimeError','cyan')
							popt_C_1, pcov_C_1 = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
							perr_C_1           = [999999.99999,999999.99999,999999.99999]
							CTRE_G_C_1         = 999999.99999
							AMPL_G_C_1         = 999999.99999
							SGMA_G_C_1         = 999999.99999
							FWHM_G_C_1         = 999999.99999
							EW_C_1             = 999999.99999
							EWE_C_1            = 999999.99999

							CTRE_G_C_1_E       = 999999.99999
							AMPL_G_C_1_E       = 999999.99999
							SGMA_G_C_1_E       = 999999.99999
							CTRE_G_C_1_cor     = 999999.99999
							AMPL_G_C_1_cor     = 999999.99999
							SGMA_G_C_1_cor     = 999999.99999
							chisqr_C_1         = 999999.99999
							redchi_C_1         = 999999.99999

							popt_O_1 ,pcov_O_1 = [999999.99999,999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999,999999.99999]
							perr_O_1           = [999999.99999,999999.99999,999999.99999,999999.99999]
							CTRE_G_O_1         = 999999.99999
							AMPL_G_O_1         = 999999.99999
							SGMA_G_O_1         = 999999.99999
							OFST_G_O_1         = 999999.99999
							FWHM_G_O_1         = 999999.99999
							EW_O_1             = 999999.99999
							EWE_O_1            = 999999.99999

							CTRE_G_O_1_E      = 999999.99999
							AMPL_G_O_1_E      = 999999.99999
							SGMA_G_O_1_E      = 999999.99999
							CTRE_G_O_1_cor    = 999999.99999
							AMPL_G_O_1_cor    = 999999.99999
							SGMA_G_O_1_cor    = 999999.99999
							OFST_G_O_1_cor    = 999999.99999
							chisqr_O_1        = 999999.99999
							redchi_O_1        = 999999.99999

							AMPL_SNR_1        = 999999.99999
							CTRE_SNR_1        = 999999.99999
							SGMA_SNR_1        = 999999.99999
						'''
						popt_C_1, pcov_C_1 = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
						perr_C_1           = [999999.99999,999999.99999,999999.99999]
						CTRE_G_C_1         = 999999.99999
						AMPL_G_C_1         = 999999.99999
						SGMA_G_C_1         = 999999.99999
						FWHM_G_C_1         = 999999.99999
						EW_C_1             = 999999.99999
						EWE_C_1            = 999999.99999

						CTRE_G_C_1_E       = 999999.99999
						AMPL_G_C_1_E       = 999999.99999
						SGMA_G_C_1_E       = 999999.99999
						CTRE_G_C_1_cor     = 999999.99999
						AMPL_G_C_1_cor     = 999999.99999
						SGMA_G_C_1_cor     = 999999.99999
						chisqr_C_1         = 999999.99999
						redchi_C_1         = 999999.99999

						popt_O_1 ,pcov_O_1 = [999999.99999,999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999,999999.99999]
						perr_O_1           = [999999.99999,999999.99999,999999.99999,999999.99999]
						CTRE_G_O_1         = 999999.99999
						AMPL_G_O_1         = 999999.99999
						SGMA_G_O_1         = 999999.99999
						OFST_G_O_1         = 999999.99999
						FWHM_G_O_1         = 999999.99999
						EW_O_1             = 999999.99999
						EWE_O_1            = 999999.99999

						CTRE_G_O_1_E      = 999999.99999
						AMPL_G_O_1_E      = 999999.99999
						SGMA_G_O_1_E      = 999999.99999
						CTRE_G_O_1_cor    = 999999.99999
						AMPL_G_O_1_cor    = 999999.99999
						SGMA_G_O_1_cor    = 999999.99999
						OFST_G_O_1_cor    = 999999.99999
						chisqr_O_1        = 999999.99999
						redchi_O_1        = 999999.99999

						AMPL_SNR_1        = 999999.99999
						CTRE_SNR_1        = 999999.99999
						SGMA_SNR_1        = 999999.99999						
						print
						print colored(specfile_glx,'cyan')
						print
						print colored(str(LINES[0][lines-2])+'-'+str(LINES[3][lines-2]),'cyan')
						print
						print colored(str(LINES[5][lines-2])+'_CGLC: ' + str(CTRE_G_C_1)  ,'cyan')
						print colored(str(LINES[5][lines-2])+'_AGLC: ' + str(AMPL_G_C_1)  ,'cyan')
						print colored(str(LINES[5][lines-2])+'_SGLC: ' + str(SGMA_G_C_1)  ,'cyan')
						print colored(str(LINES[5][lines-2])+'_FGLC: ' + str(FWHM_G_C_1)  ,'cyan')
						print colored(str(LINES[5][lines-2])+'_WGLC: ' + str(EW_C_1)      ,'cyan')
						print colored(str(LINES[5][lines-2])+'_EGLC: ' + str(EWE_C_1)     ,'cyan')
						print
						print
						#inten_glx[mask_ft] = inten_glx[mask_ft] + OFST_G_O
						if fit_vls_hdr == True and fix_ctr_gau_1==False:
							Header_Add(specfile_glx,'BSF_FCT',str(fit_fnct)                         ,header_comment = 'Fit function')
							Header_Add(specfile_glx,'BSF_MTH',str(fit_type)                         ,header_comment = 'Fit method')
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CMO1',float(CTRE_G_O_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AMO1',float(AMPL_G_O_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_FMO1',float(FWHM_G_O_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WMO1',float(EW_O_1)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_EMO1',float(EWE_O_1)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_OMO1',float(OFST_G_O_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ofst 1GF Offst' + str(fit_fnct) + '-' +str(fit_type))

							Header_Add(specfile_glx,str(LINES[5][lines])+'_CMC1',float(CTRE_G_C_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AMC1',float(AMPL_G_C_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_SMC1',float(SGMA_G_C_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_FMC1',float(FWHM_G_C_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WMC1',float(EW_C_1)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_EMC1',float(EWE_C_1)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CM1E',float(CTRE_G_C_1_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AM1E',float(AMPL_G_C_1_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_SM1E',float(SGMA_G_C_1_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_fnct) + '-' +str(fit_type))

							Header_Add(specfile_glx,str(LINES[5][lines])+'_CHM1',float(chisqr_C_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 1GF' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CRM1',float(redchi_C_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines-2]) + ' Chi2 Reduced 1GF' + str(fit_fnct) + '-' +str(fit_type))

							print
							print colored('The fit (CTR-1-C & CTR-1-O) values will be added to the fits headers!','cyan')
							print
						else:
							print
							print colored('The fit (CTR-1-C & CTR-1-O) values will not be added to the fits headers!','cyan')
							print

						if uft_lne_vls == False and fit_vls_hdr == True and int_vlf_hdr==True:
							print
							print colored('Initial Guess Values G-1 for line Fitting will be recorded!','yellow')
							print colored('Info input parameters (pre_gauss_shf, pre_gauss_ctr) in Spec_Stk_Stack_0.4.py!','yellow')
							print
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WM01',float(L1_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-1-1 Wdt-Fit  1GF-IntVal')         #LINES-1  Wdt-Fit  1GF-IntVal      WIDTH-FIT
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WM01',float(L2_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-2-1 Wdt-Plt  1GF-IntVal')         #LINES-2  Wdt-Plt  1GF-IntVal      WIDTH-PLT
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CM01',float(L7_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-7-1 Ctr Fit Bnds  1GF-IntVal')    #LINES-7  Ctr Fit Bnds  1GF-IntVal CTR-FIT-BNDS
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CM01',float(L8_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-8-1 Ctr Fit Ofst  1GF-IntVal')    #LINES-8  Ctr Fit Ofst  1GF-IntVal CTR-OFFSET
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AM01',float(L10_1),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-10-1 Amp Fit Bnds  1GF-IntVal')   #LINES-10 Ctr Fit Amp   1GF-IntVal LNE_AMP_BNDS

							print
							print colored('Initial Values: ','cyan')
							print colored('1: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'cyan')					
							print colored(str(LINES[5][lines])+'_WM01' + ': ' + str(L1_1),'cyan')
							print colored(str(LINES[5][lines])+'_WM01' + ': ' + str(L2_1),'cyan')
							print colored(str(LINES[5][lines])+'_CM01' + ': ' + str(L7_1),'cyan')
							print colored(str(LINES[5][lines])+'_CM01' + ': ' + str(L8_1),'cyan')
							print colored(str(LINES[5][lines])+'_AM01' + ': ' + str(L10_1),'cyan')
							print
						else:
							print
							print colored('Initial Guess Values G-1 for line Fitting will NOT be recorded!','yellow')
							print
							pass
					#################################################CENTRAL GAUSSIAN-1-C##################################################					
					elif fix_ctr_gau_1 == True:
						print
						print colored('1-CTR-gaussian already fitted!','yellow')
						print colored('Values from fits header','yellow')
						try:
							CTRE_G_0_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CM01')#,float(CTRE_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct')
							AMPL_G_0_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AM01')#,float(AMPL_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct')
							FWHM_G_0_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FM01')#,float(FWHM_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct')
							EW_0_1        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WM01')#,float(EW_0)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct')
							EWE_0_1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EM01')#,float(EWE_0)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct')

							CTRE_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CMO1')#,float(CTRE_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Offst' + str(fit_type))
							AMPL_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AMO1')#,float(AMPL_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Offst' + str(fit_type))
							FWHM_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FMO1')#,float(FWHM_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Offst' + str(fit_type))
							EW_O_1        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WMO1')#,float(EW_O)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Offst' + str(fit_type))
							EWE_O_1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EMO1')#,float(EWE_O)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Offst' + str(fit_type))
							OFST_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_OMO1')#,float(OFST_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ofst 1GF Offst' + str(fit_type))

							CTRE_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CMC1')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
							AMPL_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AMC1')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
							SGMA_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_SMC1')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
							FWHM_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FMC1')#,float(FWHM_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
							EW_C_1        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WMC1')#,float(EW_C)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
							EWE_C_1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EMC1')#,float(EWE_C)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
							CTRE_G_C_1_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CMC1')#,float(CTRE_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
							AMPL_G_C_1_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_AMC1')#,float(AMPL_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
							SGMA_G_C_1_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_SMC1')#,float(SGMA_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))

							chisqr_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CHM1')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 1GF' + str(fit_type))
							redchi_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CRM1')#,float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 Reduced 1GF' + str(fit_type))

						except KeyError:
							print
							print colored ('Gaussian Fit Parameters are not found on Fits Header!','yellow')
							print colored ('File  : ' + specfile_glx,'yellow')
							print colored ('Header: ' + str(LINES[5][lines-2])+'_CF01','yellow')
							print colored ('Gotta Fit first before fixing a component (CTR)!','yellow')
							print colored ('Or UnFix (fix_ctr_gau_1=False) For Plotting!','yellow')
							print colored ('Quitting!','yellow')
							print
							CTRE_G_0_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CF01')#,float(CTRE_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct')
							AMPL_G_0_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF01')#,float(AMPL_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct')
							FWHM_G_0_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FF01')#,float(FWHM_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct')
							EW_0_1        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WF01')#,float(EW_0)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct')
							EWE_0_1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EF01')#,float(EWE_0)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct')

							CTRE_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLO1')#,float(CTRE_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Offst' + str(fit_type))
							AMPL_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALO1')#,float(AMPL_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Offst' + str(fit_type))
							FWHM_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FLO1')#,float(FWHM_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Offst' + str(fit_type))
							EW_O_1        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WLO1')#,float(EW_O)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Offst' + str(fit_type))
							EWE_O_1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_ELO1')#,float(EWE_O)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Offst' + str(fit_type))
							OFST_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_OFO1')#,float(OFST_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ofst 1GF Offst' + str(fit_type))

							CTRE_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLC1')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
							AMPL_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALC1')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
							SGMA_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_SLC1')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
							FWHM_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FLC1')#,float(FWHM_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
							EW_C_1        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WLC1')#,float(EW_C)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
							EWE_C_1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_ELC1')#,float(EWE_C)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
							CTRE_G_C_1_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CEC1')#,float(CTRE_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
							AMPL_G_C_1_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_AEC1')#,float(AMPL_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
							SGMA_G_C_1_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_SEC1')#,float(SGMA_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))

							chisqr_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CHL1')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 1GF' + str(fit_type))
							redchi_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CRL1')#,float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 Reduced 1GF' + str(fit_type))
					print
					print colored(str(LINES[0][lines-2])+'-'+str(LINES[3][lines-2])+'-CTR','cyan')
					print colored('From: '+str(LINES[3][lines])+'-CTR','cyan')
					print
					print colored(str(LINES[5][lines])+'_CMC1: ' + str(CTRE_G_C_1)  ,'cyan')
					print colored(str(LINES[5][lines])+'_AMC1: ' + str(AMPL_G_C_1)  ,'cyan')
					print colored(str(LINES[5][lines])+'_SMC1: ' + str(SGMA_G_C_1)  ,'cyan')
					print colored(str(LINES[5][lines])+'_FMC1: ' + str(FWHM_G_C_1)  ,'cyan')
					print colored(str(LINES[5][lines])+'_WMC1: ' + str(EW_C_1)      ,'cyan')
					print colored(str(LINES[5][lines])+'_EMC1: ' + str(EWE_C_1),'cyan')
					print colored('Fit Values Center, Amplitude, Sigma ('+fit_type+'):','cyan')
					print colored(str(CTRE_G_C_1)+', '+str(AMPL_G_C_1)+', '+str(SGMA_G_C_1),'cyan')
					print
					##################################################CENTRAL GAUSSIAN-1###################################################
					lmb_min_lim_line_ft = (LINES[0][lines-1]+L8_2) - MSK_NTMS*LINES[1][lines-1] ##IT WAS LINE CTR - LINE OFFSET
					lmb_max_lim_line_ft = (LINES[0][lines-1]+L8_2) + MSK_NTMS*LINES[1][lines-1]
					lmb_min_lim_line    = (LINES[0][lines-1]+L8_2)*(1+z_glx_Ps) - 1.5*MSK_NTMS*L2_2#- 20#L2_2 - 10 ##IT WAS LINE CTR - LINE OFFSET
					lmb_max_lim_line    = (LINES[0][lines-1]+L8_2)*(1+z_glx_Ps) + 1.5*MSK_NTMS*L2_2#+ 20#L2_2 + 10

					mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
					mask_ft    = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
					label_glx  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function
					idx_ctr_ft_reg = np.abs(lambda_glx[mask_ft] - (LINES[0][lines-1]+L8_2)).argmin()

					X0_f2DG    = (LINES[0][lines-1]+L8_2)
					SIGMA_f2DG = LINES[1][lines-1]
					A_f2DG     = -(1-(min(inten_glx[mask_ft])))
					A_f2DG     = -(1-inten_glx[mask_ft][idx_ctr_ft_reg])

					max_val    = -(1-min(inten_glx[mask_ft]))
					lambda_max = (lambda_glx[np.where(inten_glx==min(inten_glx[mask_ft]))[0]][0])					

					if pre_off_plt == True:
						plt.step(lambda_glx[mask_pl], inten_glx[mask_pl],
								where='mid',lw=3.0,alpha=0.5,linestyle=':',color='gray',
								label='Original Spectrum')
					elif pre_off_plt == False:
						pass

					hsw_nmb_med = np.ceil(np.median(inten_glx_hst[mask_ft]))
					hsw_nmb_med = np.ceil(np.median(inten_glx_hsw[mask_ft]))
					Header_Add(specfile_glx,str(LINES[5][lines-1])+'_NHT',float(hsw_nmb_med) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + '# glxs stk hst Fit Spec Reg (med)')
					Header_Add(specfile_glx,str(LINES[5][lines-1])+'_NHW',float(hsw_nmb_med) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + '# glxs stk hsw Fit Spec Reg (med)')
					print specfile_glx,str(LINES[5][lines-1])+'_NHT',float(hsw_nmb_med) 
					print specfile_glx,str(LINES[5][lines-1])+'_NHW',float(hsw_nmb_med) 

					initial_guess_O   = (X0_f2DG,A_f2DG,SIGMA_f2DG,max(inten_glx[mask_ft])-1)
					initial_guess_0   = (X0_f2DG,A_f2DG,SIGMA_f2DG)
					##################################################CENTRAL GAUSSIAN-2###################################################
					if fix_ctr_gau_2 == False:
						print
						print colored('Fitting 2nd line','magenta')
						print colored('2-0-Fitting Central line','magenta')
						print
						#################################################CENTRAL GAUSSIAN-2-0##################################################
						'''
						try:
							gmodel_0           = Model(func_1D_Gaussian)
							gmodel_0.set_param_hint('X_0'  , value=X0_f2DG , min=X0_f2DG - (X0_f2DG*L7_2), max=X0_f2DG + (X0_f2DG*L7_2))
							#gmodel_0.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
							gmodel_0.set_param_hint('A'    , value=A_f2DG  , min=A_f2DG  - (A_f2DG*L10_2), max=A_f2DG  + (A_f2DG*L10_2))
							gmodel_0.set_param_hint('SIGMA', value=SIGMA_f2DG)
							pars_0             = gmodel_0.make_params()							
							result_0_2         = gmodel_0.fit(inten_glx[mask_ft],pars_0,
													X=lambda_glx[mask_ft],
													X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,
													nan_policy = 'omit')
							CTRE_G_0_2         = result_0_2.params['X_0'].value
							AMPL_G_0_2         = result_0_2.params['A'].value
							SGMA_G_0_2         = abs(result_0_2.params['SIGMA'].value)
							FWHM_G_0           = lw_sgma2fwhm(SGMA_G_0_2)
							W_0_2              = integrate.quad(lambda x: AMPL_G_0_2*np.exp(-((x)**2)/(2*SGMA_G_0_2**2)), -np.inf, np.inf)
							EW_0_2             = np.round(abs(np.asarray(W_0_2[0])),10)
							EWE_0_2            = np.round(abs(np.asarray(W_0_2[1])),10)
							data_fitted_0_2    = func_1D_Gaussian((lambda_glx[mask_ft]), CTRE_G_0_2,AMPL_G_0_2,SGMA_G_0_2)

							CTRE_G_0_2_E       = result_0_2.params['X_0'].stderr
							AMPL_G_0_2_E       = result_0_2.params['A'].stderr
							SGMA_G_0_2_E       = result_0_2.params['SIGMA'].stderr

							CTRE_G_0_2_cor     = result_0_2.params['X_0'].correl
							AMPL_G_0_2_cor     = result_0_2.params['A'].correl
							SGMA_G_0_2_cor     = result_0_2.params['SIGMA'].correl

							chisqr_0           = result_0_2.chisqr
							redchi_0           = result_0_2.redchi
						except (RuntimeError,ValueError,TypeError):
							popt_0, pcov_0   = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
							perr_0           = [999999.99999,999999.99999,999999.99999]
							CTRE_G_0_2         = 999999.99999
							AMPL_G_0_2         = 999999.99999
							SGMA_G_0_2         = 999999.99999
							FWHM_G_0         = 999999.99999
							EW_0_2             = 999999.99999
							EWE_0_2            = 999999.99999

							CTRE_G_0_2_E      = 999999.99999
							AMPL_G_0_2_E      = 999999.99999
							SGMA_G_0_2_E      = 999999.99999

							CTRE_G_0_2_cor    = 999999.99999
							AMPL_G_0_2_cor    = 999999.99999
							SGMA_G_0_2_cor    = 999999.99999

							chisqr_0        = 999999.99999
							redchi_0        = 999999.99999
						'''
						popt_0, pcov_0   = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
						perr_0           = [999999.99999,999999.99999,999999.99999]
						CTRE_G_0_2         = 999999.99999
						AMPL_G_0_2         = 999999.99999
						SGMA_G_0_2         = 999999.99999
						FWHM_G_0         = 999999.99999
						EW_0_2             = 999999.99999
						EWE_0_2            = 999999.99999

						CTRE_G_0_2_E      = 999999.99999
						AMPL_G_0_2_E      = 999999.99999
						SGMA_G_0_2_E      = 999999.99999

						CTRE_G_0_2_cor    = 999999.99999
						AMPL_G_0_2_cor    = 999999.99999
						SGMA_G_0_2_cor    = 999999.99999

						chisqr_0        = 999999.99999
						redchi_0        = 999999.99999						
						if fit_vls_hdr == True and fix_ctr_gau_2 ==False:
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CM02',float(CTRE_G_0_2) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct-2' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AM02',float(AMPL_G_0_2) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct-2' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_FM02',float(FWHM_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct-2' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WM02',float(EW_0_2)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct-2' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_EM02',float(EWE_0_2)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct-2' + str(fit_fnct) + '-' +str(fit_type))
							print
							print colored('The fit (CTR-2-0) values will be added to the fits headers!','magenta')
							print
						else:
							print
							print colored('The fit (CTR-2-0) values will not be added to the fits headers!','magenta')
							print
						#################################################CENTRAL GAUSSIAN-2-0##################################################
						#################################################CENTRAL GAUSSIAN-2-C##################################################
						'''
						try:
							gmodel_O           = Model(func_1D_Gaussian_O)
							gmodel_O.set_param_hint('X_0'   , value=X0_f2DG , min=X0_f2DG - (X0_f2DG*L7_2), max=X0_f2DG + (X0_f2DG*L7_2))
							#gmodel_O.set_param_hint('A'     , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
							gmodel_O.set_param_hint('A'     , value=A_f2DG  , min=A_f2DG  - (A_f2DG*L10_2), max=A_f2DG  + (A_f2DG*L10_2))
							gmodel_O.set_param_hint('SIGMA' , value=SIGMA_f2DG)
							gmodel_O.set_param_hint('OFFSET', value=max(inten_glx[mask_ft])-1)
							pars_O             = gmodel_O.make_params()

							result_O_2         = gmodel_O.fit(inten_glx[mask_ft],pars_O,
													X=lambda_glx[mask_ft],X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,OFFSET=max(inten_glx[mask_ft])-1,
													nan_policy = 'omit')
							CTRE_G_O_2         = result_O_2.params['X_0'].value
							AMPL_G_O_2         = result_O_2.params['A'].value
							SGMA_G_O_2         = abs(result_O_2.params['SIGMA'].value)
							OFST_G_O_2         = abs(result_O_2.params['OFFSET'].value)
							FWHM_G_O_2         = lw_sgma2fwhm(SGMA_G_O_2)
							W_O_2              = integrate.quad(lambda x: AMPL_G_O_2*np.exp(-((x)**2)/(2*SGMA_G_O_2**2)), -np.inf, np.inf)
							EW_O_2             = np.round(abs(np.asarray(W_O_2[0])),10)
							EWE_O_2            = np.round(abs(np.asarray(W_O_2[1])),10)
							data_fitted_O_2    = func_1D_Gaussian_O((lambda_glx[mask_ft]),CTRE_G_O_2,AMPL_G_O_2,SGMA_G_O_2,OFST_G_O_2)

							CTRE_G_O_2_E       = result_O_2.params['X_0'].stderr
							AMPL_G_O_2_E       = result_O_2.params['A'].stderr
							SGMA_G_O_E         = result_O_2.params['SIGMA'].stderr

							CTRE_G_O_2_cor     = result_O_2.params['X_0'].correl
							AMPL_G_O_2_cor     = result_O_2.params['A'].correl
							SGMA_G_O_cor       = result_O_2.params['SIGMA'].correl

							chisqr_O_2         = result_O_2.chisqr
							redchi_O_2         = result_O_2.redchi
							
							#####################################################################################################################
							if ofs_ctr_fit == True:
								print
								print colored('Using Fitted Center From Offset Fit to Redefine Fitting Region!','yellow')
								print
								lmb_min_lim_line_ft = (CTRE_G_O_2-L8_2) - MSK_NTMS*LINES[1][lines-1] #IT WAS LINE CTR - LINE OFFSET
								lmb_max_lim_line_ft = (CTRE_G_O_2+L8_2) + MSK_NTMS*LINES[1][lines-1]
								#lmb_min_lim_line    = (CTRE_G_O-L8_2)*(1+z_glx_Ps) - 1.5*MSK_NTMS*L2_2#-20#L2_2 - 10
								#lmb_max_lim_line    = (CTRE_G_O+L8_2)*(1+z_glx_Ps) + 1.5*MSK_NTMS*L2_2#+20#L2_2 + 10
								#mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
								mask_ft     = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
							else:
								pass
							#####################################################################################################################
							#A_f2DG             = -(1-(min(inten_glx[mask_ft])))
							#inten_glx[mask_ft] = inten_glx[mask_ft] - OFST_G_O ####OFFSET - SHOULD BE APPLIED TO BE IDENTICAL TO METHOD GAUSS?
							initial_guess_C    = (X0_f2DG,A_f2DG,SIGMA_f2DG)#,max(inten_glx[mask_ft])-1)

							gmodel_C           = Model(func_1D_Gaussian)
							gmodel_C.set_param_hint('X_0'  , value=X0_f2DG, min=X0_f2DG - (X0_f2DG*(X0_f2DG*L7_2)), max=X0_f2DG + (X0_f2DG*(X0_f2DG*L7_2)))
							#gmodel_C.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
							gmodel_C.set_param_hint('A'    , value=A_f2DG , min=A_f2DG  - (A_f2DG*(A_f2DG*L10_2)) , max=A_f2DG  + (A_f2DG*(A_f2DG*L10_2)))
							gmodel_C.set_param_hint('SIGMA', value=SIGMA_f2DG)
							pars_C             = gmodel_C.make_params()
							result_C_2         = gmodel_C.fit(inten_glx[mask_ft],pars_C,
													X=lambda_glx[mask_ft],X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,
													nan_policy = 'omit')
							CTRE_G_C_2         = result_C_2.params['X_0'].value
							AMPL_G_C_2         = result_C_2.params['A'].value
							SGMA_G_C_2         = abs(result_C_2.params['SIGMA'].value)
							FWHM_G_C_2         = lw_sgma2fwhm(SGMA_G_C_2)

							W_C_2              = integrate.quad(lambda x: AMPL_G_C_2*np.exp(-((x)**2)/(2*SGMA_G_C_2**2)), -np.inf, np.inf)
							EW_C_2             = np.round(abs(np.asarray(W_C_2[0])),10)
							EWE_C_2            = np.round(abs(np.asarray(W_C_2[1])),10)
							data_fitted_C      = func_1D_Gaussian((lambda_glx[mask_ft]), CTRE_G_C_2,AMPL_G_C_2,SGMA_G_C_2)

							CTRE_G_C_2_E       = result_C_2.params['X_0'].stderr
							AMPL_G_C_2_E       = result_C_2.params['A'].stderr
							SGMA_G_C_2_E       = result_C_2.params['SIGMA'].stderr

							CTRE_G_C_2_cor     = result_C_2.params['X_0'].correl
							AMPL_G_C_2_cor     = result_C_2.params['A'].correl
							SGMA_G_C_2_cor     = result_C_2.params['SIGMA'].correl

							AMPL_SNR_2           = AMPL_G_C_2
							CTRE_SNR_2           = CTRE_G_C_2
							SGMA_SNR_2           = abs(SGMA_G_C_2)

							if CTRE_G_C_2_E == None:
								CTRE_G_C_2_E = 999999.99999
							else:
								pass
							if AMPL_G_C_2_E == None:
								AMPL_G_C_2_E = 999999.99999
							else:
								pass
							if SGMA_G_C_2_E == None:
								SGMA_G_C_2_E = 999999.99999
							else:
								pass
							if CTRE_G_C_2_cor == None:
								CTRE_G_C_2_cor = 999999.99999
							else:
								pass
							if AMPL_G_C_2_cor == None:
								AMPL_G_C_2_cor = 999999.99999
							else:
								pass
							if SGMA_G_C_2_cor == None:
								SGMA_G_C_2_cor = 999999.99999
							else:
								pass
							chisqr_C_2        = result_C_2.chisqr
							redchi_C_2        = result_C_2.redchi
							##inten_glx[mask_ft] = inten_glx[mask_ft] + OFST_G_O #OFFSET +
						except (RuntimeError,ValueError,TypeError):
							print colored('RuntimeError','cyan')
							popt_C_2, pcov_C_2 = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
							perr_C_2           = [999999.99999,999999.99999,999999.99999]
							CTRE_G_C_2         = 999999.99999
							AMPL_G_C_2         = 999999.99999
							SGMA_G_C_2         = 999999.99999
							FWHM_G_C_2         = 999999.99999
							EW_C_2             = 999999.99999
							EWE_C_2            = 999999.99999

							CTRE_G_C_2_E       = 999999.99999
							AMPL_G_C_2_E       = 999999.99999
							SGMA_G_C_2_E       = 999999.99999
							CTRE_G_C_2_cor     = 999999.99999
							AMPL_G_C_2_cor     = 999999.99999
							SGMA_G_C_2_cor     = 999999.99999
							chisqr_C_2         = 999999.99999
							redchi_C_2         = 999999.99999

							popt_O_2 ,pcov_O_2 = [999999.99999,999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999,999999.99999]
							perr_O_2           = [999999.99999,999999.99999,999999.99999,999999.99999]
							CTRE_G_O_2         = 999999.99999
							AMPL_G_O_2         = 999999.99999
							SGMA_G_O_2         = 999999.99999
							OFST_G_O_2         = 999999.99999
							FWHM_G_O_2         = 999999.99999
							EW_O_2             = 999999.99999
							EWE_O_2            = 999999.99999

							CTRE_G_O_2_E       = 999999.99999
							AMPL_G_O_2_E       = 999999.99999
							SGMA_G_O_2_E       = 999999.99999
							CTRE_G_O_2_cor     = 999999.99999
							AMPL_G_O_2_cor     = 999999.99999
							SGMA_G_O_2_cor     = 999999.99999
							OFST_G_O_2_cor     = 999999.99999
							chisqr_O_2         = 999999.99999
							redchi_O_2         = 999999.99999

							AMPL_SNR_2         = 999999.99999
							CTRE_SNR_2         = 999999.99999
							SGMA_SNR_2         = 999999.99999
						'''
						print colored('Cleaning Method','cyan')
						popt_C_2, pcov_C_2 = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
						perr_C_2           = [999999.99999,999999.99999,999999.99999]
						CTRE_G_C_2         = 999999.99999
						AMPL_G_C_2         = 999999.99999
						SGMA_G_C_2         = 999999.99999
						FWHM_G_C_2         = 999999.99999
						EW_C_2             = 999999.99999
						EWE_C_2            = 999999.99999

						CTRE_G_C_2_E       = 999999.99999
						AMPL_G_C_2_E       = 999999.99999
						SGMA_G_C_2_E       = 999999.99999
						CTRE_G_C_2_cor     = 999999.99999
						AMPL_G_C_2_cor     = 999999.99999
						SGMA_G_C_2_cor     = 999999.99999
						chisqr_C_2         = 999999.99999
						redchi_C_2         = 999999.99999

						popt_O_2 ,pcov_O_2 = [999999.99999,999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999,999999.99999]
						perr_O_2           = [999999.99999,999999.99999,999999.99999,999999.99999]
						CTRE_G_O_2         = 999999.99999
						AMPL_G_O_2         = 999999.99999
						SGMA_G_O_2         = 999999.99999
						OFST_G_O_2         = 999999.99999
						FWHM_G_O_2         = 999999.99999
						EW_O_2             = 999999.99999
						EWE_O_2            = 999999.99999

						CTRE_G_O_2_E       = 999999.99999
						AMPL_G_O_2_E       = 999999.99999
						SGMA_G_O_2_E       = 999999.99999
						CTRE_G_O_2_cor     = 999999.99999
						AMPL_G_O_2_cor     = 999999.99999
						SGMA_G_O_2_cor     = 999999.99999
						OFST_G_O_2_cor     = 999999.99999
						chisqr_O_2         = 999999.99999
						redchi_O_2         = 999999.99999

						AMPL_SNR_2         = 999999.99999
						CTRE_SNR_2         = 999999.99999
						SGMA_SNR_2         = 999999.99999						
						print
						print colored(specfile_glx,'cyan')
						print
						print colored(str(LINES[0][lines-1])+'-'+str(LINES[3][lines-1]),'yellow')
						print
						print colored(str(LINES[5][lines])+'_CGLC: ' + str(CTRE_G_C_2)  ,'yellow')
						print colored(str(LINES[5][lines])+'_AGLC: ' + str(AMPL_G_C_2)  ,'yellow')
						print colored(str(LINES[5][lines])+'_SGLC: ' + str(SGMA_G_C_2)  ,'yellow')
						print colored(str(LINES[5][lines])+'_FGLC: ' + str(FWHM_G_C_2)  ,'yellow')
						print colored(str(LINES[5][lines])+'_WGLC: ' + str(EW_C_2)      ,'yellow')
						print colored(str(LINES[5][lines])+'_EGLC: ' + str(EWE_C_2),'yellow')
						print
						print
						#inten_glx[mask_ft] = inten_glx[mask_ft] + OFST_G_O

						if fit_vls_hdr == True and fix_ctr_gau_2==False:
							Header_Add(specfile_glx,'BSF_FCT',str(fit_fnct)                         ,header_comment = 'Fit function')
							Header_Add(specfile_glx,'BSF_MTH',str(fit_type)                         ,header_comment = 'Fit method')
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CMO2',float(CTRE_G_O_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  2-1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AMO2',float(AMPL_G_O_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  2-1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_FMO2',float(FWHM_G_O_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 2-1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WMO2',float(EW_O_2)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   2-1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_EMO2',float(EWE_O_2)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  2-1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_OMO2',float(OFST_G_O_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ofst 2-1GF Offst' + str(fit_fnct) + '-' +str(fit_type))

							Header_Add(specfile_glx,str(LINES[5][lines])+'_CMC2',float(CTRE_G_C_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  2-1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AMC2',float(AMPL_G_C_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  2-1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_SMC2',float(SGMA_G_C_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 2-1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_FMC2',float(FWHM_G_C_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 2-1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WMC2',float(EW_C_2)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   2-1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_EMC2',float(EWE_C_2)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  2-1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CM2E',float(CTRE_G_C_2_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 2-1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AM2E',float(AMPL_G_C_2_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 2-1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_SM2E',float(SGMA_G_C_2_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 2-1GF Crct' + str(fit_fnct) + '-' +str(fit_type))

							Header_Add(specfile_glx,str(LINES[5][lines])+'_CHM2',float(chisqr_C_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 2-1GF' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CRM2',float(redchi_C_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines-1]) + ' Chi2 Reduced 2-1GF' + str(fit_fnct) + '-' +str(fit_type))

							print
							print colored('The fit (CTR-2-C & CTR-2-O) values will be added to the fits headers!','magenta')
							print
						else:
							print
							print colored('The fit (CTR-2-C & CTR-2-O) values will not be added to the fits headers!','magenta')
							print

						if uft_lne_vls == False and fit_vls_hdr == True and int_vlf_hdr==True:
							print
							print colored('Initial Guess Values G-2 for line Fitting will be recorded!','magenta')
							print colored('Info input parameters (pre_gauss_shf, pre_gauss_ctr) in Spec_Stk_Stack_0.4.py!','magenta')
							print
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WM02',float(L1_2) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-1-2 Wdt-Fit  1GF-IntVal')         #LINES-1  Wdt-Fit  1GF-IntVal      WIDTH-FIT
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WM02',float(L2_2) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-2-2 Wdt-Plt  1GF-IntVal')         #LINES-2  Wdt-Plt  1GF-IntVal      WIDTH-PLT
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CM02',float(L7_2) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-7-2 Ctr Fit Bnds  1GF-IntVal')    #LINES-7  Ctr Fit Bnds  1GF-IntVal CTR-FIT-BNDS
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CM02',float(L8_2) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-8-2 Ctr Fit Ofst  1GF-IntVal')    #LINES-8  Ctr Fit Ofst  1GF-IntVal CTR-OFFSET
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AM02',float(L10_2),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-10-2 Amp Fit Bnds  1GF-IntVal')   #LINES-10 Ctr Fit Amp   1GF-IntVal LNE_AMP_BNDS

							print
							print colored('Initial Values: ','magenta')
							print colored('1: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'magenta')					
							print colored(str(LINES[5][lines])+'_WM02' + ': ' + str(L1_2),'magenta')
							print colored(str(LINES[5][lines])+'_WM02' + ': ' + str(L2_2),'magenta')
							print colored(str(LINES[5][lines])+'_CM02' + ': ' + str(L7_2),'magenta')
							print colored(str(LINES[5][lines])+'_CM02' + ': ' + str(L8_2),'magenta')
							print colored(str(LINES[5][lines])+'_AM02' + ': ' + str(L10_2),'magenta')
							print
						else:
							print
							print colored('Initial Guess Values G-2 for line Fitting will NOT be recorded!','yellow')
							print
							pass							
						#################################################CENTRAL GAUSSIAN-2-C##################################################					
					elif fix_ctr_gau_2 == True:
						print
						print colored('2-CTR-gaussian already fitted!','yellow')
						print colored('Values from fits header','yellow')
						print colored(LINES[3][lines],'yellow')
						print
						try:
							CTRE_G_0_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CM02')#,float(CTRE_G_0) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'Ctr  1GF Crct')
							AMPL_G_0_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AM02')#,float(AMPL_G_0) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'Amp  1GF Crct')
							FWHM_G_0_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FM02')#,float(FWHM_G_0) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'FWHM 1GF Crct')
							EW_0_2        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WM02')#,float(EW_0)     ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'EW   1GF Crct')
							EWE_0_2       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EM02')#,float(EWE_0)    ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'EWE  1GF Crct')

							CTRE_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CMO2')#,float(CTRE_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ctr  1GF Offst' + str(fit_type))
							AMPL_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AMO2')#,float(AMPL_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Amp  1GF Offst' + str(fit_type))
							FWHM_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FMO2')#,float(FWHM_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' FWHM 1GF Offst' + str(fit_type))
							EW_O_2        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WMO2')#,float(EW_O)      ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EW   1GF Offst' + str(fit_type))
							EWE_O_2       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EMO2')#,float(EWE_O)     ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EWE  1GF Offst' + str(fit_type))
							OFST_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_OMO2')#,float(OFST_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ofst 1GF Offst' + str(fit_type))

							CTRE_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CMC2')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ctr  1GF Crct' + str(fit_type))
							AMPL_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AMC2')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Amp  1GF Crct' + str(fit_type))
							SGMA_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_SMC2')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Sigm 1GF Crct' + str(fit_type))
							FWHM_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FMC2')#,float(FWHM_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' FWHM 1GF Crct' + str(fit_type))
							EW_C_2        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WMC2')#,float(EW_C)      ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EW   1GF Crct' + str(fit_type))
							EWE_C_2       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EMC2')#,float(EWE_C)     ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EWE  1GF Crct' + str(fit_type))
							CTRE_G_C_2_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CMC2')#,float(CTRE_G_C_E),header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ctr  err 1GF Crct' + str(fit_type))
							AMPL_G_C_2_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_AMC2')#,float(AMPL_G_C_E),header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Amp  err 1GF Crct' + str(fit_type))
							SGMA_G_C_2_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_SMC2')#,float(SGMA_G_C_E),header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Sigm err 1GF Crct' + str(fit_type))

							chisqr_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CHM2')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Chi2 1GF' + str(fit_type))
							redchi_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CRM2')#,float(redchi_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Chi2 Reduced 1GF' + str(fit_type))

						except KeyError:
							print
							print colored ('Gaussian Fit Parameters are not found on Fits Header!','yellow')
							print colored ('File  : ' + specfile_glx,'yellow')
							print colored ('Header: ' + str(LINES[5][lines-1])+'_CF01','yellow')
							print colored ('Gotta Fit first before fixing a component (CTR)!','yellow')
							print colored ('Or UnFix (fix_ctr_gau_2=False) For Plotting!','yellow')
							print colored ('Quitting!','yellow')
							print
							CTRE_G_0_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CF02')#,float(CTRE_G_0) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'Ctr  1GF Crct')
							AMPL_G_0_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF02')#,float(AMPL_G_0) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'Amp  1GF Crct')
							FWHM_G_0_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FF02')#,float(FWHM_G_0) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'FWHM 1GF Crct')
							EW_0_2        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WF02')#,float(EW_0)     ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'EW   1GF Crct')
							EWE_0_2       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EF02')#,float(EWE_0)    ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'EWE  1GF Crct')

							CTRE_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLO2')#,float(CTRE_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ctr  1GF Offst' + str(fit_type))
							AMPL_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALO2')#,float(AMPL_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Amp  1GF Offst' + str(fit_type))
							FWHM_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FLO2')#,float(FWHM_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' FWHM 1GF Offst' + str(fit_type))
							EW_O_2        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WLO2')#,float(EW_O)      ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EW   1GF Offst' + str(fit_type))
							EWE_O_2       = Header_Get(specfile_glx,str(LINES[5][lines])+'_ELO2')#,float(EWE_O)     ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EWE  1GF Offst' + str(fit_type))
							OFST_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_OFO2')#,float(OFST_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ofst 1GF Offst' + str(fit_type))

							CTRE_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLC2')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ctr  1GF Crct' + str(fit_type))
							AMPL_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALC2')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Amp  1GF Crct' + str(fit_type))
							SGMA_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_SLC2')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Sigm 1GF Crct' + str(fit_type))
							FWHM_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FLC2')#,float(FWHM_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' FWHM 1GF Crct' + str(fit_type))
							EW_C_2        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WLC2')#,float(EW_C)      ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EW   1GF Crct' + str(fit_type))
							EWE_C_2       = Header_Get(specfile_glx,str(LINES[5][lines])+'_ELC2')#,float(EWE_C)     ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EWE  1GF Crct' + str(fit_type))
							CTRE_G_C_2_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CEC2')#,float(CTRE_G_C_E),header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ctr  err 1GF Crct' + str(fit_type))
							AMPL_G_C_2_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_AEC2')#,float(AMPL_G_C_E),header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Amp  err 1GF Crct' + str(fit_type))
							SGMA_G_C_2_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_SEC2')#,float(SGMA_G_C_E),header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Sigm err 1GF Crct' + str(fit_type))

							chisqr_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CHL2')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Chi2 1GF' + str(fit_type))
							redchi_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CRL2')#,float(redchi_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Chi2 Reduced 1GF' + str(fit_type))
					print
					print colored(str(LINES[0][lines-1])+'-'+str(LINES[3][lines-1])+'-CTR','magenta')
					print colored('From '+str(LINES[3][lines])+'-CTR','cyan')
					print
					print colored(str(LINES[5][lines])+'_CMC2: ' + str(CTRE_G_C_2)  ,'magenta')
					print colored(str(LINES[5][lines])+'_AMC2: ' + str(AMPL_G_C_2)  ,'magenta')
					print colored(str(LINES[5][lines])+'_SMC2: ' + str(SGMA_G_C_2)  ,'magenta')
					print colored(str(LINES[5][lines])+'_FMC2: ' + str(FWHM_G_C_2)  ,'magenta')
					print colored(str(LINES[5][lines])+'_WMC2: ' + str(EW_C_2)      ,'magenta')
					print colored(str(LINES[5][lines])+'_EMC2: ' + str(EWE_C_2),'magenta')
					print colored('Fit Values Center, Amplitude, Sigma ('+fit_type+'):','magenta')
					print colored(str(CTRE_G_C_2)+', '+str(AMPL_G_C_2)+', '+str(SGMA_G_C_2),'magenta')
					print
					##################################################CENTRAL GAUSSIAN-2###################################################	
					CTRE_G_0 = CTRE_G_0_1
					#####################################################PRE GAUSSIAN#################################################
					if fix_pre_gau == False and pst_shf_lim>0:
						###########################################DEFINING PRE-PST REGIONS##################################################
						if ofs_ctr_fit == True:
							print
							print colored('Using Fitted Center From Offset Fit to Redefine Fitting Region!','yellow')
							print
							lmb_min_lim_line_ft = (CTRE_G_0-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
							lmb_max_lim_line_ft = (CTRE_G_0+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]
							mask_ft_pre = (lambda_glx <= LINES[0][lines] - pre_shf_ctr + pre_shf_lim) & (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim)
							mask_ft_pst = (lambda_glx >= LINES[0][lines] + pst_shf_ctr - pst_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
							mask_ft_plp = (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
							X0_f2DG_indx_PRE       = np.where(inten_glx[mask_ft_pre]==(max(inten_glx[mask_ft_pre])))[0]
							X0_f2DG_indx_PST       = np.where(inten_glx[mask_ft_pst]==(max(inten_glx[mask_ft_pst])))[0]
						else:
							print
							print colored('Using Expected Line Center to Define Fitting Region!','yellow')
							print
							mask_ft_pre = (lambda_glx <= LINES[0][lines] - pre_shf_ctr + pre_shf_lim) & (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim)
							mask_ft_pst = (lambda_glx >= LINES[0][lines] + pst_shf_ctr - pst_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
							mask_ft_plp = (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
							X0_f2DG_indx_PRE       = np.where(inten_glx[mask_ft_pre]==(max(inten_glx[mask_ft_pre])))[0]
							X0_f2DG_indx_PST       = np.where(inten_glx[mask_ft_pst]==(max(inten_glx[mask_ft_pst])))[0]
							
						print
						print colored('Region limits for fitting.','yellow')
						print colored('Line Center    : ' + str(LINES[0][lines]),'cyan')
						print colored('pre_shf_ctr    : ' + str(pre_shf_ctr),'cyan')
						print colored('pre_shf_lim    : ' + str(pre_shf_lim),'cyan')
						print colored('Line Center    : ' + str(LINES[0][lines] - pre_shf_ctr),'cyan')
						print colored('Lower Limit    : ' + str(LINES[0][lines] - (pre_shf_ctr-pre_shf_lim)),'cyan')
						print colored('Upper Limit    : ' + str(LINES[0][lines] - (pre_shf_ctr+pre_shf_lim)),'cyan')
						print 
						print colored('Central    : ' + str(LINES[0][lines]),'cyan')
						print colored('Central-PRE: ' + str(pre_shf_ctr) + '-' + str(LINES[0][lines]-pre_shf_ctr),'cyan')
						print colored('Central+PST: ' + str(pst_shf_ctr) + '-' + str(LINES[0][lines]+pst_shf_ctr),'cyan')
						print
						print colored('Limits:','cyan')
						print 'Central: lambda_glx >= ',lmb_min_lim_line_ft  ,'-','lambda_glx <= ',lmb_max_lim_line_ft
						print 'PRE    : lambda_glx >= ',LINES[0][lines] - pre_shf_ctr - pre_shf_lim,'-','lambda_glx <= ',LINES[0][lines] - pre_shf_ctr + pre_shf_lim
						print 'PST    : lambda_glx >= ',LINES[0][lines] + pst_shf_ctr - pst_shf_lim,'-','lambda_glx <= ',LINES[0][lines] + pst_shf_ctr + pst_shf_lim
						print
						print 'Total  : lambda_glx >= ',LINES[0][lines] - pre_shf_ctr - pre_shf_lim,'-','lambda_glx <= ',LINES[0][lines] - pre_shf_ctr + pst_shf_lim
						print
						###########################################DEFINING PRE-PST REGIONS##################################################
						X0_f2DG_indx_PRE       = np.where(inten_glx[mask_ft_pre]==(max(inten_glx[mask_ft_pre])))[0]
						x_a = lambda_glx[mask_ft_pre][X0_f2DG_indx_PRE]
						y_a = inten_glx[mask_ft_pre][X0_f2DG_indx_PRE]
						#inten_glx[mask_ft_plp] = inten_glx[mask_ft_plp] - OFST_G_O #OFFSET -
	 					'''
	 					try:
							print
							print colored('1-Fitting gaussian before line','cyan')
							print
							X0_f2DG_indx_PRE       = np.where(inten_glx[mask_ft_pre]==(max(inten_glx[mask_ft_pre])))[0]
							A_f2DG_PRE             = (max(inten_glx[mask_ft_pre])-1)
							X0_f2DG_PRE            = LINES[0][lines] - pre_shf_ctr
							SIGMA_f2DG_PRE         = SIGMA_f2DG/2.5
							initial_guess_C_PRE    = (X0_f2DG_PRE,A_f2DG_PRE,SIGMA_f2DG_PRE)
							
							x_a = lambda_glx[mask_ft_pre][X0_f2DG_indx_PRE]
							y_a = inten_glx[mask_ft_pre][X0_f2DG_indx_PRE]
							
							print
							print colored('Initial Guess Values PRE : ','cyan')
							print colored(initial_guess_C_PRE,'cyan')
							print X0_f2DG,pre_shf_ctr,X0_f2DG-pre_shf_ctr
							print
							
							gmodel_C_PRE           = Model(func_1D_Gaussian_Emm)
							gmodel_C_PRE.set_param_hint('X_0'  , value=X0_f2DG_PRE , min=X0_f2DG_PRE-(X0_f2DG_PRE*LINES[7][lines]), max=X0_f2DG_PRE+(X0_f2DG_PRE*LINES[7][lines]))
							#gmodel_C_PRE.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
							gmodel_C_PRE.set_param_hint('A'    , value=A_f2DG_PRE  , min=A_f2DG_PRE -(A_f2DG_PRE*LINES[10][lines]), max=A_f2DG_PRE +(A_f2DG_PRE*LINES[10][lines]))#min=A_f2DG-0.001, max=A_f2DG)
							gmodel_C_PRE.set_param_hint('SIGMA', value=SIGMA_f2DG_PRE)
							pars_C_PRE             = gmodel_C_PRE.make_params()
							result_C_PRE           = gmodel_C_PRE.fit(inten_glx[mask_ft_pre],pars_C_PRE,
													X=lambda_glx[mask_ft_pre],X_0=X0_f2DG_PRE,A=A_f2DG_PRE,SIGMA=SIGMA_f2DG_PRE,
													nan_policy = 'omit')
							CTRE_G_C_PRE           = result_C_PRE.params['X_0'].value
							AMPL_G_C_PRE           = result_C_PRE.params['A'].value
							SGMA_G_C_PRE           = abs(result_C_PRE.params['SIGMA'].value)
							FWHM_G_C_PRE           = lw_sgma2fwhm(SGMA_G_C_PRE)

							W_C_PRE                = integrate.quad(lambda x: AMPL_G_C_PRE*np.exp(-((x)**2)/(2*SGMA_G_C_PRE**2)), -np.inf, np.inf)
							EW_C_PRE               = np.round(abs(np.asarray(W_C_PRE[0])),10)
							EWE_C_PRE              = np.round(abs(np.asarray(W_C_PRE[1])),10)
							data_fitted_C_PRE      = func_1D_Gaussian_Emm((lambda_glx[mask_ft_pre]), CTRE_G_C_PRE,AMPL_G_C_PRE,SGMA_G_C_PRE)
							
							CTRE_G_C_PRE_E         = result_C_PRE.params['X_0'].stderr
							AMPL_G_C_PRE_E         = result_C_PRE.params['A'].stderr
							SGMA_G_C_PRE_E         = result_C_PRE.params['SIGMA'].stderr
							
							CTRE_G_C_PRE_cor       = result_C_PRE.params['X_0'].correl
							AMPL_G_C_PRE_cor       = result_C_PRE.params['A'].correl
							SGMA_G_C_PRE_cor       = result_C_PRE.params['SIGMA'].correl
							
							AMPL_SNR               = AMPL_G_C_PRE
							CTRE_SNR               = CTRE_G_C_PRE
							SGMA_SNR               = abs(SGMA_G_C_PRE)
							
							if CTRE_G_C_PRE_E == None or np.isnan(CTRE_G_C_PRE_E):
								CTRE_G_C_PRE_E = 999999.99999
							else:
								pass
							if AMPL_G_C_PRE_E == None:
								AMPL_G_C_PRE_E = 999999.99999
							else:
								pass
							if SGMA_G_C_PRE_E == None:
								SGMA_G_C_PRE_E = 999999.99999
							else:
								pass
							if CTRE_G_C_PRE_cor == None:
								CTRE_G_C_PRE_cor = 999999.99999
							else:
								pass
							if AMPL_G_C_PRE_cor == None:
								AMPL_G_C_PRE_cor = 999999.99999
							else:
								pass
							if SGMA_G_C_PRE_cor == None:
								SGMA_G_C_PRE_cor = 999999.99999
							else:
								pass
							chisqr_C_PRE           = result_C_PRE.chisqr
							redchi_C_PRE           = result_C_PRE.redchi
							
							
							W_C_PR1    = integrate.quad(lambda x: AMPL_G_C_PRE*np.exp(-((x)**2)/(2*SGMA_G_C_PRE**2)), x_a, np.inf)
							EW_C_PR1   = np.round(abs(np.asarray(W_C_PR1[0])),10)
							EWE_C_PR1  = np.round(abs(np.asarray(W_C_PR1[1])),10)
							#inten_glx[mask_ft_plp] = inten_glx[mask_ft_plp] + OFST_G_O #OFFSET +
						#except (RuntimeError,ValueError,TypeError):
						except (RuntimeError,ValueError,TypeError):
							print colored('RuntimeError','cyan')
							popt_C_PRE, pcov_C_PRE  = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
							perr_C_PRE          = [999999.99999,999999.99999,999999.99999]
							CTRE_G_C_PRE        = 999999.99999
							AMPL_G_C_PRE        = 999999.99999
							SGMA_G_C_PRE        = 999999.99999
							FWHM_G_C_PRE        = 999999.99999
							EW_C_PRE            = 999999.99999
							EWE_C_PRE           = 999999.99999
							
							CTRE_G_C_PRE_E      = 999999.99999
							AMPL_G_C_PRE_E      = 999999.99999
							SGMA_G_C_PRE_E      = 999999.99999
							CTRE_G_C_PRE_cor    = 999999.99999
							AMPL_G_C_PRE_cor    = 999999.99999
							SGMA_G_C_PRE_cor    = 999999.99999
							chisqr_C_PRE        = 999999.99999
							redchi_C_PRE        = 999999.99999
						'''
						print colored('Cleaning Method','cyan')
						popt_C_PRE, pcov_C_PRE  = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
						perr_C_PRE          = [999999.99999,999999.99999,999999.99999]
						CTRE_G_C_PRE        = 999999.99999
						AMPL_G_C_PRE        = 999999.99999
						SGMA_G_C_PRE        = 999999.99999
						FWHM_G_C_PRE        = 999999.99999
						EW_C_PRE            = 999999.99999
						EWE_C_PRE           = 999999.99999
						
						CTRE_G_C_PRE_E      = 999999.99999
						AMPL_G_C_PRE_E      = 999999.99999
						SGMA_G_C_PRE_E      = 999999.99999
						CTRE_G_C_PRE_cor    = 999999.99999
						AMPL_G_C_PRE_cor    = 999999.99999
						SGMA_G_C_PRE_cor    = 999999.99999
						chisqr_C_PRE        = 999999.99999
						redchi_C_PRE        = 999999.99999						
							
						if fit_vls_hdr == True and fix_pre_gau == False:						
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CHML',float(chisqr_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 1GF' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CRML',float(redchi_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 Reduced 1GF' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CGM1',float(CTRE_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AGM1',float(AMPL_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_SGM1',float(SGMA_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_FGM1',float(FWHM_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WGM1',float(EW_C_PRE)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_EGM1',float(EWE_C_PRE)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CME1',float(CTRE_G_C_PRE_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AME1',float(AMPL_G_C_PRE_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_SME1',float(SGMA_G_C_PRE_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))
							
							Header_Add(specfile_glx,str(LINES[5][lines])+'_XAM1',float(x_a),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PRE GAU-LNR X1 COO')
							Header_Add(specfile_glx,str(LINES[5][lines])+'_YAM1',float(y_a),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PRE GAU-LNR Y1 COO')
							print
							print colored('The fit (PRE) values will be added to the fits headers!','magenta')
							print
						else:
							print
							print colored('The fit (PRE) values will not be added to the fits headers!','magenta')
							print
							pass
						if uft_lne_vls == False and fit_vls_hdr == True and int_vlf_hdr==True:
							print
							print colored('Initial Guess Values for line Fitting will be recorded!','yellow')
							print colored('Info input parameters (pre_gauss_shf, pre_gauss_ctr) in Spec_Stk_Stack_0.4.py!','yellow')
							print
							Header_Add(specfile_glx,str(LINES[5][lines])+'_GSM1',float(pre_shf_lim) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Shf from expt ctr wvl for PRE G-1')
							Header_Add(specfile_glx,str(LINES[5][lines])+'_GCM1',float(pre_shf_ctr) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Gaussian Ctr Int Val for PRE G-1')
						else:
							print
							print colored('Initial Guess Values for line Fitting will NOT be recorded!','yellow')
							print
							pass
						#inten_glx[mask_ft_plp] = inten_glx[mask_ft_plp] + OFST_G_O #OFFSET -						
					elif fix_pre_gau == True or (fix_pre_gau == False and pre_shf_lim<=0):
						try:
							print
							print colored('1 PRE-gaussian already fitted!','yellow')
							print colored('Values from fits header','yellow')
							chisqr_C       = Header_Get(specfile_glx,str(LINES[5][lines])+'_CHML')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 1GF' + str(fit_type))
							redchi_C       = Header_Get(specfile_glx,str(LINES[5][lines])+'_CRML')#,float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 Reduced 1GF' + str(fit_type))
							CTRE_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGM1')#,float(CTRE_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
							AMPL_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGM1')#,float(AMPL_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
							SGMA_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGM1')#,float(SGMA_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
							FWHM_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGM1')#,float(FWHM_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
							EW_C_PRE       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGM1')#,float(EW_C_PRE)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
							EWE_C_PRE      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGM1')#,float(EWE_C_PRE)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
							CTRE_G_C_PRE_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_CME1')#,float(CTRE_G_C_PRE_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
							AMPL_G_C_PRE_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_AME1')#,float(AMPL_G_C_PRE_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
							SGMA_G_C_PRE_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_SME1')#,float(SGMA_G_C_PRE_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))
							
							x_a            = Header_Get(specfile_glx,str(LINES[5][lines])+'_XAM1')#,float(x_a),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PRE GAU-LNR X1 COO')
							y_a            = Header_Get(specfile_glx,str(LINES[5][lines])+'_YAM1')#,float(y_a),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PRE GAU-LNR Y1 COO')
						
							pre_shf_lim    = Header_Get(specfile_glx,str(LINES[5][lines])+'_GSM1')#,float(pre_shf_lim) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Shf from expt ctr wvl for PRE G-1')
							pre_shf_ctr    = Header_Get(specfile_glx,str(LINES[5][lines])+'_GCM1')#,float(pre_shf_ctr) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Gaussian Ctr Int Val for PRE G-1')
							
						except KeyError:
							print
							print colored ('Gaussian Fit Parameters are not found on Fits Header!' ,'yellow')
							print colored ('File  : ' + specfile_glx,'yellow')
							print colored ('Header: ' + str(LINES[5][lines])+'_CF0M','yellow')
							print colored ('Gotta Fit first before fixing a component (PRE)!','yellow')
							print colored ('Or UnFix (fix_pre_gau=False) For Plotting!','yellow')
							print colored ('Quitting!','yellow')
							print
							quit()
					print
					print colored(str(LINES[0][lines])+'-'+str(LINES[3][lines])+'-PRE','cyan')
					print
					print '******************************************************************************'
					print colored('Boundaries for Gaussian Fitting (PRE-CTR): ' + str(pre_shf_ctr),'cyan')
					print colored('Boundaries for Gaussian Fitting (PRE-LIM): ' + str(pre_shf_lim),'cyan')
					print '******************************************************************************'					
					print
					print colored(str(LINES[5][lines])+'_CGM1: ' + str(CTRE_G_C_PRE)  ,'cyan')
					print colored(str(LINES[5][lines])+'_AGM1: ' + str(AMPL_G_C_PRE)  ,'cyan')
					print colored(str(LINES[5][lines])+'_SGM1: ' + str(SGMA_G_C_PRE)  ,'cyan')
					print colored(str(LINES[5][lines])+'_FGM1: ' + str(FWHM_G_C_PRE)  ,'cyan')
					print colored(str(LINES[5][lines])+'_WGM1: ' + str(EW_C_PRE)      ,'cyan')
					print colored(str(LINES[5][lines])+'_EGM1: ' + str(EWE_C_PRE),'cyan')
					print
					print colored(str(LINES[5][lines])+'_XAM1 : ' + str(x_a),'cyan')
					print colored(str(LINES[5][lines])+'_YAM1 : ' + str(y_a),'cyan')
					print colored(str(LINES[5][lines])+'_GSM1 : ' + str(pre_shf_lim),'cyan')
					print colored(str(LINES[5][lines])+'_GCM1 : ' + str(pre_shf_ctr),'cyan')
					print
					print colored('Fit Values (PRE) Center, Amplitude, Sigma ('+fit_type+'):','cyan')
					print colored(str(CTRE_G_C_PRE)+', '+str(AMPL_G_C_PRE)+', '+str(SGMA_G_C_PRE),'cyan')
					print
					#####################################################PRE GAUSSIAN#################################################
					###################################################POST GAUSSIAN##################################################
					if fix_pst_gau == False and pst_shf_lim>0:
						###########################################DEFINING PRE-PST REGIONS##################################################
						if ofs_ctr_fit == True:
							print
							print colored('Using Fitted Center From Offset Fit to Redefine Fitting Region!','yellow')
							print
							lmb_min_lim_line_ft = (CTRE_G_0-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
							lmb_max_lim_line_ft = (CTRE_G_0+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]
							mask_ft_pre = (lambda_glx <= LINES[0][lines] - pre_shf_ctr + pre_shf_lim) & (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim)
							mask_ft_pst = (lambda_glx >= LINES[0][lines] + pst_shf_ctr - pst_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
							mask_ft_plp = (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
							X0_f2DG_indx_PRE       = np.where(inten_glx[mask_ft_pre]==(max(inten_glx[mask_ft_pre])))[0]
							X0_f2DG_indx_PST       = np.where(inten_glx[mask_ft_pst]==(max(inten_glx[mask_ft_pst])))[0]
						else:
							print
							print colored('Using Expected Line Center to Define Fitting Region!','yellow')
							print
							mask_ft_pre = (lambda_glx <= LINES[0][lines] - pre_shf_ctr + pre_shf_lim) & (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim)
							mask_ft_pst = (lambda_glx >= LINES[0][lines] + pst_shf_ctr - pst_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
							mask_ft_plp = (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
							X0_f2DG_indx_PRE       = np.where(inten_glx[mask_ft_pre]==(max(inten_glx[mask_ft_pre])))[0]
							X0_f2DG_indx_PST       = np.where(inten_glx[mask_ft_pst]==(max(inten_glx[mask_ft_pst])))[0]
							
						print
						print colored('Region limits for fitting.','yellow')
						print colored('Line Center    : ' + str(LINES[0][lines]),'cyan')
						print colored('pst_shf_ctr    : ' + str(pst_shf_ctr),'cyan')
						print colored('pst_shf_lim    : ' + str(pst_shf_lim),'cyan')
						print colored('Line Center    : ' + str(LINES[0][lines] + pst_shf_ctr),'cyan')
						print colored('Lower Limit    : ' + str(LINES[0][lines] - (pst_shf_ctr-pst_shf_lim)),'cyan')
						print colored('Upper Limit    : ' + str(LINES[0][lines] - (pst_shf_ctr+pst_shf_lim)),'cyan')
						print 
						print colored('Central    : ' + str(LINES[0][lines]),'cyan')
						print colored('Central-PRE: ' + str(pre_shf_ctr) + '-' + str(LINES[0][lines]-pre_shf_ctr),'cyan')
						print colored('Central+PST: ' + str(pst_shf_ctr) + '-' + str(LINES[0][lines]+pst_shf_ctr),'cyan')
						print
						print colored('Limits:','yellow')
						print 'Central: lambda_glx >= ',lmb_min_lim_line_ft  ,'-','lambda_glx <= ',lmb_max_lim_line_ft
						print 'PRE    : lambda_glx >= ',LINES[0][lines] - pre_shf_ctr-pre_shf_lim,'-','lambda_glx <= ',LINES[0][lines] - pre_shf_ctr+pre_shf_lim
						print 'PST    : lambda_glx >= ',LINES[0][lines] + pst_shf_ctr-pst_shf_lim,'-','lambda_glx <= ',LINES[0][lines] + pst_shf_ctr+pst_shf_lim
						print
						print 'Total  : lambda_glx >= ',LINES[0][lines] - pre_shf_ctr-pre_shf_lim,'-','lambda_glx <= ',LINES[0][lines] - pre_shf_ctr+pst_shf_lim
						print
						###########################################DEFINING PRE-PST REGIONS##################################################						
						X0_f2DG_indx_PST       = np.where(inten_glx[mask_ft_pst]==(max(inten_glx[mask_ft_pst])))[0]
						x_b = lambda_glx[mask_ft_pst][X0_f2DG_indx_PST]
						y_b = inten_glx[mask_ft_pst][X0_f2DG_indx_PST]
						'''
						try:
							print colored('2-Fitting gaussian after line','cyan')
							#inten_glx[mask_ft_plp] = inten_glx[mask_ft_plp] - OFST_G_O #OFFSET
							X0_f2DG_indx_PST       = np.where(inten_glx[mask_ft_pst]==(max(inten_glx[mask_ft_pst])))[0]
							A_f2DG_PST             = (max(inten_glx[mask_ft_pst])-1)
							X0_f2DG_PST            = LINES[0][lines] + pst_shf_ctr#
							SIGMA_f2DG_PST         = SIGMA_f2DG/2
							initial_guess_C_PST    = (X0_f2DG_PST,A_f2DG_PST,SIGMA_f2DG_PST)#,max(inten_glx[mask_ft_pst])-1)
							
							print
							print colored('Initial Guess Values PST : ','cyan')
							print colored(initial_guess_C_PST,'cyan')
							print
							
							gmodel_C_PST           = Model(func_1D_Gaussian_Emm)
							gmodel_C_PST.set_param_hint('X_0'  , value=X0_f2DG_PST , min=X0_f2DG_PST-(X0_f2DG_PST*LINES[7][lines]), max=X0_f2DG_PST+(X0_f2DG_PST*LINES[7][lines]))
							#gmodel_C_PST.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
							gmodel_C_PST.set_param_hint('A'    , value=A_f2DG_PST  , min=A_f2DG_PST -(A_f2DG_PST*LINES[10][lines]), max=A_f2DG_PST +(A_f2DG_PST*LINES[10][lines]))#min=A_f2DG_PST-0.001, max=A_f2DG_PST)
							gmodel_C_PST.set_param_hint('SIGMA', value=SIGMA_f2DG_PST)
							pars_C_PST             = gmodel_C_PST.make_params()
							result_C_PST           = gmodel_C_PST.fit(inten_glx[mask_ft_pst],pars_C_PST,
													X=lambda_glx[mask_ft_pst],X_0=X0_f2DG_PST,A=A_f2DG_PST,SIGMA=SIGMA_f2DG_PST,
													nan_policy = 'omit')
							CTRE_G_C_PST           = result_C_PST.params['X_0'].value
							AMPL_G_C_PST           = result_C_PST.params['A'].value
							SGMA_G_C_PST           = abs(result_C_PST.params['SIGMA'].value)
							FWHM_G_C_PST           = lw_sgma2fwhm(SGMA_G_C_PST)

							W_C_PST                = integrate.quad(lambda x: AMPL_G_C_PST*np.exp(-((x)**2)/(2*SGMA_G_C_PST**2)), -np.inf, np.inf)
							EW_C_PST               = np.round(abs(np.asarray(W_C_PST[0])),10)
							EWE_C_PST              = np.round(abs(np.asarray(W_C_PST[1])),10)
							data_fitted_C_PST      = func_1D_Gaussian_Emm((lambda_glx[mask_ft_pst]), CTRE_G_C_PST,AMPL_G_C_PST,SGMA_G_C_PST)
							
							CTRE_G_C_PST_E         = result_C_PST.params['X_0'].stderr
							AMPL_G_C_PST_E         = result_C_PST.params['A'].stderr
							SGMA_G_C_PST_E         = result_C_PST.params['SIGMA'].stderr
							
							CTRE_G_C_PST_cor       = result_C_PST.params['X_0'].correl
							AMPL_G_C_PST_cor       = result_C_PST.params['A'].correl
							SGMA_G_C_PST_cor       = result_C_PST.params['SIGMA'].correl
							
							AMPL_SNR           = AMPL_G_C_PST
							CTRE_SNR           = CTRE_G_C_PST
							SGMA_SNR           = abs(SGMA_G_C_PST)
							
							if CTRE_G_C_PST_E == None:
								CTRE_G_C_PST_E = 999999.99999
							else:
								pass
							if AMPL_G_C_PST_E == None:
								AMPL_G_C_PST_E = 999999.99999
							else:
								pass
							if SGMA_G_C_PST_E == None:
								SGMA_G_C_PST_E = 999999.99999
							else:
								pass
							if CTRE_G_C_PST_cor == None:
								CTRE_G_C_PST_cor = 999999.99999
							else:
								pass
							if AMPL_G_C_PST_cor == None:
								AMPL_G_C_PST_cor = 999999.99999
							else:
								pass
							if SGMA_G_C_PST_cor == None:
								SGMA_G_C_PST_cor = 999999.99999
							else:
								pass
							chisqr_C_PST           = result_C_PST.chisqr
							redchi_C_PST           = result_C_PST.redchi
							
							W_C_PS2    = integrate.quad(lambda x: AMPL_G_C_PST*np.exp(-((x)**2)/(2*SGMA_G_C_PST**2)), -np.inf, x_b)
							EW_C_PS2   = np.round(abs(np.asarray(W_C_PS2[0])),10)
							EWE_C_PS2  = np.round(abs(np.asarray(W_C_PS2[1])),10)
							#inten_glx[mask_ft_plp] = inten_glx[mask_ft_plp] - OFST_G_O #OFFSET +
						except (RuntimeError,ValueError,TypeError):
							print colored('RuntimeError','cyan')
							popt_C_PST, pcov_C_PST  = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
							perr_C_PST          = [999999.99999,999999.99999,999999.99999]
							CTRE_G_C_PST        = 999999.99999
							AMPL_G_C_PST        = 999999.99999
							SGMA_G_C_PST        = 999999.99999
							FWHM_G_C_PST        = 999999.99999
							EW_C_PST            = 999999.99999
							EWE_C_PST           = 999999.99999
							
														
							CTRE_G_C_PST_E      = 999999.99999
							AMPL_G_C_PST_E      = 999999.99999
							SGMA_G_C_PST_E      = 999999.99999
							CTRE_G_C_PST_cor    = 999999.99999
							AMPL_G_C_PST_cor    = 999999.99999
							SGMA_G_C_PST_cor    = 999999.99999
							chisqr_C_PST        = 999999.99999
							redchi_C_PST        = 999999.99999								
						'''
						print colored('Cleaning Method','cyan')
						popt_C_PST, pcov_C_PST  = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
						perr_C_PST          = [999999.99999,999999.99999,999999.99999]
						CTRE_G_C_PST        = 999999.99999
						AMPL_G_C_PST        = 999999.99999
						SGMA_G_C_PST        = 999999.99999
						FWHM_G_C_PST        = 999999.99999
						EW_C_PST            = 999999.99999
						EWE_C_PST           = 999999.99999
						
													
						CTRE_G_C_PST_E      = 999999.99999
						AMPL_G_C_PST_E      = 999999.99999
						SGMA_G_C_PST_E      = 999999.99999
						CTRE_G_C_PST_cor    = 999999.99999
						AMPL_G_C_PST_cor    = 999999.99999
						SGMA_G_C_PST_cor    = 999999.99999
						chisqr_C_PST        = 999999.99999
						redchi_C_PST        = 999999.99999						
						if fit_vls_hdr == True and fix_pst_gau == False:
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CGM2',float(CTRE_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AGM2',float(AMPL_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_SGM2',float(SGMA_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_FGM2',float(FWHM_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WGM2',float(EW_C_PST)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_EGM2',float(EWE_C_PST)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CME2',float(CTRE_G_C_PST_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AME2',float(AMPL_G_C_PST_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_SME2',float(SGMA_G_C_PST_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))
							
							Header_Add(specfile_glx,str(LINES[5][lines])+'_XAM2',float(x_b),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PST GAU-LNR X2 COO')
							Header_Add(specfile_glx,str(LINES[5][lines])+'_YAM2',float(y_b),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PST GAU-LNR Y2 COO')
						else:
							print
							print colored('The fit (PST) values will not be added to the fits headers!','magenta')
							print
							pass
						if uft_lne_vls == False and fit_vls_hdr == True and int_vlf_hdr==True:
							print
							print colored('Initial Guess Values for line Fitting will be recorded!','yellow')
							print colored('Info input parameters (pre_gauss_shf, pre_gauss_ctr) in Spec_Stk_Stack_0.4.py!','yellow')
							print
							Header_Add(specfile_glx,str(LINES[5][lines])+'_GSM2',float(pst_shf_lim) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Shf from expt ctr wvl for PST G-2')
							Header_Add(specfile_glx,str(LINES[5][lines])+'_GCM2',float(pst_shf_ctr) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Gaussian Ctr Int Val for PST G-2')
						else:
							print
							print colored('Initial Guess Values for line Fitting will NOT be recorded!','yellow')
							print
							pass
						#inten_glx[mask_ft_plp] = inten_glx[mask_ft_plp] + OFST_G_O #OFFSET -
					elif fix_pst_gau == True or (fix_pst_gau == False and pst_shf_lim<=0):
						try:
							print
							print colored('2 PST-gaussian already fitted!','yellow')
							print colored('Values from fits header','yellow')
							CTRE_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGM2')#,float(CTRE_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
							AMPL_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGM2')#,float(AMPL_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
							SGMA_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGM2')#,float(SGMA_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
							FWHM_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGM2')#,float(FWHM_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
							EW_C_PST       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGM2')#,float(EW_C_PST)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
							EWE_C_PST      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGM2')#,float(EWE_C_PST)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
							CTRE_G_C_PST_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_CME2')#,float(CTRE_G_C_PST_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
							AMPL_G_C_PST_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_AME2')#,float(AMPL_G_C_PST_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
							SGMA_G_C_PST_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_SME2')#,float(SGMA_G_C_PST_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))
							
							x_b            = Header_Get(specfile_glx,str(LINES[5][lines])+'_XAM2')#,float(x_b),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PST GAU-LNR X2 COO')
							y_b            = Header_Get(specfile_glx,str(LINES[5][lines])+'_YAM2')#,float(y_b),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PST GAU-LNR Y2 COO')
							
							pst_shf_lim    = Header_Get(specfile_glx,str(LINES[5][lines])+'_GSM2')#,float(pre_shf_lim) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Shf from expt ctr wvl for PRE G-1')
							pst_shf_ctr    = Header_Get(specfile_glx,str(LINES[5][lines])+'_GCM2')#,float(pre_shf_ctr) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Gaussian Ctr Int Val for PRE G-1')
						except KeyError:
							print
							print colored ('Gaussian Fit Parameters are not found on Fits Header!','yellow')
							print colored ('File  : ' + specfile_glx,'yellow')
							print colored ('Header: ' + str(LINES[5][lines])+'_CF0M','yellow')
							print colored ('Gotta Fit first before fixing a component (PST)!','yellow')
							print colored ('Or UnFix (fix_pst_gau=False) For Plotting!','yellow')
							print colored ('Quitting!','yellow')
							print
							quit()
					print
					print colored(str(LINES[0][lines])+'-'+str(LINES[3][lines])+'-PST','magenta')
					print
					print '******************************************************************************'
					print colored('Boundaries for Gaussian Fitting (PST-CTR): ' + str(pst_shf_ctr),'magenta')					
					print colored('Boundaries for Gaussian Fitting (PST-LIM): ' + str(pst_shf_lim),'magenta')
					print '******************************************************************************'
					print
					print colored(str(LINES[5][lines])+'_CGM2: ' + str(CTRE_G_C_PST)  ,'magenta')
					print colored(str(LINES[5][lines])+'_AGM2: ' + str(AMPL_G_C_PST)  ,'magenta')
					print colored(str(LINES[5][lines])+'_SGM2: ' + str(SGMA_G_C_PST)  ,'magenta')
					print colored(str(LINES[5][lines])+'_FGM2: ' + str(FWHM_G_C_PST)  ,'magenta')
					print colored(str(LINES[5][lines])+'_WGM2: ' + str(EW_C_PST)      ,'magenta')
					print colored(str(LINES[5][lines])+'_EGM2: ' + str(EWE_C_PST),'magenta')
					print
					print colored(str(LINES[5][lines])+'_GSM2 : ' + str(pst_shf_lim),'magenta')
					print colored(str(LINES[5][lines])+'_GCM2 : ' + str(pst_shf_ctr),'magenta')
					print colored(str(LINES[5][lines])+'_XAM2 : ' + str(x_b),'magenta')
					print colored(str(LINES[5][lines])+'_YAM2 : ' + str(y_b),'magenta')
					print
					print colored('Fit Values (PST) Center, Amplitude, Sigma ('+fit_type+'):','magenta')
					print colored(str(CTRE_G_C_PST)+', '+str(AMPL_G_C_PST)+', '+str(SGMA_G_C_PST),'magenta')
					print					
					###################################################POST GAUSSIAN##################################################										

					###################################################MDL GAUSSIAN###################################################
					if fix_mdl_gau == False:# and mdl_shf_lim>0:
						if mdl_shf_lim>0:
							#########################################DEFINING PRE-PST-MDL REGIONS################################################
							if ofs_ctr_fit == True:
								print
								print colored('Using Fitted Center From Offset Fit to Redefine Fitting Region!','yellow')
								print
								lmb_min_lim_line_ft = (CTRE_G_0-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
								lmb_max_lim_line_ft = (CTRE_G_0+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]
								mask_ft_pre = (lambda_glx <= LINES[0][lines] - pre_shf_ctr + pre_shf_lim) & (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim)
								mask_ft_pst = (lambda_glx >= LINES[0][lines] + pst_shf_ctr - pst_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
								mask_ft_plp = (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
								mask_ft_mdl = (lambda_glx >= LINES[0][lines] + mdl_shf_ctr - mdl_shf_lim) & (lambda_glx <= LINES[0][lines] + mdl_shf_ctr + mdl_shf_lim)
								X0_f2DG_indx_PRE       = np.where(inten_glx[mask_ft_pre]==(max(inten_glx[mask_ft_pre])))[0]
								X0_f2DG_indx_PST       = np.where(inten_glx[mask_ft_pst]==(max(inten_glx[mask_ft_pst])))[0]
								X0_f2DG_indx_MDL       = np.where(inten_glx[mask_ft_mdl]==(max(inten_glx[mask_ft_mdl])))[0]
							else:
								print
								print colored('Using Expected Line Center to Define Fitting Region!','yellow')
								print
								mask_ft_pre = (lambda_glx <= LINES[0][lines] - pre_shf_ctr + pre_shf_lim) & (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim)
								mask_ft_pst = (lambda_glx >= LINES[0][lines] + pst_shf_ctr - pst_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
								mask_ft_plp = (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
								mask_ft_mdl = (lambda_glx >= LINES[0][lines] + mdl_shf_ctr - mdl_shf_lim) & (lambda_glx <= LINES[0][lines] + mdl_shf_ctr + mdl_shf_lim)
								X0_f2DG_indx_PRE       = np.where(inten_glx[mask_ft_pre]==(max(inten_glx[mask_ft_pre])))[0]
								X0_f2DG_indx_PST       = np.where(inten_glx[mask_ft_pst]==(max(inten_glx[mask_ft_pst])))[0]
								X0_f2DG_indx_MDL       = np.where(inten_glx[mask_ft_mdl]==(max(inten_glx[mask_ft_mdl])))[0]
							print
							print colored('Region limits for fitting.','yellow')
							print colored('Line Center    : ' + str(LINES[0][lines]),'cyan')
							print colored('pst_shf_ctr    : ' + str(pst_shf_ctr),'cyan')
							print colored('pst_shf_lim    : ' + str(pst_shf_lim),'cyan')
							print colored('Line Center    : ' + str(LINES[0][lines] + pst_shf_ctr),'cyan')
							print colored('Lower Limit    : ' + str(LINES[0][lines] - (pst_shf_ctr-pst_shf_lim)),'cyan')
							print colored('Upper Limit    : ' + str(LINES[0][lines] - (pst_shf_ctr+pst_shf_lim)),'cyan')
							print 
							print colored('Central    : ' + str(LINES[0][lines]),'cyan')
							print colored('Central-PRE: ' + str(pre_shf_ctr) + '-' + str(LINES[0][lines]-pre_shf_ctr),'cyan')
							print colored('Central+PST: ' + str(pst_shf_ctr) + '-' + str(LINES[0][lines]+pst_shf_ctr),'cyan')
							print colored('Central+MDL: ' + str(mdl_shf_ctr) + '-' + str(LINES[0][lines]+mdl_shf_ctr),'cyan')
							print
							print colored('Limits:','yellow')
							print 'Central: lambda_glx >= ',lmb_min_lim_line_ft  ,'-','lambda_glx <= ',lmb_max_lim_line_ft
							print 'PRE    : lambda_glx >= ',LINES[0][lines] - pre_shf_ctr-pre_shf_lim,'-','lambda_glx <= ',LINES[0][lines] - pre_shf_ctr+pre_shf_lim
							print 'PST    : lambda_glx >= ',LINES[0][lines] + pst_shf_ctr-pst_shf_lim,'-','lambda_glx <= ',LINES[0][lines] + pst_shf_ctr+pst_shf_lim
							print 'MDL    : lambda_glx >= ',LINES[0][lines] + mdl_shf_ctr-mdl_shf_lim,'-','lambda_glx <= ',LINES[0][lines] + mdl_shf_ctr+mdl_shf_lim
							print
							print 'Total  : lambda_glx >= ',LINES[0][lines] - pre_shf_ctr-pre_shf_lim,'-','lambda_glx <= ',LINES[0][lines] - pre_shf_ctr+pst_shf_lim
							print
							#########################################DEFINING PRE-PST-MDL REGIONS################################################
							X0_f2DG_indx_MDL       = np.where(inten_glx[mask_ft_mdl]==(max(inten_glx[mask_ft_mdl])))[0]
							x_c = lambda_glx[mask_ft_mdl][X0_f2DG_indx_MDL]
							y_c = inten_glx[mask_ft_mdl][X0_f2DG_indx_MDL]
							'''
							try:
								print colored('3-Fitting gaussian between lines','green')
								#inten_glx[mask_ft_plp] = inten_glx[mask_ft_plp] - OFST_G_O #OFFSET
								X0_f2DG_indx_MDL       = np.where(inten_glx[mask_ft_mdl]==(max(inten_glx[mask_ft_mdl])))[0]
								A_f2DG_MDL             = (max(inten_glx[mask_ft_mdl])-1)
								X0_f2DG_MDL            = LINES[0][lines] + mdl_shf_ctr#
								SIGMA_f2DG_MDL         = SIGMA_f2DG/2
								initial_guess_C_MDL    = (X0_f2DG_MDL,A_f2DG_MDL,SIGMA_f2DG_MDL)#,max(inten_glx[mask_ft_mdl])-1)
								
								print
								print colored('Initial Guess Values MDL : ','green')
								print colored(initial_guess_C_MDL,'green')
								print
								
								gmodel_C_MDL           = Model(func_1D_Gaussian_Emm)
								gmodel_C_MDL.set_param_hint('X_0'  , value=X0_f2DG_MDL , min=X0_f2DG_MDL-(X0_f2DG_MDL*LINES[7][lines]), max=X0_f2DG_MDL+(X0_f2DG_MDL*LINES[7][lines]))
								#gmodel_C_MDL.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
								gmodel_C_MDL.set_param_hint('A'    , value=A_f2DG_MDL  , min=A_f2DG_MDL -(A_f2DG_MDL*LINES[10][lines]), max=A_f2DG_MDL +(A_f2DG_MDL*LINES[10][lines]))#min=A_f2DG_MDL-0.001, max=A_f2DG_MDL)
								gmodel_C_MDL.set_param_hint('SIGMA', value=SIGMA_f2DG_MDL)
								pars_C_MDL             = gmodel_C_MDL.make_params()
								result_C_MDL           = gmodel_C_MDL.fit(inten_glx[mask_ft_mdl],pars_C_MDL,
														X=lambda_glx[mask_ft_mdl],X_0=X0_f2DG_MDL,A=A_f2DG_MDL,SIGMA=SIGMA_f2DG_MDL,
														nan_policy = 'omit')
								CTRE_G_C_MDL           = result_C_MDL.params['X_0'].value
								AMPL_G_C_MDL           = result_C_MDL.params['A'].value
								SGMA_G_C_MDL           = abs(result_C_MDL.params['SIGMA'].value)
								FWHM_G_C_MDL           = lw_sgma2fwhm(SGMA_G_C_MDL)

								W_C_MDL                = integrate.quad(lambda x: AMPL_G_C_MDL*np.exp(-((x)**2)/(2*SGMA_G_C_MDL**2)), -np.inf, np.inf)
								EW_C_MDL               = np.round(abs(np.asarray(W_C_MDL[0])),10)
								EWE_C_MDL              = np.round(abs(np.asarray(W_C_MDL[1])),10)
								data_fitted_C_MDL      = func_1D_Gaussian_Emm((lambda_glx[mask_ft_mdl]), CTRE_G_C_MDL,AMPL_G_C_MDL,SGMA_G_C_MDL)
								
								CTRE_G_C_MDL_E         = result_C_MDL.params['X_0'].stderr
								AMPL_G_C_MDL_E         = result_C_MDL.params['A'].stderr
								SGMA_G_C_MDL_E         = result_C_MDL.params['SIGMA'].stderr
								
								CTRE_G_C_MDL_cor       = result_C_MDL.params['X_0'].correl
								AMPL_G_C_MDL_cor       = result_C_MDL.params['A'].correl
								SGMA_G_C_MDL_cor       = result_C_MDL.params['SIGMA'].correl
								
								AMPL_SNR               = AMPL_G_C_MDL
								CTRE_SNR               = CTRE_G_C_MDL
								SGMA_SNR               = abs(SGMA_G_C_MDL)
								
								if CTRE_G_C_MDL_E == None:
									CTRE_G_C_MDL_E = 999999.99999
								else:
									pass
								if AMPL_G_C_MDL_E == None:
									AMPL_G_C_MDL_E = 999999.99999
								else:
									pass
								if SGMA_G_C_MDL_E == None:
									SGMA_G_C_MDL_E = 999999.99999
								else:
									pass
								if CTRE_G_C_MDL_cor == None:
									CTRE_G_C_MDL_cor = 999999.99999
								else:
									pass
								if AMPL_G_C_MDL_cor == None:
									AMPL_G_C_MDL_cor = 999999.99999
								else:
									pass
								if SGMA_G_C_MDL_cor == None:
									SGMA_G_C_MDL_cor = 999999.99999
								else:
									pass
								chisqr_C_MDL           = result_C_MDL.chisqr
								redchi_C_MDL           = result_C_MDL.redchi
								
								W_C_PS3    = integrate.quad(lambda x: AMPL_G_C_MDL*np.exp(-((x)**2)/(2*SGMA_G_C_MDL**2)), -np.inf, x_c)
								EW_C_PS3   = np.round(abs(np.asarray(W_C_PS3[0])),10)
								EWE_C_PS3  = np.round(abs(np.asarray(W_C_PS3[1])),10)
								#inten_glx[mask_ft_plp] = inten_glx[mask_ft_plp] - OFST_G_O #OFFSET +
							except (RuntimeError,ValueError,TypeError):
								print colored('RuntimeError','green')
								popt_C_MDL, pcov_C_MDL  = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
								perr_C_MDL          = [999999.99999,999999.99999,999999.99999]
								CTRE_G_C_MDL        = 999999.99999
								AMPL_G_C_MDL        = 999999.99999
								SGMA_G_C_MDL        = 999999.99999
								FWHM_G_C_MDL        = 999999.99999
								EW_C_MDL            = 999999.99999
								EWE_C_MDL           = 999999.99999
								
															
								CTRE_G_C_MDL_E      = 999999.99999
								AMPL_G_C_MDL_E      = 999999.99999
								SGMA_G_C_MDL_E      = 999999.99999
								CTRE_G_C_MDL_cor    = 999999.99999
								AMPL_G_C_MDL_cor    = 999999.99999
								SGMA_G_C_MDL_cor    = 999999.99999
								chisqr_C_MDL        = 999999.99999
								redchi_C_MDL        = 999999.99999
							'''
							print colored('Cleaning Method','green')
							popt_C_MDL, pcov_C_MDL  = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
							perr_C_MDL          = [999999.99999,999999.99999,999999.99999]
							CTRE_G_C_MDL        = 999999.99999
							AMPL_G_C_MDL        = 999999.99999
							SGMA_G_C_MDL        = 999999.99999
							FWHM_G_C_MDL        = 999999.99999
							EW_C_MDL            = 999999.99999
							EWE_C_MDL           = 999999.99999
							
														
							CTRE_G_C_MDL_E      = 999999.99999
							AMPL_G_C_MDL_E      = 999999.99999
							SGMA_G_C_MDL_E      = 999999.99999
							CTRE_G_C_MDL_cor    = 999999.99999
							AMPL_G_C_MDL_cor    = 999999.99999
							SGMA_G_C_MDL_cor    = 999999.99999
							chisqr_C_MDL        = 999999.99999
							redchi_C_MDL        = 999999.99999							
						else:
							popt_C_MDL, pcov_C_MDL  = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
							perr_C_MDL          = [999999.99999,999999.99999,999999.99999]
							CTRE_G_C_MDL        = 999999.99999
							AMPL_G_C_MDL        = 999999.99999
							SGMA_G_C_MDL        = 999999.99999
							FWHM_G_C_MDL        = 999999.99999
							EW_C_MDL            = 999999.99999
							EWE_C_MDL           = 999999.99999
							
														
							CTRE_G_C_MDL_E      = 999999.99999
							AMPL_G_C_MDL_E      = 999999.99999
							SGMA_G_C_MDL_E      = 999999.99999
							CTRE_G_C_MDL_cor    = 999999.99999
							AMPL_G_C_MDL_cor    = 999999.99999
							SGMA_G_C_MDL_cor    = 999999.99999
							chisqr_C_MDL        = 999999.99999
							redchi_C_MDL        = 999999.99999
							
							x_c                 = 999999.99999
							y_c                 = 999999.99999							
						if fit_vls_hdr == True and fix_mdl_gau == False:
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CGM3',float(CTRE_G_C_MDL)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AGM3',float(AMPL_G_C_MDL)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_SGM3',float(SGMA_G_C_MDL)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_FGM3',float(FWHM_G_C_MDL)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WGM3',float(EW_C_MDL)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_EGM3',float(EWE_C_MDL)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CME2',float(CTRE_G_C_MDL_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AME2',float(AMPL_G_C_MDL_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_SME2',float(SGMA_G_C_MDL_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))
							
							Header_Add(specfile_glx,str(LINES[5][lines])+'_XAM3',float(x_c),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' MDL GAU-LNR X3 COO')
							Header_Add(specfile_glx,str(LINES[5][lines])+'_YAM3',float(y_c),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' MDL GAU-LNR Y3 COO')
						else:
							print
							print colored('The fit (MDL) values will not be added to the fits headers!','green')
							print
							pass
						if uft_lne_vls == False and fit_vls_hdr == True and int_vlf_hdr==True:
							print
							print colored('Initial Guess Values for line Fitting will be recorded!','yellow')
							print colored('Info input parameters (pre_gauss_shf, pre_gauss_ctr) in Spec_Stk_Stack_0.4.py!','yellow')
							print
							Header_Add(specfile_glx,str(LINES[5][lines])+'_GSM3',float(mdl_shf_lim) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Shf from expt ctr wvl for MDL G-3')
							Header_Add(specfile_glx,str(LINES[5][lines])+'_GCM3',float(mdl_shf_ctr) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Gaussian Ctr Int Val for MDL G-3')
						else:
							print
							print colored('Initial Guess Values for line Fitting will NOT be recorded!','yellow')
							print
							pass
						#inten_glx[mask_ft_plp] = inten_glx[mask_ft_plp] + OFST_G_O #OFFSET -
					elif fix_mdl_gau == True:# or (fix_mdl_gau == False and mdl_shf_lim<=0):
						try:
							print
							print colored('3- MDL-gaussian already fitted!','yellow')
							print colored('Values from fits header','yellow')
							CTRE_G_C_MDL   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGM3')#,float(CTRE_G_C_MDL)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
							AMPL_G_C_MDL   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGM3')#,float(AMPL_G_C_MDL)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
							SGMA_G_C_MDL   = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGM3')#,float(SGMA_G_C_MDL)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
							FWHM_G_C_MDL   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGM3')#,float(FWHM_G_C_MDL)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
							EW_C_MDL       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGM3')#,float(EW_C_MDL)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
							EWE_C_MDL      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGM3')#,float(EWE_C_MDL)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
							CTRE_G_C_MDL_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_CME2')#,float(CTRE_G_C_MDL_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
							AMPL_G_C_MDL_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_AME2')#,float(AMPL_G_C_MDL_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
							SGMA_G_C_MDL_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_SME2')#,float(SGMA_G_C_MDL_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))
							
							x_c            = Header_Get(specfile_glx,str(LINES[5][lines])+'_XAM3')#,float(x_c),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PST GAU-LNR X2 COO')
							y_c            = Header_Get(specfile_glx,str(LINES[5][lines])+'_YAM3')#,float(y_c),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PST GAU-LNR Y2 COO')
							EW_C_PS3       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WRM3')#,float(EW_C_PS3),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])   + ' EW   PST' + str(fit_type))
							EWE_C_PS3      = Header_Get(specfile_glx,str(LINES[5][lines])+'_ERM3')#,float(EWE_C_PS3),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])  + ' EWE  PST' + str(fit_type))
							
							mdl_shf_lim    = Header_Get(specfile_glx,str(LINES[5][lines])+'_GSM3')#,float(pre_shf_lim) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Shf from expt ctr wvl for PRE G-1')
							mdl_shf_ctr    = Header_Get(specfile_glx,str(LINES[5][lines])+'_GCM3')#,float(pre_shf_ctr) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Gaussian Ctr Int Val for PRE G-1')
						except KeyError:
							print
							print colored ('Gaussian Fit Parameters are not found on Fits Header!','yellow')
							print colored ('File  : ' + specfile_glx,'yellow')
							print colored ('Header: ' + str(LINES[5][lines])+'_CF0M','yellow')
							print colored ('Gotta Fit first before fixing a component (PST)!','yellow')
							print colored ('Or UnFix (fix_pst_gau=False) For Plotting!','yellow')
							print colored ('Quitting!','yellow')
							print
							quit()
					print
					print colored(str(LINES[0][lines])+'-'+str(LINES[3][lines])+'-MDL','green')
					print
					print '******************************************************************************'
					print colored('Boundaries for Gaussian Fitting (PST-CTR): ' + str(mdl_shf_ctr),'green')					
					print colored('Boundaries for Gaussian Fitting (PST-LIM): ' + str(mdl_shf_lim),'green')
					print '******************************************************************************'
					print
					print colored(str(LINES[5][lines])+'_CGM3: ' + str(CTRE_G_C_MDL)  ,'green')
					print colored(str(LINES[5][lines])+'_AGM3: ' + str(AMPL_G_C_MDL)  ,'green')
					print colored(str(LINES[5][lines])+'_SGM3: ' + str(SGMA_G_C_MDL)  ,'green')
					print colored(str(LINES[5][lines])+'_FGM3: ' + str(FWHM_G_C_MDL)  ,'green')
					print colored(str(LINES[5][lines])+'_WGM3: ' + str(EW_C_MDL)      ,'green')
					print colored(str(LINES[5][lines])+'_EGM3: ' + str(EWE_C_MDL),'green')
					print
					print colored(str(LINES[5][lines])+'_GSM3 : ' + str(mdl_shf_lim),'green')
					print colored(str(LINES[5][lines])+'_GCM3 : ' + str(mdl_shf_ctr),'green')
					print colored(str(LINES[5][lines])+'_XAM3 : ' + str(x_c),'green')
					print colored(str(LINES[5][lines])+'_YAM3 : ' + str(y_c),'green')
					print
					print colored('Fit Values (PST) Center, Amplitude, Sigma ('+fit_type+'):','green')
					print colored(str(CTRE_G_C_MDL)+', '+str(AMPL_G_C_MDL)+', '+str(SGMA_G_C_MDL),'green')
					print					
					###################################################MDL GAUSSIAN##################################################						
					###############################################COMPUTING TOTAL AREA###############################################
					print colored('Computing Flux Area','yellow')
					#############################################COMPUTING LINEAR AREA###################################################
					slope_line1 = (y_a-y_b)/(x_a-x_b)
					slope_line2 = (y_b-y_a)/(x_b-x_a)
					b1 = y_a - (slope_line1*x_a)
					b2 = y_b - (slope_line1*x_b)
					print
					print  colored('Computing Linear Area considering peak points:','yellow')
					print 'Point A: ',x_a,y_a
					print 'Point B: ',x_b,y_b
					print 'Slope: ',slope_line1
					print 'Slope: ',slope_line2
					print 'b: ',b1,b2
					print
					#############################################COMPUTING LINEAR AREA###################################################
					###############################################COMPUTING TOTAL AREA###############################################
					CTRE_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CMC1')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
					AMPL_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AMC1')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
					SGMA_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_SMC1')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))

					CTRE_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CMC2')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ctr  1GF Crct' + str(fit_type))
					AMPL_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AMC2')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Amp  1GF Crct' + str(fit_type))
					SGMA_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_SMC2')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Sigm 1GF Crct' + str(fit_type))

					CTRE_G_C_PRE  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGM1')#,float(CTRE_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
					AMPL_G_C_PRE  = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGM1')#,float(AMPL_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
					SGMA_G_C_PRE  = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGM1')#,float(SGMA_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))

					CTRE_G_C_PST  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGM2')#,float(CTRE_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
					AMPL_G_C_PST  = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGM2')#,float(AMPL_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
					SGMA_G_C_PST  = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGM2')#,float(SGMA_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))

					CTRE_G_C_MDL  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGM3')#,float(CTRE_G_C_MDL)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
					AMPL_G_C_MDL  = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGM3')#,float(AMPL_G_C_MDL)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
					SGMA_G_C_MDL  = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGM3')#,float(SGMA_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))

					print
					print colored('Computing Areas using info from fits headers.','yellow')
					print 'CTRE_G_C_1: ',str(CTRE_G_C_1),' AMPL_G_C-1: ',str(AMPL_G_C_1),' SGMA_G_C-1: ',str(SGMA_G_C_1)
					print 'CTRE_G_C_2: ',str(CTRE_G_C_2),' AMPL_G_C-2: ',str(AMPL_G_C_2),' SGMA_G_C-2: ',str(SGMA_G_C_2)
					print 'CTRE_G_C_PRE: ',str(CTRE_G_C_PRE),' AMPL_G_C_PRE: ',str(AMPL_G_C_PRE),' SGMA_G_C_PRE: ',str(SGMA_G_C_PRE)
					print 'CTRE_G_C_PST: ',str(CTRE_G_C_PST),' AMPL_G_C_PST: ',str(AMPL_G_C_PST),' SGMA_G_C_PST: ',str(SGMA_G_C_PST)
					print 'CTRE_G_C_MDL: ',str(CTRE_G_C_MDL),' AMPL_G_C_MDL: ',str(AMPL_G_C_MDL),' SGMA_G_C_MDL: ',str(SGMA_G_C_PST)
					print

					W_C_1     = integrate.quad(lambda x: AMPL_G_C_1*np.exp(-((x)**2)/(2*SGMA_G_C_1**2)), -np.inf, np.inf)
					EW_C_1    = np.round(abs(np.asarray(W_C_1[0])),10)
					EWE_C_1   = np.round(abs(np.asarray(W_C_1[1])),10)

					W_C_2     = integrate.quad(lambda x: AMPL_G_C_2*np.exp(-((x)**2)/(2*SGMA_G_C_2**2)), -np.inf, np.inf)
					EW_C_2    = np.round(abs(np.asarray(W_C_2[0])),10)
					EWE_C_2   = np.round(abs(np.asarray(W_C_2[1])),10)

					W_C_PRE   = integrate.quad(lambda x: AMPL_G_C_PRE*np.exp(-((x)**2)/(2*SGMA_G_C_PRE**2)), -np.inf, np.inf)
					EW_C_PRE  = np.round(abs(np.asarray(W_C_PRE[0])),10)
					EWE_C_PRE = np.round(abs(np.asarray(W_C_PRE[1])),10)


					W_C_PST   = integrate.quad(lambda x: AMPL_G_C_PST*np.exp(-((x)**2)/(2*SGMA_G_C_PST**2)), -np.inf, np.inf)
					EW_C_PST  = np.round(abs(np.asarray(W_C_PST[0])),10)
					EWE_C_PST = np.round(abs(np.asarray(W_C_PST[1])),10)

					W_C_MDL   = integrate.quad(lambda x: AMPL_G_C_MDL*np.exp(-((x)**2)/(2*SGMA_G_C_MDL**2)), -np.inf, np.inf)
					EW_C_MDL  = np.round(abs(np.asarray(W_C_MDL[0])),10)
					EWE_C_MDL = np.round(abs(np.asarray(W_C_MDL[1])),10)

					W_PLP     = integrate.quad(lambda x: AMPL_G_C_2*np.exp(-((x)**2)/(2*SGMA_G_C_2**2))    + 
												AMPL_G_C_PRE*np.exp(-((x)**2)/(2*SGMA_G_C_PRE**2))+ 
												AMPL_G_C_PRE*np.exp(-((x)**2)/(2*SGMA_G_C_PRE**2))+
												AMPL_G_C_PST*np.exp(-((x)**2)/(2*SGMA_G_C_PST**2)),
												-np.inf, np.inf
												)
					EW_PLP    = np.round((np.asarray(W_PLP[0])),10)
					EWE_PLP   = np.round(abs(np.asarray(W_PLP[1])),10)

					if EW_C_1 == 999999.99999:
						EW_C_1 = 0
					else:
						pass
					if EW_C_2 == 999999.99999:
						EW_C_2 = 0
					else:
						pass
					if EW_C_PRE == 999999.99999:
						EW_C_PRE = 0
					else:
						pass
					if EW_C_PST == 999999.99999:
						EW_C_PST = 0
					else:
						pass						
					EWMT    = EW_C_1 + EW_C_2 + EW_C_PRE + EW_C_PST #+ EW_C_LNR

					print
					print colored('Areas     :','yellow')
					print colored('Area CTR-1: ' + str(EW_C_1),'yellow')
					print colored('Area CTR-2: ' + str(EW_C_2),'yellow')					
					print colored('Area PRE-G: ' + str(EW_C_PRE),'blue')
					print colored('Area PST-G: ' + str(EW_C_PST),'magenta')
					print colored('Area MDL-G: ' + str(EW_C_MDL),'green')
					print colored('Area PRE-CTR1-CTR2-PST: ' + str(EW_PLP),'yellow')
					print					
					###############################################COMPUTING TOTAL AREA###############################################
					#############################################ADDING AREA TO FTIS HEADER#############################################
					if fit_vls_hdr == True:
						print
						print colored('The Areas values will be updated to the fits headers!','magenta')
						print
						print colored('Area CTR-1: '                  + str(EW_C_1)   + '-' +str(LINES[5][lines])+'_WMC1','blue')
						print colored('Area CTR-2: '                  + str(EW_C_2)   + '-' +str(LINES[5][lines])+'_WMC2','red')
						print colored('Area PRE-G: '                  + str(EW_C_PRE) + '-' +str(LINES[5][lines])+'_WGM1','cyan')
						print colored('Area PST-G: '                  + str(EW_C_PST) + '-' +str(LINES[5][lines])+'_WGM2','magenta')
						print colored('Area MDL-G: '                  + str(EW_C_MDL) + '-' +str(LINES[5][lines])+'_WGM3','green')
						print colored('Area PLP-G: '                  + str(EW_PLP)   + '-' +str(LINES[5][lines])+'_WMPP','yellow')
						print colored('Area TOT=PRE-CTR1-CTR2-PST: '  + str(EWMT)     + '-' +str(LINES[5][lines])+'_WMPT','yellow')
						print						
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WMC1',float(EW_C_1)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   C1-GF Crct' + str(fit_fnct) + '-' +str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EMC1',float(EWE_C_1)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  C1-GF Crct' + str(fit_fnct) + '-' +str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WMC2',float(EW_C_2)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   C2-GF Crct' + str(fit_fnct) + '-' +str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EMC2',float(EWE_C_2)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  C2-GF Crct' + str(fit_fnct) + '-' +str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WGM1',float(EW_C_PRE)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   PRE Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EGM1',float(EWE_C_PRE)   ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  PRE Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WGM2',float(EW_C_PST)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   PST Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EGM2',float(EWE_C_PST)   ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  PST Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WGM3',float(EW_C_MDL)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   MDL Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EGM3',float(EWE_C_MDL)   ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  MDL Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WMPP',float(EW_C_PST)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   PRE-C1-C2-PST Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EMPP',float(EWE_C_PST)   ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  PRE-C1-C2-PST Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WMPT',float(EWE_C_PST)   ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' WE   PLP Crct' + str(fit_type))

					else:
						print
						print colored('The Areas values will not be updated to the fits headers!','magenta')
						print
					#############################################ADDING AREA TO FTIS HEADER#############################################
					#################################DEFINE AREA FOR LATER ON SUBSTRACT OFFSET FOR PLOTING###############################
					###########################################DEFINING PRE-PST REGIONS##################################################
					if ofs_ctr_fit == True:
						print
						print colored('Using Fitted Center From Offset Fit to Redefine Fitting Region!','yellow')
						print
						lmb_min_lim_line_ft = (CTRE_G_0-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
						lmb_max_lim_line_ft = (CTRE_G_0+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]
						mask_ft_pre = (lambda_glx <= LINES[0][lines] - pre_shf_ctr + pre_shf_lim) & (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim)
						mask_ft_pst = (lambda_glx >= LINES[0][lines] + pst_shf_ctr - pst_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
						mask_ft_plp = (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
						mask_ft_mdl = (lambda_glx >= LINES[0][lines] + mdl_shf_ctr - mdl_shf_lim) & (lambda_glx <= LINES[0][lines] + mdl_shf_ctr + mdl_shf_lim)
						X0_f2DG_indx_PRE       = np.where(inten_glx[mask_ft_pre]==(max(inten_glx[mask_ft_pre])))[0]
						X0_f2DG_indx_PST       = np.where(inten_glx[mask_ft_pst]==(max(inten_glx[mask_ft_pst])))[0]
						X0_f2DG_indx_MDL       = np.where(inten_glx[mask_ft_mdl]==(max(inten_glx[mask_ft_mdl])))[0]
					else:
						print
						print colored('Using Expected Line Center to Define Fitting Region!','yellow')
						print
						mask_ft_pre = (lambda_glx <= LINES[0][lines] - pre_shf_ctr + pre_shf_lim) & (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim)
						mask_ft_pst = (lambda_glx >= LINES[0][lines] + pst_shf_ctr - pst_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
						mask_ft_plp = (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
						mask_ft_mdl = (lambda_glx >= LINES[0][lines] + mdl_shf_ctr - mdl_shf_lim) & (lambda_glx <= LINES[0][lines] + mdl_shf_ctr + mdl_shf_lim)
						try:
							X0_f2DG_indx_PRE = np.where(inten_glx[mask_ft_pre]==(max(inten_glx[mask_ft_pre])))[0]
						except ValueError:
							X0_f2DG_indx_PRE = LINES[0][lines]

						try:
							X0_f2DG_indx_PST = np.where(inten_glx[mask_ft_pst]==(max(inten_glx[mask_ft_pst])))[0]
						except ValueError:
							X0_f2DG_indx_PST = LINES[0][lines]

						try:
							X0_f2DG_indx_MDL = np.where(inten_glx[mask_ft_mdl]==(max(inten_glx[mask_ft_mdl])))[0]
						except ValueError:
							X0_f2DG_indx_MDL = LINES[0][lines]

						
					print
					print colored('Region limits for fitting.','yellow')
					print colored('Central    : ' + str(LINES[0][lines]),'yellow')
					print colored('Central-PRE: ' + str(pre_shf_ctr) + '-' + str(LINES[0][lines]-pre_shf_ctr),'cyan')
					print colored('Central+PST: ' + str(pst_shf_ctr) + '-' + str(LINES[0][lines]+pst_shf_ctr),'magenta')
					print colored('Central+MDL: ' + str(mdl_shf_ctr) + '-' + str(LINES[0][lines]+mdl_shf_ctr),'green')
					print
					print colored('Limits:','yellow')
					print 'Central: lambda_glx >= ',lmb_min_lim_line_ft  ,'-','lambda_glx <= ',lmb_max_lim_line_ft
					print 'PRE    : lambda_glx <= ',LINES[0][lines] - pre_shf_ctr+pre_shf_lim,'-','lambda_glx >= ',LINES[0][lines] - pre_shf_ctr-pre_shf_lim
					print 'PST    : lambda_glx >= ',LINES[0][lines] + pst_shf_ctr-pst_shf_lim,'-','lambda_glx <= ',LINES[0][lines] + pst_shf_ctr+pst_shf_lim
					print 'MDL    : lambda_glx >= ',LINES[0][lines] + mdl_shf_ctr-mdl_shf_lim,'-','lambda_glx <= ',LINES[0][lines] + mdl_shf_ctr+mdl_shf_lim
					print
					print 'Total  : lambda_glx >= ',LINES[0][lines] - pre_shf_ctr-pre_shf_lim,'-','lambda_glx <= ',LINES[0][lines] - pre_shf_ctr+pst_shf_lim
					print
					############################################DEFINING PRE-PST REGIONS##################################################
					##################################DEFINE AREA FOR LATER ON SUBSTRACT OFFSET FOR PLOTING###############################
				elif 'Dbl' not in LINES[3][lines] and fit_fnct=='gauss'   and fit_type == 'lmfit' and uft_lne_vls == True:
					print 'Line-fitting Cleaning Method. To be checked Fnc_Stk_Plt.py def(Plot_Idp_Spc_Lne) 7554!'
					
					fit_typ = 'G'
					#GAUSSIAN FIT
					MSK_NTMS=2.5
					'''
					print
					print colored('1D Gaussian Fit Mode Choosen: Lmfit (Offset)','cyan')
					print
					from lmfit import Model

					'''
					lmb_min_lim_line_ft = (LINES[0][lines]-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
					lmb_max_lim_line_ft = (LINES[0][lines]+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]
					lmb_min_lim_line    = (LINES[0][lines]-LINES[8][lines])*(1+z_glx_Ps) - 1.5*MSK_NTMS*LINES[2][lines]#- 20#LINES[2][lines] - 10 #IT WAS LINE CTR - LINE OFFSET
					lmb_max_lim_line    = (LINES[0][lines]+LINES[8][lines])*(1+z_glx_Ps) + 1.5*MSK_NTMS*LINES[2][lines]#+ 20#LINES[2][lines] + 10

					mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
					mask_ft    = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
					'''
					label_glx  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function

					X0_f2DG    = (LINES[0][lines]+LINES[8][lines])
					SIGMA_f2DG = LINES[1][lines]
					A_f2DG     = -(1-(min(inten_glx[mask_ft])))

					max_val    = -(1-min(inten_glx[mask_ft]))
					lambda_max = (lambda_glx[np.where(inten_glx==min(inten_glx[mask_ft]))[0]][0])					

					if pre_off_plt == True:
						plt.step(lambda_glx[mask_pl], inten_glx[mask_pl],
								where='mid',lw=3.0,alpha=0.5,linestyle=':',color='gray',
								label='Original Spectrum')
					elif pre_off_plt == False:
						pass

					'''
					#hsw_nmb_med = np.ceil(np.median(inten_glx_hst[mask_ft]))
					#hsw_nmb_med = np.ceil(np.median(inten_glx_hsw[mask_ft]))
					#Header_Add(specfile_glx,str(LINES[5][lines])+'_NHT',float(hsw_nmb_med) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + '# glxs stk hst Fit Spec Reg (med)')
					#Header_Add(specfile_glx,str(LINES[5][lines])+'_NHW',float(hsw_nmb_med) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + '# glxs stk hsw Fit Spec Reg (med)')
					#print specfile_glx,str(LINES[5][lines])+'_NHT',float(hsw_nmb_med)
					#print specfile_glx,str(LINES[5][lines])+'_NHW',float(hsw_nmb_med)
					'''
					initial_guess_O   = (X0_f2DG,A_f2DG,SIGMA_f2DG,max(inten_glx[mask_ft])-1)
					initial_guess_0   = (X0_f2DG,A_f2DG,SIGMA_f2DG)
					try:
						gmodel_0           = Model(func_1D_Gaussian)
						gmodel_0.set_param_hint('X_0'  , value=X0_f2DG   , min=X0_f2DG-(X0_f2DG*LINES[7][lines]), max=X0_f2DG+(X0_f2DG*LINES[7][lines]))
						#gmodel_0.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
						gmodel_0.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG  - (A_f2DG*LINES[10][lines]) , max=A_f2DG  + (A_f2DG*LINES[10][lines]))#min=A_f2DG-0.001, max=A_f2DG)
						gmodel_0.set_param_hint('SIGMA', value=SIGMA_f2DG)
						pars_0             = gmodel_0.make_params()							
						result_0           = gmodel_0.fit(inten_glx[mask_ft],pars_0,
												X=lambda_glx[mask_ft],
												X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,
												nan_policy = 'omit')
						CTRE_G_0           = result_0.params['X_0'].value
						AMPL_G_0           = result_0.params['A'].value
						SGMA_G_0           = abs(result_0.params['SIGMA'].value)
						FWHM_G_0           = lw_sgma2fwhm(SGMA_G_0)
						W_0                = integrate.quad(lambda x: AMPL_G_0*np.exp(-((x)**2)/(2*SGMA_G_0**2)), -np.inf, np.inf)
						EW_0               = np.round(abs(np.asarray(W_0[0])),3)
						EWE_0              = np.round(abs(np.asarray(W_0[1])),10)
						data_fitted_0      = func_1D_Gaussian((lambda_glx[mask_ft]), CTRE_G_0,AMPL_G_0,SGMA_G_0)

						CTRE_G_0_E         = result_0.params['X_0'].stderr
						AMPL_G_0_E         = result_0.params['A'].stderr
						SGMA_G_0_E         = result_0.params['SIGMA'].stderr

						CTRE_G_0_cor       = result_0.params['X_0'].correl
						AMPL_G_0_cor       = result_0.params['A'].correl
						SGMA_G_0_cor       = result_0.params['SIGMA'].correl

						chisqr_0           = result_0.chisqr
						redchi_0           = result_0.redchi

					except (RuntimeError,ValueError,TypeError):
						popt_0, pcov_0     = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
						perr_0             = [999999.99999,999999.99999,999999.99999]
						CTRE_G_0           = 999999.99999
						AMPL_G_0           = 999999.99999
						SGMA_G_0           = 999999.99999
						FWHM_G_0           = 999999.99999
						EW_0               = 999999.99999
						EWE_0              = 999999.99999

						CTRE_G_0_E         = 999999.99999
						AMPL_G_0_E         = 999999.99999
						SGMA_G_0_E         = 999999.99999

						CTRE_G_0_cor       = 999999.99999
						AMPL_G_0_cor       = 999999.99999
						SGMA_G_0_cor       = 999999.99999

						chisqr_0           = 999999.99999
						redchi_0           = 999999.99999
					'''
					popt_0, pcov_0     = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
					perr_0             = [999999.99999,999999.99999,999999.99999]
					CTRE_G_0           = 999999.99999
					AMPL_G_0           = 999999.99999
					SGMA_G_0           = 999999.99999
					FWHM_G_0           = 999999.99999
					EW_0               = 999999.99999
					EWE_0              = 999999.99999

					CTRE_G_0_E         = 999999.99999
					AMPL_G_0_E         = 999999.99999
					SGMA_G_0_E         = 999999.99999

					CTRE_G_0_cor       = 999999.99999
					AMPL_G_0_cor       = 999999.99999
					SGMA_G_0_cor       = 999999.99999

					chisqr_0           = 999999.99999
					redchi_0           = 999999.99999
					if fit_vls_hdr == True:
						Header_Add(specfile_glx,str(LINES[5][lines])+'_CGF0',float(CTRE_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_AGF0',float(AMPL_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_FGF0',float(FWHM_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WGF0',float(EW_0)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EGF0',float(EWE_0)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct')
					else:
						print
						print colored('The fit values will not be added to the fits headers!','magenta')
						print
					'''
					try:
						gmodel_O           = Model(func_1D_Gaussian_O)
						gmodel_O.set_param_hint('X_0'   , value=X0_f2DG   , min=X0_f2DG-(X0_f2DG*LINES[7][lines]), max=X0_f2DG+(X0_f2DG*LINES[7][lines]))
						#gmodel_O.set_param_hint('A'     , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
						gmodel_O.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG  - (A_f2DG*LINES[10][lines]) , max=A_f2DG  + (A_f2DG*LINES[10][lines]))#min=A_f2DG-0.001, max=A_f2DG)
						gmodel_O.set_param_hint('SIGMA' , value=SIGMA_f2DG)
						gmodel_O.set_param_hint('OFFSET', value=max(inten_glx[mask_ft])-1)
						pars_O             = gmodel_O.make_params()

						result_O           = gmodel_O.fit(inten_glx[mask_ft],pars_O,
												X=lambda_glx[mask_ft],X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,OFFSET=max(inten_glx[mask_ft])-1,
												nan_policy = 'omit')
						CTRE_G_O           = result_O.params['X_0'].value
						AMPL_G_O           = result_O.params['A'].value
						SGMA_G_O           = abs(result_O.params['SIGMA'].value)
						OFST_G_O           = abs(result_O.params['OFFSET'].value)
						FWHM_G_O           = lw_sgma2fwhm(SGMA_G_O)
						W_O                = integrate.quad(lambda x: AMPL_G_O*np.exp(-((x)**2)/(2*SGMA_G_O**2)), -np.inf, np.inf)
						EW_O               = np.round(abs(np.asarray(W_O[0])),3)
						EWE_O              = np.round(abs(np.asarray(W_O[1])),10)
						data_fitted_O      = func_1D_Gaussian_O((lambda_glx[mask_ft]),CTRE_G_O,AMPL_G_O,SGMA_G_O,OFST_G_O)

						CTRE_G_O_E         = result_O.params['X_0'].stderr
						AMPL_G_O_E         = result_O.params['A'].stderr
						SGMA_G_O_E         = result_O.params['SIGMA'].stderr

						CTRE_G_O_cor       = result_O.params['X_0'].correl
						AMPL_G_O_cor       = result_O.params['A'].correl
						SGMA_G_O_cor       = result_O.params['SIGMA'].correl

						chisqr_O           = result_O.chisqr
						redchi_O           = result_O.redchi
						
						#####################################################################################################################
						if ofs_ctr_fit == True:
							print
							print colored('Using Fitted Center From Offset Fit to Redefine Fitting Region!','yellow')
							print
							lmb_min_lim_line_ft = (CTRE_G_O-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
							lmb_max_lim_line_ft = (CTRE_G_O+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]
							#lmb_min_lim_line    = (CTRE_G_O-LINES[8][lines])*(1+z_glx_Ps) - 1.5*MSK_NTMS*LINES[2][lines]#-20#LINES[2][lines] - 10 #IT WAS LINE CTR - LINE OFFSET
							#lmb_max_lim_line    = (CTRE_G_O+LINES[8][lines])*(1+z_glx_Ps) + 1.5*MSK_NTMS*LINES[2][lines]#+20#LINES[2][lines] + 10
							#mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
							mask_ft     = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
						else:
							pass
						#####################################################################################################################

						inten_glx[mask_ft] = inten_glx[mask_ft] - OFST_G_O
						A_f2DG             = -(1-(min(inten_glx[mask_ft])))
						initial_guess_C    = (X0_f2DG,A_f2DG,SIGMA_f2DG)#,max(inten_glx[mask_ft])-1)

						gmodel_C           = Model(func_1D_Gaussian)
						gmodel_C.set_param_hint('X_0'  , value=X0_f2DG   , min=X0_f2DG-(X0_f2DG*LINES[7][lines]), max=X0_f2DG+(X0_f2DG*LINES[7][lines]))
						#gmodel_C.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
						gmodel_C.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG  - (A_f2DG*LINES[10][lines]) , max=A_f2DG  + (A_f2DG*LINES[10][lines]))#min=A_f2DG-0.001, max=A_f2DG)
						gmodel_C.set_param_hint('SIGMA', value=SIGMA_f2DG)
						pars_C             = gmodel_C.make_params()
						result_C           = gmodel_C.fit(inten_glx[mask_ft],pars_C,
												X=lambda_glx[mask_ft],X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,
												nan_policy = 'omit')
						CTRE_G_C           = result_C.params['X_0'].value
						AMPL_G_C           = result_C.params['A'].value
						SGMA_G_C           = abs(result_C.params['SIGMA'].value)
						FWHM_G_C           = lw_sgma2fwhm(SGMA_G_C)
						W_C                = integrate.quad(lambda x: AMPL_G_C*np.exp(-((x)**2)/(2*SGMA_G_C**2)), -np.inf, np.inf)

						EW_C               = np.round(abs(np.asarray(W_C[0])),3)
						EWE_C              = np.round(abs(np.asarray(W_C[1])),10)
						data_fitted_C      = func_1D_Gaussian((lambda_glx[mask_ft]), CTRE_G_C,AMPL_G_C,SGMA_G_C)

						CTRE_G_C_E         = result_C.params['X_0'].stderr
						AMPL_G_C_E         = result_C.params['A'].stderr
						SGMA_G_C_E         = result_C.params['SIGMA'].stderr

						CTRE_G_C_cor       = result_C.params['X_0'].correl
						AMPL_G_C_cor       = result_C.params['A'].correl
						SGMA_G_C_cor       = result_C.params['SIGMA'].correl

						AMPL_SNR           = AMPL_G_C
						CTRE_SNR           = CTRE_G_C
						SGMA_SNR           = abs(SGMA_G_C)

						if CTRE_G_C_E == None:
							CTRE_G_C_E = 999999.99999
						else:
							pass
						if AMPL_G_C_E == None:
							AMPL_G_C_E = 999999.99999
						else:
							pass
						if SGMA_G_C_E == None:
							SGMA_G_C_E = 999999.99999
						else:
							pass
						if CTRE_G_C_cor == None:
							CTRE_G_C_cor = 999999.99999
						else:
							pass
						if AMPL_G_C_cor == None:
							AMPL_G_C_cor = 999999.99999
						else:
							pass
						if SGMA_G_C_cor == None:
							SGMA_G_C_cor = 999999.99999
						else:
							pass
						chisqr_C           = result_C.chisqr
						redchi_C           = result_C.redchi
					except (RuntimeError,ValueError,TypeError):
						print colored('RuntimeError','cyan')
						popt_C, pcov_C  = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
						perr_C          = [999999.99999,999999.99999,999999.99999]
						CTRE_G_C        = 999999.99999
						AMPL_G_C        = 999999.99999
						SGMA_G_C        = 999999.99999
						FWHM_G_C        = 999999.99999
						EW_C            = 999999.99999
						EWE_C           = 999999.99999

						CTRE_G_C_E      = 999999.99999
						AMPL_G_C_E      = 999999.99999
						SGMA_G_C_E      = 999999.99999
						CTRE_G_C_cor    = 999999.99999
						AMPL_G_C_cor    = 999999.99999
						SGMA_G_C_cor    = 999999.99999
						chisqr_C        = 999999.99999
						redchi_C        = 999999.99999

						popt_O, pcov_O  = [999999.99999,999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999,999999.99999]
						perr_O          = [999999.99999,999999.99999,999999.99999,999999.99999]
						CTRE_G_O        = 999999.99999
						AMPL_G_O        = 999999.99999
						SGMA_G_O        = 999999.99999
						OFST_G_O        = 999999.99999
						FWHM_G_O        = 999999.99999
						EW_O            = 999999.99999
						EWE_O           = 999999.99999

						CTRE_G_O_E      = 999999.99999
						AMPL_G_O_E      = 999999.99999
						SGMA_G_O_E      = 999999.99999
						CTRE_G_O_cor    = 999999.99999
						AMPL_G_O_cor    = 999999.99999
						SGMA_G_O_cor    = 999999.99999
						OFST_G_O_cor    = 999999.99999
						chisqr_O        = 999999.99999
						redchi_O        = 999999.99999

						AMPL_SNR        = 999999.99999
						CTRE_SNR        = 999999.99999
						SGMA_SNR        = 999999.99999

					'''
					perr_C          = [999999.99999,999999.99999,999999.99999]
					CTRE_G_C        = 999999.99999
					AMPL_G_C        = 999999.99999
					SGMA_G_C        = 999999.99999
					FWHM_G_C        = 999999.99999
					EW_C            = 999999.99999
					EWE_C           = 999999.99999

					CTRE_G_C_E      = 999999.99999
					AMPL_G_C_E      = 999999.99999
					SGMA_G_C_E      = 999999.99999
					CTRE_G_C_cor    = 999999.99999
					AMPL_G_C_cor    = 999999.99999
					SGMA_G_C_cor    = 999999.99999
					chisqr_C        = 999999.99999
					redchi_C        = 999999.99999

					popt_O, pcov_O  = [999999.99999,999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999,999999.99999]
					perr_O          = [999999.99999,999999.99999,999999.99999,999999.99999]
					CTRE_G_O        = 999999.99999
					AMPL_G_O        = 999999.99999
					SGMA_G_O        = 999999.99999
					OFST_G_O        = 999999.99999
					FWHM_G_O        = 999999.99999
					EW_O            = 999999.99999
					EWE_O           = 999999.99999

					CTRE_G_O_E      = 999999.99999
					AMPL_G_O_E      = 999999.99999
					SGMA_G_O_E      = 999999.99999
					CTRE_G_O_cor    = 999999.99999
					AMPL_G_O_cor    = 999999.99999
					SGMA_G_O_cor    = 999999.99999
					OFST_G_O_cor    = 999999.99999
					chisqr_O        = 999999.99999
					redchi_O        = 999999.99999

					AMPL_SNR        = 999999.99999
					CTRE_SNR        = 999999.99999
					SGMA_SNR        = 999999.99999
					print
					print colored(specfile_glx,'cyan')
					print
					print colored(str(LINES[0][lines])+'-'+str(LINES[3][lines]),'yellow')
					print
					print colored(str(LINES[5][lines])+'_CGLC: ' + str(CTRE_G_C)  ,'yellow')
					print colored(str(LINES[5][lines])+'_AGLC: ' + str(AMPL_G_C)  ,'yellow')
					print colored(str(LINES[5][lines])+'_SGLC: ' + str(SGMA_G_C)  ,'yellow')
					print colored(str(LINES[5][lines])+'_FGLC: ' + str(FWHM_G_C)  ,'yellow')
					print colored(str(LINES[5][lines])+'_WGLC: ' + str(EW_C)      ,'yellow')
					print colored(str(LINES[5][lines])+'_EGLC: ' + str(EWE_C),'yellow')
					print
					print
					if fit_vls_hdr == True:
						Header_Add(specfile_glx,'BSF_FCT',str(fit_fnct)                       ,header_comment = 'Fit function')
						Header_Add(specfile_glx,'BSF_MTH',str(fit_type)                       ,header_comment = 'Fit method')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_CGLO',float(CTRE_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Offst' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_AGLO',float(AMPL_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Offst' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_FGLO',float(FWHM_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Offst' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WGLO',float(EW_O)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Offst' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EGLO',float(EWE_O)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Offst' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_OFSO',float(OFST_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ofst 1GF Offst' + str(fit_type))

						Header_Add(specfile_glx,str(LINES[5][lines])+'_CGLC',float(CTRE_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_AGLC',float(AMPL_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_SGLC',float(SGMA_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_FGLC',float(FWHM_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WGLC',float(EW_C)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EGLC',float(EWE_C)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))

						Header_Add(specfile_glx,str(LINES[5][lines])+'_CLEC',float(CTRE_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_ALEC',float(AMPL_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_SLEC',float(SGMA_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))

						Header_Add(specfile_glx,str(LINES[5][lines])+'_CHGL',float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 1GF' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_CRGL',float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 Reduced 1GF' + str(fit_type))
					else:
						print
						print colored('The fit values will not be added to the fits headers!','magenta')
						print
						pass
				elif 'Dbl' not in LINES[3][lines] and fit_fnct=='gaussM'  and fit_type == 'lmfit' and uft_lne_vls == True:
					fit_typ = 'GM'
					#GAUSSIAN FIT
					MSK_NTMS=2.5
					'''
					print
					print colored('1D Gaussian Fit Mode Choosen: Lmfit (Offset)','cyan')
					print
					from lmfit import Model
					'''

					lmb_min_lim_line_ft = (LINES[0][lines]-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
					lmb_max_lim_line_ft = (LINES[0][lines]+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]
					lmb_min_lim_line    = (LINES[0][lines]-LINES[8][lines])*(1+z_glx_Ps) - 1.5*MSK_NTMS*LINES[2][lines]#- 20#LINES[2][lines] - 10 #IT WAS LINE CTR - LINE OFFSET
					lmb_max_lim_line    = (LINES[0][lines]+LINES[8][lines])*(1+z_glx_Ps) + 1.5*MSK_NTMS*LINES[2][lines]#+ 20#LINES[2][lines] + 10

					mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
					mask_ft    = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
					label_glx  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function

					
					'''
					X0_f2DG    = (LINES[0][lines]+LINES[8][lines])
					SIGMA_f2DG = LINES[1][lines]
					A_f2DG     = -(1-(min(inten_glx[mask_ft])))

					max_val    = -(1-min(inten_glx[mask_ft]))
					lambda_max = (lambda_glx[np.where(inten_glx==min(inten_glx[mask_ft]))[0]][0])					

					if pre_off_plt == True:
						plt.step(lambda_glx[mask_pl], inten_glx[mask_pl],
								where='mid',lw=3.0,alpha=0.5,linestyle=':',color='gray',
								label='Original Spectrum')
					elif pre_off_plt == False:
						pass

					hsw_nmb_med = np.ceil(np.median(inten_glx_hst[mask_ft]))
					hsw_nmb_med = np.ceil(np.median(inten_glx_hsw[mask_ft]))
					Header_Add(specfile_glx,str(LINES[5][lines])+'_NHT',float(hsw_nmb_med) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + '# glxs stk hst Fit Spec Reg (med)')
					Header_Add(specfile_glx,str(LINES[5][lines])+'_NHW',float(hsw_nmb_med) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + '# glxs stk hsw Fit Spec Reg (med)')
					print specfile_glx,str(LINES[5][lines])+'_NHT',float(hsw_nmb_med) 
					print specfile_glx,str(LINES[5][lines])+'_NHW',float(hsw_nmb_med) 

					initial_guess_O   = (X0_f2DG,A_f2DG,SIGMA_f2DG,max(inten_glx[mask_ft])-1)
					initial_guess_0   = (X0_f2DG,A_f2DG,SIGMA_f2DG)
					'''
									
					##################################################CENTRAL GAUSSIAN###################################################
					if fix_ctr_gau == False:
						print
						print colored('0-Fitting Central line','cyan')
						print
						#################################################CENTRAL GAUSSIAN-0##################################################
						'''
						try:
							gmodel_0           = Model(func_1D_Gaussian)
							gmodel_0.set_param_hint('X_0'  , value=X0_f2DG   , min=X0_f2DG-(X0_f2DG*LINES[7][lines]), max=X0_f2DG+(X0_f2DG*LINES[7][lines]))
							#gmodel_0.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
							gmodel_0.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG  - (A_f2DG*LINES[10][lines]) , max=A_f2DG  + (A_f2DG*LINES[10][lines]))#min=A_f2DG-0.001, max=A_f2DG)
							gmodel_0.set_param_hint('SIGMA', value=SIGMA_f2DG)
							pars_0             = gmodel_0.make_params()							
							result_0           = gmodel_0.fit(inten_glx[mask_ft],pars_0,
													X=lambda_glx[mask_ft],
													X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,
													nan_policy = 'omit')
							CTRE_G_0           = result_0.params['X_0'].value
							AMPL_G_0           = result_0.params['A'].value
							SGMA_G_0           = abs(result_0.params['SIGMA'].value)
							FWHM_G_0           = lw_sgma2fwhm(SGMA_G_0)
							W_0                = integrate.quad(lambda x: AMPL_G_0*np.exp(-((x)**2)/(2*SGMA_G_0**2)), -np.inf, np.inf)
							EW_0               = np.round(abs(np.asarray(W_0[0])),3)
							EWE_0              = np.round(abs(np.asarray(W_0[1])),10)
							data_fitted_0      = func_1D_Gaussian((lambda_glx[mask_ft]), CTRE_G_0,AMPL_G_0,SGMA_G_0)

							CTRE_G_0_E         = result_0.params['X_0'].stderr
							AMPL_G_0_E         = result_0.params['A'].stderr
							SGMA_G_0_E         = result_0.params['SIGMA'].stderr

							CTRE_G_0_cor       = result_0.params['X_0'].correl
							AMPL_G_0_cor       = result_0.params['A'].correl
							SGMA_G_0_cor       = result_0.params['SIGMA'].correl

							chisqr_0           = result_0.chisqr
							redchi_0           = result_0.redchi
						except (RuntimeError,ValueError,TypeError):
							pass
						'''
						popt_0, pcov_0   = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
						perr_0           = [999999.99999,999999.99999,999999.99999]
						CTRE_G_0         = 999999.99999
						AMPL_G_0         = 999999.99999
						SGMA_G_0         = 999999.99999
						FWHM_G_0         = 999999.99999
						EW_0             = 999999.99999
						EWE_0            = 999999.99999

						CTRE_G_0_E      = 999999.99999
						AMPL_G_0_E      = 999999.99999
						SGMA_G_0_E      = 999999.99999

						CTRE_G_0_cor    = 999999.99999
						AMPL_G_0_cor    = 999999.99999
						SGMA_G_0_cor    = 999999.99999

						chisqr_0        = 999999.99999
						redchi_0        = 999999.99999
						if fit_vls_hdr == True and fix_ctr_gau ==False:
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CF0M',float(CTRE_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AF0M',float(AMPL_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_FF0M',float(FWHM_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WF0M',float(EW_0)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_EF0M',float(EWE_0)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							print
							print colored('The fit (CTR-0) values will be added to the fits headers!','magenta')
							print
						else:
							print
							print colored('The fit (CTR-0) values will not be added to the fits headers!','magenta')
							print
						#################################################CENTRAL GAUSSIAN-0##################################################
						#################################################CENTRAL GAUSSIAN-C##################################################
						popt_C, pcov_C = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
						perr_C          = [999999.99999,999999.99999,999999.99999]
						CTRE_G_C        = 999999.99999
						AMPL_G_C        = 999999.99999
						SGMA_G_C        = 999999.99999
						FWHM_G_C        = 999999.99999
						EW_C            = 999999.99999
						EWE_C           = 999999.99999

						CTRE_G_C_E      = 999999.99999
						AMPL_G_C_E      = 999999.99999
						SGMA_G_C_E      = 999999.99999
						CTRE_G_C_cor    = 999999.99999
						AMPL_G_C_cor    = 999999.99999
						SGMA_G_C_cor    = 999999.99999
						chisqr_C        = 999999.99999
						redchi_C        = 999999.99999

						popt_O ,pcov_O  = [999999.99999,999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999,999999.99999]
						perr_O          = [999999.99999,999999.99999,999999.99999,999999.99999]
						CTRE_G_O        = 999999.99999
						AMPL_G_O        = 999999.99999
						SGMA_G_O        = 999999.99999
						OFST_G_O        = 999999.99999
						FWHM_G_O        = 999999.99999
						EW_O            = 999999.99999
						EWE_O           = 999999.99999

						CTRE_G_O_E      = 999999.99999
						AMPL_G_O_E      = 999999.99999
						SGMA_G_O_E      = 999999.99999
						CTRE_G_O_cor    = 999999.99999
						AMPL_G_O_cor    = 999999.99999
						SGMA_G_O_cor    = 999999.99999
						OFST_G_O_cor    = 999999.99999
						chisqr_O        = 999999.99999
						redchi_O        = 999999.99999

						AMPL_SNR     = 999999.99999
						CTRE_SNR     = 999999.99999
						SGMA_SNR     = 999999.99999
						print
						print colored(specfile_glx,'cyan')
						print
						print colored(str(LINES[0][lines])+'-'+str(LINES[3][lines]),'yellow')
						print
						print colored(str(LINES[5][lines])+'_CGLC: ' + str(CTRE_G_C)  ,'yellow')
						print colored(str(LINES[5][lines])+'_AGLC: ' + str(AMPL_G_C)  ,'yellow')
						print colored(str(LINES[5][lines])+'_SGLC: ' + str(SGMA_G_C)  ,'yellow')
						print colored(str(LINES[5][lines])+'_FGLC: ' + str(FWHM_G_C)  ,'yellow')
						print colored(str(LINES[5][lines])+'_WGLC: ' + str(EW_C)      ,'yellow')
						print colored(str(LINES[5][lines])+'_EGLC: ' + str(EWE_C),'yellow')
						print
						print


						if fit_vls_hdr == True and fix_ctr_gau==False:
							Header_Add(specfile_glx,'BSF_FCT',str(fit_fnct)                       ,header_comment = 'Fit function')
							Header_Add(specfile_glx,'BSF_MTH',str(fit_type)                       ,header_comment = 'Fit method')
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CLOM',float(CTRE_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_ALOM',float(AMPL_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_FLOM',float(FWHM_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WLOM',float(EW_O)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_ELOM',float(EWE_O)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Offst' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_OFOM',float(OFST_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ofst 1GF Offst' + str(fit_fnct) + '-' +str(fit_type))

							Header_Add(specfile_glx,str(LINES[5][lines])+'_CLCM',float(CTRE_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_ALCM',float(AMPL_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_SLCM',float(SGMA_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_FLCM',float(FWHM_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WLCM',float(EW_C)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_ELCM',float(EWE_C)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CECM',float(CTRE_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AECM',float(AMPL_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_SECM',float(SGMA_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_fnct) + '-' +str(fit_type))

							Header_Add(specfile_glx,str(LINES[5][lines])+'_CHLM',float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 1GF' + str(fit_fnct) + '-' +str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CRLM',float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 Reduced 1GF' + str(fit_fnct) + '-' +str(fit_type))

							print
							print colored('The fit (CTR-C & CTR_O) values will be added to the fits headers!','magenta')
							print
						else:
							print
							print colored('The fit (CTR-C & CTR_O) values will not be added to the fits headers!','magenta')
							print
						#################################################CENTRAL GAUSSIAN-C##################################################					
					elif fix_ctr_gau == True:
						print
						print colored('0 CTR-gaussian already fitted!','yellow')
						print colored('Values from fits header','yellow')

						CTRE_G_0    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CF0M')#,float(CTRE_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct')
						AMPL_G_0    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF0M')#,float(AMPL_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct')
						FWHM_G_0    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FF0M')#,float(FWHM_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct')
						EW_0        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WF0M')#,float(EW_0)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct')
						EWE_0       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EF0M')#,float(EWE_0)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct')

						CTRE_G_O    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLOM')#,float(CTRE_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Offst' + str(fit_type))
						AMPL_G_O    = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALOM')#,float(AMPL_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Offst' + str(fit_type))
						FWHM_G_O    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FLOM')#,float(FWHM_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Offst' + str(fit_type))
						EW_O        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WLOM')#,float(EW_O)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Offst' + str(fit_type))
						EWE_O       = Header_Get(specfile_glx,str(LINES[5][lines])+'_ELOM')#,float(EWE_O)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Offst' + str(fit_type))
						OFST_G_O    = Header_Get(specfile_glx,str(LINES[5][lines])+'_OFOM')#,float(OFST_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ofst 1GF Offst' + str(fit_type))

						CTRE_G_C    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLCM')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
						AMPL_G_C    = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALCM')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
						SGMA_G_C    = Header_Get(specfile_glx,str(LINES[5][lines])+'_SLCM')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
						FWHM_G_C    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FLCM')#,float(FWHM_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
						EW_C        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WLCM')#,float(EW_C)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
						EWE_C       = Header_Get(specfile_glx,str(LINES[5][lines])+'_ELCM')#,float(EWE_C)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
						CTRE_G_C_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CECM')#,float(CTRE_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
						AMPL_G_C_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_AECM')#,float(AMPL_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
						SGMA_G_C_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_SECM')#,float(SGMA_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))

						chisqr_C    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CHLM')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 1GF' + str(fit_type))
						redchi_C    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CRLM')#,float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 Reduced 1GF' + str(fit_type))

					print
					print colored(str(LINES[0][lines])+'-'+str(LINES[3][lines])+'-CTR','yellow')
					print
					print colored(str(LINES[5][lines])+'_CLCM: ' + str(CTRE_G_C)  ,'yellow')
					print colored(str(LINES[5][lines])+'_ALCM: ' + str(AMPL_G_C)  ,'yellow')
					print colored(str(LINES[5][lines])+'_SLCM: ' + str(SGMA_G_C)  ,'yellow')
					print colored(str(LINES[5][lines])+'_FLCM: ' + str(FWHM_G_C)  ,'yellow')
					print colored(str(LINES[5][lines])+'_WLCM: ' + str(EW_C)      ,'yellow')
					print colored(str(LINES[5][lines])+'_ELCM: ' + str(EWE_C),'yellow')
					print colored('Fit Values Center, Amplitude, Sigma ('+fit_type+'):','yellow')
					print colored(str(CTRE_G_C)+', '+str(AMPL_G_C)+', '+str(SGMA_G_C),'yellow')
					print
					##################################################CENTRAL GAUSSIAN###################################################

					#####################################################PRE GAUSSIAN####################################################
					if fix_pre_gau == False:
						###########################################DEFINING PRE-PST REGIONS##################################################
						if ofs_ctr_fit == True:
							print
							print colored('Using Fitted Center From Offset Fit to Redefine Fitting Region!','yellow')
							print
							lmb_min_lim_line_ft = (CTRE_G_0-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
							lmb_max_lim_line_ft = (CTRE_G_0+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]
							mask_ft_pre = (lambda_glx <= LINES[0][lines] - pre_shf_ctr + pre_shf_lim) & (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim)
							mask_ft_pst = (lambda_glx >= LINES[0][lines] + pst_shf_ctr - pst_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
							mask_ft_plp = (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
							X0_f2DG_indx_PRE       = np.where(inten_glx[mask_ft_pre]==(max(inten_glx[mask_ft_pre])))[0]
							X0_f2DG_indx_PST       = np.where(inten_glx[mask_ft_pst]==(max(inten_glx[mask_ft_pst])))[0]
						else:
							print
							print colored('Using Expected Line Center to Define Fitting Region!','yellow')
							print
							mask_ft_pre = (lambda_glx <= LINES[0][lines] - pre_shf_ctr + pre_shf_lim) & (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim)
							mask_ft_pst = (lambda_glx >= LINES[0][lines] + pst_shf_ctr - pst_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
							mask_ft_plp = (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
							X0_f2DG_indx_PRE       = np.where(inten_glx[mask_ft_pre]==(max(inten_glx[mask_ft_pre])))[0]
							X0_f2DG_indx_PST       = np.where(inten_glx[mask_ft_pst]==(max(inten_glx[mask_ft_pst])))[0]

						print
						print colored('Region limits for fitting.','yellow')
						print colored('Central    : ' + str(LINES[0][lines]),'yellow')
						print colored('Central-PRE: ' + str(pre_shf_ctr) + '-' + str(LINES[0][lines]-pre_shf_ctr),'yellow')
						print colored('Central+PST: ' + str(pst_shf_ctr) + '-' + str(LINES[0][lines]+pst_shf_ctr),'yellow')
						print
						print colored('Limits:','yellow')
						print 'Central: lambda_glx >= ',lmb_min_lim_line_ft  ,'-','lambda_glx <= ',lmb_max_lim_line_ft
						print 'PRE    : lambda_glx <= ',LINES[0][lines] - pre_shf_ctr+pre_shf_lim,'-','lambda_glx >= ',LINES[0][lines] - pre_shf_ctr-pre_shf_lim
						print 'PST    : lambda_glx >= ',LINES[0][lines] + pst_shf_ctr-pst_shf_lim,'-','lambda_glx <= ',LINES[0][lines] + pst_shf_ctr+pst_shf_lim
						print
						print 'Total  : lambda_glx >= ',LINES[0][lines] - pre_shf_ctr-pre_shf_lim,'-','lambda_glx <= ',LINES[0][lines] - pre_shf_ctr+pst_shf_lim
						print
						###########################################DEFINING PRE-PST REGIONS##################################################

						X0_f2DG_indx_PRE       = np.where(inten_glx[mask_ft_pre]==(max(inten_glx[mask_ft_pre])))[0]
						x_a = lambda_glx[mask_ft_pre][X0_f2DG_indx_PRE]
						y_a = inten_glx[mask_ft_pre][X0_f2DG_indx_PRE]

						popt_C_PRE, pcov_C_PRE  = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
						perr_C_PRE          = [999999.99999,999999.99999,999999.99999]
						CTRE_G_C_PRE        = 999999.99999
						AMPL_G_C_PRE        = 999999.99999
						SGMA_G_C_PRE        = 999999.99999
						FWHM_G_C_PRE        = 999999.99999
						EW_C_PRE            = 999999.99999
						EWE_C_PRE           = 999999.99999

						CTRE_G_C_PRE_E      = 999999.99999
						AMPL_G_C_PRE_E      = 999999.99999
						SGMA_G_C_PRE_E      = 999999.99999
						CTRE_G_C_PRE_cor    = 999999.99999
						AMPL_G_C_PRE_cor    = 999999.99999
						SGMA_G_C_PRE_cor    = 999999.99999
						chisqr_C_PRE        = 999999.99999
						redchi_C_PRE        = 999999.99999

						EW_C_PR1            = 999999.99999
						EWE_C_PR1           = 999999.99999
						if fit_vls_hdr == True and fix_pre_gau == False:						
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CHGL',float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 1GF' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CRGL',float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 Reduced 1GF' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CGL1',float(CTRE_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AGL1',float(AMPL_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_SGL1',float(SGMA_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_FGL1',float(FWHM_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WGL1',float(EW_C_PRE)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_EGL1',float(EWE_C_PRE)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CLE1',float(CTRE_G_C_PRE_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_ALE1',float(AMPL_G_C_PRE_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_SLE1',float(SGMA_G_C_PRE_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))

							Header_Add(specfile_glx,str(LINES[5][lines])+'_XA1',float(x_a),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PRE GAU-LNR X1 COO')
							Header_Add(specfile_glx,str(LINES[5][lines])+'_YA1',float(y_a),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PRE GAU-LNR Y1 COO')
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WPR1',float(EW_C_PR1),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])   + ' EW   PRE' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_EPR1',float(EWE_C_PR1),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])  + ' EWE  PRE' + str(fit_type))
							print
							print colored('The fit (PRE) values will be added to the fits headers!','magenta')
							print
						else:
							print
							print colored('The fit (PRE) values will not be added to the fits headers!','magenta')
							print
							pass
						if uft_lne_vls == False and fit_vls_hdr == True and int_vlf_hdr==True:
							print
							print colored('Initial Guess Values for line Fitting will be recorded!','yellow')
							print colored('Info input parameters (pre_gauss_shf, pre_gauss_ctr) in Spec_Stk_Stack_0.4.py!','yellow')
							print
							Header_Add(specfile_glx,str(LINES[5][lines])+'_GS1',float(pre_shf_lim) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Shf from expt ctr wvl for PRE G-1')
							Header_Add(specfile_glx,str(LINES[5][lines])+'_GC1',float(pre_shf_ctr) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Gaussian Ctr Int Val for PRE G-1')
						else:
							print
							print colored('Initial Guess Values for line Fitting will NOT be recorded!','yellow')
							print
							pass						
					elif fix_pre_gau == True:
						pass
						
						print
						print colored('1 PRE-gaussian already fitted!','yellow')
						print colored('Values from fits header','yellow')
						CTRE_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGL1')#,float(CTRE_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
						AMPL_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGL1')#,float(AMPL_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
						SGMA_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGL1')#,float(SGMA_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
						FWHM_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGL1')#,float(FWHM_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
						EW_C_PRE       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGL1')#,float(EW_C_PRE)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
						EWE_C_PRE      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGL1')#,float(EWE_C_PRE)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
						CTRE_G_C_PRE_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLE1')#,float(CTRE_G_C_PRE_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
						AMPL_G_C_PRE_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALE1')#,float(AMPL_G_C_PRE_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
						SGMA_G_C_PRE_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_SLE1')#,float(SGMA_G_C_PRE_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))

						x_a            = Header_Get(specfile_glx,str(LINES[5][lines])+'_XA1')#,float(x_a),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PRE GAU-LNR X1 COO')
						y_a            = Header_Get(specfile_glx,str(LINES[5][lines])+'_YA1')#,float(y_a),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PRE GAU-LNR Y1 COO')
						EW_C_PR1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WPR1')#,float(EW_C_PR1),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])   + ' EW   PRE' + str(fit_type))
						EWE_C_PR1      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EPR1')#,float(EWE_C_PR1),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])  + ' EWE  PRE' + str(fit_type))

					print
					print colored(str(LINES[0][lines])+'-'+str(LINES[3][lines])+'-PRE','yellow')
					print
					print colored(str(LINES[5][lines])+'_CGL1: ' + str(CTRE_G_C_PRE)  ,'yellow')
					print colored(str(LINES[5][lines])+'_AGL1: ' + str(AMPL_G_C_PRE)  ,'yellow')
					print colored(str(LINES[5][lines])+'_SGL1: ' + str(SGMA_G_C_PRE)  ,'yellow')
					print colored(str(LINES[5][lines])+'_FGL1: ' + str(FWHM_G_C_PRE)  ,'yellow')
					print colored(str(LINES[5][lines])+'_WGL1: ' + str(EW_C_PRE)      ,'yellow')
					print colored(str(LINES[5][lines])+'_EGL1: ' + str(EWE_C_PRE),'yellow')
					print colored('Fit Values Center, Amplitude, Sigma ('+fit_type+'):','yellow')
					print colored(str(CTRE_G_C_PRE)+', '+str(AMPL_G_C_PRE)+', '+str(SGMA_G_C_PRE),'yellow')
					print
					#####################################################PRE GAUSSIAN#################################################
					###################################################POST GAUSSIAN##################################################
					if fix_pst_gau == False:
						###########################################DEFINING PRE-PST REGIONS##################################################
						if ofs_ctr_fit == True:
							print
							print colored('Using Fitted Center From Offset Fit to Redefine Fitting Region!','yellow')
							print
							lmb_min_lim_line_ft = (CTRE_G_0-LINES[8][lines]) - MSK_NTMS*LINES[1][lines]
							lmb_max_lim_line_ft = (CTRE_G_0+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]
							mask_ft_pre = (lambda_glx <= LINES[0][lines] - pre_shf_ctr + pre_shf_lim) & (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim)
							mask_ft_pst = (lambda_glx >= LINES[0][lines] + pst_shf_ctr - pst_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
							mask_ft_plp = (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
							X0_f2DG_indx_PRE       = np.where(inten_glx[mask_ft_pre]==(max(inten_glx[mask_ft_pre])))[0]
							X0_f2DG_indx_PST       = np.where(inten_glx[mask_ft_pst]==(max(inten_glx[mask_ft_pst])))[0]
						else:
							print
							print colored('Using Expected Line Center to Define Fitting Region!','yellow')
							print
							mask_ft_pre = (lambda_glx <= LINES[0][lines] - pre_shf_ctr + pre_shf_lim) & (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim)
							mask_ft_pst = (lambda_glx >= LINES[0][lines] + pst_shf_ctr - pst_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
							mask_ft_plp = (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
							X0_f2DG_indx_PRE       = np.where(inten_glx[mask_ft_pre]==(max(inten_glx[mask_ft_pre])))[0]
							X0_f2DG_indx_PST       = np.where(inten_glx[mask_ft_pst]==(max(inten_glx[mask_ft_pst])))[0]

						print
						print colored('Region limits for fitting.','yellow')
						print colored('Central    : ' + str(LINES[0][lines]),'yellow')
						print colored('Central-PRE: ' + str(pre_shf_ctr) + '-' + str(LINES[0][lines]-pre_shf_ctr),'yellow')
						print colored('Central+PST: ' + str(pst_shf_ctr) + '-' + str(LINES[0][lines]+pst_shf_ctr),'yellow')
						print
						print colored('Limits:','yellow')
						print 'Central: lambda_glx >= ',lmb_min_lim_line_ft  ,'-','lambda_glx <= ',lmb_max_lim_line_ft
						print 'PRE    : lambda_glx <= ',LINES[0][lines] - pre_shf_ctr+pre_shf_lim,'-','lambda_glx >= ',LINES[0][lines] - pre_shf_ctr-pre_shf_lim
						print 'PST    : lambda_glx >= ',LINES[0][lines] + pst_shf_ctr-pst_shf_lim,'-','lambda_glx <= ',LINES[0][lines] + pst_shf_ctr+pst_shf_lim
						print
						print 'Total  : lambda_glx >= ',LINES[0][lines] - pre_shf_ctr-pre_shf_lim,'-','lambda_glx <= ',LINES[0][lines] - pre_shf_ctr+pst_shf_lim
						print
						###########################################DEFINING PRE-PST REGIONS##################################################

						#inten_glx[mask_ft_plp] = inten_glx[mask_ft_plp] - OFST_G_O #OFFSET -
						X0_f2DG_indx_PST       = np.where(inten_glx[mask_ft_pst]==(max(inten_glx[mask_ft_pst])))[0]
						x_b = lambda_glx[mask_ft_pst][X0_f2DG_indx_PST]
						y_b = inten_glx[mask_ft_pst][X0_f2DG_indx_PST]

						popt_C_PST, pcov_C_PST  = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
						perr_C_PST          = [999999.99999,999999.99999,999999.99999]
						CTRE_G_C_PST        = 999999.99999
						AMPL_G_C_PST        = 999999.99999
						SGMA_G_C_PST        = 999999.99999
						FWHM_G_C_PST        = 999999.99999
						EW_C_PST            = 999999.99999
						EWE_C_PST           = 999999.99999

						
						CTRE_G_C_PST_E      = 999999.99999
						AMPL_G_C_PST_E      = 999999.99999
						SGMA_G_C_PST_E      = 999999.99999
						CTRE_G_C_PST_cor    = 999999.99999
						AMPL_G_C_PST_cor    = 999999.99999
						SGMA_G_C_PST_cor    = 999999.99999
						chisqr_C_PST        = 999999.99999
						redchi_C_PST        = 999999.99999

						EW_C_PR2            = 999999.99999
						EWE_C_PR2           = 999999.99999

						if fit_vls_hdr == True and fix_pst_gau == False:
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CGL2',float(CTRE_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_AGL2',float(AMPL_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_SGL2',float(SGMA_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_FGL2',float(FWHM_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WGL2',float(EW_C_PST)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_EGL2',float(EWE_C_PST)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_CLE2',float(CTRE_G_C_PST_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_ALE2',float(AMPL_G_C_PST_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_SLE2',float(SGMA_G_C_PST_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))

							Header_Add(specfile_glx,str(LINES[5][lines])+'_XA2',float(x_b),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PST GAU-LNR X2 COO')
							Header_Add(specfile_glx,str(LINES[5][lines])+'_YA2',float(y_b),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PST GAU-LNR Y2 COO')
							Header_Add(specfile_glx,str(LINES[5][lines])+'_WPS2',float(EW_C_PST),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])   + ' EW   PST' + str(fit_type))
							Header_Add(specfile_glx,str(LINES[5][lines])+'_EPS2',float(EWE_C_PST),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])  + ' EWE  PST' + str(fit_type))
						else:
							print
							print colored('The fit (PST) values will not be added to the fits headers!','magenta')
							print
							pass
						if uft_lne_vls == False and fit_vls_hdr == True and int_vlf_hdr==True:
							print
							print colored('Initial Guess Values for line Fitting will be recorded!','yellow')
							print colored('Info input parameters (pre_gauss_shf, pre_gauss_ctr) in Spec_Stk_Stack_0.4.py!','yellow')
							print
							Header_Add(specfile_glx,str(LINES[5][lines])+'_GS2',float(pst_shf_lim) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Shf from expt ctr wvl for PST G-2')
							Header_Add(specfile_glx,str(LINES[5][lines])+'_GC2',float(pst_shf_ctr) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Gaussian Ctr Int Val for PST G-2')
						else:
							print
							print colored('Initial Guess Values for line Fitting will NOT be recorded!','yellow')
							print
							pass
					elif fix_pst_gau == True:
						pass
						
						print
						print colored('2 PST-gaussian already fitted!','yellow')
						print colored('Values from fits header','yellow')
						CTRE_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGL2')#,float(CTRE_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
						AMPL_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGL2')#,float(AMPL_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
						SGMA_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGL2')#,float(SGMA_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
						FWHM_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGL2')#,float(FWHM_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
						EW_C_PST       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGL2')#,float(EW_C_PST)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
						EWE_C_PST      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGL2')#,float(EWE_C_PST)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
						CTRE_G_C_PST_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLE2')#,float(CTRE_G_C_PST_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
						AMPL_G_C_PST_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALE2')#,float(AMPL_G_C_PST_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
						SGMA_G_C_PST_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_SLE2')#,float(SGMA_G_C_PST_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))

						x_b         = Header_Get(specfile_glx,str(LINES[5][lines])+'_XA2')#,float(x_b),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PST GAU-LNR X2 COO')
						y_b         = Header_Get(specfile_glx,str(LINES[5][lines])+'_YA2')#,float(y_b),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PST GAU-LNR Y2 COO')
						EW_C_PS2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_WPS2')#,float(EW_C_PS2),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])   + ' EW   PST' + str(fit_type))
						EWE_C_PS2   = Header_Get(specfile_glx,str(LINES[5][lines])+'_EPS2')#,float(EWE_C_PS2),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])  + ' EWE  PST' + str(fit_type))
						
					print
					print colored(str(LINES[0][lines])+'-'+str(LINES[3][lines])+'-PST','yellow')
					print
					print colored(str(LINES[5][lines])+'_CGL2: ' + str(CTRE_G_C_PST)  ,'yellow')
					print colored(str(LINES[5][lines])+'_AGL2: ' + str(AMPL_G_C_PST)  ,'yellow')
					print colored(str(LINES[5][lines])+'_SGL2: ' + str(SGMA_G_C_PST)  ,'yellow')
					print colored(str(LINES[5][lines])+'_FGL2: ' + str(FWHM_G_C_PST)  ,'yellow')
					print colored(str(LINES[5][lines])+'_WGL2: ' + str(EW_C_PST)      ,'yellow')
					print colored(str(LINES[5][lines])+'_EGL2: ' + str(EWE_C_PST),'yellow')
					print
					print colored('Fit Values Center, Amplitude, Sigma ('+fit_type+'):','yellow')
					print colored(str(CTRE_G_C_PST)+', '+str(AMPL_G_C_PST)+', '+str(SGMA_G_C_PST),'yellow')
					print					
					###################################################POST GAUSSIAN##################################################										

					###############################################COMPUTING TOTAL AREA###############################################
					print colored('Computing Flux Area','yellow')
					'''
					x_a = lambda_glx[mask_ft_pre][X0_f2DG_indx_PRE]
					y_a = inten_glx[mask_ft_pre][X0_f2DG_indx_PRE]
					x_b = lambda_glx[mask_ft_pst][X0_f2DG_indx_PST]
					y_b = inten_glx[mask_ft_pst][X0_f2DG_indx_PST]
					'''
					#############################################COMPUTING LINEAR AREA###################################################
					slope_line1 = (y_a-y_b)/(x_a-x_b)
					slope_line2 = (y_b-y_a)/(x_b-x_a)
					b1 = y_a - (slope_line1*x_a)
					b2 = y_b - (slope_line1*x_b)
					print
					print  colored('Computing Linear Area considering peak points:','yellow')
					print 'Point A: ',x_a,y_a
					print 'Point B: ',x_b,y_b
					print 'Slope: ',slope_line1
					print 'Slope: ',slope_line2
					print 'b: ',b1,b2
					print
					W_C_LNR   = integrate.quad(lambda x: slope_line1*(x) + b1 - 1, x_a, x_b)
					EW_C_LNR  = np.round(abs(np.asarray(W_C_LNR[0])),3)
					EWE_C_LNR = np.round(abs(np.asarray(W_C_LNR[1])),10)

					print (slope_line1*(x_a**2))/2 + (b1*x_a)
					print (slope_line1*(x_b**2))/2 + (b1*x_b)
					print ((slope_line1*(x_a**2))/2 + (b1*x_a)) - ((slope_line1*(x_b**2))/2 + (b1*x_b))
					#############################################COMPUTING LINEAR AREA###################################################

					if EW_C_PRE == 999999.99999:
						EW_C_PRE = 0
					else:
						pass
					if EWE_C_PST == 999999.99999:
						EWE_C_PST = 0
					else:
						pass

					EWMT       = EW_C - EW_C_PRE - EWE_C_PST
					print
					print colored('Area CTR-G: ' + str(EW_C),'yellow')
					print colored('Area PRE-G: ' + str(EW_C_PR1),'blue')
					print colored('Area PST-G: ' + str(EW_C_PST),'magenta')
					print colored('Area LNR:   ' + str(EW_C_LNR),'cyan')
					print colored('Area TOT:   ' + str(EWMT),'yellow')
					print
					###############################################COMPUTING TOTAL AREA###############################################
					if fit_vls_hdr == True:
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WR1',float(EW_C_LNR),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])  + ' EW   LNR' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_ER1',float(EWE_C_LNR),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  LNR' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WTOT',float(EWMT),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])       + ' EW   TOT' + str(fit_type))
					else:
						print
						print colored('The LINEAR AND TOTAL Areas values will not be updated to the fits headers!','magenta')
						print
					#################################DEFINE AREA FOR LATER ON SUBSTRACT OFFSET FOR PLOTING###############################
					###########################################DEFINING PRE-PST REGIONS##################################################
					if ofs_ctr_fit == True:
						print
						print colored('Using Fitted Center From Offset Fit to Redefine Fitting Region!','yellow')
						print
						lmb_min_lim_line_ft = (CTRE_G_0-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
						lmb_max_lim_line_ft = (CTRE_G_0+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]
						mask_ft_pre = (lambda_glx <= LINES[0][lines] - pre_shf_ctr + pre_shf_lim) & (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim)
						mask_ft_pst = (lambda_glx >= LINES[0][lines] + pst_shf_ctr - pst_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
						mask_ft_plp = (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
						X0_f2DG_indx_PRE       = np.where(inten_glx[mask_ft_pre]==(max(inten_glx[mask_ft_pre])))[0]
						X0_f2DG_indx_PST       = np.where(inten_glx[mask_ft_pst]==(max(inten_glx[mask_ft_pst])))[0]
					else:
						print
						print colored('Using Expected Line Center to Define Fitting Region!','yellow')
						print
						mask_ft_pre = (lambda_glx <= LINES[0][lines] - pre_shf_ctr + pre_shf_lim) & (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim)
						mask_ft_pst = (lambda_glx >= LINES[0][lines] + pst_shf_ctr - pst_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
						mask_ft_plp = (lambda_glx >= LINES[0][lines] - pre_shf_ctr - pre_shf_lim) & (lambda_glx <= LINES[0][lines] + pst_shf_ctr + pst_shf_lim)
						X0_f2DG_indx_PRE       = np.where(inten_glx[mask_ft_pre]==(max(inten_glx[mask_ft_pre])))[0]
						X0_f2DG_indx_PST       = np.where(inten_glx[mask_ft_pst]==(max(inten_glx[mask_ft_pst])))[0]

					print
					print colored('Region limits for fitting.','yellow')
					print colored('Central    : ' + str(LINES[0][lines]),'yellow')
					print colored('Central-PRE: ' + str(pre_shf_ctr) + '-' + str(LINES[0][lines]-pre_shf_ctr),'yellow')
					print colored('Central+PST: ' + str(pst_shf_ctr) + '-' + str(LINES[0][lines]+pst_shf_ctr),'yellow')
					print
					print colored('Limits:','yellow')
					print 'Central: lambda_glx >= ',lmb_min_lim_line_ft  ,'-','lambda_glx <= ',lmb_max_lim_line_ft
					print 'PRE    : lambda_glx >= ',LINES[0][lines] - pre_shf_ctr-pre_shf_lim,'-','lambda_glx <= ',LINES[0][lines] - pre_shf_ctr+pre_shf_lim
					print 'PST    : lambda_glx >= ',LINES[0][lines] + pst_shf_ctr-pst_shf_lim,'-','lambda_glx <= ',LINES[0][lines] + pst_shf_ctr+pst_shf_lim
					print
					print 'Total  : lambda_glx >= ',LINES[0][lines] - pre_shf_ctr-pre_shf_lim,'-','lambda_glx <= ',LINES[0][lines] - pre_shf_ctr+pst_shf_lim
					print

					###########################################DEFINING PRE-PST REGIONS##################################################
					#################################DEFINE AREA FOR LATER ON SUBSTRACT OFFSET FOR PLOTING###############################
				elif 'Dbl' in LINES[3][lines] and fit_fnct=='gauss' and mke_lne_fit == False:
					print
					print colored('1D Gaussian Fit Mode Choosen: Lmfit (Offset)','cyan')
					print
					print 
					print colored('Double Line Fit (Ind)','yellow')
					print colored(LINES[3][lines-2]  + '-' + str(LINES[0][lines-2])   + '-' + str(LINES[1][lines-2]),'cyan')
					print LINES[3][lines]+ '-' + str(LINES[0][lines]) + '-'  + str(LINES[1][lines])
					print
					ivl_fts_hdr = True
					########################Getting Line Fitting Initial Values From Statcked Spectrum Fits Header#########################
					if ivl_fts_hdr == True:
						try:
							L1_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WF01')        #LINES-1  Wdt-Fit  1GF-IntVal      WIDTH-FIT
							L2_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WP01')        #LINES-2  Wdt-Plt  1GF-IntVal      WIDTH-PLT
							L7_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CF01')        #LINES-7  Ctr Fit Bnds  1GF-IntVal CTR-FIT-BNDS
							L8_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CO01')        #LINES-8  Ctr Fit Ofst  1GF-IntVal CTR-OFFSET
							L10_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF01')        #LINES-10 Ctr Fit Amp   1GF-IntVal LNE_AMP_BNDS

							L1_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WF02')        #LINES-1  Wdt-Fit  1GF-IntVal      WIDTH-FIT
							L2_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WP02')        #LINES-2  Wdt-Plt  1GF-IntVal      WIDTH-PLT
							L7_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CF02')        #LINES-7  Ctr Fit Bnds  1GF-IntVal CTR-FIT-BNDS
							L8_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CO02')        #LINES-8  Ctr Fit Ofst  1GF-IntVal CTR-OFFSET
							L10_2 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF02')        #LINES-10 Ctr Fit Amp   1GF-IntVal LNE_AMP_BNDS

							print
							print colored('Initial fit variables from fits header!','yellow')
							print
							print colored('1: ' + LINES[3][lines-2]  + '-' + str(LINES[0][lines-2]),'cyan')
							print colored('Headers:','cyan')
							print colored(str(LINES[5][lines])+'_WF01' + ' LINES-1 Wdt-Fit  1GF-IntVal      : ' + str(L1_1),'cyan')
							print colored(str(LINES[5][lines])+'_WP01' + ' LINES-2 Wdt-Plt  1GF-IntVal      : ' + str(L2_1),'cyan')
							print colored(str(LINES[5][lines])+'_CF01' + ' LINES-7 Ctr Fit Bnds  1GF-IntVal : ' + str(L7_1),'cyan')
							print colored(str(LINES[5][lines])+'_CO01' + ' LINES-8 Ctr Fit Ofst  1GF-IntVal : ' + str(L8_1),'cyan')
							print colored(str(LINES[5][lines])+'_AF01' + ' LINES-10 Amp Fit Bnds  1GF-IntVal: ' + str(L10_1),'cyan')
							print
							print colored('2: ' + LINES[3][lines-1]  + '-' + str(LINES[0][lines-1]),'magenta')
							print colored('Headers:','magenta')
							print colored(str(LINES[5][lines])+'_WF02' + ' LINES-1 Wdt-Fit  1GF-IntVal      : ' + str(L1_2),'magenta')
							print colored(str(LINES[5][lines])+'_WP02' + ' LINES-2 Wdt-Plt  1GF-IntVal      : ' + str(L2_2),'magenta')
							print colored(str(LINES[5][lines])+'_CF02' + ' LINES-7 Ctr Fit Bnds  1GF-IntVal : ' + str(L7_2),'magenta')
							print colored(str(LINES[5][lines])+'_CO02' + ' LINES-8 Ctr Fit Ofst  1GF-IntVal : ' + str(L8_2),'magenta')
							print colored(str(LINES[5][lines])+'_AF02' + ' LINES-10 Amp Fit Bnds  1GF-IntVal: ' + str(L10_2),'magenta')
							print colored('*****Success!******','yellow')
							print
						except ValueError:
							print
							print colored('Headers containing initial fit variables not found!','yellow')
							print colored('Run Spec_Stk_Stack first or use value from Lines_Dictionary.py with ivl_fts_hdr = False:','yellow')
							print colored('Headers:','yellow')
							print
							print colored('1: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'cyan')
							print colored(str(LINES[5][lines])+'_WF_0' + ' LINES-1 Wdt-Fit  1GF-IntVal','cyan')
							print colored(str(LINES[5][lines])+'_WP_0' + ' LINES-2 Wdt-Plt  1GF-IntVal','cyan')
							print colored(str(LINES[5][lines])+'_CF_0' + ' LINES-7 Ctr Fit Bnds  1GF-IntVal','cyan')
							print colored(str(LINES[5][lines])+'_CO_0' + ' LINES-8 Ctr Fit Ofst  1GF-IntVal','cyan')
							print colored(str(LINES[5][lines])+'_AF_0' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','cyan')
							print
							print colored('2: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'magenta')
							print colored(str(LINES[5][lines])+'_WF_0' + ' LINES-1 Wdt-Fit  1GF-IntVal','magenta')
							print colored(str(LINES[5][lines])+'_WP_0' + ' LINES-2 Wdt-Plt  1GF-IntVal','magenta')
							print colored(str(LINES[5][lines])+'_CF_0' + ' LINES-7 Ctr Fit Bnds  1GF-IntVal','magenta')
							print colored(str(LINES[5][lines])+'_CO_0' + ' LINES-8 Ctr Fit Ofst  1GF-IntVal','magenta')
							print colored(str(LINES[5][lines])+'_AF_0' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','magenta')
							print '*****'
							print
							quit()
						try:
							L10_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF_0')        #LINES-8 Ctr Fit Ofst  1GF-IntVal LNE_AMP_BNDS
							L10_2 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF_0')        #LINES-8 Ctr Fit Ofst  1GF-IntVal LNE_AMP_BNDS
							print colored('1: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'cyan')
							print colored(str(LINES[5][lines])+'_AF_0' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','cyan')
							print colored('2: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'magenta')
							print colored(str(LINES[5][lines])+'_AF_0' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','magenta')
							print colored('*****Success!******','yellow')
							print
						except KeyError:
							print
							print colored('Header not found!','yellow')
							print colored('Adding Header with default valuee 0.001:','yellow')
							print colored('1: ' + LINES[3][lines-2]  + '-' + str(LINES[0][lines-2]),'cyan')							
							print colored(str(LINES[5][lines-2])+'_AF01' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','cyan')
							print colored('2: ' + LINES[3][lines-1]  + '-' + str(LINES[0][lines-1]),'magenta')							
							print colored(str(LINES[5][lines-1])+'_AF02' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','magenta')
							Header_Get_Add(specfile_glx,str(LINES[5][lines])+'_AF01',0.001,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' LINES-10 Amp Fit Bnds  1GF-IntVal')
							Header_Get_Add(specfile_glx,str(LINES[5][lines])+'_AF02',0.001,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' LINES-10 Amp Fit Bnds  1GF-IntVal')
							L10_1 = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_AF01')        #LINES-8 Ctr Fit Ofst  1GF-IntVal LNE_AMP_BNDS
							L10_1 = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_AF02')        #LINES-8 Ctr Fit Ofst  1GF-IntVal LNE_AMP_BNDS
							print colored('*****Success!******','yellow')
							print
						################FOR CASES WHERE KLINE WIIDHT ==0################
						if L1_1  == 0:
							L1_1  = 1#LINES[1][lines]
						else:
							pass
						if L1_2  == 0:
							L1_2  = 1#LINES[1][lines]
						else:
							pass
						################FOR CASES WHERE KLINE WIIDHT ==0################
					elif ivl_fts_hdr == False:
						L1_1  = LINES[1][lines-2]
						L2_1  = LINES[2][lines-2]
						L7_1  = LINES[7][lines-2]
						L8_1  = LINES[8][lines-2]
						L10_1 = LINES[10][lines-2]

						L1_2  = LINES[1][lines-1]
						L2_2  = LINES[2][lines-1]
						L7_2  = LINES[7][lines-1]
						L8_2  = LINES[8][lines-1]
						L10_2 = LINES[10][lines-1]
						print
						print colored('Initial fit variables from Lines_Dictionary.py!','yellow')
						print					
					print colored('Initial Values: ','cyan')
					print colored('1: ' + LINES[3][lines-2]  + '-' + str(LINES[0][lines-2]),'cyan')					
					print colored(str(LINES[5][lines])+'_WF01' + ': ' + str(L1_1),'cyan')
					print colored(str(LINES[5][lines])+'_WP01' + ': ' + str(L2_1),'cyan')
					print colored(str(LINES[5][lines])+'_CF01' + ': ' + str(L7_1),'cyan')
					print colored(str(LINES[5][lines])+'_CO01' + ': ' + str(L8_1),'cyan')
					print colored(str(LINES[5][lines])+'_AF01' + ': ' + str(L10_1),'cyan')
					print
					print colored('Initial Values: ','magenta')
					print colored('2: ' + LINES[3][lines-1]  + '-' + str(LINES[0][lines-1]),'magenta')					
					print colored(str(LINES[5][lines])+'_WF02' + ': ' + str(L1_2),'magenta')
					print colored(str(LINES[5][lines])+'_WP02' + ': ' + str(L2_2),'magenta')
					print colored(str(LINES[5][lines])+'_CF02' + ': ' + str(L7_2),'magenta')
					print colored(str(LINES[5][lines])+'_CO02' + ': ' + str(L8_2),'magenta')
					print colored(str(LINES[5][lines])+'_AF02' + ': ' + str(L10_2),'magenta')
					print
					########################Getting Line Fitting Initial Values From Statcked Spectrum Fits Header#########################
					##################################################CENTRAL GAUSSIAN-1###################################################
					lmb_min_lim_line_ft = (LINES[0][lines-2]+L8_1) - MSK_NTMS*L1_1 ##IT WAS LINE CTR - LINE OFFSET
					lmb_max_lim_line_ft = (LINES[0][lines-2]+L8_1) + MSK_NTMS*L1_1
					lmb_min_lim_line    = (LINES[0][lines-2]+L8_1)*(1+z_glx_Ps) - 1.5*MSK_NTMS*L2_1#- 20#L2_1 - 10 ##IT WAS LINE CTR - LINE OFFSET
					lmb_max_lim_line    = (LINES[0][lines-2]+L8_1)*(1+z_glx_Ps) + 1.5*MSK_NTMS*L2_1#+ 20#L2_1 + 10

					mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
					mask_ft    = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
					label_glx  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function

					#CTRE_G_0_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CF01')#,float(CTRE_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct')
					#AMPL_G_0_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF01')#,float(AMPL_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct')
					#FWHM_G_0_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FF01')#,float(FWHM_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct')
					#EW_0_1        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WF01')#,float(EW_0)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct')
					#EWE_0_1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EF01')#,float(EWE_0)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct')

					#CTRE_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLO1')#,float(CTRE_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Offst' + str(fit_type))
					#AMPL_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALO1')#,float(AMPL_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Offst' + str(fit_type))
					#FWHM_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FLO1')#,float(FWHM_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Offst' + str(fit_type))
					#EW_O_1        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WLO1')#,float(EW_O)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Offst' + str(fit_type))
					#EWE_O_1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_ELO1')#,float(EWE_O)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Offst' + str(fit_type))
					#OFST_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_OFO1')#,float(OFST_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ofst 1GF Offst' + str(fit_type))

					CTRE_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLC1')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
					AMPL_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALC1')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
					SGMA_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_SLC1')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
					FWHM_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FLC1')#,float(FWHM_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
					#EW_C_1        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WLC1')#,float(EW_C)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
					#EWE_C_1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_ELC1')#,float(EWE_C)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
					#CTRE_G_C_1_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CEC1')#,float(CTRE_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
					#AMPL_G_C_1_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_AEC1')#,float(AMPL_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
					#SGMA_G_C_1_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_SEC1')#,float(SGMA_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))

					#chisqr_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CHL1')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 1GF' + str(fit_type))
					#redchi_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CRL1')#,float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 Reduced 1GF' + str(fit_type))

					#CTRE_G_0_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CF02')#,float(CTRE_G_0) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'Ctr  1GF Crct')
					#AMPL_G_0_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF02')#,float(AMPL_G_0) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'Amp  1GF Crct')
					#FWHM_G_0_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FF02')#,float(FWHM_G_0) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'FWHM 1GF Crct')
					#EW_0_2        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WF02')#,float(EW_0)     ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'EW   1GF Crct')
					#EWE_0_2       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EF02')#,float(EWE_0)    ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'EWE  1GF Crct')

					#CTRE_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLO2')#,float(CTRE_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ctr  1GF Offst' + str(fit_type))
					#AMPL_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALO2')#,float(AMPL_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Amp  1GF Offst' + str(fit_type))
					#FWHM_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FLO2')#,float(FWHM_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' FWHM 1GF Offst' + str(fit_type))
					#EW_O_2        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WLO2')#,float(EW_O)      ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EW   1GF Offst' + str(fit_type))
					#EWE_O_2       = Header_Get(specfile_glx,str(LINES[5][lines])+'_ELO2')#,float(EWE_O)     ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EWE  1GF Offst' + str(fit_type))
					#OFST_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_OFO2')#,float(OFST_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ofst 1GF Offst' + str(fit_type))

					CTRE_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLC2')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ctr  1GF Crct' + str(fit_type))
					AMPL_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALC2')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Amp  1GF Crct' + str(fit_type))
					SGMA_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_SLC2')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Sigm 1GF Crct' + str(fit_type))
					FWHM_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FLC2')#,float(FWHM_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' FWHM 1GF Crct' + str(fit_type))
					#EW_C_2        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WLC2')#,float(EW_C)      ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EW   1GF Crct' + str(fit_type))
					#EWE_C_2       = Header_Get(specfile_glx,str(LINES[5][lines])+'_ELC2')#,float(EWE_C)     ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EWE  1GF Crct' + str(fit_type))
					#CTRE_G_C_2_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CEC2')#,float(CTRE_G_C_E),header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ctr  err 1GF Crct' + str(fit_type))
					#AMPL_G_C_2_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_AEC2')#,float(AMPL_G_C_E),header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Amp  err 1GF Crct' + str(fit_type))
					#SGMA_G_C_2_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_SEC2')#,float(SGMA_G_C_E),header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Sigm err 1GF Crct' + str(fit_type))
					#chisqr_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CHL2')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Chi2 1GF' + str(fit_type))
					#redchi_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CRL2')#,float(redchi_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Chi2 Reduced 1GF' + str(fit_type))
				elif 'Dbl' in LINES[3][lines] and fit_fnct=='gaussM'and mke_lne_fit == False:
					fit_typ = 'GM'
					#GAUSSIAN FIT
					MSK_NTMS=2.5
					print
					print colored('1D Gaussian Fit Mode Choosen: Lmfit (Offset)','cyan')
					print
					print 
					print colored('Double Line Fit (Ind)','yellow')
					print colored(LINES[3][lines-2]  + '-' + str(LINES[0][lines-2])   + '-' + str(LINES[1][lines-2]),'cyan')
					print LINES[3][lines]+ '-' + str(LINES[0][lines]) + '-'  + str(LINES[1][lines])
					print colored(LINES[3][lines-1]+ '-' + str(LINES[0][lines-1]) + '-' + str(LINES[1][lines-1]),'magenta')
					#####################################################Getting Line Fitting Initial Values From Statcked Spectrum Fits Header#####################################################
					ivl_fts_hdr = True
					if ivl_fts_hdr == True:
						try:
							L1_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WM01')        #LINES-1  Wdt-Fit  1GF-IntVal      WIDTH-FIT
							L2_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WM01')        #LINES-2  Wdt-Plt  1GF-IntVal      WIDTH-PLT
							L7_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CM01')        #LINES-7  Ctr Fit Bnds  1GF-IntVal CTR-FIT-BNDS
							L8_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CM01')        #LINES-8  Ctr Fit Ofst  1GF-IntVal CTR-OFFSET
							L10_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AM01')        #LINES-10 Ctr Fit Amp   1GF-IntVal LNE_AMP_BNDS

							L1_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WM02')        #LINES-1  Wdt-Fit  1GF-IntVal      WIDTH-FIT
							L2_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WM02')        #LINES-2  Wdt-Plt  1GF-IntVal      WIDTH-PLT
							L7_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CM02')        #LINES-7  Ctr Fit Bnds  1GF-IntVal CTR-FIT-BNDS
							L8_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CM02')        #LINES-8  Ctr Fit Ofst  1GF-IntVal CTR-OFFSET
							L10_2 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AM02')        #LINES-10 Ctr Fit Amp   1GF-IntVal LNE_AMP_BNDS

							print
							print colored('Initial fit variables from fits header!','yellow')
							print
							print colored('1: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'cyan')
							print colored('Headers:','cyan')
							print colored(str(LINES[5][lines])+'_WM01' + ' LINES-1 Wdt-Fit  1GF-IntVal      : ' + str(L1_1),'cyan')
							print colored(str(LINES[5][lines])+'_WM01' + ' LINES-2 Wdt-Plt  1GF-IntVal      : ' + str(L2_1),'cyan')
							print colored(str(LINES[5][lines])+'_CM01' + ' LINES-7 Ctr Fit Bnds  1GF-IntVal : ' + str(L7_1),'cyan')
							print colored(str(LINES[5][lines])+'_CM01' + ' LINES-8 Ctr Fit Ofst  1GF-IntVal : ' + str(L8_1),'cyan')
							print colored(str(LINES[5][lines])+'_AM01' + ' LINES-10 Amp Fit Bnds  1GF-IntVal: ' + str(L10_1),'cyan')
							print
							print colored('2: ' + LINES[3][lines-1]  + '-' + str(LINES[0][lines-1]),'magenta')
							print colored('Headers:','magenta')
							print colored(str(LINES[5][lines])+'_WM02' + ' LINES-1 Wdt-Fit  1GF-IntVal      : ' + str(L1_2),'magenta')
							print colored(str(LINES[5][lines])+'_WM02' + ' LINES-2 Wdt-Plt  1GF-IntVal      : ' + str(L2_2),'magenta')
							print colored(str(LINES[5][lines])+'_CM02' + ' LINES-7 Ctr Fit Bnds  1GF-IntVal : ' + str(L7_2),'magenta')
							print colored(str(LINES[5][lines])+'_CM02' + ' LINES-8 Ctr Fit Ofst  1GF-IntVal : ' + str(L8_2),'magenta')
							print colored(str(LINES[5][lines])+'_AM02' + ' LINES-10 Amp Fit Bnds  1GF-IntVal: ' + str(L10_2),'magenta')
							print colored('*****Success!******','yellow')
							print
						except KeyError:
							print
							print colored('Headers containing initial fit variables not found!','yellow')
							print colored('Run Spec_Stk_Stack first or use value from Lines_Dictionary.py with ivl_fts_hdr = False:','yellow')
							print colored('Headers:','yellow')
							print
							print colored('1: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'cyan')
							print colored(str(LINES[5][lines])+'_WF_0' + ' LINES-1 Wdt-Fit  1GF-IntVal','cyan')
							print colored(str(LINES[5][lines])+'_WP_0' + ' LINES-2 Wdt-Plt  1GF-IntVal','cyan')
							print colored(str(LINES[5][lines])+'_CF_0' + ' LINES-7 Ctr Fit Bnds  1GF-IntVal','cyan')
							print colored(str(LINES[5][lines])+'_CO_0' + ' LINES-8 Ctr Fit Ofst  1GF-IntVal','cyan')
							print colored(str(LINES[5][lines])+'_AF_0' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','cyan')
							print
							print colored('2: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'magenta')
							print colored(str(LINES[5][lines])+'_WF_0' + ' LINES-1 Wdt-Fit  1GF-IntVal','magenta')
							print colored(str(LINES[5][lines])+'_WP_0' + ' LINES-2 Wdt-Plt  1GF-IntVal','magenta')
							print colored(str(LINES[5][lines])+'_CF_0' + ' LINES-7 Ctr Fit Bnds  1GF-IntVal','magenta')
							print colored(str(LINES[5][lines])+'_CO_0' + ' LINES-8 Ctr Fit Ofst  1GF-IntVal','magenta')
							print colored(str(LINES[5][lines])+'_AF_0' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','magenta')
							print '*****'
							print
							print
							print colored('Initial fit variables from fits header!','yellow')
							L1_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WF01')        #LINES-1  Wdt-Fit  1GF-IntVal      WIDTH-FIT
							L2_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WP01')        #LINES-2  Wdt-Plt  1GF-IntVal      WIDTH-PLT
							L7_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CF01')        #LINES-7  Ctr Fit Bnds  1GF-IntVal CTR-FIT-BNDS
							L8_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CO01')        #LINES-8  Ctr Fit Ofst  1GF-IntVal CTR-OFFSET
							L10_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF01')        #LINES-10 Ctr Fit Amp   1GF-IntVal LNE_AMP_BNDS

							L1_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WF02')        #LINES-1  Wdt-Fit  1GF-IntVal      WIDTH-FIT
							L2_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WP02')        #LINES-2  Wdt-Plt  1GF-IntVal      WIDTH-PLT
							L7_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CF02')        #LINES-7  Ctr Fit Bnds  1GF-IntVal CTR-FIT-BNDS
							L8_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CO02')        #LINES-8  Ctr Fit Ofst  1GF-IntVal CTR-OFFSET
							L10_2 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF02')        #LINES-10 Ctr Fit Amp   1GF-IntVal LNE_AMP_BNDS

							print
							print colored('1: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'cyan')
							print colored('Headers:','cyan')
							print colored(str(LINES[5][lines])+'_WF01' + ' LINES-1 Wdt-Fit  1GF-IntVal      : ' + str(L1_1),'cyan')
							print colored(str(LINES[5][lines])+'_WP01' + ' LINES-2 Wdt-Plt  1GF-IntVal      : ' + str(L2_1),'cyan')
							print colored(str(LINES[5][lines])+'_CF01' + ' LINES-7 Ctr Fit Bnds  1GF-IntVal : ' + str(L7_1),'cyan')
							print colored(str(LINES[5][lines])+'_CO01' + ' LINES-8 Ctr Fit Ofst  1GF-IntVal : ' + str(L8_1),'cyan')
							print colored(str(LINES[5][lines])+'_AF01' + ' LINES-10 Amp Fit Bnds  1GF-IntVal: ' + str(L10_1),'cyan')
							print
							print colored('2: ' + LINES[3][lines-1]  + '-' + str(LINES[0][lines-1]),'magenta')
							print colored('Headers:','magenta')
							print colored(str(LINES[5][lines])+'_WF01' + ' LINES-1 Wdt-Fit  1GF-IntVal      : ' + str(L1_2),'magenta')
							print colored(str(LINES[5][lines])+'_WP01' + ' LINES-2 Wdt-Plt  1GF-IntVal      : ' + str(L2_2),'magenta')
							print colored(str(LINES[5][lines])+'_CF01' + ' LINES-7 Ctr Fit Bnds  1GF-IntVal : ' + str(L7_2),'magenta')
							print colored(str(LINES[5][lines])+'_CO01' + ' LINES-8 Ctr Fit Ofst  1GF-IntVal : ' + str(L8_2),'magenta')
							print colored(str(LINES[5][lines])+'_AF01' + ' LINES-10 Amp Fit Bnds  1GF-IntVal: ' + str(L10_2),'magenta')
							print colored('*****Success!******','yellow')
							print							
							#quit()
						try:
							L10_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AM01')        #LINES-8 Ctr Fit Ofst  1GF-IntVal LNE_AMP_BNDS
							L10_2 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AM02')        #LINES-8 Ctr Fit Ofst  1GF-IntVal LNE_AMP_BNDS
							print colored('1: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'cyan')
							print colored(str(LINES[5][lines])+'_AM01' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','cyan')
							print colored('2: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'magenta')
							print colored(str(LINES[5][lines])+'_AM02' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','magenta')
							print colored('*****Success!******','yellow')
							print
						except KeyError:
							print
							print colored('Header not found!','yellow')
							print colored('Adding Header with default valuee 0.001:','yellow')
							print colored('1: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'cyan')							
							print colored(str(LINES[5][lines])+'_AM01' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','cyan')
							print colored('2: ' + LINES[3][lines]  + '-' + str(LINES[0][lines]),'magenta')							
							print colored(str(LINES[5][lines])+'_AM02' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','magenta')
							Header_Get_Add(specfile_glx,str(LINES[5][lines])+'_AM01',0.001,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-10 Amp Fit Bnds  1GF-IntVal')
							Header_Get_Add(specfile_glx,str(LINES[5][lines])+'_AM02',0.001,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-10 Amp Fit Bnds  1GF-IntVal')
							L10_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AM01')        #LINES-8 Ctr Fit Ofst  1GF-IntVal LNE_AMP_BNDS
							L10_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AM02')        #LINES-8 Ctr Fit Ofst  1GF-IntVal LNE_AMP_BNDS
							print colored('*****Success!******','yellow')
							print
						################FOR CASES WHERE KLINE WIIDHT ==0################
						if L1_1  == 0:
							L1_1  = 1#LINES[1][lines]
						else:
							pass
						if L1_2  == 0:
							L1_2  = 1#LINES[1][lines]
						else:
							pass
						################FOR CASES WHERE KLINE WIIDHT ==0################
					elif ivl_fts_hdr == False:
						L1_1  = LINES[1][lines-2]
						L2_1  = LINES[2][lines-2]
						L7_1  = LINES[7][lines-2]
						L8_1  = LINES[8][lines-2]
						L10_1 = LINES[10][lines-2]

						L1_2  = LINES[1][lines-1]
						L2_2  = LINES[2][lines-1]
						L7_2  = LINES[7][lines-1]
						L8_2  = LINES[8][lines-1]
						L10_2 = LINES[10][lines-1]
						print
						print colored('Initial fit variables from Lines_Dictionary.py!','yellow')
						print					
					print colored('Initial Values: ','cyan')
					print colored('1: ' + LINES[3][lines-2]  + '-' + str(LINES[0][lines-2]),'cyan')					
					print colored(str(LINES[5][lines-2])+'_WF01' + ': ' + str(L1_1),'cyan')
					print colored(str(LINES[5][lines-2])+'_WP01' + ': ' + str(L2_1),'cyan')
					print colored(str(LINES[5][lines-2])+'_CF01' + ': ' + str(L7_1),'cyan')
					print colored(str(LINES[5][lines-2])+'_CO01' + ': ' + str(L8_1),'cyan')
					print colored(str(LINES[5][lines-2])+'_AF01' + ': ' + str(L10_1),'cyan')
					print
					print colored('Initial Values: ','magenta')
					print colored('2: ' + LINES[3][lines-1]  + '-' + str(LINES[0][lines-1]),'magenta')					
					print colored(str(LINES[5][lines-1])+'_WF02' + ': ' + str(L1_2),'magenta')
					print colored(str(LINES[5][lines-1])+'_WP02' + ': ' + str(L2_2),'magenta')
					print colored(str(LINES[5][lines-1])+'_CF02' + ': ' + str(L7_2),'magenta')
					print colored(str(LINES[5][lines-1])+'_CO02' + ': ' + str(L8_2),'magenta')
					print colored(str(LINES[5][lines-1])+'_AF02' + ': ' + str(L10_2),'magenta')
					print
					#####################################################Getting Line Fitting Initial Values From Statcked Spectrum Fits Header#####################################################
					lmb_min_lim_line_ft = (LINES[0][lines-2]+L8_1) - MSK_NTMS*L1_1 ##IT WAS LINE CTR - LINE OFFSET
					lmb_max_lim_line_ft = (LINES[0][lines-2]+L8_1) + MSK_NTMS*L1_1
					lmb_min_lim_line    = (LINES[0][lines-2]+L8_1)*(1+z_glx_Ps) - 1.5*MSK_NTMS*L2_1#- 20#L2_1 - 10 ##IT WAS LINE CTR - LINE OFFSET
					lmb_max_lim_line    = (LINES[0][lines-2]+L8_1)*(1+z_glx_Ps) + 1.5*MSK_NTMS*L2_1#+ 20#L2_1 + 10

					mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
					mask_ft    = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
					label_glx  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function

					print
					print colored('1-CTR-gaussian already fitted!','yellow')
					print colored('Values from fits header','yellow')
					try:
						#CTRE_G_0_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CM01')#,float(CTRE_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct')
						#AMPL_G_0_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AM01')#,float(AMPL_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct')
						#FWHM_G_0_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FM01')#,float(FWHM_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct')
						#EW_0_1        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WM01')#,float(EW_0)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct')
						#EWE_0_1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EM01')#,float(EWE_0)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct')

						#CTRE_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CMO1')#,float(CTRE_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Offst' + str(fit_type))
						#AMPL_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AMO1')#,float(AMPL_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Offst' + str(fit_type))
						#FWHM_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FMO1')#,float(FWHM_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Offst' + str(fit_type))
						#EW_O_1        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WMO1')#,float(EW_O)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Offst' + str(fit_type))
						#EWE_O_1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EMO1')#,float(EWE_O)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Offst' + str(fit_type))
						#OFST_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_OMO1')#,float(OFST_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ofst 1GF Offst' + str(fit_type))

						CTRE_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CMC1')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
						AMPL_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AMC1')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
						SGMA_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_SMC1')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
						FWHM_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FMC1')#,float(FWHM_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
						#EW_C_1        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WMC1')#,float(EW_C)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
						#EWE_C_1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EMC1')#,float(EWE_C)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
						#CTRE_G_C_1_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CMC1')#,float(CTRE_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
						#AMPL_G_C_1_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_AMC1')#,float(AMPL_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
						#SGMA_G_C_1_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_SMC1')#,float(SGMA_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))

						#chisqr_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CHM1')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 1GF' + str(fit_type))
						#redchi_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CRM1')#,float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 Reduced 1GF' + str(fit_type))
					except KeyError:
						print
						print colored ('Gaussian Fit Parameters are not found on Fits Header!','yellow')
						print colored ('File  : ' + specfile_glx,'yellow')
						print colored ('Header: ' + str(LINES[5][lines-2])+'_CF01','yellow')
						print colored ('Gotta Fit first before fixing a component (CTR)!','yellow')
						print colored ('Or UnFix (fix_ctr_gau_1=False) For Plotting!','yellow')
						print colored ('Quitting!','yellow')
						print colored ('Line 15425!','yellow')
						print
						quit()
					print
					print colored('2-CTR-gaussian already fitted!','yellow')
					print colored('Values from fits header','yellow')
					print colored(LINES[3][lines],'yellow')
					print
					try:
						#CTRE_G_0_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CM02')#,float(CTRE_G_0) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'Ctr  1GF Crct')
						#AMPL_G_0_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AM02')#,float(AMPL_G_0) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'Amp  1GF Crct')
						#FWHM_G_0_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FM02')#,float(FWHM_G_0) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'FWHM 1GF Crct')
						#EW_0_2        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WM02')#,float(EW_0)     ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'EW   1GF Crct')
						#EWE_0_2       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EM02')#,float(EWE_0)    ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'EWE  1GF Crct')

						#CTRE_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CMO2')#,float(CTRE_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ctr  1GF Offst' + str(fit_type))
						#AMPL_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AMO2')#,float(AMPL_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Amp  1GF Offst' + str(fit_type))
						#FWHM_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FMO2')#,float(FWHM_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' FWHM 1GF Offst' + str(fit_type))
						#EW_O_2        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WMO2')#,float(EW_O)      ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EW   1GF Offst' + str(fit_type))
						#EWE_O_2       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EMO2')#,float(EWE_O)     ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EWE  1GF Offst' + str(fit_type))
						#OFST_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_OMO2')#,float(OFST_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ofst 1GF Offst' + str(fit_type))

						CTRE_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CMC2')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ctr  1GF Crct' + str(fit_type))
						AMPL_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AMC2')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Amp  1GF Crct' + str(fit_type))
						SGMA_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_SMC2')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Sigm 1GF Crct' + str(fit_type))
						FWHM_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FMC2')#,float(FWHM_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' FWHM 1GF Crct' + str(fit_type))
						#EW_C_2        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WMC2')#,float(EW_C)      ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EW   1GF Crct' + str(fit_type))
						#EWE_C_2       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EMC2')#,float(EWE_C)     ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EWE  1GF Crct' + str(fit_type))
						#CTRE_G_C_2_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CMC2')#,float(CTRE_G_C_E),header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ctr  err 1GF Crct' + str(fit_type))
						#AMPL_G_C_2_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_AMC2')#,float(AMPL_G_C_E),header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Amp  err 1GF Crct' + str(fit_type))
						#SGMA_G_C_2_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_SMC2')#,float(SGMA_G_C_E),header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Sigm err 1GF Crct' + str(fit_type))

						#chisqr_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CHM2')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Chi2 1GF' + str(fit_type))
						#redchi_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CRM2')#,float(redchi_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Chi2 Reduced 1GF' + str(fit_type))
					except KeyError:
						print
						print colored ('Gaussian Fit Parameters are not found on Fits Header!','yellow')
						print colored ('File  : ' + specfile_glx,'yellow')
						print colored ('Header: ' + str(LINES[5][lines-1])+'_CF01','yellow')
						print colored ('Gotta Fit first before fixing a component (CTR)!','yellow')
						print colored ('Or UnFix (fix_ctr_gau_2=False) For Plotting!','yellow')
						print colored ('Quitting!','yellow')
						print colored ('Line 15468!','yellow')
						print
						quit()
					try:
						print
						print colored('1 PRE-gaussian already fitted!','yellow')
						print colored('Values from fits header','yellow')
						#chisqr_C       = Header_Get(specfile_glx,str(LINES[5][lines])+'_CHML')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 1GF' + str(fit_type))
						#redchi_C       = Header_Get(specfile_glx,str(LINES[5][lines])+'_CRML')#,float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 Reduced 1GF' + str(fit_type))
						CTRE_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGM1')#,float(CTRE_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
						AMPL_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGM1')#,float(AMPL_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
						SGMA_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGM1')#,float(SGMA_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
						FWHM_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGM1')#,float(FWHM_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
						#EW_C_PRE       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGM1')#,float(EW_C_PRE)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
						#EWE_C_PRE      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGM1')#,float(EWE_C_PRE)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
						#CTRE_G_C_PRE_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_CME1')#,float(CTRE_G_C_PRE_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
						#AMPL_G_C_PRE_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_AME1')#,float(AMPL_G_C_PRE_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
						#SGMA_G_C_PRE_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_SME1')#,float(SGMA_G_C_PRE_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))
						
						#x_a            = Header_Get(specfile_glx,str(LINES[5][lines])+'_XAM1')#,float(x_a),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PRE GAU-LNR X1 COO')
						#y_a            = Header_Get(specfile_glx,str(LINES[5][lines])+'_YAM1')#,float(y_a),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PRE GAU-LNR Y1 COO')
						#pre_shf_lim    = Header_Get(specfile_glx,str(LINES[5][lines])+'_GSM1')#,float(pre_shf_lim) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Shf from expt ctr wvl for PRE G-1')
						#pre_shf_ctr    = Header_Get(specfile_glx,str(LINES[5][lines])+'_GCM1')#,float(pre_shf_ctr) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Gaussian Ctr Int Val for PRE G-1')
					except KeyError:
						print
						print colored ('Gaussian Fit Parameters are not found on Fits Header!' ,'yellow')
						print colored ('File  : ' + specfile_glx,'yellow')
						print colored ('Header: ' + str(LINES[5][lines])+'_CGM1','yellow')
						print colored ('Gotta Fit first before fixing a component (PRE)!','yellow')
						print colored ('Or UnFix (fix_pre_gau=False) For Plotting!','yellow')
						print colored ('Quitting!','yellow')
						print colored ('Line 15503!','yellow')
						print
						quit()
					try:
						print
						print colored('2 PST-gaussian already fitted!','yellow')
						print colored('Values from fits header','yellow')
						CTRE_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGM2')#,float(CTRE_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
						AMPL_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGM2')#,float(AMPL_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
						SGMA_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGM2')#,float(SGMA_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
						FWHM_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGM2')#,float(FWHM_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
						#EW_C_PST       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGM2')#,float(EW_C_PST)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
						#EWE_C_PST      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGM2')#,float(EWE_C_PST)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
						#CTRE_G_C_PST_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_CME2')#,float(CTRE_G_C_PST_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
						#AMPL_G_C_PST_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_AME2')#,float(AMPL_G_C_PST_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
						#SGMA_G_C_PST_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_SME2')#,float(SGMA_G_C_PST_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))
						
						#x_b            = Header_Get(specfile_glx,str(LINES[5][lines])+'_XAM2')#,float(x_b),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PST GAU-LNR X2 COO')
						#y_b            = Header_Get(specfile_glx,str(LINES[5][lines])+'_YAM2')#,float(y_b),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PST GAU-LNR Y2 COO')
						
						#pst_shf_lim    = Header_Get(specfile_glx,str(LINES[5][lines])+'_GSM2')#,float(pre_shf_lim) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Shf from expt ctr wvl for PRE G-1')
						#pst_shf_ctr    = Header_Get(specfile_glx,str(LINES[5][lines])+'_GCM2')#,float(pre_shf_ctr) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Gaussian Ctr Int Val for PRE G-1')
					except KeyError:
						print
						print colored ('Gaussian Fit Parameters are not found on Fits Header!','yellow')
						print colored ('File  : ' + specfile_glx,'yellow')
						print colored ('Header: ' + str(LINES[5][lines])+'_CF0M','yellow')
						print colored ('Gotta Fit first before fixing a component (PST)!','yellow')
						print colored ('Or UnFix (fix_pst_gau=False) For Plotting!','yellow')
						print colored ('Quitting!','yellow')
						print
						print colored ('Line 15530!','yellow')
						quit()
					try:
						print
						print colored('3- MDL-gaussian already fitted!','yellow')
						print colored('Values from fits header','yellow')
						CTRE_G_C_MDL   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGM3')#,float(CTRE_G_C_MDL)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
						AMPL_G_C_MDL   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGM3')#,float(AMPL_G_C_MDL)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
						SGMA_G_C_MDL   = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGM3')#,float(SGMA_G_C_MDL)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
						FWHM_G_C_MDL   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGM3')#,float(FWHM_G_C_MDL)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
						#EW_C_MDL       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGM3')#,float(EW_C_MDL)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
						#EWE_C_MDL      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGM3')#,float(EWE_C_MDL)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
						#CTRE_G_C_MDL_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_CME2')#,float(CTRE_G_C_MDL_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
						#AMPL_G_C_MDL_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_AME2')#,float(AMPL_G_C_MDL_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
						#SGMA_G_C_MDL_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_SME2')#,float(SGMA_G_C_MDL_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))
						
						#x_c            = Header_Get(specfile_glx,str(LINES[5][lines])+'_XAM3')#,float(x_c),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PST GAU-LNR X2 COO')
						#y_c            = Header_Get(specfile_glx,str(LINES[5][lines])+'_YAM3')#,float(y_c),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PST GAU-LNR Y2 COO')
						#EW_C_PS3       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WRM3')#,float(EW_C_PS3),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])   + ' EW   PST' + str(fit_type))
						#EWE_C_PS3      = Header_Get(specfile_glx,str(LINES[5][lines])+'_ERM3')#,float(EWE_C_PS3),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])  + ' EWE  PST' + str(fit_type))
						
						#mdl_shf_lim    = Header_Get(specfile_glx,str(LINES[5][lines])+'_GSM3')#,float(pre_shf_lim) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Shf from expt ctr wvl for PRE G-1')
						#mdl_shf_ctr    = Header_Get(specfile_glx,str(LINES[5][lines])+'_GCM3')#,float(pre_shf_ctr) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Gaussian Ctr Int Val for PRE G-1')
					except KeyError:
						print
						print colored ('Gaussian Fit Parameters are not found on Fits Header!','yellow')
						print colored ('File  : ' + specfile_glx,'yellow')
						print colored ('Header: ' + str(LINES[5][lines])+'_CF0M','yellow')
						print colored ('Gotta Fit first before fixing a component (PST)!','yellow')
						print colored ('Or UnFix (fix_pst_gau=False) For Plotting!','yellow')
						print colored ('Quitting!','yellow')
						print colored ('Line 15561!','yellow')
						print
						quit()			
				elif 'Dbl' not in LINES[3][lines] and fit_fnct=='gauss'   and mke_lne_fit == False:
					fit_typ = 'G'
					#GAUSSIAN FIT
					MSK_NTMS=2.5
					print
					print colored('1D Gaussian Fit Mode Choosen: Lmfit (Offset)','cyan')
					print

					lmb_min_lim_line_ft = (LINES[0][lines]-LINES[8][lines]) - MSK_NTMS*LINES[1][lines]  #IT WAS LINE CTR - LINE OFFSET
					lmb_max_lim_line_ft = (LINES[0][lines]+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]
					lmb_min_lim_line    = (LINES[0][lines]-LINES[8][lines])*(1+z_glx_Ps) - 1.5*MSK_NTMS*LINES[2][lines]#- 20#LINES[2][lines] - 10  #IT WAS LINE CTR - LINE OFFSET
					lmb_max_lim_line    = (LINES[0][lines]+LINES[8][lines])*(1+z_glx_Ps) + 1.5*MSK_NTMS*LINES[2][lines]#+ 20#LINES[2][lines] + 10

					mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
					mask_ft    = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
					label_glx  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function

					ivl_fts_hdr = True
					########################Getting Line Fitting Initial Values From Statcked Spectrum Fits Header#########################
					if ivl_fts_hdr == True:
						try:
							L1_0  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WF_0')        #LINES-1 Wdt-Fit  1GF-IntVal      WIDTH-FIT
							L2_0  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WP_0')        #LINES-2 Wdt-Plt  1GF-IntVal      WIDTH-PLT
							L7_0  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CF_0')        #LINES-7 Ctr Fit Bnds  1GF-IntVal CTR-FIT-BNDS
							L8_0  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CO_0')        #LINES-8 Ctr Fit Ofst  1GF-IntVal CTR-OFFSET
							L10_0 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF_0')        #LINES-8 Ctr Fit Ofst  1GF-IntVal LNE_AMP_BNDS
							print
							print colored(str(LINES[5][lines])+'_WF_0' + ' LINES-1 Wdt-Fit  1GF-IntVal      : ' + str(L1_0),'yellow')
							print colored(str(LINES[5][lines])+'_WP_0' + ' LINES-2 Wdt-Plt  1GF-IntVal      : ' + str(L2_0),'yellow')
							print colored(str(LINES[5][lines])+'_CF_0' + ' LINES-7 Ctr Fit Bnds  1GF-IntVal : ' + str(L7_0),'yellow')
							print colored(str(LINES[5][lines])+'_CO_0' + ' LINES-8 Ctr Fit Ofst  1GF-IntVal : ' + str(L8_0),'yellow')
							print colored(str(LINES[5][lines])+'_AF_0' + ' LINES-10 Amp Fit Bnds  1GF-IntVal: ' + str(L10_0),'yellow')
							print
						except KeyError:
							print
							print colored('Headers containing initial fit variables not found!','yellow')
							print colored('Run Spec_Stk_Stack first or use value from Lines_Dictionary.py with ivl_fts_hdr = False:','yellow')
							print colored('Headers:','yellow')
							print
							print colored(str(LINES[5][lines])+'_WF_0' + ' LINES-1 Wdt-Fit  1GF-IntVal','yellow')
							print colored(str(LINES[5][lines])+'_WP_0' + ' LINES-2 Wdt-Plt  1GF-IntVal','yellow')
							print colored(str(LINES[5][lines])+'_CF_0' + ' LINES-7 Ctr Fit Bnds  1GF-IntVal','yellow')
							print colored(str(LINES[5][lines])+'_CO_0' + ' LINES-8 Ctr Fit Ofst  1GF-IntVal','yellow')
							print colored(str(LINES[5][lines])+'_AF_0' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','yellow')
							print '*****'
							print
							quit()
						try:
							L10_0 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF_0')        #LINES-8 Ctr Fit Ofst  1GF-IntVal LNE_AMP_BNDS
							print colored(str(LINES[5][lines])+'_AF_0' + ' LINES-10 Amp Fit Bnds  1GF-IntVal: ' + str(L10_0),'yellow')
							print colored('*****Success-1!******','magenta')
							print
						except KeyError:
							print
							print colored('Header not found!','yellow')
							print colored('Adding Header with default valuee 0.001:','yellow')
							print colored(str(LINES[5][lines])+'_AF_0' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','yellow')
							Header_Get_Add(specfile_glx,str(LINES[5][lines])+'_AF_0',0.001,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-10 Amp Fit Bnds  1GF-IntVal')
							L10_0 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF_0')        #LINES-8 Ctr Fit Ofst  1GF-IntVal LNE_AMP_BNDS
							print colored(str(LINES[5][lines])+'_AF_0' + ' LINES-10 Amp Fit Bnds  1GF-IntVal: ' + str(L10_0),'yellow')
							print colored('*****Success-2!******','magenta')
							print
					else:
						pass
					try:
						#CTRE_G_O   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGLO')#,float(CTRE_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Offst' + str(fit_type))
						AMPL_G_O   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGLO')#,float(AMPL_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Offst' + str(fit_type))
						#SGMA_G_O   = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGLO')#,float(SGMA_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Offst' + str(fit_type))
						#FWHM_G_O   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGLO')#,float(FWHM_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Offst' + str(fit_type))
						#EW_O       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGLO')#,float(EW_O)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Offst' + str(fit_type))
						#EWE_O      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGLO')#,float(EWE_O)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Offst' + str(fit_type))
						#OFST_G_O   = Header_Get(specfile_glx,str(LINES[5][lines])+'_OFSO')#,float(OFST_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ofst 1GF Offst' + str(fit_type))

						CTRE_G_C   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGLC')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
						AMPL_G_C   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGLC')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
						SGMA_G_C   = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGLC')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
						FWHM_G_C   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGLC')#,float(FWHM_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
						EW_C       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGLC')#,float(EW_C)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
						#EWE_C      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGLC')#,float(EWE_C)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
						#CTRE_G_C_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLEC')#,float(CTRE_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
						#AMPL_G_C_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALEC')#,float(AMPL_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
						#SGMA_G_C_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_SLEC')#,float(SGMA_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))

						#chisqr_C   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CHGL')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 1GF' + str(fit_type))
						#redchi_C   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CRGL')#,float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 Reduced 1GF' + str(fit_type))	
					except KeyError:
						print
						print colored ('Gaussian Fit Parameters are not found on Fits Header!','yellow')
						print colored ('File  : ' + specfile_glx,'yellow')
						print colored ('Header: ' + str(LINES[5][lines-2])+'_CF01','yellow')
						print colored ('Gotta Fit first before fixing a component (CTR)!','yellow')
						print colored ('Or UnFix (fix_ctr_gau_1=False) For Plotting!','yellow')
						print colored ('Quitting!','yellow')
						print colored ('Line 15654!','yellow')
						print
						quit()
				elif 'Dbl' not in LINES[3][lines] and fit_fnct=='gaussM'  and mke_lne_fit == False:
					fit_typ = 'GM'
					#GAUSSIAN FIT
					MSK_NTMS=2.5
					print
					print colored('1D Gaussian Fit Mode Choosen: Lmfit (Offset)','cyan')
					print
					ivl_fts_hdr = True

					#####################################################Getting Line Fitting Initial Values From Statcked Spectrum Fits Header#####################################################
					if ivl_fts_hdr == True:
						try:
							L1_0  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WF_0')        #LINES-1 Wdt-Fit  1GF-IntVal      WIDTH-FIT
							L2_0  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WP_0')        #LINES-2 Wdt-Plt  1GF-IntVal      WIDTH-PLT
							L7_0  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CF_0')        #LINES-7 Ctr Fit Bnds  1GF-IntVal CTR-FIT-BNDS
							L8_0  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CO_0')        #LINES-8 Ctr Fit Ofst  1GF-IntVal CTR-OFFSET
							L10_0 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF_0')       #LINES-8 Ctr Fit Ofst  1GF-IntVal LNE_AMP_BNDS
							print
							print colored('Initial fit variables from fits header!','yellow')
							print colored('Headers:','yellow')
							print
							print colored(str(LINES[5][lines])+'_WF_0' + ' LINES-1 Wdt-Fit  1GF-IntVal      : ' + str(L1_0),'yellow')
							print colored(str(LINES[5][lines])+'_WP_0' + ' LINES-2 Wdt-Plt  1GF-IntVal      : ' + str(L2_0),'yellow')
							print colored(str(LINES[5][lines])+'_CF_0' + ' LINES-7 Ctr Fit Bnds  1GF-IntVal : ' + str(L7_0),'yellow')
							print colored(str(LINES[5][lines])+'_CO_0' + ' LINES-8 Ctr Fit Ofst  1GF-IntVal : ' + str(L8_0),'yellow')
							print colored(str(LINES[5][lines])+'_AF_0' + ' LINES-10 Amp Fit Bnds  1GF-IntVal: ' + str(L10_0),'yellow')
							print colored('*****Success!******','magenta')
							print
						except ValueError:
							print
							print colored('Headers containing initial fit variables not found!','yellow')
							print colored('Run Spec_Stk_Stack first or use value from Lines_Dictionary.py with ivl_fts_hdr = False:','yellow')
							print colored('Headers:','yellow')
							print
							print colored(str(LINES[5][lines])+'_WF_0' + ' LINES-1 Wdt-Fit  1GF-IntVal','yellow')
							print colored(str(LINES[5][lines])+'_WP_0' + ' LINES-2 Wdt-Plt  1GF-IntVal','yellow')
							print colored(str(LINES[5][lines])+'_CF_0' + ' LINES-7 Ctr Fit Bnds  1GF-IntVal','yellow')
							print colored(str(LINES[5][lines])+'_CO_0' + ' LINES-8 Ctr Fit Ofst  1GF-IntVal','yellow')
							print colored(str(LINES[5][lines])+'_AF_0' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','yellow')
							print '*****'
							print
							quit()
						try:
							L10_0 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF_0')        #LINES-8 Ctr Fit Ofst  1GF-IntVal LNE_AMP_BNDS
							print colored(str(LINES[5][lines])+'_AF_0' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','yellow')
							print colored('*****Success!******','magenta')
							print
						except KeyError:
							print
							print colored('Header not found!','yellow')
							print colored('Adding Header with default valuee 0.001:','yellow')
							print colored(str(LINES[5][lines])+'_AF_0' + ' LINES-10 Amp Fit Bnds  1GF-IntVal','yellow')
							Header_Get_Add(specfile_glx,str(LINES[5][lines])+'_AF_0',0.001,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-10 Amp Fit Bnds  1GF-IntVal')
							L10_0 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF_0')        #LINES-8 Ctr Fit Ofst  1GF-IntVal LNE_AMP_BNDS
							print colored('*****Success!******','magenta')
							print
						################FOR CASES WHERE KLINE WIIDHT ==0################
						if L1_0  == 0:
							L1_0  = 1#LINES[1][lines]
						else:
							pass
						################FOR CASES WHERE KLINE WIIDHT ==0################
					elif ivl_fts_hdr == False:
						L1_0  = LINES[1][lines]
						L2_0  = LINES[2][lines]
						L7_0  = LINES[7][lines]
						L8_0  = LINES[8][lines]
						L10_0 = LINES[10][lines]
						print
						print colored('Initial fit variables from Lines_Dictionary.py!','yellow')
						print					
					print str(LINES[5][lines])+'_WF_0' + ': ' + str(L1_0)
					print str(LINES[5][lines])+'_WP_0' + ': ' + str(L2_0)
					print str(LINES[5][lines])+'_CF_0' + ': ' + str(L7_0)
					print str(LINES[5][lines])+'_CO_0' + ': ' + str(L8_0)
					print str(LINES[5][lines])+'_AF_0' + ': ' + str(L10_0)
					#quit()

					#####################################################Getting Line Fitting Initial Values From Statcked Spectrum Fits Header#####################################################

					lmb_min_lim_line_ft = (LINES[0][lines]-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] ##IT WAS LINE CTR - LINE OFFSET
					lmb_max_lim_line_ft = (LINES[0][lines]+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]
					lmb_min_lim_line    = (LINES[0][lines]-LINES[8][lines])*(1+z_glx_Ps) - 1.5*MSK_NTMS*LINES[2][lines]#- 20#LINES[2][lines] - 10 ##IT WAS LINE CTR - LINE OFFSET
					lmb_max_lim_line    = (LINES[0][lines]+LINES[8][lines])*(1+z_glx_Ps) + 1.5*MSK_NTMS*LINES[2][lines]#+ 20#LINES[2][lines] + 10

					mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
					mask_ft    = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
					label_glx  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function

					print
					print colored('0 CTR-gaussian already fitted!','yellow')
					print colored('Values from fits header','yellow')
					try:
						#CTRE_G_0    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CF0M')#,float(CTRE_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct')
						#AMPL_G_0    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF0M')#,float(AMPL_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct')
						#FWHM_G_0    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FF0M')#,float(FWHM_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct')
						#EW_0        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WF0M')#,float(EW_0)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct')
						#EWE_0       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EF0M')#,float(EWE_0)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct')

						CTRE_G_O    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLOM')#,float(CTRE_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Offst' + str(fit_type))
						AMPL_G_O    = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALOM')#,float(AMPL_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Offst' + str(fit_type))
						FWHM_G_O    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FLOM')#,float(FWHM_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Offst' + str(fit_type))
						#EW_O        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WLOM')#,float(EW_O)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Offst' + str(fit_type))
						#EWE_O       = Header_Get(specfile_glx,str(LINES[5][lines])+'_ELOM')#,float(EWE_O)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Offst' + str(fit_type))
						#OFST_G_O    = Header_Get(specfile_glx,str(LINES[5][lines])+'_OFOM')#,float(OFST_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ofst 1GF Offst' + str(fit_type))

						CTRE_G_C    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLCM')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
						AMPL_G_C    = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALCM')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
						SGMA_G_C    = Header_Get(specfile_glx,str(LINES[5][lines])+'_SLCM')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
						FWHM_G_C    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FLCM')#,float(FWHM_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
						EW_C        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WLCM')#,float(EW_C)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
						#EWE_C       = Header_Get(specfile_glx,str(LINES[5][lines])+'_ELCM')#,float(EWE_C)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
						#CTRE_G_C_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CECM')#,float(CTRE_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
						#AMPL_G_C_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_AECM')#,float(AMPL_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
						#SGMA_G_C_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_SECM')#,float(SGMA_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))

						#chisqr_C    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CHLM')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 1GF' + str(fit_type))
						#redchi_C    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CRLM')#,float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 Reduced 1GF' + str(fit_type))
					except KeyError:
						print
						print colored ('Gaussian Fit Parameters are not found on Fits Header!','yellow')
						print colored ('File  : ' + specfile_glx,'yellow')
						print colored ('Header: ' + str(LINES[5][lines])+'_CF0M','yellow')
						print colored ('Gotta Fit first before fixing a component (CTR)!','yellow')
						print colored ('Or UnFix (fix_ctr_gau=False) For Plotting!','yellow')
						print colored ('Quitting!','yellow')
						print colored ('Line 15782!','yellow')
						print
						quit()
					try:
						print
						print colored('1 PRE-gaussian already fitted!','yellow')
						print colored('Values from fits header','yellow')
						#chisqr_C       = Header_Get(specfile_glx,str(LINES[5][lines])+'_CHGL')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 1GF' + str(fit_type))
						#redchi_C       = Header_Get(specfile_glx,str(LINES[5][lines])+'_CRGL')#,float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 Reduced 1GF' + str(fit_type))
						CTRE_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGL1')#,float(CTRE_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
						AMPL_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGL1')#,float(AMPL_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
						SGMA_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGL1')#,float(SGMA_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
						FWHM_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGL1')#,float(FWHM_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
						#EW_C_PRE       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGL1')#,float(EW_C_PRE)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
						#EWE_C_PRE      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGL1')#,float(EWE_C_PRE)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
						#CTRE_G_C_PRE_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLE1')#,float(CTRE_G_C_PRE_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
						#AMPL_G_C_PRE_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALE1')#,float(AMPL_G_C_PRE_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
						#SGMA_G_C_PRE_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_SLE1')#,float(SGMA_G_C_PRE_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))

						x_a            = Header_Get(specfile_glx,str(LINES[5][lines])+'_XA1')#,float(x_a),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PRE GAU-LNR X1 COO')
						y_a            = Header_Get(specfile_glx,str(LINES[5][lines])+'_YA1')#,float(y_a),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PRE GAU-LNR Y1 COO')
						#EW_C_PR1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WPR1')#,float(EW_C_PR1),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])   + ' EW   PRE' + str(fit_type))
						#EWE_C_PR1      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EPR1')#,float(EWE_C_PR1),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])  + ' EWE  PRE' + str(fit_type))

						#pre_shf_lim    = Header_Get(specfile_glx,str(LINES[5][lines])+'_GS1')#,float(pre_shf_lim) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Shf from expt ctr wvl for PRE G-1')
						#pre_shf_ctr    = Header_Get(specfile_glx,str(LINES[5][lines])+'_GC1')#,float(pre_shf_ctr) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Gaussian Ctr Int Val for PRE G-1')
					except KeyError:
						print
						print colored ('Gaussian Fit Parameters are not found on Fits Header!' ,'yellow')
						print colored ('File  : ' + specfile_glx,'yellow')
						print colored ('Header: ' + str(LINES[5][lines])+'_CF0M','yellow')
						print colored ('Gotta Fit first before fixing a component (PRE)!','yellow')
						print colored ('Or UnFix (fix_pre_gau=False) For Plotting!','yellow')
						print colored ('Quitting!','yellow')
						print
						print colored ('Line 15817!','yellow')
						quit()
					try:
						print
						print colored('2 PST-gaussian already fitted!','yellow')
						print colored('Values from fits header','yellow')
						CTRE_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGL2')#,float(CTRE_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
						AMPL_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGL2')#,float(AMPL_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
						SGMA_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGL2')#,float(SGMA_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
						FWHM_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGL2')#,float(FWHM_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
						#EW_C_PST       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGL2')#,float(EW_C_PST)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
						#EWE_C_PST      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGL2')#,float(EWE_C_PST)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
						#CTRE_G_C_PST_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLE2')#,float(CTRE_G_C_PST_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
						#AMPL_G_C_PST_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALE2')#,float(AMPL_G_C_PST_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
						#SGMA_G_C_PST_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_SLE2')#,float(SGMA_G_C_PST_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))

						x_b         = Header_Get(specfile_glx,str(LINES[5][lines])+'_XA2')#,float(x_b),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PST GAU-LNR X2 COO')
						y_b         = Header_Get(specfile_glx,str(LINES[5][lines])+'_YA2')#,float(y_b),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PST GAU-LNR Y2 COO')
						#EW_C_PS2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_WPS2')#,float(EW_C_PS2),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])   + ' EW   PST' + str(fit_type))
						#EWE_C_PS2   = Header_Get(specfile_glx,str(LINES[5][lines])+'_EPS2')#,float(EWE_C_PS2),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])  + ' EWE  PST' + str(fit_type))

						#pst_shf_lim    = Header_Get(specfile_glx,str(LINES[5][lines])+'_GS2')#,float(pre_shf_lim) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Shf from expt ctr wvl for PRE G-1')
						#pst_shf_ctr    = Header_Get(specfile_glx,str(LINES[5][lines])+'_GC2')#,float(pre_shf_ctr) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Gaussian Ctr Int Val for PRE G-1')
					except KeyError:
						print
						print colored ('Gaussian Fit Parameters are not found on Fits Header!','yellow')
						print colored ('File  : ' + specfile_glx,'yellow')
						print colored ('Header: ' + str(LINES[5][lines])+'_CF0M','yellow')
						print colored ('Gotta Fit first before fixing a component (PST)!','yellow')
						print colored ('Or UnFix (fix_pst_gau=False) For Plotting!','yellow')
						print colored ('Quitting!','yellow')
						print
						print colored ('Line 15849!','yellow')
						quit()

					slope_line1 = (y_a-y_b)/(x_a-x_b)
					slope_line2 = (y_b-y_a)/(x_b-x_a)
					b1 = y_a - (slope_line1*x_a)
					b2 = y_b - (slope_line1*x_b)
					print
					print  colored('Computing Linear Area considering peak points:','yellow')
					print 'Point A: ',x_a,y_a
					print 'Point B: ',x_b,y_b
					print 'Slope: ',slope_line1
					print 'Slope: ',slope_line2
					print 'b: ',b1,b2
					print				
				else:
					pass
				########################################################LINE-FIT#######################################################
				########################################################LINE-SNR#######################################################
				print
				print colored('Computing SNR using info from fits headers.','yellow')
				print
				x_type         = kwargs.get('x_type','lambda')

				spc_val_stt    = Spectra_Cont_GetVal(specfile_glx,gcv_lmbd_i=spc_stt_lmbd_i,gcv_lmbd_f=spc_stt_lmbd_f,x_type=x_type)

				SPC_SNR_FUNC_UB_1   = SNR(inten_glx)
				SPC_SNR_FUNC_UB_2   = SNR(spc_val_stt[0])
				SPC_SNR_FUNC_UB_3   = SNR(inten_glx[mask_ft])
				SPC_SNR_FUNC_UB_4   = SNR(inten_glx[mask_pl])
					
				if 'Dbl' not in LINES[3][lines] and fit_fnct=='gauss' and fit_type =='lmfit':
					CTRE_G_C_SNR = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGLC')
					AMPL_G_C_SNR = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGLC')
					SGMA_G_C_SNR = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGLC')

					SPC_SNR_UB_1 = abs(AMPL_G_C_SNR)/SPC_SNR_FUNC_UB_1[2]
					SPC_SNR_UB_2 = abs(AMPL_G_C_SNR)/SPC_SNR_FUNC_UB_2[2]
					SPC_SNR_UB_3 = abs(AMPL_G_C_SNR)/SPC_SNR_FUNC_UB_3[2]
					SPC_SNR_UB_4 = abs(AMPL_G_C_SNR)/SPC_SNR_FUNC_UB_4[2]					
				elif 'Dbl' not in LINES[3][lines] and fit_fnct=='gaussM' and fit_type =='lmfit':
					CTRE_G_C_SNR = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLCM')
					AMPL_G_C_SNR = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALCM')
					SGMA_G_C_SNR = Header_Get(specfile_glx,str(LINES[5][lines])+'_SLCM')

					SPC_SNR_UB_1 = abs(AMPL_G_C_SNR)/SPC_SNR_FUNC_UB_1[2]
					SPC_SNR_UB_2 = abs(AMPL_G_C_SNR)/SPC_SNR_FUNC_UB_2[2]
					SPC_SNR_UB_3 = abs(AMPL_G_C_SNR)/SPC_SNR_FUNC_UB_3[2]
					SPC_SNR_UB_4 = abs(AMPL_G_C_SNR)/SPC_SNR_FUNC_UB_4[2]					
				elif 'Dbl' in LINES[3][lines] and fit_fnct=='gauss' and fit_type =='lmfit':
					CTRE_G_C_SNR_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLC1')
					AMPL_G_C_SNR_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALC1')
					SGMA_G_C_SNR_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_SLC1')

					SPC_SNR_UB_1_1 = abs(AMPL_G_C_SNR_1)/SPC_SNR_FUNC_UB_1[2]
					SPC_SNR_UB_2_1 = abs(AMPL_G_C_SNR_1)/SPC_SNR_FUNC_UB_2[2]
					SPC_SNR_UB_3_1 = abs(AMPL_G_C_SNR_1)/SPC_SNR_FUNC_UB_3[2]
					SPC_SNR_UB_4_1 = abs(AMPL_G_C_SNR_1)/SPC_SNR_FUNC_UB_4[2]					

					CTRE_G_C_SNR_2 = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLC2')
					AMPL_G_C_SNR_2 = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALC2')
					SGMA_G_C_SNR_2 = Header_Get(specfile_glx,str(LINES[5][lines])+'_SLC2')

					SPC_SNR_UB_1_2 = abs(AMPL_G_C_SNR_2)/SPC_SNR_FUNC_UB_1[2]
					SPC_SNR_UB_2_2 = abs(AMPL_G_C_SNR_2)/SPC_SNR_FUNC_UB_2[2]
					SPC_SNR_UB_3_2 = abs(AMPL_G_C_SNR_2)/SPC_SNR_FUNC_UB_3[2]
					SPC_SNR_UB_4_2 = abs(AMPL_G_C_SNR_2)/SPC_SNR_FUNC_UB_4[2]

					CTRE_G_C_SNR  = CTRE_G_C_SNR_1
					AMPL_G_C_SNR  = AMPL_G_C_SNR_1
					SGMA_G_C_SNR  = SGMA_G_C_SNR_1
					SPC_SNR_UB_1  = SPC_SNR_UB_1_1
					SPC_SNR_UB_2  = SPC_SNR_UB_2_1
					SPC_SNR_UB_3  = SPC_SNR_UB_3_1
					SPC_SNR_UB_4  = SPC_SNR_UB_4_1
				elif 'Dbl' in LINES[3][lines] and fit_fnct=='gaussM' and fit_type =='lmfit':
					CTRE_G_C_SNR_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_CMC1')
					AMPL_G_C_SNR_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AMC1')
					SGMA_G_C_SNR_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_SMC1')

					SPC_SNR_UB_1_1 = abs(AMPL_G_C_SNR_1)/SPC_SNR_FUNC_UB_1[2]
					SPC_SNR_UB_2_1 = abs(AMPL_G_C_SNR_1)/SPC_SNR_FUNC_UB_2[2]
					SPC_SNR_UB_3_1 = abs(AMPL_G_C_SNR_1)/SPC_SNR_FUNC_UB_3[2]
					SPC_SNR_UB_4_1 = abs(AMPL_G_C_SNR_1)/SPC_SNR_FUNC_UB_4[2]					

					CTRE_G_C_SNR_2 = Header_Get(specfile_glx,str(LINES[5][lines])+'_CMC2')
					AMPL_G_C_SNR_2 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AMC2')
					SGMA_G_C_SNR_2 = Header_Get(specfile_glx,str(LINES[5][lines])+'_SMC2')

					SPC_SNR_UB_1_2 = abs(AMPL_G_C_SNR_2)/SPC_SNR_FUNC_UB_1[2]
					SPC_SNR_UB_2_2 = abs(AMPL_G_C_SNR_2)/SPC_SNR_FUNC_UB_2[2]
					SPC_SNR_UB_3_2 = abs(AMPL_G_C_SNR_2)/SPC_SNR_FUNC_UB_3[2]
					SPC_SNR_UB_4_2 = abs(AMPL_G_C_SNR_2)/SPC_SNR_FUNC_UB_4[2]

					CTRE_G_C_SNR  = CTRE_G_C_SNR_1
					AMPL_G_C_SNR  = AMPL_G_C_SNR_1
					SGMA_G_C_SNR  = SGMA_G_C_SNR_1
					SPC_SNR_UB_1  = SPC_SNR_UB_1_1
					SPC_SNR_UB_2  = SPC_SNR_UB_2_1
					SPC_SNR_UB_3  = SPC_SNR_UB_3_1
					SPC_SNR_UB_4  = SPC_SNR_UB_4_1
				else:
					CTRE_G_C_SNR = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGLC')
					AMPL_G_C_SNR = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGLC')
					SGMA_G_C_SNR = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGLC')

					SPC_SNR_UB_1 = abs(AMPL_G_C_SNR)/SPC_SNR_FUNC_UB_1[2]
					SPC_SNR_UB_2 = abs(AMPL_G_C_SNR)/SPC_SNR_FUNC_UB_2[2]
					SPC_SNR_UB_3 = abs(AMPL_G_C_SNR)/SPC_SNR_FUNC_UB_3[2]
					SPC_SNR_UB_4 = abs(AMPL_G_C_SNR)/SPC_SNR_FUNC_UB_4[2]

				###### SNR out the line plot region #####
				if (AMPL_G_C_SNR == 999999.99999):
					SPC_SNR_UB_1 = 999999.99999
					SPC_SNR_UB_2 = 999999.99999
					SPC_SNR_UB_3 = 999999.99999
					SPC_SNR_UB_4 = 999999.99999

					bin_size     = 999999.99999
					bin_number   = 999999.99999
					SPC_NSE_BN_1 = 999999.99999
					SPC_NSE_BN_2 = 999999.99999
					SPC_NSE_BN_3 = 999999.99999
					SPC_SNR_BN_1 = 999999.99999
					SPC_SNR_BN_2 = 999999.99999
					SPC_SNR_BN_3 = 999999.99999
				else:				

					if fit_fnct == 'gauss' and  'Dbl' not in LINES[3][lines]:
						lne_lim_inf_sgm,lne_lim_sup_sgm = CTRE_G_C-SGMA_G_C_SNR,CTRE_G_C+SGMA_G_C_SNR
						lne_lim_inf_fwh,lne_lim_sup_fwh = CTRE_G_C-(sigma2fwhm(SGMA_G_C_SNR)/2),CTRE_G_C+(sigma2fwhm(SGMA_G_C_SNR)/2)

						chn_lim_ctr = np.digitize(1*abs(CTRE_G_C),lambda_glx[mask_pl],right=False)
						chn_lim_inf = np.digitize(1*abs(lne_lim_inf_fwh),lambda_glx[mask_pl],right=False)
						chn_lim_sup = np.digitize(1*abs(lne_lim_sup_fwh),lambda_glx[mask_pl],right=True)

						indx_inf = np.arange(0,chn_lim_inf)
						indx_sup = np.arange(chn_lim_sup+1,len(lambda_glx[mask_pl]))
						indx_tot = np.hstack((indx_inf,indx_sup))

						flx_tot    = inten_glx[mask_pl][indx_tot]#[0,1,2,3,4,5,6,7,8,9]
						bin_size   = len(lambda_glx[mask_pl][chn_lim_inf:chn_lim_sup+1])
						bin_number = np.ceil(len(inten_glx[mask_pl][indx_tot])/float(bin_size))
						binned_arrays = split_list(flx_tot, wanted_parts=int(bin_number))
					elif fit_fnct == 'gauss' and  'Dbl' in LINES[3][lines]:
						lne_lim_inf_sgm,lne_lim_sup_sgm = CTRE_G_C_1-SGMA_G_C_SNR_1,CTRE_G_C_2+SGMA_G_C_SNR_2
						lne_lim_inf_fwh,lne_lim_sup_fwh = CTRE_G_C_1-(sigma2fwhm(SGMA_G_C_SNR_1)/2),CTRE_G_C_2+(sigma2fwhm(SGMA_G_C_SNR_2)/2)

						chn_lim_ctr = np.digitize(1*abs(CTRE_G_C_1),lambda_glx[mask_pl],right=False)
						chn_lim_inf = np.digitize(1*abs(lne_lim_inf_fwh),lambda_glx[mask_pl],right=False)
						chn_lim_sup = np.digitize(1*abs(lne_lim_sup_fwh),lambda_glx[mask_pl],right=True)

						indx_inf = np.arange(0,chn_lim_inf)
						indx_sup = np.arange(chn_lim_sup+1,len(lambda_glx[mask_pl]))
						indx_tot = np.hstack((indx_inf,indx_sup))

						flx_tot    = inten_glx[mask_pl][indx_tot]#[0,1,2,3,4,5,6,7,8,9]
						bin_size   = len(lambda_glx[mask_pl][chn_lim_inf:chn_lim_sup+1])
						bin_number = np.ceil(len(inten_glx[mask_pl][indx_tot])/float(bin_size))
						binned_arrays = split_list(flx_tot, wanted_parts=int(bin_number))
					elif fit_fnct == 'gaussM' and  'Dbl' not in LINES[3][lines]:
						lne_lim_inf_sgm,lne_lim_sup_sgm = CTRE_G_C-SGMA_G_C_SNR,CTRE_G_C+SGMA_G_C_SNR
						lne_lim_inf_fwh,lne_lim_sup_fwh = CTRE_G_C-(sigma2fwhm(SGMA_G_C_SNR)/2),CTRE_G_C+(sigma2fwhm(SGMA_G_C_SNR)/2)

						chn_lim_ctr = np.digitize(1*abs(CTRE_G_C),lambda_glx[mask_pl],right=False)
						chn_lim_inf = np.digitize(1*abs(lne_lim_inf_fwh),lambda_glx[mask_pl],right=False)
						chn_lim_sup = np.digitize(1*abs(lne_lim_sup_fwh),lambda_glx[mask_pl],right=True)

						indx_inf = np.arange(0,chn_lim_inf)
						indx_sup = np.arange(chn_lim_sup+1,len(lambda_glx[mask_pl]))
						indx_tot = np.hstack((indx_inf,indx_sup))

						flx_tot    = inten_glx[mask_pl][indx_tot]#[0,1,2,3,4,5,6,7,8,9]
						bin_size   = len(lambda_glx[mask_pl][chn_lim_inf:chn_lim_sup+1])

						bin_number = np.ceil(len(inten_glx[mask_pl][indx_tot])/float(bin_size))
						binned_arrays = split_list(flx_tot, wanted_parts=int(bin_number))
					elif fit_fnct == 'gaussM' and  'Dbl' in LINES[3][lines]:
						lne_lim_inf_sgm,lne_lim_sup_sgm = CTRE_G_C_1-SGMA_G_C_SNR_1,CTRE_G_C_2+SGMA_G_C_SNR_2
						lne_lim_inf_fwh,lne_lim_sup_fwh = CTRE_G_C_1-(sigma2fwhm(SGMA_G_C_SNR_1)/2),CTRE_G_C_2+(sigma2fwhm(SGMA_G_C_SNR_2)/2)

						chn_lim_ctr = np.digitize(1*abs(CTRE_G_C_1),lambda_glx[mask_pl],right=False)
						chn_lim_inf = np.digitize(1*abs(lne_lim_inf_fwh),lambda_glx[mask_pl],right=False)
						chn_lim_sup = np.digitize(1*abs(lne_lim_sup_fwh),lambda_glx[mask_pl],right=True)

						indx_inf = np.arange(0,chn_lim_inf)
						indx_sup = np.arange(chn_lim_sup+1,len(lambda_glx[mask_pl]))
						indx_tot = np.hstack((indx_inf,indx_sup))

						flx_tot    = inten_glx[mask_pl][indx_tot]#[0,1,2,3,4,5,6,7,8,9]
						bin_size   = len(lambda_glx[mask_pl][chn_lim_inf:chn_lim_sup+1])
						bin_number = np.ceil(len(inten_glx[mask_pl][indx_tot])/float(bin_size))
						binned_arrays = split_list(flx_tot, wanted_parts=int(bin_number))

					NST_STS_AVG = []
					NST_STS_MED = []
					NST_STS_SUM = []
					NST_STS_STD = []
					for array_iteration in binned_arrays:
						NST_STS_AVG.append(np.mean(array_iteration))
						NST_STS_MED.append(np.median(array_iteration))
						NST_STS_SUM.append(np.sum(array_iteration))
						NST_STS_STD.append(np.std(array_iteration))

					if bin_number == 1:
						SPC_NSE_BN_1 = NST_STS_STD[0]
						SPC_NSE_BN_2 = NST_STS_STD[0]
						SPC_NSE_BN_3 = NST_STS_STD[0]
					else:
						SPC_NSE_BN_1 = np.std(NST_STS_AVG)
						SPC_NSE_BN_2 = np.std(NST_STS_MED)
						SPC_NSE_BN_3 = np.std(NST_STS_SUM)

					SPC_SNR_BN_1 = abs(AMPL_G_C_SNR)/SPC_NSE_BN_1
					SPC_SNR_BN_2 = abs(AMPL_G_C_SNR)/SPC_NSE_BN_2
					SPC_SNR_BN_3 = abs(AMPL_G_C_SNR)/SPC_NSE_BN_3

					if verbose == True:
						pass
					else:
						pass
				###### SNR out the line plot region #####
				if fit_vls_hdr == True and fit_fnct=='gauss':
					print
					print colored('The SNR will be updated to the fits headers!','magenta')
					print
					print colored('SNR UB 1(A)  : ' + str(SPC_SNR_UB_1) + '-' +str(LINES[5][lines])+'_SNU1','yellow')
					print colored('SNR UB 2(C)  : ' + str(SPC_SNR_UB_2) + '-' +str(LINES[5][lines])+'_SNU2','yellow')
					print colored('SNR UB 3(F)  : ' + str(SPC_SNR_UB_3) + '-' +str(LINES[5][lines])+'_SNU3','yellow')
					print colored('SNR UB 4(P)  : ' + str(SPC_SNR_UB_4) + '-' +str(LINES[5][lines])+'_SNU4','yellow')
					print
					print colored('SNR BN 1(A)  : ' + str(SPC_SNR_BN_1) + '-' +str(LINES[5][lines])+'_SNB1','yellow')
					print colored('SNR BN 2(M)  : ' + str(SPC_SNR_BN_2) + '-' +str(LINES[5][lines])+'_SNB2','yellow')
					print colored('SNR BN 3(S)  : ' + str(SPC_SNR_BN_3) + '-' +str(LINES[5][lines])+'_SNB3','yellow')
					print
					print colored('SNR BIN SIZE : ' + str(bin_size)     + '-' +str(LINES[5][lines])+'_SNBS','yellow')
					print colored('SNR BIN NMBR : ' + str(bin_number)   + '-' +str(LINES[5][lines])+'_SNBN','yellow')
					print				
					Header_Add(specfile_glx,str(LINES[5][lines])+'_NSU1',float(SPC_SNR_FUNC_UB_1[2]) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE UBIN SPC REG ALL ' + fit_fnct)
					Header_Add(specfile_glx,str(LINES[5][lines])+'_NSU2',float(SPC_SNR_FUNC_UB_2[2]) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE UBIN SPC REG CNT ' + fit_fnct)
					Header_Add(specfile_glx,str(LINES[5][lines])+'_NSU3',float(SPC_SNR_FUNC_UB_3[2]) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE UBIN SPC REG FIT ' + fit_fnct)
					Header_Add(specfile_glx,str(LINES[5][lines])+'_NSU4',float(SPC_SNR_FUNC_UB_4[2]) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE UBIN SPC REG PLT ' + fit_fnct)

					Header_Add(specfile_glx,str(LINES[5][lines])+'_SNU1',float(SPC_SNR_UB_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR UBIN SPC REG ALL ' + fit_fnct)
					Header_Add(specfile_glx,str(LINES[5][lines])+'_SNU2',float(SPC_SNR_UB_2) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR UBIN SPC REG CNT ' + fit_fnct)
					Header_Add(specfile_glx,str(LINES[5][lines])+'_SNU3',float(SPC_SNR_UB_3) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR UBIN SPC REG FIT ' + fit_fnct)
					Header_Add(specfile_glx,str(LINES[5][lines])+'_SNU4',float(SPC_SNR_UB_4) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR UBIN SPC REG PLT ' + fit_fnct)

					Header_Add(specfile_glx,str(LINES[5][lines])+'_SNBS',float(bin_size)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR BINNED Size ' + fit_fnct)
					Header_Add(specfile_glx,str(LINES[5][lines])+'_SNBN',float(bin_number)   ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR BINNED # Bins ' + fit_fnct)

					try:
						pass
						Header_Add(specfile_glx,str(LINES[5][lines])+'_NSB1',float(SPC_NSE_BN_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE BINNED AVG ' + fit_fnct)
						Header_Add(specfile_glx,str(LINES[5][lines])+'_NSB2',float(SPC_NSE_BN_2) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE BINNED MED ' + fit_fnct)
						Header_Add(specfile_glx,str(LINES[5][lines])+'_NSB3',float(SPC_NSE_BN_3) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE BINNED SUM ' + fit_fnct)
					except ValueError:
						pass
						Header_Add(specfile_glx,str(LINES[5][lines])+'_NSB1',float(999999.99999) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE BINNED AVG ' + fit_fnct)
						Header_Add(specfile_glx,str(LINES[5][lines])+'_NSB2',float(999999.99999) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE BINNED MED ' + fit_fnct)
						Header_Add(specfile_glx,str(LINES[5][lines])+'_NSB3',float(999999.99999) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE BINNED SUM ' + fit_fnct)

					try:
						pass
						Header_Add(specfile_glx,str(LINES[5][lines])+'_SNB1',float(SPC_SNR_BN_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR BINNED AVG ' + fit_fnct)
						Header_Add(specfile_glx,str(LINES[5][lines])+'_SNB2',float(SPC_SNR_BN_2) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR BINNED MED ' + fit_fnct)
						Header_Add(specfile_glx,str(LINES[5][lines])+'_SNB3',float(SPC_SNR_BN_3) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR BINNED SUM ' + fit_fnct)
					except ValueError:
						pass
						Header_Add(specfile_glx,str(LINES[5][lines])+'_SNB1',float(999999.99999) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR BINNED AVG ' + fit_fnct)
						Header_Add(specfile_glx,str(LINES[5][lines])+'_SNB2',float(999999.99999) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR BINNED MED ' + fit_fnct)
						Header_Add(specfile_glx,str(LINES[5][lines])+'_SNB3',float(999999.99999) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR BINNED SUM ' + fit_fnct)
				elif fit_vls_hdr == True and fit_fnct=='gaussM':
					print
					print colored('The SNR will be updated to the fits headers!','magenta')
					print
					print colored('SNR UB 1(A)  : ' + str(SPC_SNR_UB_1) + '-' +str(LINES[5][lines])+'_SMU1','yellow')
					print colored('SNR UB 2(C)  : ' + str(SPC_SNR_UB_2) + '-' +str(LINES[5][lines])+'_SMU2','yellow')
					print colored('SNR UB 3(F)  : ' + str(SPC_SNR_UB_3) + '-' +str(LINES[5][lines])+'_SMU3','yellow')
					print colored('SNR UB 4(P)  : ' + str(SPC_SNR_UB_4) + '-' +str(LINES[5][lines])+'_SMU4','yellow')
					print
					print colored('SNR BN 1(A)  : ' + str(SPC_SNR_BN_1) + '-' +str(LINES[5][lines])+'_SMB1','yellow')
					print colored('SNR BN 2(M)  : ' + str(SPC_SNR_BN_2) + '-' +str(LINES[5][lines])+'_SMB2','yellow')
					print colored('SNR BN 3(S)  : ' + str(SPC_SNR_BN_3) + '-' +str(LINES[5][lines])+'_SMB3','yellow')
					print
					print colored('SNR BIN SIZE : ' + str(bin_size)     + '-' +str(LINES[5][lines])+'_SMBS','yellow')
					print colored('SNR BIN NMBR : ' + str(bin_number)   + '-' +str(LINES[5][lines])+'_SMBN','yellow')
					print				
					Header_Add(specfile_glx,str(LINES[5][lines])+'_NMU1',float(SPC_SNR_FUNC_UB_1[2]) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE UBIN SPC REG ALL ' + fit_fnct)
					Header_Add(specfile_glx,str(LINES[5][lines])+'_NMU2',float(SPC_SNR_FUNC_UB_2[2]) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE UBIN SPC REG CNT ' + fit_fnct)
					Header_Add(specfile_glx,str(LINES[5][lines])+'_NMU3',float(SPC_SNR_FUNC_UB_3[2]) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE UBIN SPC REG FIT ' + fit_fnct)
					Header_Add(specfile_glx,str(LINES[5][lines])+'_NMU4',float(SPC_SNR_FUNC_UB_4[2]) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE UBIN SPC REG PLT ' + fit_fnct)

					Header_Add(specfile_glx,str(LINES[5][lines])+'_SMU1',float(SPC_SNR_UB_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR UBIN SPC REG ALL ' + fit_fnct)
					Header_Add(specfile_glx,str(LINES[5][lines])+'_SMU2',float(SPC_SNR_UB_2) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR UBIN SPC REG CNT ' + fit_fnct)
					Header_Add(specfile_glx,str(LINES[5][lines])+'_SMU3',float(SPC_SNR_UB_3) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR UBIN SPC REG FIT ' + fit_fnct)
					Header_Add(specfile_glx,str(LINES[5][lines])+'_SMU4',float(SPC_SNR_UB_4) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR UBIN SPC REG PLT ' + fit_fnct)

					Header_Add(specfile_glx,str(LINES[5][lines])+'_SMBS',float(bin_size)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR BINNED Size ' + fit_fnct)
					Header_Add(specfile_glx,str(LINES[5][lines])+'_SMBN',float(bin_number)   ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR BINNED # Bins ' + fit_fnct)

					try:
						pass
						Header_Add(specfile_glx,str(LINES[5][lines])+'_NMB1',float(SPC_NSE_BN_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE BINNED AVG ' + fit_fnct)
						Header_Add(specfile_glx,str(LINES[5][lines])+'_NMB2',float(SPC_NSE_BN_2) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE BINNED MED ' + fit_fnct)
						Header_Add(specfile_glx,str(LINES[5][lines])+'_NMB3',float(SPC_NSE_BN_3) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE BINNED SUM ' + fit_fnct)
					except ValueError:
						pass
						Header_Add(specfile_glx,str(LINES[5][lines])+'_NMB1',float(999999.99999) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE BINNED AVG' + fit_fnct)
						Header_Add(specfile_glx,str(LINES[5][lines])+'_NMB2',float(999999.99999) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE BINNED MED' + fit_fnct)
						Header_Add(specfile_glx,str(LINES[5][lines])+'_NMB3',float(999999.99999) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE BINNED SUM' + fit_fnct)

					try:
						pass
						Header_Add(specfile_glx,str(LINES[5][lines])+'_SMB1',float(SPC_SNR_BN_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR BINNED AVG ' + fit_fnct)
						Header_Add(specfile_glx,str(LINES[5][lines])+'_SMB2',float(SPC_SNR_BN_2) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR BINNED MED ' + fit_fnct)
						Header_Add(specfile_glx,str(LINES[5][lines])+'_SMB3',float(SPC_SNR_BN_3) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR BINNED SUM ' + fit_fnct)
					except ValueError:
						pass
						Header_Add(specfile_glx,str(LINES[5][lines])+'_SMB1',float(999999.99999) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR BINNED AVG' + fit_fnct)
						Header_Add(specfile_glx,str(LINES[5][lines])+'_SMB2',float(999999.99999) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR BINNED MED' + fit_fnct)
						Header_Add(specfile_glx,str(LINES[5][lines])+'_SMB3',float(999999.99999) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR BINNED SUM' + fit_fnct)
				else:
					print
					print colored('The SNR will not be updated to the fits headers!','magenta')
					print					
					pass
				########################################################LINE-SNR#######################################################

				########################################################LINE-PLT#######################################################
				if fit_fnct is not None:
					if 'Dbl' not in LINES[3][lines]: 
						lambda_glx_lne_fit  = np.arange(lmb_min_lim_line,lmb_max_lim_line,0.1)
						lambda_glx_lne_fitM = np.arange(min(lambda_glx[mask_pl]),max(lambda_glx[mask_pl]),0.1)
						if fit_fnct=='gauss' and (AMPL_G_O <0):#not 'DblF' in LINES[3][lines]:
							#print 'Not Dbl Gaussian Function'
							if pre_off_plt == True:
								try:
									plt.plot(lambda_glx_lne_fit,
												func_1D_Gaussian(lambda_glx_lne_fit,*popt_0),
												color = 'gray'  ,ls=':',lw=3.0,
												label = label_glx + ' g fit Org: ' + 
												'EW: ' + str(EW_0), 
												alpha=0.5)
									plt.plot(lambda_glx_lne_fit,
												func_1D_Gaussian_O(lambda_glx_lne_fit,*popt_O),
												color = 'gray'  ,ls='--',lw=3.0,
												label = label_glx + ' g fit Off: ' + 
												'EW: ' + str(EW_O) + ', '  
												'OFS: ' + str(np.round(OFST_G_O,2)), 
												alpha=0.5)
								except UnboundLocalError:
									plt.plot(lambda_glx_lne_fit,
												func_1D_Gaussian(lambda_glx_lne_fit,CTRE_G_0,AMPL_G_0,SGMA_G_0)     ,
												color = 'gray'  ,ls=':',lw=3.0,
												label = label_glx + ' g fit Org: ' + 
												'EW: ' + str(EW_0), 
												alpha=0.5)
									plt.plot(lambda_glx_lne_fit,
												func_1D_Gaussian_O(lambda_glx_lne_fit,CTRE_G_O,AMPL_G_O,SGMA_G_O,OFST_G_O)  ,
												color = 'gray'  ,ls='--',lw=3.0,
												label = label_glx + ' g fit Off: ' + 
												'EW: ' + str(EW_O) + ', '  
												'OFS: ' + str(np.round(OFST_G_O,2)), 
												alpha=0.5)
							elif pre_off_plt == False:
								pass
							try:
								plt.plot(lambda_glx_lne_fit,func_1D_Gaussian(lambda_glx_lne_fit,*popt_C)    ,
										color = colors[index]   ,ls='-',lw=3.0,
										label = label_glx + ' '+
										#'g fit C: ' + 
										#'$\lambda_{0}$='+ str(np.round(CTRE_G_C,2)) + ', ' +
										#'$\sigma$=' + str(np.round(SGMA_G_C,2)) + ',' + 
										#'fwhm=' + str(np.round(sigma2fwhm(SGMA_G_C),2)) +
										#'A: '+ str(np.round(AMPL_G_C,2)) + ', ' + 
										'EW: ' + str(EW_C) + ', ' +
										'N : ' + str(stk_glx_nmb) +  ', ' +
										"\n" +
										'SNR UB 1-A, 2-C :' +#, 3-F, 4-P : ' +
										str(np.round(SPC_SNR_UB_1,2)) +
										', ' + str(np.round(SPC_SNR_UB_2,2)) #+
										#', ' + str(np.round(SPC_SNR_UB_3,2)) +
										#', ' + str(np.round(SPC_SNR_UB_4,2)) +
										#"\n"+
										#'SNR BN 1-A, 2-M, 3-S : ' + str(np.round(SPC_SNR_BN_1,2)) +
										#', ' + str(np.round(SPC_SNR_BN_2,2)) +
										#', ' + str(np.round(SPC_SNR_BN_3,2))
										,
								alpha=1.0)# + ', EWE: '+str(EWE))
							except UnboundLocalError:
								plt.plot(lambda_glx_lne_fit,
										func_1D_Gaussian(lambda_glx_lne_fit,CTRE_G_C,AMPL_G_C,SGMA_G_C)    ,
										color = colors[index]   ,ls='-',lw=3.0,
										label = label_glx + ' '+
										#'g fit C: ' + 
										#'$\lambda_{0}$='+ str(np.round(CTRE_G_C,2)) + ', ' +
										#'$\sigma$=' + str(np.round(SGMA_G_C,2)) + ',' + 
										#'fwhm=' + str(np.round(sigma2fwhm(SGMA_G_C),2)) +
										#'A: '+ str(np.round(AMPL_G_C,2)) + ', ' + 
										'EW: ' + str(EW_C) + ', ' +
										'N : ' + str(stk_glx_nmb) +  ', ' +
										"\n" +
										'SNR UB 1-A, 2-C :' +#, 3-F, 4-P : ' +
										str(np.round(SPC_SNR_UB_1,2)) +
										', ' + str(np.round(SPC_SNR_UB_2,2)) #+
										#', ' + str(np.round(SPC_SNR_UB_3,2)) +
										#', ' + str(np.round(SPC_SNR_UB_4,2)) +
										#"\n"+
										#'SNR BN 1-A, 2-M, 3-S : ' + str(np.round(SPC_SNR_BN_1,2)) +
										#', ' + str(np.round(SPC_SNR_BN_2,2)) +
										#', ' + str(np.round(SPC_SNR_BN_3,2))
										,
										#'$\chi^{2}$: '+str(chisqr_C)+ ', ' +
										#'$\chi^{2}_{r}$:' + str(redchi_C),
										alpha=1.0)
							min_y, max_y = ax110.get_ylim()
							#REFERENCE CENTER LINES#
							plt.plot([LINES[0][lines],LINES[0][lines]],
										[min_y, max_y],
										color='black', lw=2, alpha=0.8,ls=':',
										label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function)

							plt.plot([LINES[0][lines]+LINES[8][lines],LINES[0][lines]+LINES[8][lines]],
										[min_y, max_y],
										color='blue', lw=2, alpha=0.8,ls='dashed'
										#,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function)
										)							
							#REFERENCE CENTER LINES#
							plt.plot([lmb_min_lim_line_ft,lmb_min_lim_line_ft], [min_y, max_y], 
										color='black', lw=1, alpha=0.8,ls=':'
										#,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$')
										)
							plt.plot([lmb_max_lim_line_ft,lmb_max_lim_line_ft], [min_y, max_y], 
										color='black', lw=1, alpha=0.8,ls=':'
										#,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$')
										)

							#REFERENCE LIMIT LINES#
							plt.plot([(LINES[0][lines]) - MSK_NTMS*LINES[1][lines],(LINES[0][lines]) - MSK_NTMS*LINES[1][lines]], [min_y, max_y], 
										color='black', lw=1, alpha=0.8,ls=':'
										#,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$')
										)
							plt.plot([(LINES[0][lines]) + MSK_NTMS*LINES[1][lines],(LINES[0][lines]) + MSK_NTMS*LINES[1][lines]], [min_y, max_y], 
										color='black', lw=1, alpha=0.8,ls=':'
										#,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$')
										)
							plt.plot([lmb_min_lim_line_ft,lmb_min_lim_line_ft], [min_y, max_y], 
										color='blue', lw=1, alpha=0.8,ls='dashed'
										#,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$')
										)
							plt.plot([lmb_max_lim_line_ft,lmb_max_lim_line_ft], [min_y, max_y], 
										color='blue', lw=1, alpha=0.8,ls='dashed'
										#,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$')
										)
							#REFERENCE LIMIT LINES#							

							plt.step(lambda_glx[mask_pl], inten_glx[mask_pl], 
										colors[index],
										where='mid',lw=3.0,alpha=0.6,linestyle='-')#label=label_glx,
						elif fit_fnct=='gaussM' and (AMPL_G_O <0):#not 'DblF' in LINES[3][lines]:
							try:
								OFST_G_O = Header_Get(specfile_glx,str(LINES[5][lines])+'_OFSO')
								if OFST_G_O == 999999.99999:
									OFST_G_O = 0
								else:
									pass
								print
								print colored('Correcting Spectra by Offset Fitted Previously','yellow')
								print colored('Defined by Header: ' + str(LINES[5][lines])+'_OFSO','yellow')
								print
								#inten_glx[mask_pl] = inten_glx[mask_pl] - OFST_G_O				 #MENOS OFFSET			
							except:
								pass
							if pre_off_plt == True:
								try:
									plt.plot(lambda_glx_lne_fit,
												func_1D_Gaussian(lambda_glx_lne_fit,*popt_0),
												color = 'gray'  ,ls=':',lw=3.0,
												label = label_glx + ' g fit Org: ' + 
												'EW: ' + str(EW_0), 
												alpha=0.5)
									plt.plot(lambda_glx_lne_fit,
												func_1D_Gaussian_O(lambda_glx_lne_fit,*popt_O)- 1,
												color = 'gray'  ,ls='--',lw=3.0,
												label = label_glx + ' g fit Off: ' + 
												'EW: ' + str(EW_O) + ', '  
												'OFS: ' + str(np.round(OFST_G_O,2)), 
												alpha=0.5)
								except UnboundLocalError:
									plt.plot(lambda_glx_lne_fit,
												func_1D_Gaussian(lambda_glx_lne_fit,CTRE_G_0,AMPL_G_0,SGMA_G_0)     ,
												color = 'gray'  ,ls=':',lw=3.0,
												label = label_glx + ' g fit Org: ' + 
												'EW: ' + str(EW_0), 
												alpha=0.5)
									plt.plot(lambda_glx_lne_fit,
												func_1D_Gaussian_O(lambda_glx_lne_fit,CTRE_G_O,AMPL_G_O,SGMA_G_O,OFST_G_O)  - 1,
												color = 'gray'  ,ls='--',lw=3.0,
												label = label_glx + ' g fit Off: ' + 
												'EW: ' + str(EW_O) + ', '  
												'OFS: ' + str(np.round(OFST_G_O,2)), 
												alpha=0.5)
							elif pre_off_plt == False:
								pass
								mask_pl
								mask_ft
							#CTR#
							try:
								plt.plot(lambda_glx_lne_fitM,
										func_1D_Gaussian(lambda_glx_lne_fitM,*popt_C),
										color = 'green',#colors[index]   ,
										ls='-',lw=3.0,
										label = label_glx + ' '+
										' X$_{0}$: '  + str(np.round(CTRE_G_C,2)) +
										' A: '        + str(np.round(AMPL_G_C,2)) +
										' $\sigma$: ' + str(np.round(SGMA_G_C,2))
										,
										alpha=1.0)
							except UnboundLocalError:
								plt.plot(lambda_glx_lne_fitM,
										func_1D_Gaussian(lambda_glx_lne_fitM,CTRE_G_C,AMPL_G_C,SGMA_G_C),
										color = 'green',#colors[index]   ,
										ls='-',lw=3.0,
										label = label_glx + ' '+
										' X$_{0}$: '  + str(np.round(CTRE_G_C,2)) +
										' A: '        + str(np.round(AMPL_G_C,2)) +
										' $\sigma$: ' + str(np.round(SGMA_G_C,2))
										,
										alpha=1.0)
							#CTR#
							#PRE#
							try:
								plt.plot(lambda_glx_lne_fitM,
										func_1D_Gaussian_Emm(lambda_glx_lne_fitM,*popt_C_PRE),
										color = 'blue'   ,
										ls=':',
										lw=1.0,
										label = label_glx + ' '+
										' X$_{0}$: '  + str(np.round(CTRE_G_C_PRE,2)) +
										' A: '        + str(np.round(AMPL_G_C_PRE,2)) +
										' $\sigma$: ' + str(np.round(SGMA_G_C_PRE,2))
										,
										alpha=1.0)
							except UnboundLocalError:
								plt.plot(lambda_glx_lne_fitM,
										func_1D_Gaussian_Emm(lambda_glx_lne_fitM,CTRE_G_C_PRE,AMPL_G_C_PRE,SGMA_G_C_PRE),
										color = 'blue'   ,
										ls=':',
										lw=1.0,
										label = label_glx + ' '+
										' X$_{0}$: '  + str(np.round(CTRE_G_C_PRE,2)) +
										' A: '        + str(np.round(AMPL_G_C_PRE,2)) +
										' $\sigma$: ' + str(np.round(SGMA_G_C_PRE,2))
										,
										alpha=1.0)
							#PRE#
							#PST#
							try:
								plt.plot(lambda_glx_lne_fitM,
										func_1D_Gaussian_Emm(lambda_glx_lne_fitM,*popt_C_PST),
										color = 'red'   ,ls='-.',lw=1.0,
										label = label_glx + ' '+
										' X$_{0}$: '  + str(np.round(CTRE_G_C_PST,2)) +
										' A: '        + str(np.round(AMPL_G_C_PST,2)) +
										' $\sigma$: ' + str(np.round(SGMA_G_C_PST,2))
										,
										alpha=1.0)
							except UnboundLocalError:
								plt.plot(lambda_glx_lne_fitM,
										func_1D_Gaussian_Emm(lambda_glx_lne_fitM,CTRE_G_C_PST,AMPL_G_C_PST,SGMA_G_C_PST),
										color = 'red'   ,ls='-.',lw=1.0,
										label = label_glx + ' '+
										' X$_{0}$: '  + str(np.round(CTRE_G_C_PST,2)) +
										' A: '        + str(np.round(AMPL_G_C_PST,2)) +
										' $\sigma$: ' + str(np.round(SGMA_G_C_PST,2))
										,
										alpha=1.0)							
							#PST#
							#SUM#
							try:
								plt.plot(lambda_glx_lne_fitM,
										func_1D_Gaussian(lambda_glx_lne_fitM,*popt_C)    +
										(func_1D_Gaussian_Emm(lambda_glx_lne_fitM,*popt_C_PRE))+
										(func_1D_Gaussian_Emm(lambda_glx_lne_fitM,*popt_C_PST)) -
										2,
										color = 'black',
										ls='-',lw=3.0,
										label = label_glx + ' '
										,
										alpha=1.0)
							except UnboundLocalError:
								plt.plot(lambda_glx_lne_fitM,
										func_1D_Gaussian(lambda_glx_lne_fitM,CTRE_G_C,AMPL_G_C,SGMA_G_C)                   +
										(func_1D_Gaussian_Emm(lambda_glx_lne_fitM,CTRE_G_C_PRE,AMPL_G_C_PRE,SGMA_G_C_PRE)) +
										(func_1D_Gaussian_Emm(lambda_glx_lne_fitM,CTRE_G_C_PST,AMPL_G_C_PST,SGMA_G_C_PST)) - 
										2,
										color = 'black',
										ls='-',lw=3.0,
										label = label_glx + ' '
										,
										alpha=1.0)							
							#SUM#
							#LNR#
							plt.plot(lambda_glx_lne_fitM,
									func_Linear(lambda_glx_lne_fitM,slope_line1,b1),
									color = 'cyan',
									ls='-',lw=3.0,
									label = label_glx + ' '+
									'm: ' + str(np.round(slope_line1,10)) + ', ' +
									'b : ' + str(np.round(b1,2)) +  ', ' 
									,
									alpha=1.0)
							#LNR#
							min_y, max_y = ax110.get_ylim()
							#REFERENCE CENTER LINES CTR-GAUSSIAN#
							plt.plot([LINES[0][lines],LINES[0][lines]],
										[min_y, max_y],
										color='black', lw=2, alpha=0.8,ls=':',
										label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function)

							plt.plot([LINES[0][lines]+LINES[8][lines],LINES[0][lines]+LINES[8][lines]],
										[min_y, max_y],
										color='green', lw=2, alpha=0.8,ls='dashed'
										#,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function)
										)							
							#REFERENCE CENTER LINES CTR-GAUSSIAN#
							plt.plot([lmb_min_lim_line_ft,lmb_min_lim_line_ft], [min_y, max_y], 
										color='black', lw=1, alpha=0.8,ls=':'
										#,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$')
										)
							plt.plot([lmb_max_lim_line_ft,lmb_max_lim_line_ft], [min_y, max_y], 
										color='black', lw=1, alpha=0.8,ls=':'
										#,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$')
										)

							#REFERENCE LIMIT LINES CTR-GAUSSIAN#
							plt.plot([(LINES[0][lines]) - MSK_NTMS*LINES[1][lines],(LINES[0][lines]) - MSK_NTMS*LINES[1][lines]], [min_y, max_y], 
										color='black', lw=1, alpha=0.8,ls=':'
										#,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$')
										)
							plt.plot([(LINES[0][lines]) + MSK_NTMS*LINES[1][lines],(LINES[0][lines]) + MSK_NTMS*LINES[1][lines]], [min_y, max_y], 
										color='black', lw=1, alpha=0.8,ls=':'
										#,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$')
										)
							plt.plot([lmb_min_lim_line_ft,lmb_min_lim_line_ft], [min_y, max_y], 
										color='green', lw=1, alpha=0.8,ls='dashed'
										#,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$')
										)
							plt.plot([lmb_max_lim_line_ft,lmb_max_lim_line_ft], [min_y, max_y], 
										color='green', lw=1, alpha=0.8,ls='dashed'
										#,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$')
										)
							#REFERENCE LIMIT LINES CTR-GAUSSIAN#

							#REFERENCE CENTER LINES PRE-PST GAUSSIANS#							
							plt.plot([x_a,x_a],
										[min_y, max_y],
										color='blue', lw=1, alpha=0.8,ls='dashed',
										#label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function
										)
							plt.plot([x_b,x_b],
										[min_y, max_y],
										color='red', lw=1, alpha=0.8,ls='dashed',
										#label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function
										)
							

							plt.plot([LINES[0][lines] - pre_shf_ctr,LINES[0][lines] - pre_shf_ctr],
										[min_y, max_y],
										color='blue', lw=1, alpha=1.0,ls='-.',
										#label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function
										)
							plt.plot([LINES[0][lines] + pst_shf_ctr,LINES[0][lines] + pst_shf_ctr],
										[min_y, max_y],
										color='red', lw=1, alpha=1.0,ls='-.',
										#label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function
										)

							#REFERENCE CENTER LINES PRE-PST GAUSSIANS#
							#REFERENCE LIMIT LINES PRE-PST GAUSSIANS#
							'''
							plt.plot([(x_a+pre_shf_lim),(x_a+pre_shf_lim)],
										[min_y, max_y],
										color='blue',lw=1,alpha=0.8,ls=':',
										)
							plt.plot([(x_a-pre_shf_lim),(x_a-pre_shf_lim)],
										[min_y, max_y],
										color='blue',lw=1,alpha=0.8,ls=':',
										)
							plt.plot([(x_b-pre_shf_lim),(x_b-pre_shf_lim)],
										[min_y, max_y],
										color='red',lw=1,alpha=0.8,ls=':',
										)
							plt.plot([(x_b+pst_shf_lim),(x_b+pst_shf_lim)],
										[min_y, max_y],
										color='red',lw=1,alpha=0.8,ls=':',
										)
							'''							
							plt.plot([(LINES[0][lines] - pre_shf_ctr - pre_shf_lim),(LINES[0][lines] - pre_shf_ctr - pre_shf_lim)],
										[min_y, max_y],
										color='blue',lw=1,alpha=0.8,ls=':',
										)
							plt.plot([(LINES[0][lines] - pre_shf_ctr + pre_shf_lim),(LINES[0][lines] - pre_shf_ctr + pre_shf_lim)],
										[min_y, max_y],
										color='blue',lw=1,alpha=0.8,ls=':',
										)
							plt.plot([(LINES[0][lines] + pst_shf_ctr - pst_shf_lim),(LINES[0][lines] + pst_shf_ctr - pst_shf_lim)],
										[min_y, max_y],
										color='red',lw=1,alpha=0.8,ls=':',
										)
							plt.plot([(LINES[0][lines] + pst_shf_ctr + pst_shf_lim),(LINES[0][lines] + pst_shf_ctr + pst_shf_lim)],
										[min_y, max_y],
										color='red',lw=1,alpha=0.8,ls=':',
										)
							#REFERENCE LIMIT LINES PRE-PST GAUSSIANS#


							plt.step(lambda_glx[mask_pl], inten_glx[mask_pl], 
										colors[index],
										where='mid',lw=3.0,alpha=0.6,linestyle='-')#label=label_glx,
						elif fit_fnct=='gauss' and 'Dbl' in LINES[3][lines]:
							lambda_glx_lne_fit_1 = np.arange(lmb_min_lim_line_1,lmb_max_lim_line_1,0.1)
							lambda_glx_lne_fit_2 = np.arange(lmb_min_lim_line_2,lmb_max_lim_line_2,0.1)
							lambda_glx_lne_fit_D = np.arange(lmb_min_lim_line_1,lmb_max_lim_line_2,0.1)
							print
							print 'Dbl Gaussian Function'

							#plt.plot(lambda_glx_lne_fit_D,func_2_1D_Gaussian(lambda_glx_lne_fit_D,*popt_0_D)     ,
										#color=colors[index]  ,ls=':' ,lw=3.0 ,alpha=0.3,
										#label = '')#label_glx + ' g fit 0: $\lambda_{0}$='+ str(np.round(CTRE_G_0,2))+ ', $\sigma$=' + str(np.round(SGMA_G_0,2))+', EW: ' + str(EW_0), 
										##alpha=0.3)# + ', EWE: '+str(EWE))
							###plt.plot(lambda_glx_lne_fit_1,func_2_1D_Gaussian_O(lambda_glx_lne_fit_1,*popt_O_D)   ,
										#color='white'        ,ls='--',lw=3.0 ,alpha=0.1,
										###label = '')#label_glx + ' g fit O: $\lambda_{0}$='+ str(np.round(CTRE_G_O,2))+ ', $\sigma$=' + str(np.round(SGMA_G_O,2))+', EW: ' + str(EW_O) + ', OFS: ' + str(np.round(OFST_G_O,2)), 
										####alpha=0.1)# + ', EWE: '+str(EWE))
							##plt.plot(lambda_glx_lne_fit_1,func_2_1D_Gaussian(lambda_glx_lne_fit_1,*popt_C_D)    ,
										#color=colors[index]   ,ls='-' ,lw=3.0 ,alpha=1.0,
										##label = label_glx + ' EW: ' + str(EW_C_D), )#' g fit C: $\lambda_{0}$='+ str(np.round(CTRE_G_C,2))+ ', $\sigma$=' + str(np.round(SGMA_G_C,2))+', EW: ' + str(EW_C), 
										###alpha=1.0)# + ', EWE: '+str(EWE)


							#plt.plot(lambda_glx_lne_fit_2,func_1D_Gaussian(lambda_glx_lne_fit_2,*popt_0_2)     ,
										#color=colors[index]  ,ls=':' ,lw=3.0 ,alpha=0.3,
										#label = '')#label_glx + ' g fit 0: $\lambda_{0}$='+ str(np.round(CTRE_G_0,2))+ ', $\sigma$=' + str(np.round(SGMA_G_0,2))+', EW: ' + str(EW_0), 
										##alpha=0.3)# + ', EWE: '+str(EWE))
							#plt.plot(lambda_glx_lne_fit_2,func_1D_Gaussian_O(lambda_glx_lne_fit_2,*popt_O_2)   ,
										#color='white'        ,ls='--',lw=3.0 ,alpha=0.1,
										#label = '')#label_glx + ' g fit O: $\lambda_{0}$='+ str(np.round(CTRE_G_O,2))+ ', $\sigma$=' + str(np.round(SGMA_G_O,2))+', EW: ' + str(EW_O) + ', OFS: ' + str(np.round(OFST_G_O,2)), 
										##alpha=0.1)# + ', EWE: '+str(EWE))
							#plt.plot(lambda_glx_lne_fit_2,func_1D_Gaussian(lambda_glx_lne_fit_2,*popt_C_2)    ,
										#color=colors[index]   ,ls='-' ,lw=3.0 ,alpha=1.0,
										#label = label_glx + ' EW: ' + str(EW_C_2), )#' g fit C: $\lambda_{0}$='+ str(np.round(CTRE_G_C,2))+ ', $\sigma$=' + str(np.round(SGMA_G_C,2))+', EW: ' + str(EW_C), 
										##alpha=1.0)# + ', EWE: '+str(EWE)

							plt.step(lambda_glx[mask_pl_D], inten_glx[mask_pl_D], colors[index],
										where='mid',lw=3.0,alpha=0.6,linestyle='-')#label=label_glx,
							plt.step(lambda_glx[mask_pl_D], inten_glx[mask_pl_D], colors[index],
										where='mid',lw=3.0,alpha=0.6,linestyle='-')#label=label_glx,
					elif 'Dbl' in LINES[3][lines]: 
						print fit_fnct
						lambda_glx_lne_fit  = np.arange(lmb_min_lim_line,lmb_max_lim_line,0.1)
						lambda_glx_lne_fitM = np.arange(min(lambda_glx[mask_pl]),max(lambda_glx[mask_pl]),0.1)
						if fit_fnct=='gauss' and ((AMPL_G_O_1 <0) or (AMPL_G_O_2 <0)):#not 'DblF' in LINES[3][lines]:
							try:
								OFST_G_O_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_OFO1')
								OFST_G_O_2 = Header_Get(specfile_glx,str(LINES[5][lines])+'_OFO2')
								if OFST_G_O_1 == 999999.99999:
									OFST_G_O_1 = 0
								else:
									pass
								if OFST_G_O_2 == 999999.99999:
									OFST_G_O_2 = 0
								else:
									pass
								print
								print colored('Correcting Spectra by Offset Fitted Previously','yellow')
								print colored('Defined by Header: ' + str(LINES[5][lines])+'_OFO1','yellow')
								print colored('Defined by Header: ' + str(LINES[5][lines])+'_OFO2','yellow')
								print
								#inten_glx[mask_pl] = inten_glx[mask_pl] - OFST_G_O				 #MENOS OFFSET			
							except:
								pass
							if pre_off_plt == True:
								try:
									plt.plot(lambda_glx_lne_fit,
												func_1D_Gaussian(lambda_glx_lne_fit,*popt_0),
												color = 'gray'  ,ls=':',lw=3.0,
												label = label_glx + ' g fit Org: ' + 
												'EW: ' + str(EW_0), 
												alpha=0.5)
									plt.plot(lambda_glx_lne_fit,
												func_1D_Gaussian_O(lambda_glx_lne_fit,*popt_O)- 1,
												color = 'gray'  ,ls='--',lw=3.0,
												label = label_glx + ' g fit Off: ' + 
												'EW: ' + str(EW_O) + ', '  
												'OFS: ' + str(np.round(OFST_G_O,2)), 
												alpha=0.5)
								except UnboundLocalError:
									plt.plot(lambda_glx_lne_fit,
												func_1D_Gaussian(lambda_glx_lne_fit,CTRE_G_0,AMPL_G_0,SGMA_G_0)     ,
												color = 'gray'  ,ls=':',lw=3.0,
												label = label_glx + ' g fit Org: ' + 
												'EW: ' + str(EW_0), 
												alpha=0.5)
									plt.plot(lambda_glx_lne_fit,
												func_1D_Gaussian_O(lambda_glx_lne_fit,CTRE_G_O,AMPL_G_O,SGMA_G_O,OFST_G_O)  - 1,
												color = 'gray'  ,ls='--',lw=3.0,
												label = label_glx + ' g fit Off: ' + 
												'EW: ' + str(EW_O) + ', '  
												'OFS: ' + str(np.round(OFST_G_O,2)), 
												alpha=0.5)
							elif pre_off_plt == False:
								pass
								mask_pl
								mask_ft
							#CTR#
							'''
							try:
								plt.plot(lambda_glx_lne_fitM,
										func_1D_Gaussian(lambda_glx_lne_fitM,*popt_C),
										color = 'green',#colors[index]   ,
										ls='-',lw=3.0,
										label = label_glx + ' '+
										' X$_{0}$: '  + str(np.round(CTRE_G_C,2)) +
										' A: '        + str(np.round(AMPL_G_C,2)) +
										' $\sigma$: ' + str(np.round(SGMA_G_C,2))
										,
										alpha=1.0)
							except UnboundLocalError:
								plt.plot(lambda_glx_lne_fitM,
										func_1D_Gaussian(lambda_glx_lne_fitM,CTRE_G_C,AMPL_G_C,SGMA_G_C),
										color = 'green',#colors[index]   ,
										ls='-',lw=3.0,
										label = label_glx + ' '+
										' X$_{0}$: '  + str(np.round(CTRE_G_C,2)) +
										' A: '        + str(np.round(AMPL_G_C,2)) +
										' $\sigma$: ' + str(np.round(SGMA_G_C,2))
										,
										alpha=1.0)
							'''
							#CTR#
							#G-1#
							try:
								plt.plot(lambda_glx_lne_fitM,
										func_1D_Gaussian(lambda_glx_lne_fitM,*popt_C_1),
										color = 'blue'   ,
										ls=':',
										lw=1.0,
										label = label_glx + ' '+
										' X$_{0}$: '  + str(np.round(CTRE_G_C_1,2)) +
										' A: '        + str(np.round(AMPL_G_C_1,2)) +
										' $\sigma$: ' + str(np.round(SGMA_G_C_1,2))
										,
										alpha=1.0)
							except UnboundLocalError:
								plt.plot(lambda_glx_lne_fitM,
										func_1D_Gaussian(lambda_glx_lne_fitM,CTRE_G_C_1,AMPL_G_C_1,SGMA_G_C_1),
										color = 'blue'   ,
										ls=':',
										lw=1.0,
										label = label_glx + ' '+
										' X$_{0}$: '  + str(np.round(CTRE_G_C_1,2)) +
										' A: '        + str(np.round(AMPL_G_C_1,2)) +
										' $\sigma$: ' + str(np.round(SGMA_G_C_1,2))
										,
										alpha=1.0)
							#G-1#
							#G-2#
							try:
								plt.plot(lambda_glx_lne_fitM,
										func_1D_Gaussian(lambda_glx_lne_fitM,*popt_C_2),
										color = 'red'   ,ls='-.',lw=1.0,
										label = label_glx + ' '+
										' X$_{0}$: '  + str(np.round(CTRE_G_C_2,2)) +
										' A: '        + str(np.round(AMPL_G_C_2,2)) +
										' $\sigma$: ' + str(np.round(SGMA_G_C_2,2))
										,
										alpha=1.0)
							except UnboundLocalError:
								plt.plot(lambda_glx_lne_fitM,
										func_1D_Gaussian(lambda_glx_lne_fitM,CTRE_G_C_2,AMPL_G_C_2,SGMA_G_C_2),
										color = 'red'   ,ls='-.',lw=1.0,
										label = label_glx + ' '+
										' X$_{0}$: '  + str(np.round(CTRE_G_C_2,2)) +
										' A: '        + str(np.round(AMPL_G_C_2,2)) +
										' $\sigma$: ' + str(np.round(SGMA_G_C_2,2))
										,
										alpha=1.0)							
							#G-2#
							#SUM:G_1+G_2#
							try:
								plt.plot(lambda_glx_lne_fitM,
										#func_1D_Gaussian(lambda_glx_lne_fitM,*popt_C)    +
										(func_1D_Gaussian(lambda_glx_lne_fitM,*popt_C_1))+
										(func_1D_Gaussian(lambda_glx_lne_fitM,*popt_C_2)) -
										2,
										color = 'black',
										ls='-',lw=3.0,
										label = label_glx + ' '
										,
										alpha=1.0)
							except UnboundLocalError:
								plt.plot(lambda_glx_lne_fitM,
										#func_1D_Gaussian(lambda_glx_lne_fitM,CTRE_G_C,AMPL_G_C,SGMA_G_C)                   +
										(func_1D_Gaussian(lambda_glx_lne_fitM,CTRE_G_C_1,AMPL_G_C_1,SGMA_G_C_1)) +
										(func_1D_Gaussian(lambda_glx_lne_fitM,CTRE_G_C_2,AMPL_G_C_2,SGMA_G_C_2)) - 
										1,
										color = 'black',
										ls='-',lw=3.0,
										label = label_glx + ' '
										,
										alpha=1.0)							
							#SUM:G_1+G_2#
							min_y, max_y = ax110.get_ylim()

					
							#REFERENCE CENTER LINES G_1-G_2 GAUSSIANS#							
							plt.plot([LINES[0][lines-2],LINES[0][lines-2]],
										[min_y, max_y],
										color='blue', lw=2, 
										alpha=0.8,ls='dashed',
										#label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function
										)
							plt.plot([LINES[0][lines-1],LINES[0][lines-1]],
										[min_y, max_y],
										color='red', lw=2, 
										alpha=0.8,ls=':',
										#label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function
										)
							#REFERENCE CENTER LINES G_1-G_2 GAUSSIANS#

							#REF CENTER LINES G_1-G_2 OFFSET GAUSSIANS#							
							plt.plot([LINES[0][lines-2]+L8_1,LINES[0][lines-2]+L8_1],
										[min_y, max_y],
										color='blue', lw=1, alpha=0.8,ls='dashed',
										#label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function
										)
							plt.plot([LINES[0][lines-1]+L8_2,LINES[0][lines-1]+L8_2],
										[min_y, max_y],
										color='red', lw=1, alpha=0.8,ls=':',
										#label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function
										)
							#REF CENTER LINES G_1-G_2 OFFSET GAUSSIANS#

							#REFERENCE LIMIT LINES G_1-G_2 GAUSSIANS#
							plt.plot([(LINES[0][lines-2]+L8_1) - MSK_NTMS*LINES[1][lines-2],(LINES[0][lines-2]+L8_1) - MSK_NTMS*LINES[1][lines-2]],
										[min_y, max_y],
										color='blue',lw=1,alpha=0.8,ls='dashed',
										)
							plt.plot([(LINES[0][lines-2]+L8_1) + MSK_NTMS*LINES[1][lines-2],(LINES[0][lines-2]+L8_1) + MSK_NTMS*LINES[1][lines-2]],
										[min_y, max_y],
										color='blue',lw=1,alpha=0.8,ls='dashed',
										)

							plt.plot([(LINES[0][lines-1]+L8_2) - MSK_NTMS*LINES[1][lines-1],(LINES[0][lines-1]+L8_2) - MSK_NTMS*LINES[1][lines-1]],
										[min_y, max_y],
										color='red',lw=1,alpha=0.8,ls=':',
										)
							plt.plot([(LINES[0][lines-1]+L8_2) + MSK_NTMS*LINES[1][lines-1],(LINES[0][lines-1]+L8_2) + MSK_NTMS*LINES[1][lines-1]],
										[min_y, max_y],
										color='red',lw=1,alpha=0.8,ls=':',
										)
							#REFERENCE LIMIT LINES G_1-G_2 GAUSSIANS#																



							plt.step(lambda_glx[mask_pl], inten_glx[mask_pl], 
										colors[index],
										where='mid',lw=3.0,alpha=0.6,linestyle='-')#label=label_glx,
						elif fit_fnct=='gaussM' and ((AMPL_G_O_1 <0) or (AMPL_G_O_2 <0)):#not 'DblF' in LINES[3][lines]:
							try:
								OFST_G_O_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_OFO1')
								OFST_G_O_2 = Header_Get(specfile_glx,str(LINES[5][lines])+'_OFO2')
								if OFST_G_O_1 == 999999.99999:
									OFST_G_O_1 = 0
								else:
									pass
								if OFST_G_O_2 == 999999.99999:
									OFST_G_O_2 = 0
								else:
									pass
								print
								print colored('Correcting Spectra by Offset Fitted Previously','yellow')
								print colored('Defined by Header: ' + str(LINES[5][lines])+'_OFO1','yellow')
								print colored('Defined by Header: ' + str(LINES[5][lines])+'_OFO2','yellow')
								print
								#inten_glx[mask_pl] = inten_glx[mask_pl] - OFST_G_O				 #MENOS OFFSET			
							except:
								pass
							if pre_off_plt == True:
								try:
									plt.plot(lambda_glx_lne_fit,
												func_1D_Gaussian(lambda_glx_lne_fit,*popt_0),
												color = 'gray'  ,ls=':',lw=3.0,
												label = label_glx + ' g fit Org: ' + 
												'EW: ' + str(EW_0), 
												alpha=0.5)
									plt.plot(lambda_glx_lne_fit,
												func_1D_Gaussian_O(lambda_glx_lne_fit,*popt_O)- 1,
												color = 'gray'  ,ls='--',lw=3.0,
												label = label_glx + ' g fit Off: ' + 
												'EW: ' + str(EW_O) + ', '  
												'OFS: ' + str(np.round(OFST_G_O,2)), 
												alpha=0.5)
								except UnboundLocalError:
									plt.plot(lambda_glx_lne_fit,
												func_1D_Gaussian(lambda_glx_lne_fit,CTRE_G_0,AMPL_G_0,SGMA_G_0)     ,
												color = 'gray'  ,ls=':',lw=3.0,
												label = label_glx + ' g fit Org: ' + 
												'EW: ' + str(EW_0), 
												alpha=0.5)
									plt.plot(lambda_glx_lne_fit,
												func_1D_Gaussian_O(lambda_glx_lne_fit,CTRE_G_O,AMPL_G_O,SGMA_G_O,OFST_G_O)  - 1,
												color = 'gray'  ,ls='--',lw=3.0,
												label = label_glx + ' g fit Off: ' + 
												'EW: ' + str(EW_O) + ', '  
												'OFS: ' + str(np.round(OFST_G_O,2)), 
												alpha=0.5)
							elif pre_off_plt == False:
								pass
								mask_pl
								mask_ft
							#CTR#
							'''
							try:
								plt.plot(lambda_glx_lne_fitM,
										func_1D_Gaussian(lambda_glx_lne_fitM,*popt_C),
										color = 'green',#colors[index]   ,
										ls='-',lw=3.0,
										label = label_glx + ' '+
										' X$_{0}$: '  + str(np.round(CTRE_G_C,2)) +
										' A: '        + str(np.round(AMPL_G_C,2)) +
										' $\sigma$: ' + str(np.round(SGMA_G_C,2))
										,
										alpha=1.0)
							except UnboundLocalError:
								plt.plot(lambda_glx_lne_fitM,
										func_1D_Gaussian(lambda_glx_lne_fitM,CTRE_G_C,AMPL_G_C,SGMA_G_C),
										color = 'green',#colors[index]   ,
										ls='-',lw=3.0,
										label = label_glx + ' '+
										' X$_{0}$: '  + str(np.round(CTRE_G_C,2)) +
										' A: '        + str(np.round(AMPL_G_C,2)) +
										' $\sigma$: ' + str(np.round(SGMA_G_C,2))
										,
										alpha=1.0)
							'''
							#CTR#
							#G-1#
							try:
								plt.plot(lambda_glx_lne_fitM,
										func_1D_Gaussian(lambda_glx_lne_fitM,*popt_C_1),
										color = 'blue'   ,
										ls=':',
										lw=1.0,
										label = label_glx + ' '+
										' X$_{0}$: '  + str(np.round(CTRE_G_C_1,2)) +
										' A: '        + str(np.round(AMPL_G_C_1,2)) +
										' $\sigma$: ' + str(np.round(SGMA_G_C_1,2))
										,
										alpha=1.0)
							except UnboundLocalError:
								plt.plot(lambda_glx_lne_fitM,
										func_1D_Gaussian(lambda_glx_lne_fitM,CTRE_G_C_1,AMPL_G_C_1,SGMA_G_C_1),
										color = 'blue'   ,
										ls=':',
										lw=1.0,
										label = label_glx + ' '+
										' X$_{0}$: '  + str(np.round(CTRE_G_C_1,2)) +
										' A: '        + str(np.round(AMPL_G_C_1,2)) +
										' $\sigma$: ' + str(np.round(SGMA_G_C_1,2))
										,
										alpha=1.0)
							#G-1#
							#G-2#
							try:
								plt.plot(lambda_glx_lne_fitM,
										func_1D_Gaussian(lambda_glx_lne_fitM,*popt_C_2),
										color = 'red'   ,ls='-.',lw=1.0,
										label = label_glx + ' '+
										' X$_{0}$: '  + str(np.round(CTRE_G_C_2,2)) +
										' A: '        + str(np.round(AMPL_G_C_2,2)) +
										' $\sigma$: ' + str(np.round(SGMA_G_C_2,2))
										,
										alpha=1.0)
							except UnboundLocalError:
								plt.plot(lambda_glx_lne_fitM,
										func_1D_Gaussian(lambda_glx_lne_fitM,CTRE_G_C_2,AMPL_G_C_2,SGMA_G_C_2),
										color = 'red'   ,ls='-.',lw=1.0,
										label = label_glx + ' '+
										' X$_{0}$: '  + str(np.round(CTRE_G_C_2,2)) +
										' A: '        + str(np.round(AMPL_G_C_2,2)) +
										' $\sigma$: ' + str(np.round(SGMA_G_C_2,2))
										,
										alpha=1.0)							
							#G-2#
							#SUM:G_1+G_2#
							try:
								plt.plot(lambda_glx_lne_fitM,
										#func_1D_Gaussian(lambda_glx_lne_fitM,*popt_C)    +
										(func_1D_Gaussian(lambda_glx_lne_fitM,*popt_C_1))+
										(func_1D_Gaussian(lambda_glx_lne_fitM,*popt_C_2)) -
										2,
										color = 'black',
										ls='-.',lw=3.0,
										label = label_glx + ' '
										,
										alpha=1.0)
							except UnboundLocalError:
								plt.plot(lambda_glx_lne_fitM,
										#func_1D_Gaussian(lambda_glx_lne_fitM,CTRE_G_C,AMPL_G_C,SGMA_G_C)                   +
										(func_1D_Gaussian(lambda_glx_lne_fitM,CTRE_G_C_1,AMPL_G_C_1,SGMA_G_C_1)) +
										(func_1D_Gaussian(lambda_glx_lne_fitM,CTRE_G_C_2,AMPL_G_C_2,SGMA_G_C_2)) - 
										1,
										color = 'black',
										ls='-.',lw=3.0,
										label = label_glx + ' '
										,
										alpha=1.0)							
							#SUM:G_1+G_2#
							min_y, max_y = ax110.get_ylim()

					
							#REFERENCE CENTER LINES G_1-G_2 GAUSSIANS#							
							plt.plot([LINES[0][lines-2],LINES[0][lines-2]],
										[min_y, max_y],
										color='blue', lw=2, 
										alpha=0.8,ls='dashed',
										#label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function
										)
							plt.plot([LINES[0][lines-1],LINES[0][lines-1]],
										[min_y, max_y],
										color='red', lw=2, 
										alpha=0.8,ls=':',
										#label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function
										)
							#REFERENCE CENTER LINES G_1-G_2 GAUSSIANS#

							#REF CENTER LINES G_1-G_2 OFFSET GAUSSIANS#							
							plt.plot([LINES[0][lines-2]+L8_1,LINES[0][lines-2]+L8_1],
										[min_y, max_y],
										color='blue', lw=1, alpha=0.8,ls='dashed',
										#label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function
										)
							plt.plot([LINES[0][lines-1]+L8_2,LINES[0][lines-1]+L8_2],
										[min_y, max_y],
										color='red', lw=1, alpha=0.8,ls=':',
										#label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function
										)
							#REF CENTER LINES G_1-G_2 OFFSET GAUSSIANS#

							#REFERENCE LIMIT LINES G_1-G_2 GAUSSIANS#
							plt.plot([(LINES[0][lines-2]+L8_1) - MSK_NTMS*LINES[1][lines-2],(LINES[0][lines-2]+L8_1) - MSK_NTMS*LINES[1][lines-2]],
										[min_y, max_y],
										color='blue',lw=1,alpha=0.8,ls='dashed',
										)
							plt.plot([(LINES[0][lines-2]+L8_1) + MSK_NTMS*LINES[1][lines-2],(LINES[0][lines-2]+L8_1) + MSK_NTMS*LINES[1][lines-2]],
										[min_y, max_y],
										color='blue',lw=1,alpha=0.8,ls='dashed',
										)

							plt.plot([(LINES[0][lines-1]+L8_2) - MSK_NTMS*LINES[1][lines-1],(LINES[0][lines-1]+L8_2) - MSK_NTMS*LINES[1][lines-1]],
										[min_y, max_y],
										color='red',lw=1,alpha=0.8,ls=':',
										)
							plt.plot([(LINES[0][lines-1]+L8_2) + MSK_NTMS*LINES[1][lines-1],(LINES[0][lines-1]+L8_2) + MSK_NTMS*LINES[1][lines-1]],
										[min_y, max_y],
										color='red',lw=1,alpha=0.8,ls=':',
										)
							#REFERENCE LIMIT LINES G_1-G_2 GAUSSIANS#	
							#########################################
							#PRE#
							try:
								plt.plot(lambda_glx_lne_fitM,
										func_1D_Gaussian_Emm(lambda_glx_lne_fitM,*popt_C_PRE),
										color = 'cyan'   ,
										ls=':',
										lw=1.0,
										label = label_glx + ' '+
										' X$_{0}$: '  + str(np.round(CTRE_G_C_PRE,2)) +
										' A: '        + str(np.round(AMPL_G_C_PRE,2)) +
										' $\sigma$: ' + str(np.round(SGMA_G_C_PRE,2))
										,
										alpha=1.0)
							except UnboundLocalError:
								plt.plot(lambda_glx_lne_fitM,
										func_1D_Gaussian_Emm(lambda_glx_lne_fitM,CTRE_G_C_PRE,AMPL_G_C_PRE,SGMA_G_C_PRE),
										color = 'cyan'   ,
										ls=':',
										lw=1.0,
										label = label_glx + ' '+
										' X$_{0}$: '  + str(np.round(CTRE_G_C_PRE,2)) +
										' A: '        + str(np.round(AMPL_G_C_PRE,2)) +
										' $\sigma$: ' + str(np.round(SGMA_G_C_PRE,2))
										,
										alpha=1.0)
							#PRE#
							#PST#
							try:
								plt.plot(lambda_glx_lne_fitM,
										func_1D_Gaussian_Emm(lambda_glx_lne_fitM,*popt_C_PST),
										color = 'magenta'   ,ls='-.',lw=1.0,
										label = label_glx + ' '+
										' X$_{0}$: '  + str(np.round(CTRE_G_C_PST,2)) +
										' A: '        + str(np.round(AMPL_G_C_PST,2)) +
										' $\sigma$: ' + str(np.round(SGMA_G_C_PST,2))
										,
										alpha=1.0)
							except UnboundLocalError:
								plt.plot(lambda_glx_lne_fitM,
										func_1D_Gaussian_Emm(lambda_glx_lne_fitM,CTRE_G_C_PST,AMPL_G_C_PST,SGMA_G_C_PST),
										color = 'magenta'   ,ls='-.',lw=1.0,
										label = label_glx + ' '+
										' X$_{0}$: '  + str(np.round(CTRE_G_C_PST,2)) +
										' A: '        + str(np.round(AMPL_G_C_PST,2)) +
										' $\sigma$: ' + str(np.round(SGMA_G_C_PST,2))
										,
										alpha=1.0)							
							#PST#
							#MDL#
							try:
								plt.plot(lambda_glx_lne_fitM,
										func_1D_Gaussian_Emm(lambda_glx_lne_fitM,*popt_C_MDL),
										color = 'orange'   ,ls='-.',lw=1.0,
										label = label_glx + ' '+
										' X$_{0}$: '  + str(np.round(CTRE_G_C_MDL,2)) +
										' A: '        + str(np.round(AMPL_G_C_MDL,2)) +
										' $\sigma$: ' + str(np.round(SGMA_G_C_MDL,2))
										,
										alpha=1.0)
							except UnboundLocalError:
								plt.plot(lambda_glx_lne_fitM,
										func_1D_Gaussian_Emm(lambda_glx_lne_fitM,CTRE_G_C_MDL,AMPL_G_C_MDL,SGMA_G_C_MDL),
										color = 'orange'   ,ls='-.',lw=1.0,
										label = label_glx + ' '+
										' X$_{0}$: '  + str(np.round(CTRE_G_C_MDL,2)) +
										' A: '        + str(np.round(AMPL_G_C_MDL,2)) +
										' $\sigma$: ' + str(np.round(SGMA_G_C_MDL,2))
										,
										alpha=1.0)							
							#MDL#
							#LNR#
							plt.plot(lambda_glx_lne_fitM,
									func_Linear(lambda_glx_lne_fitM,slope_line1,b1),
									color = 'gray',
									ls='-',lw=3.0,
									label = label_glx + ' '+
									'm: ' + str(np.round(slope_line1,10)) + ', ' +
									'b : ' + str(np.round(b1,2)) +  ', ' 
									,
									alpha=1.0)
							#LNR#
							min_y, max_y = ax110.get_ylim()
							#REFERENCE CENTER LINES CTR-GAUSSIAN#
							plt.plot([LINES[0][lines],LINES[0][lines]],
										[min_y, max_y],
										color='black', lw=2, alpha=0.8,ls=':',
										label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function)

							plt.plot([LINES[0][lines]+LINES[8][lines],LINES[0][lines]+LINES[8][lines]],
										[min_y, max_y],
										color='green', lw=2, alpha=0.8,ls='dashed'
										#,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function)
										)							
							#REFERENCE CENTER LINES CTR-GAUSSIAN#
							plt.plot([lmb_min_lim_line_ft,lmb_min_lim_line_ft], [min_y, max_y], 
										color='black', lw=1, alpha=0.8,ls=':'
										#,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$')
										)
							plt.plot([lmb_max_lim_line_ft,lmb_max_lim_line_ft], [min_y, max_y], 
										color='black', lw=1, alpha=0.8,ls=':'
										#,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$')
										)

							#REFERENCE LIMIT LINES CTR-GAUSSIAN#
							plt.plot([(LINES[0][lines]) - MSK_NTMS*LINES[1][lines],(LINES[0][lines]) - MSK_NTMS*LINES[1][lines]], [min_y, max_y], 
										color='black', lw=1, alpha=0.8,ls=':'
										#,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$')
										)
							plt.plot([(LINES[0][lines]) + MSK_NTMS*LINES[1][lines],(LINES[0][lines]) + MSK_NTMS*LINES[1][lines]], [min_y, max_y], 
										color='black', lw=1, alpha=0.8,ls=':'
										#,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$')
										)
							plt.plot([lmb_min_lim_line_ft,lmb_min_lim_line_ft], [min_y, max_y], 
										color='green', lw=1, alpha=0.8,ls='dashed'
										#,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$')
										)
							plt.plot([lmb_max_lim_line_ft,lmb_max_lim_line_ft], [min_y, max_y], 
										color='green', lw=1, alpha=0.8,ls='dashed'
										#,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$')
										)
							#REFERENCE LIMIT LINES CTR-GAUSSIAN#

							#REFERENCE CENTER LINES PRE-PST GAUSSIANS#							
							plt.plot([x_a,x_a],
										[min_y, max_y],
										color='cyan', lw=1, alpha=0.8,ls='dashed',
										#label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function
										)
							plt.plot([x_b,x_b],
										[min_y, max_y],
										color='magenta', lw=1, alpha=0.8,ls='dashed',
										#label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function
										)

							plt.plot([x_c,x_c],
										[min_y, max_y],
										color='orange', lw=1, alpha=0.8,ls='dashed',
										#label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function
										)
														

							plt.plot([LINES[0][lines] - pre_shf_ctr,LINES[0][lines] - pre_shf_ctr],
										[min_y, max_y],
										color='cyan', lw=1, alpha=1.0,ls='-.',
										#label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function
										)
							plt.plot([LINES[0][lines] + pst_shf_ctr,LINES[0][lines] + pst_shf_ctr],
										[min_y, max_y],
										color='magenta', lw=1, alpha=1.0,ls='-.',
										#label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function
										)

							plt.plot([LINES[0][lines] + mdl_shf_ctr,LINES[0][lines] + mdl_shf_ctr],
										[min_y, max_y],
										color='orange', lw=1, alpha=1.0,ls='-.',
										#label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function
										)
							#REFERENCE CENTER LINES PRE-PST GAUSSIANS#
							#REFERENCE LIMIT LINES PRE-PST GAUSSIANS#
							'''
							plt.plot([(x_a+pre_shf_lim),(x_a+pre_shf_lim)],
										[min_y, max_y],
										color='blue',lw=1,alpha=0.8,ls=':',
										)
							plt.plot([(x_a-pre_shf_lim),(x_a-pre_shf_lim)],
										[min_y, max_y],
										color='blue',lw=1,alpha=0.8,ls=':',
										)
							plt.plot([(x_b-pre_shf_lim),(x_b-pre_shf_lim)],
										[min_y, max_y],
										color='red',lw=1,alpha=0.8,ls=':',
										)
							plt.plot([(x_b+pst_shf_lim),(x_b+pst_shf_lim)],
										[min_y, max_y],
										color='red',lw=1,alpha=0.8,ls=':',
										)
							'''							
							plt.plot([(LINES[0][lines] - pre_shf_ctr - pre_shf_lim),(LINES[0][lines] - pre_shf_ctr - pre_shf_lim)],
										[min_y, max_y],
										color='cyan',lw=1,alpha=0.8,ls=':',
										)
							plt.plot([(LINES[0][lines] - pre_shf_ctr + pre_shf_lim),(LINES[0][lines] - pre_shf_ctr + pre_shf_lim)],
										[min_y, max_y],
										color='cyan',lw=1,alpha=0.8,ls=':',
										)
							plt.plot([(LINES[0][lines] + pst_shf_ctr - pst_shf_lim),(LINES[0][lines] + pst_shf_ctr - pst_shf_lim)],
										[min_y, max_y],
										color='magenta',lw=1,alpha=0.8,ls=':',
										)
							plt.plot([(LINES[0][lines] + pst_shf_ctr + pst_shf_lim),(LINES[0][lines] + pst_shf_ctr + pst_shf_lim)],
										[min_y, max_y],
										color='magenta',lw=1,alpha=0.8,ls=':',
										)
							plt.plot([(LINES[0][lines] + mdl_shf_ctr - mdl_shf_lim),(LINES[0][lines] + mdl_shf_ctr - mdl_shf_lim)],
										[min_y, max_y],
										color='orange',lw=1,alpha=0.8,ls=':',
										)
							plt.plot([(LINES[0][lines] + mdl_shf_ctr + mdl_shf_lim),(LINES[0][lines] + mdl_shf_ctr + mdl_shf_lim)],
										[min_y, max_y],
										color='orange',lw=1,alpha=0.8,ls=':',
										)

							#REFERENCE LIMIT LINES PRE-PST GAUSSIANS#

							#SUM#
							############################PREE+CTR-1+CTR-2+PST############################
							try:
								plt.plot(lambda_glx_lne_fitM,
										func_1D_Gaussian(lambda_glx_lne_fitM,*popt_C)    +
										(func_1D_Gaussian_Emm(lambda_glx_lne_fitM,*popt_C_PRE))+
										(func_1D_Gaussian_Emm(lambda_glx_lne_fitM,*popt_C_PST)) +
										(func_1D_Gaussian_Emm(lambda_glx_lne_fitM,*popt_C_MDL)) -										 
										4,
										color = 'black',
										ls='solid',lw=3.0,
										label = label_glx + ' '
										,
										alpha=1.0)
							except UnboundLocalError:
								plt.plot(lambda_glx_lne_fitM,
										#func_1D_Gaussian(lambda_glx_lne_fitM,CTRE_G_C,AMPL_G_C,SGMA_G_C)                   +
										(func_1D_Gaussian(lambda_glx_lne_fitM,CTRE_G_C_1,AMPL_G_C_1,SGMA_G_C_1)) +
										(func_1D_Gaussian(lambda_glx_lne_fitM,CTRE_G_C_2,AMPL_G_C_2,SGMA_G_C_2)) + 

										(func_1D_Gaussian_Emm(lambda_glx_lne_fitM,CTRE_G_C_PRE,AMPL_G_C_PRE,SGMA_G_C_PRE)) +
										(func_1D_Gaussian_Emm(lambda_glx_lne_fitM,CTRE_G_C_PST,AMPL_G_C_PST,SGMA_G_C_PST)) +
										(func_1D_Gaussian_Emm(lambda_glx_lne_fitM,CTRE_G_C_MDL,AMPL_G_C_MDL,SGMA_G_C_MDL)) -										  
										4,
										color = 'black',
										ls='solid',lw=3.0,
										label = label_glx + ' '
										,
										alpha=1.0)							
							#SUM#
							############################PREE+CTR-1+CTR-2+PST############################

							#plt.step(lambda_glx[mask_pl], inten_glx[mask_pl], 
										#colors[index],
										#where='mid',lw=3.0,alpha=0.6,linestyle='-')#label=label_glx,
							#########################################															



							plt.step(lambda_glx[mask_pl], inten_glx[mask_pl], 
										colors[index],
										where='mid',lw=3.0,alpha=0.6,linestyle='-')#label=label_glx,
					else:
						pass
				else:
					pass
				########################################################LINE-PLT#######################################################

			#######################################################DIF-SEPARATIONS#######################################################			
			plt.xlim([lmb_min_lim_line-2,lmb_max_lim_line+2])
			xmin, xmax = plt.xlim()
			plt.xlim((xmin,xmax))

			#plt.ylim([min_y,max_y])
			#ymin, ymax = plt.ylim()
			#plt.ylim((ymin,ymax))
			min_y, max_y = ax110.get_ylim()

			left, width    = lmb_min_lim_line, (lmb_max_lim_line - lmb_min_lim_line)
			bottom, height = min_y, (max_y - min_y)
			right          = lmb_max_lim_line + width
			top            = max_y

			# build a rectangle in axes coords
			left, width = 0, 0.95
			bottom, height = 0, 0.95
			right = left + width
			top = bottom + height
         
			#p = patches.Rectangle(
			#(left, bottom), width, height,
			#fill=False, transform=ax110.transAxes, clip_on=False
			#)

			#ax110.add_patch(p)
			#https://matplotlib.org/users/text_props.html

			#ax110.text(left, top, 'z flags_F: '+(specfile_glx.split('-ss-zf_F-',1)[1]).split('-ss-sep_as',1)[0] + ', z_flags_B: '+(specfile_glx.split('-ss-zf_B-',1)[1]).split('-ss-zf_F-',1)[0] ,
			#ax110.text(left, bottom, 
					#'z flags_F: '+
					#(specfile_glx.split('-ss-zf_F-',1)[1]).split('-ss-sep' + 
					#splt_smpl_sfx ,1)[0] + ', ' +
					 #'z_flags_B: '+
					 #(specfile_glx.split('-ss-zf_B-',1)[1]).split('-ss-zf_F-',1)[0] + ', ' +
					 #splt_smpl_unt
					 #, 
			#horizontalalignment='left',
			#verticalalignment='top',
			#fontsize = 16,
			#transform=ax110.transAxes)

			
			plt.plot([lmb_min_lim_line, lmb_max_lim_line], [1, 1]        , color='black', lw=1, alpha=0.6)
			lg1 = plt.legend(loc=0,prop={'size':22})
			lg1.draw_frame(False)

			lmb_min_lim_line_ft = (LINES[0][lines]-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
			lmb_max_lim_line_ft = (LINES[0][lines]+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]

			'''
			plt.plot([LINES[0][lines],LINES[0][lines]],
						[min_y, max_y],
						color='black', lw=1, alpha=0.8,ls=':',
						label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function)

			plt.plot([LINES[0][lines]+LINES[8][lines],LINES[0][lines]+LINES[8][lines]],
						[min_y, max_y],
						color='black', lw=1, alpha=0.8,ls='dashed'
						#,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function)
						)
			plt.plot([lmb_min_lim_line_ft,lmb_min_lim_line_ft], [min_y, max_y], 
						color='black', lw=1, alpha=0.8,ls=':'
						#,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$')
						)
			plt.plot([lmb_max_lim_line_ft,lmb_max_lim_line_ft], [min_y, max_y], 
						color='black', lw=1, alpha=0.8,ls=':'
						#,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$')
						)
			'''

			lg2=plt.legend(loc=0,prop={'size':22})
			lg2.draw_frame(False)

			################################################################SAVE###########################################################

			if dest_dir != None:
				PLOTFILENAME1 = str(dest_dir) + plt_sufix_fnm+'-'+str(int(LINES[0][lines]))+'-'+str(LINES[4][lines])+ '-' + stk_function +'-' + fit_type + '-'+fit_typ + '.pdf'
				PLOTFILENAME2 = str(dest_dir) + plt_sufix_fnm+'-'+str(int(LINES[0][lines]))+'-'+str(LINES[4][lines])+ '-' + stk_function +'-' + fit_type + '-'+fit_typ + '.eps'

			elif dest_dir == None:
				PLOTFILENAME1 = fit_plt_res + plt_sufix_fnm+'-'+str(int(LINES[0][lines]))+'-'+str(LINES[4][lines])+ '-' + stk_function +'-' + fit_type + '-' + fit_typ + '.pdf'
				PLOTFILENAME2 = fit_plt_res + plt_sufix_fnm+'-'+str(int(LINES[0][lines]))+'-'+str(LINES[4][lines])+ '-' + stk_function +'-' + fit_type + '-' + fit_typ + '.eps'

			plt.savefig(PLOTFILENAME1)
			if verbose == True:
				print
				print colored('Generated Plot: ' + str(PLOTFILENAME1),'cyan')
			elif verbose ==False:
				pass
			if epssave == True:
				plt.savefig(PLOTFILENAME2, rasterized=True)
				#os.system('open Spectra.eps')
			elif epssave == False:
				pass
			if showplot == True:
				#os.system('open '+str(PLOTFILENAME))
				pass
			elif showplot == False:
				pass	
			plt.close('all')
			########################################################PLOT PER LINE########################################################
		elif (lmb_min < LINES[0][lines]*(1+z_glx_Ps)) or (LINES[0][lines]*(1+z_glx_Ps) > lmb_max) :
			print
			print colored('Line not covered by spectrum!','magenta')
			print colored(str(lmb_min)+ '-'+ str(lmb_max),'magenta')
			print colored('Line: '+str(LINES[3][lines]*(1+z_glx_Ps)),'magenta')
			print colored('Line: '+str(LINES[0][lines]+LINES[8][lines]*(1+z_glx_Ps)),'magenta')
			print colored('Spectrum limits: '+str(lambda_glx[0])+'-'+str(lambda_glx[-1]),'magenta')
			print			
			break

def Plot_Idp_Spc_Lne_Mlt(int_typ_spl_1,int_typ_spl_2,n_int_spt_1,n_int_spt_2,*args, **kwargs):
	z_glx_Ps      = kwargs.get('z_glx_Ps'    ,0)
	dest_dir      = kwargs.get('dest_dir'    , None)
	verbose       = kwargs.get('verbose'     , False)
	epssave       = kwargs.get('epssave'     , False)
	showplot      = kwargs.get('showplot'    , False) 

	autoaxis_Idp  = kwargs.get('autoaxis_Idp', False)
	#min_y_lim_Idp = kwargs.get('min_y_lim'   , 0.5)
	#max_y_lim_Idp = kwargs.get('max_y_lim'   , 1.5)

	lmb_min       = kwargs.get('lmb_min',1200)
	lmb_max       = kwargs.get('lmb_max',1700)

	lmb_min_lim   = lmb_min
	lmb_max_lim   = lmb_max

	#upper_shift   = kwargs.get('upper_shift',0)
	#lower_shift   = kwargs.get('lower_shift',0)
	stk_function  = kwargs.get('stk_function','med')

	fit_fnct      = kwargs.get('fit_fnct','gauss')
	fit_type      = kwargs.get('fit_type','lmfit')
	pre_off_plt   = kwargs.get('pre_off_plt',False)
	dest_dir      = kwargs.get('dest_dir',None)

	n_int_spt     = kwargs.get('n_int_spt',0)

	int_typ_spl   = kwargs.get('int_typ_spl','arcsec')

	upper_shift_1   = kwargs.get('upper_shift_1',0)
	lower_shift_1   = kwargs.get('lower_shift_1',0)
	upper_shift_2   = kwargs.get('upper_shift_2',0)
	lower_shift_2   = kwargs.get('lower_shift_2',0)

	#stk_function_m  = kwargs.get('stk_function_m',False)
	#stk_function_a  = kwargs.get('stk_function_a',False)
	#stk_function_b  = kwargs.get('stk_function_b',False)
	mlt_stk_fct     = kwargs.get('mlt_stk_fct','both')

	max_sep         = kwargs.get('max_sep'       ,23)
	#mlt_stk_med     = kwargs.get('mlt_stk_med'   , True)
	#mlt_stk_avg     = kwargs.get('mlt_stk_avg'   , True)
	mlt_stk_fct     = kwargs.get('mlt_stk_fct'   , 'both')

	fpt_background  = kwargs.get('fpt_background' , True)
	fpt_foreground  = kwargs.get('fpt_foreground', False)

	empty_plots     = kwargs.get('empty_plots',1)
	landscape_plt   = kwargs.get('landscape_plt',True)

	int_vlf_hdr    = kwargs.get('int_vlf_hdr',True)
	fit_vls_hdr    = kwargs.get('fit_vls_hdr',True)
	uft_lne_vls    = kwargs.get('uft_lne_vls',False)
	cnt_bnp_adj    = kwargs.get('cnt_bnp_adj',False)

	##############
	print
	print colored('Plotting EW absoprtions dependent on: '+int_typ_spl_1,'yellow')
	print colored('Plotting EW absoprtions dependent on: '+int_typ_spl_2,'yellow')
	print
	if int_typ_spl_1 == 'kpc'  and n_int_spt_1 == 0:#in specfile_glx_f:
		splt_smpl_sfx_f1= 'kpc_F'
		splt_smpl_sfx_1 = '_kpc' 
		splt_smpl_unt_1 = 'kpc'
		plt_nme_prp_1   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv)				
		slc_int_fg_1    = slc_kpc_int_fg[1]
		slc_int_bg_1    = slc_kpc_int_bg[1]		
		xlabel_1        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_1   = 'SKP'
		xticks_values   = [5,50, 100, 150]
		yticks_values   = np.arange(0,30,.1)#[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'kpc'  and n_int_spt_1 == 1:#in specfile_glx_f:
		splt_smpl_sfx_f1= 'kpc_F'
		splt_smpl_sfx_1 = '_kpc' 
		splt_smpl_unt_1 = 'kpc'
		plt_nme_prp_1   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_1)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_1)				
		slc_int_fg_1    = slc_kpc_int_fg[1]
		slc_int_bg_1    = slc_kpc_int_bg[1]
		xlabel_1        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_1   = 'SKP'
		xticks_values   = [5,50, 100, 150]
		yticks_values   = np.arange(0,30,.1)#[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'kpc'  and n_int_spt_1 == 2:#in specfile_glx_f:
		splt_smpl_sfx_f1= 'kpc_F'
		splt_smpl_sfx_1 = '_kpc' 
		splt_smpl_unt_1 = 'kpc'
		plt_nme_prp_1   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_2)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_2)				
		slc_int_fg_1    = slc_kpc_int_fg[1]
		slc_int_bg_1    = slc_kpc_int_bg[1]
		xlabel_1        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_1   = 'SKP'
		xticks_values   = [5,50, 100, 150]
		yticks_values   = np.arange(0,30,.1)#[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'kpc'  and n_int_spt_1 == 3:#in specfile_glx_f:
		splt_smpl_sfx_f1= 'kpc_F'
		splt_smpl_sfx_1 = '_kpc' 
		splt_smpl_unt_1 = 'kpc'
		plt_nme_prp_1   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_3)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_3)				
		slc_int_fg_1    = slc_kpc_int_fg[1]
		slc_int_bg_1    = slc_kpc_int_bg[1]
		xlabel_1        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_1   = 'SKP'
		xticks_values   = [5,50, 100, 150]
		yticks_values   = np.arange(0,30,.1)#[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'kpc'  and n_int_spt_1 == 4:#in specfile_glx_f:
		splt_smpl_sfx_f1= 'kpc_F'
		splt_smpl_sfx_1 = '_kpc' 
		splt_smpl_unt_1 = 'kpc'
		plt_nme_prp_1   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_4)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_4)				
		slc_int_fg_1    = slc_kpc_int_fg[1]
		slc_int_bg_1    = slc_kpc_int_bg[1]
		xlabel_1        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_1   = 'SKP'
		xticks_values   = [5,50, 100, 150]
		yticks_values   = np.arange(0,30,.1)#[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'mass' and n_int_spt_1 == 0 and max_sep == 23:# in specfile_glx_f:
		splt_smpl_sfx_f1= 'mass_F'
		splt_smpl_sfx_1 = '-mass'
		splt_smpl_unt_1 = 'mass'
		plt_nme_prp_1   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23)				
		slc_int_fg_1    = slc_mss_int_fg[1]
		slc_int_bg_1    = slc_mss_int_bg[1]
		xlabel_1        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_1   = 'MSF'
		xticks_values   = np.arange(1,20,.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values   = np.arange(0,30,.1)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'mass' and n_int_spt_1 == 1 and max_sep == 23:# in specfile_glx_f:
		splt_smpl_sfx_f1= 'mass_F'
		splt_smpl_sfx_1 = '-mass'
		splt_smpl_unt_1 = 'mass'
		plt_nme_prp_1   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_1)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_1)				
		slc_int_fg_1    = slc_mss_int_fg[1]
		slc_int_bg_1    = slc_mss_int_bg[1]
		xlabel_1        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_1   = 'MSF'
		xticks_values   = np.arange(1,20,.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values   = np.arange(0,30,.1)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'mass' and n_int_spt_1 == 2 and max_sep == 23:# in specfile_glx_f:
		splt_smpl_sfx_f1= 'mass_F'
		splt_smpl_sfx_1 = '-mass'
		splt_smpl_unt_1 = 'mass'
		plt_nme_prp_1   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_2)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_2)				
		slc_int_fg_1    = slc_mss_int_fg[1]
		slc_int_bg_1    = slc_mss_int_bg[1]
		xlabel_1        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_1   = 'MSF'
		xticks_values   = np.arange(1,20,.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values   = np.arange(0,30,.01)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'mass' and n_int_spt_1 == 3 and max_sep == 23:# in specfile_glx_f:
		splt_smpl_sfx_f1= 'mass_F'
		splt_smpl_sfx_1 = '-mass'
		splt_smpl_unt_1 = 'mass'
		plt_nme_prp_1   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_3)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_3)				
		slc_int_fg_1    = slc_mss_int_fg[1]
		slc_int_bg_1    = slc_mss_int_bg[1]
		xlabel_1        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_1   = 'MSF'
		xticks_values   = np.arange(1,20,.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values   = np.arange(0,30,.1)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'mass' and n_int_spt_1 == 4 and max_sep == 23:# in specfile_glx_f:
		splt_smpl_sfx_f1= 'mass_F'
		splt_smpl_sfx_1 = '-mass'
		splt_smpl_unt_1 = 'mass'
		plt_nme_prp_1   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_4)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_4)				
		slc_int_fg_1    = slc_mss_int_fg[1]
		slc_int_bg_1    = slc_mss_int_bg[1]
		xlabel_1        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_1   = 'MSF'
		xticks_values   = np.arange(1,20,.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values   = np.arange(0,30,.1)         #[0.1,0.5,1,3]				
	elif int_typ_spl_1 == 'Age'  and n_int_spt_1 == 0:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Age_F'
		splt_smpl_sfx_1  = '-Age' 
		splt_smpl_unt_1  = 'Age'
		plt_nme_prp_1    = 'Age'
		slc_age_int_fg_0 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv)
		slc_age_int_bg_0 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv)
		slc_int_fg_1     = slc_age_int_fg_0[1]
		slc_int_bg_1     = slc_age_int_bg_0[1]
		xlabel_1         = 'Age'
		var_prp_hdr_1    = 'AGF'
		xticks_values    = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Age'  and n_int_spt_1 == 1 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Age_F'
		splt_smpl_sfx_1  = '-Age' 
		splt_smpl_unt_1  = 'Age'
		plt_nme_prp_1    = 'Age'
		slc_age_int_fg_1 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_1)
		slc_age_int_bg_1 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_1)
		slc_int_fg_1     = slc_age_int_fg_1[1]
		slc_int_bg_1     = slc_age_int_bg_1[1]
		xlabel_1         = 'Age'
		var_prp_hdr_1    = 'AGF'
		xticks_values    = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Age'  and n_int_spt_1 == 2 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Age_F'
		splt_smpl_sfx_1  = '-Age' 
		splt_smpl_unt_1  = 'Age'
		plt_nme_prp_1    = 'Age'
		slc_age_int_fg_2 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_2)
		slc_age_int_bg_2 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_2)
		slc_int_fg_1     = slc_age_int_fg_2[1]
		slc_int_bg_1     = slc_age_int_bg_2[1]
		xlabel_1         = 'Age'
		var_prp_hdr_1    = 'AGF'
		xticks_values    = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Age'  and n_int_spt_1 == 3 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Age_F'
		splt_smpl_sfx_1  = '-Age' 
		splt_smpl_unt_1  = 'Age'
		plt_nme_prp_1    = 'Age'
		slc_age_int_fg_3 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_3)
		slc_age_int_bg_3 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_3)
		slc_int_fg_1     = slc_age_int_fg_3[1]
		slc_int_bg_1     = slc_age_int_bg_3[1]
		xlabel_1         = 'Age'
		var_prp_hdr_1    = 'AGF'
		xticks_values    = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Age'  and n_int_spt_1 == 4 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Age_F'
		splt_smpl_sfx_1  = '-Age' 
		splt_smpl_unt_1  = 'Age'
		plt_nme_prp_1    = 'Age'
		slc_age_int_fg_4 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_4)
		slc_age_int_bg_4 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_4)
		slc_int_fg_1     = slc_age_int_fg_4[1]
		slc_int_bg_1     = slc_age_int_bg_4[1]
		xlabel_1         = 'Age'
		var_prp_hdr_1    = 'AGF'
		xticks_values    = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'SFR'  and n_int_spt_1 == 0:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'SFR_F'
		splt_smpl_sfx_1  = '-SFR' 
		splt_smpl_unt_1  = 'M$_{\odot}$yr$^{-1}$' 
		plt_nme_prp_1    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv)
		slc_int_fg_1     = slc_sfr_int_fg[1]
		slc_int_bg_1     = slc_sfr_int_bg[1]
		xlabel_1         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_1    = 'SFF'
		xticks_values    = np.arange(0,3,0.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'SFR'  and n_int_spt_1 == 1 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'SFR_F'
		splt_smpl_sfx_1  = '-SFR' 
		splt_smpl_unt_1  = 'M$_{\odot}$yr$^{-1}$' 
		plt_nme_prp_1    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_1)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_1)
		slc_int_fg_1     = slc_sfr_int_fg[1]
		slc_int_bg_1     = slc_sfr_int_bg[1]
		xlabel_1         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_1    = 'SFF'
		xticks_values    = np.arange(0,3,0.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'SFR'  and n_int_spt_1 == 2 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'SFR_F'
		splt_smpl_sfx_1  = '-SFR' 
		splt_smpl_unt_1  = 'M$_{\odot}$yr$^{-1}$' 
		plt_nme_prp_1    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_2)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_2)
		slc_int_fg_1     = slc_sfr_int_fg[1]
		slc_int_bg_1     = slc_sfr_int_bg[1]
		xlabel_1         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_1    = 'SFF'
		xticks_values    = np.arange(0,3,0.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'SFR'  and n_int_spt_1 == 3 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'SFR_F'
		splt_smpl_sfx_1  = '-SFR' 
		splt_smpl_unt_1  = 'M$_{\odot}$yr$^{-1}$' 
		plt_nme_prp_1    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_3)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_3)
		slc_int_fg_1     = slc_sfr_int_fg[1]
		slc_int_bg_1     = slc_sfr_int_bg[1]
		xlabel_1         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_1    = 'SFF'
		xticks_values    = np.arange(0,3,0.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'SFR'  and n_int_spt_1 == 4 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'SFR_F'
		splt_smpl_sfx_1  = '-SFR' 
		splt_smpl_unt_1  = 'M$_{\odot}$yr$^{-1}$' 
		plt_nme_prp_1    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_4)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_4)
		slc_int_fg_1     = slc_sfr_int_fg[1]
		slc_int_bg_1     = slc_sfr_int_bg[1]
		xlabel_1         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_1    = 'SFF'
		xticks_values    = np.arange(0,3,0.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sSFR' and n_int_spt_1 == 0:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'sSFR_F'
		splt_smpl_sfx_1  = '-sSFR'
		splt_smpl_unt_1  = 'sSFR'
		plt_nme_prp_1    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv)
		slc_int_fg_1     = slc_ssf_int_fg[1]
		slc_int_bg_1     = slc_ssf_int_bg[1]
		xlabel_1         = 'sSFR [Gyr]'
		var_prp_hdr_1    = 'sSF'
		xticks_values    = np.arange(-20,-1,0.1)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sSFR' and n_int_spt_1 == 1 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'sSFR_F'
		splt_smpl_sfx_1  = '-sSFR'
		splt_smpl_unt_1  = 'sSFR'
		plt_nme_prp_1    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_1)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_1)
		slc_int_fg_1     = slc_ssf_int_fg[1]
		slc_int_bg_1     = slc_ssf_int_bg[1]
		xlabel_1         = 'sSFR [Gyr]'
		var_prp_hdr_1    = 'sSF'
		xticks_values    = np.arange(-20,-1,0.1)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sSFR' and n_int_spt_1 == 2 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'sSFR_F'
		splt_smpl_sfx_1  = '-sSFR'
		splt_smpl_unt_1  = 'sSFR'
		plt_nme_prp_1    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_2)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_2)
		slc_int_fg_1     = slc_ssf_int_fg[1]
		slc_int_bg_1     = slc_ssf_int_bg[1]
		xlabel_1         = 'sSFR [Gyr]'
		var_prp_hdr_1    = 'sSF'
		xticks_values    = np.arange(-20,-1,0.1)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sSFR' and n_int_spt_1 == 3 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'sSFR_F'
		splt_smpl_sfx_1  = '-sSFR'
		splt_smpl_unt_1  = 'sSFR'
		plt_nme_prp_1    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_3)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_3)
		slc_int_fg_1     = slc_ssf_int_fg[1]
		slc_int_bg_1     = slc_ssf_int_bg[1]
		xlabel_1         = 'sSFR [Gyr]'
		var_prp_hdr_1    = 'sSF'
		xticks_values    = np.arange(-20,-1,0.1)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sSFR' and n_int_spt_1 == 4 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'sSFR_F'
		splt_smpl_sfx_1  = '-sSFR'
		splt_smpl_unt_1  = 'sSFR'
		plt_nme_prp_1    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_4)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_4)
		slc_int_fg_1     = slc_ssf_int_fg[1]
		slc_int_bg_1     = slc_ssf_int_bg[1]
		xlabel_1         = 'sSFR [Gyr]'
		var_prp_hdr_1    = 'sSF'
		xticks_values    = np.arange(-20,-1,0.25)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.25)   #[0.1,0.5,1,3]						
	elif int_typ_spl_1 == 'Lnuv' and n_int_spt_1 == 0:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Lnuv_F'
		splt_smpl_sfx_1  = '-Lnuv'
		splt_smpl_unt_1  = 'ergs cm$^{-2}$ s$^{-1}$'
		plt_nme_prp_1    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv)
		slc_int_fg_1     = slc_luv_int_fg[1]
		slc_int_bg_1     = slc_luv_int_bg[1]
		xlabel_1         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_1    = 'UVF'
		xticks_values    = np.arange(8,14,.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Lnuv' and n_int_spt_1 == 1 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Lnuv_F'
		splt_smpl_sfx_1  = '-Lnuv'
		splt_smpl_unt_1  = 'ergs cm$^{-2}$ s$^{-1}$'
		plt_nme_prp_1    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_1)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_1)
		slc_int_fg_1     = slc_luv_int_fg[1]
		slc_int_bg_1     = slc_luv_int_bg[1]
		xlabel_1         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_1    = 'UVF'
		xticks_values    = np.arange(8,14,.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Lnuv' and n_int_spt_1 == 2 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Lnuv_F'
		splt_smpl_sfx_1  = '-Lnuv'
		splt_smpl_unt_1  = 'ergs cm$^{-2}$ s$^{-1}$'
		plt_nme_prp_1    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_2)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_2)
		slc_int_fg_1     = slc_luv_int_fg[1]
		slc_int_bg_1     = slc_luv_int_bg[1]
		xlabel_1         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_1    = 'UVF'
		xticks_values    = np.arange(8,14,.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Lnuv' and n_int_spt_1 == 3 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Lnuv_F'
		splt_smpl_sfx_1  = '-Lnuv'
		splt_smpl_unt_1  = 'ergs cm$^{-2}$ s$^{-1}$'
		plt_nme_prp_1    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_3)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_3)
		slc_int_fg_1     = slc_luv_int_fg[1]
		slc_int_bg_1     = slc_luv_int_bg[1]
		xlabel_1         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_1    = 'UVF'
		xticks_values    = np.arange(8,14,.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Lnuv' and n_int_spt_1 == 4 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Lnuv_F'
		splt_smpl_sfx_1  = '-Lnuv'
		splt_smpl_unt_1  = 'ergs cm$^{-2}$ s$^{-1}$'
		plt_nme_prp_1    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_4)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_4)
		slc_int_fg_1     = slc_luv_int_fg[1]
		slc_int_bg_1     = slc_luv_int_bg[1]
		xlabel_1         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_1    = 'UVF'
		xticks_values    = np.arange(8,14,.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 0:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150]
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 1 and max_sep==23:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_1[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_1[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150]
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 2 and max_sep==23:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_2[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_2[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150]
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 3 and max_sep==23:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_3[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_3[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150]
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 4 and max_sep==23:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_4[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_4[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150]
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 5 and max_sep==23:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_5[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_5[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150, 200]
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 6 and max_sep==23:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_6[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_6[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150, 200]
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]			
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 1 and max_sep==25:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_1[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_1[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150]
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 2 and max_sep==25:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_2[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_2[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150]
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 3 and max_sep==25:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_3[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_3[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150]
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 4 and max_sep==25:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_4[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_4[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150]
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 5 and max_sep==25:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_5[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_5[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150, 200]
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 6 and max_sep==25:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_6[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_6[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150, 200]
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]

	elif int_typ_spl_1 == 'magi' and n_int_spt_1 == 0:# in specfile_glx:
		splt_smpl_sfx_f1 = 'magi_F'
		splt_smpl_sfx_1  = '_magi'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv)
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'mag$_{i}$'
		var_prp_hdr_1    = 'magi'#'SAS'
		xticks_values    = np.arange(-100,100,0.25)
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]				
	elif int_typ_spl_1 == 'magi' and n_int_spt_1 == 1:# in specfile_glx:
		splt_smpl_sfx_f1 = 'magi_F'
		splt_smpl_sfx_1  = '_magi'
		splt_smpl_unt_1  = 'mag'
		plt_nme_prp_1    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv)
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'mag$_{i}$'
		var_prp_hdr_1    = 'magi'#'SAS'
		xticks_values    = np.arange(-100,100,0.25)
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]				
	elif int_typ_spl_1 == 'magi' and n_int_spt_1 == 2 and max_sep==23:# in specfile_glx:
		splt_smpl_sfx_f1 = 'magi_F'
		splt_smpl_sfx_1  = '_magi'
		splt_smpl_unt_1  = 'mag'
		plt_nme_prp_1    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_2)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_2)
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'mag$_{i}$'
		var_prp_hdr_1    = 'magi'#'SAS'
		xticks_values    = np.arange(-100,100,0.25)
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]				
	elif int_typ_spl_1 == 'magi' and n_int_spt_1 == 3 and max_sep==23:# in specfile_glx:
		splt_smpl_sfx_f1 = 'magi_F'
		splt_smpl_sfx_1  = '_magi'
		splt_smpl_unt_1  = 'mag'
		plt_nme_prp_1    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_3)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_3)
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'mag$_{i}$'
		var_prp_hdr_1    = 'magi'#'SAS'
		xticks_values    = np.arange(-100,100,0.25)
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]				
	elif int_typ_spl_1 == 'magi' and n_int_spt_1 == 4 and max_sep==23:# in specfile_glx:
		splt_smpl_sfx_f1 = 'magi_F'
		splt_smpl_sfx_1  = '_magi'
		splt_smpl_unt_1  = 'mag'
		plt_nme_prp_1    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_4)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_4)
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'mag$_{i}$'
		var_prp_hdr_1    = 'magi'#'SAS'
		xticks_values    = np.arange(-100,100,0.25)
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]				
	elif int_typ_spl_1 == 'phi' and n_int_spt_1 == 0:# in specfile_glx:
		splt_smpl_sfx_f1 = 'PHI'
		splt_smpl_sfx_1  = '-phi'
		splt_smpl_unt_1  = 'deg'
		plt_nme_prp_1    = 'PHI'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv)
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr_1    = 'PHI'#'SAS'
		xticks_values    = np.arange(-10,100,10) #xticks_values  = [0,100]
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'phi'  and n_int_spt_1 == 2:# in specfile_glx:
		splt_smpl_sfx_f1 = 'PHI'
		splt_smpl_sfx_1  = '-phi'
		splt_smpl_unt_1  = 'deg'
		plt_nme_prp_1    = 'PHI'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv_23_2)			
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr_1    = 'PHI'#'SAS'
		xticks_values    = np.arange(-10,100,10) #xticks_values  = [0,100]
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'phi'  and n_int_spt_1 == 3:# in specfile_glx:
		splt_smpl_sfx_f1 = 'PHI'
		splt_smpl_sfx_1  = '-phi'
		splt_smpl_unt_1  = 'deg'
		plt_nme_prp_1    = 'PHI'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv_23_3)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv_23_3)			
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr_1    = 'PHI'#'SAS'
		xticks_values    = np.arange(-10,100,10) #xticks_values  = [0,100]
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]	
	elif int_typ_spl_1 == 'icl_fg' and n_int_spt_1 == 0:# in specfile_glx:
		splt_smpl_sfx_f1 = 'q_F'
		splt_smpl_sfx_1  = '-icl'
		splt_smpl_unt_1  = 'deg'
		plt_nme_prp_1    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv)
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$q$'
		var_prp_hdr_1    = 'q'#'SAS'
		xticks_values    = np.arange(-1,1,0.1)
		yticks_values    = np.arange(0,30,.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'icl_fg' and n_int_spt_1 == 2:# in specfile_glx:
		splt_smpl_sfx_f1 = 'q_F'
		splt_smpl_sfx_1  = '-icl'
		splt_smpl_unt_1  = 'deg'
		plt_nme_prp_1    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_23_itv_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_23_itv_2)
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$q$'
		var_prp_hdr_1    = 'q'#'SAS'
		xticks_values    = np.arange(-1,1,0.1)
		yticks_values    = np.arange(0,30,.5)  #[0.1,0.5,1,3]	
	elif int_typ_spl_1 == 'icl_fg' and n_int_spt_1 == 3:# in specfile_glx:
		splt_smpl_sfx_f1 = 'q_F'
		splt_smpl_sfx_1  = '-icl'
		splt_smpl_unt_1  = 'deg'
		plt_nme_prp_1    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_23_itv_3)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_23_itv_3)
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$q$'
		var_prp_hdr_1    = 'q'#'SAS'
		xticks_values    = np.arange(-1,1,0.1)
		yticks_values    = np.arange(0,30,.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'icl_fg' and n_int_spt_1 == 4:# in specfile_glx:
		splt_smpl_sfx_f1 = 'q_F'
		splt_smpl_sfx_1  = '-icl'
		splt_smpl_unt_1  = 'deg'
		plt_nme_prp_1    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_23_itv_4)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_23_itv_4)			
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$q$'
		var_prp_hdr_1    = 'q'#'SAS'
		xticks_values    = np.arange(-1,1,0.1)
		yticks_values    = np.arange(0,30,.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'n_sersic_fg' and n_int_spt_1 == 0:# in specfile_glx:
		splt_smpl_sfx_f1 = 'n_F'
		splt_smpl_sfx_1  = '-n_srs'
		splt_smpl_unt_1  = 'n'
		plt_nme_prp_1    = 'n_srs'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,n_srs_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,n_srs_itv)
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = 'n'
		var_prp_hdr_1    = 'nsr'#'SAS'
		xticks_values    = np.arange(-1,3,0.25)
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'n_sersic_fg'  and n_int_spt_1 == 2:# in specfile_glx:
		splt_smpl_sfx_f1 = 'n_F'
		splt_smpl_sfx_1  = '-n_srs'
		splt_smpl_unt_1  = 'n'
		plt_nme_prp_1    = 'n_srs'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,n_srs_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,n_srs_itv_23_2)			
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = 'n'
		var_prp_hdr_1    = 'nsr'#'SAS'
		xticks_values    = np.arange(-1,3,0.25)
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'r_eff_fg' and n_int_spt_1 == 0:# in specfile_glx:
		splt_smpl_sfx_f1 = 're_F'
		splt_smpl_sfx_1  = '-r_eff'
		splt_smpl_unt_1  = 'arcsec'
		plt_nme_prp_1    = 'r_eff'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv)
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]  
		xlabel_1         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr_1    = 'ref'#'SAS'
		xticks_values    = np.arange(-1,50,0.5)
		yticks_values    = np.arange(0,30,.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'r_eff_fg'  and n_int_spt_1 == 2:# in specfile_glx:
		splt_smpl_sfx_f1 = 're_F'
		splt_smpl_sfx_1  = '-r_eff'
		splt_smpl_unt_1  = 'arcsec'
		plt_nme_prp_1    = 'r_eff'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv_23_2)			
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr_1    = 'ref'#'SAS'
		xticks_values    = np.arange(-1,50,0.5)
		yticks_values    = np.arange(0,30,.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'r_eff_fg'  and n_int_spt_1 == 3:# in specfile_glx:
		splt_smpl_sfx_f1 = 're_F'
		splt_smpl_sfx_1  = '-r_eff'
		splt_smpl_unt_1  = 'arcsec'
		plt_nme_prp_1    = 'r_eff'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv_23_3)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv_23_3)			
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr_1    = 'ref'#'SAS'
		xticks_values    = np.arange(-1,50,0.5)
		yticks_values    = np.arange(0,30,.5)  #[0.1,0.5,1,3]						
	else:
		print
		print (colored('Such combination (1st-split) does not exist!','yellow'))
		print (colored('Variable: '+str(int_typ_spl_1)+', # bins: '+str(n_int_spt_1),'yellow'))
		print
		quit()

	####

	if int_typ_spl_2 == 'kpc'  and n_int_spt_2 == 0:#in specfile_glx_f:
		splt_smpl_sfx_f2= 'kpc_F'
		splt_smpl_sfx_2 = '_kpc' 
		splt_smpl_unt_2 = 'kpc'
		plt_nme_prp_2   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv)				
		slc_int_fg_2    = slc_kpc_int_fg[1]
		slc_int_bg_2    = slc_kpc_int_bg[1]		
		xlabel_2        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_2   = 'SKP'
	elif int_typ_spl_2 == 'kpc'  and n_int_spt_2 == 1:#in specfile_glx_f:
		splt_smpl_sfx_f2= 'kpc_F'
		splt_smpl_sfx_2 = '_kpc' 
		splt_smpl_unt_2 = 'kpc'
		plt_nme_prp_2   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_1)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_1)				
		slc_int_fg_2    = slc_kpc_int_fg[1]
		slc_int_bg_2    = slc_kpc_int_bg[1]
		xlabel_2        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_2   = 'SKP'
	elif int_typ_spl_2 == 'kpc'  and n_int_spt_2 == 2:#in specfile_glx_f:
		splt_smpl_sfx_f2= 'kpc_F'
		splt_smpl_sfx_2 = '_kpc' 
		splt_smpl_unt_2 = 'kpc'
		plt_nme_prp_2   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_2)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_2)				
		slc_int_fg_2    = slc_kpc_int_fg[1]
		slc_int_bg_2    = slc_kpc_int_bg[1]
		xlabel_2        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_2   = 'SKP'
	elif int_typ_spl_2 == 'kpc'  and n_int_spt_2 == 3:#in specfile_glx_f:
		splt_smpl_sfx_f2= 'kpc_F'
		splt_smpl_sfx_2 = '_kpc' 
		splt_smpl_unt_2 = 'kpc'
		plt_nme_prp_2   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_3)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_3)				
		slc_int_fg_2    = slc_kpc_int_fg[1]
		slc_int_bg_2    = slc_kpc_int_bg[1]
		xlabel_2        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_2   = 'SKP'
	elif int_typ_spl_2 == 'kpc'  and n_int_spt_2 == 4:#in specfile_glx_f:
		splt_smpl_sfx_f2= 'kpc_F'
		splt_smpl_sfx_2 = '_kpc' 
		splt_smpl_unt_2 = 'kpc'
		plt_nme_prp_2   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_4)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_4)				
		slc_int_fg_2    = slc_kpc_int_fg[1]
		slc_int_bg_2    = slc_kpc_int_bg[1]
		xlabel_2        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_2   = 'SKP'
	elif int_typ_spl_2 == 'mass' and n_int_spt_2 == 0:# in specfile_glx_f:
		splt_smpl_sfx_f2= 'mass_F'
		splt_smpl_sfx_2 = '-mass'
		splt_smpl_unt_2 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_2   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23)				
		slc_int_fg_2    = slc_mss_int_fg[1]
		slc_int_bg_2    = slc_mss_int_bg[1]
		xlabel_2        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_2   = 'MSF'
	elif int_typ_spl_2 == 'mass' and n_int_spt_2 == 1:# in specfile_glx_f:
		splt_smpl_sfx_f2= 'mass_F'
		splt_smpl_sfx_2 = '-mass'
		splt_smpl_unt_2 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_2   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_1)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_1)				
		slc_int_fg_2    = slc_mss_int_fg[1]
		slc_int_bg_2    = slc_mss_int_bg[1]
		xlabel_2        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_2   = 'MSF'
	elif int_typ_spl_2 == 'mass' and n_int_spt_2 == 2:# in specfile_glx_f:
		splt_smpl_sfx_f2= 'mass_F'
		splt_smpl_sfx_2 = '-mass'
		splt_smpl_unt_2 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_2   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_2)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_2)				
		slc_int_fg_2    = slc_mss_int_fg[1]
		slc_int_bg_2    = slc_mss_int_bg[1]
		xlabel_2        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_2   = 'MSF'
	elif int_typ_spl_2 == 'mass' and n_int_spt_2 == 3:# in specfile_glx_f:
		splt_smpl_sfx_f2= 'mass_F'
		splt_smpl_sfx_2 = '-mass'
		splt_smpl_unt_2 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_2   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_3)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_3)				
		slc_int_fg_2    = slc_mss_int_fg[1]
		slc_int_bg_2    = slc_mss_int_bg[1]
		xlabel_2        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_2   = 'MSF'
	elif int_typ_spl_2 == 'mass' and n_int_spt_2 == 4:# in specfile_glx_f:
		splt_smpl_sfx_f2= 'mass_F'
		splt_smpl_sfx_2 = '-mass'
		splt_smpl_unt_2 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_2   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_4)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_4)				
		slc_int_fg_2    = slc_mss_int_fg[1]
		slc_int_bg_2    = slc_mss_int_bg[1]
		xlabel_2        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_2   = 'MSF'
	elif int_typ_spl_2 == 'Age'  and n_int_spt_2 == 0:#in specfile_glx_f:
		splt_smpl_sfx_f2 = '-Age_F'
		splt_smpl_sfx_2  = '-Age' 
		splt_smpl_unt_2  = 'Age'
		plt_nme_prp_2    = 'Age'
		slc_age_int_fg_0 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv)
		slc_age_int_bg_0 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv)
		slc_int_fg_2     = slc_age_int_fg_0[1]
		slc_int_bg_2     = slc_age_int_bg_0[1]
		xlabel_2         = 'Age'
		var_prp_hdr_2    = 'AGF'
	elif int_typ_spl_2 == 'Age'  and n_int_spt_2 == 1:#in specfile_glx_f:
		splt_smpl_sfx_f2 = '-Age_F'
		splt_smpl_sfx_2  = '-Age' 
		splt_smpl_unt_2  = 'Age'
		plt_nme_prp_2    = 'Age'
		slc_age_int_fg_1 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_1)
		slc_age_int_bg_1 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_1)
		slc_int_fg_2     = slc_age_int_fg_1[1]
		slc_int_bg_2     = slc_age_int_bg_1[1]
		xlabel_2         = 'Age'
		var_prp_hdr_2    = 'AGF'
	elif int_typ_spl_2 == 'Age'  and n_int_spt_2 == 2:#in specfile_glx_f:
		splt_smpl_sfx_f2 = '-Age_F'
		splt_smpl_sfx_2  = '-Age' 
		splt_smpl_unt_2  = 'Age'
		plt_nme_prp_2    = 'Age'
		slc_age_int_fg_2 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_2)
		slc_age_int_bg_2 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_2)
		slc_int_fg_2     = slc_age_int_fg_2[1]
		slc_int_bg_2     = slc_age_int_bg_2[1]
		xlabel_2         = 'Age'
		var_prp_hdr_2    = 'AGF'
	elif int_typ_spl_2 == 'Age'  and n_int_spt_2 == 3:#in specfile_glx_f:
		splt_smpl_sfx_f2 = '-Age_F'
		splt_smpl_sfx_2  = '-Age' 
		splt_smpl_unt_2  = 'Age'
		plt_nme_prp_2    = 'Age'
		slc_age_int_fg_3 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_3)
		slc_age_int_bg_3 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_3)
		slc_int_fg_2     = slc_age_int_fg_3[1]
		slc_int_bg_2     = slc_age_int_bg_3[1]
		xlabel_2         = 'Age'
		var_prp_hdr_2    = 'AGF'
	elif int_typ_spl_2 == 'Age'  and n_int_spt_2 == 4:#in specfile_glx_f:
		splt_smpl_sfx_f2 = '-Age_F'
		splt_smpl_sfx_2  = '-Age' 
		splt_smpl_unt_2  = 'Age'
		plt_nme_prp_2    = 'Age'
		slc_age_int_fg_4 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_4)
		slc_age_int_bg_4 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_4)
		slc_int_fg_2     = slc_age_int_fg_4[1]
		slc_int_bg_2     = slc_age_int_bg_4[1]
		xlabel_2         = 'Age'
		var_prp_hdr_2    = 'AGF'
	elif int_typ_spl_2 == 'SFR'  and n_int_spt_2 == 0:#in specfile_glx_f:
		splt_smpl_sfx_f2 = 'SFR_F'
		splt_smpl_sfx_2  = '-SFR' 
		splt_smpl_unt_2  = 'M$_{\odot}$yr$^{-1}$' 
		plt_nme_prp_2    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv)
		slc_int_fg_2     = slc_sfr_int_fg[1]
		slc_int_bg_2     = slc_sfr_int_bg[1]
		xlabel_2         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_2    = 'SFF'
	elif int_typ_spl_2 == 'SFR'  and n_int_spt_2 == 1:#in specfile_glx_f:
		splt_smpl_sfx_f2 = 'SFR_F'
		splt_smpl_sfx_2  = '-SFR' 
		splt_smpl_unt_2  = 'M$_{\odot}$yr$^{-1}$' 
		plt_nme_prp_2    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_1)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_1)
		slc_int_fg_2     = slc_sfr_int_fg[1]
		slc_int_bg_2     = slc_sfr_int_bg[1]
		xlabel_2         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_2    = 'SFF'
	elif int_typ_spl_2 == 'SFR'  and n_int_spt_2 == 2:#in specfile_glx_f:
		splt_smpl_sfx_f2 = 'SFR_F'
		splt_smpl_sfx_2  = '-SFR' 
		splt_smpl_unt_2  = 'M$_{\odot}$yr$^{-1}$' 
		plt_nme_prp_2    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_2)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_2)
		slc_int_fg_2     = slc_sfr_int_fg[1]
		slc_int_bg_2     = slc_sfr_int_bg[1]
		xlabel_2         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_2    = 'SFF'
	elif int_typ_spl_2 == 'SFR'  and n_int_spt_2 == 3:#in specfile_glx_f:
		splt_smpl_sfx_f2 = 'SFR_F'
		splt_smpl_sfx_2  = '-SFR' 
		splt_smpl_unt_2  = 'M$_{\odot}$yr$^{-1}$' 
		plt_nme_prp_2    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_3)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_3)
		slc_int_fg_2     = slc_sfr_int_fg[1]
		slc_int_bg_2     = slc_sfr_int_bg[1]
		xlabel_2         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_2    = 'SFF'
	elif int_typ_spl_2 == 'SFR'  and n_int_spt_2 == 4:#in specfile_glx_f:
		splt_smpl_sfx_f2 = 'SFR_F'
		splt_smpl_sfx_2  = '-SFR' 
		splt_smpl_unt_2  = 'M$_{\odot}$yr$^{-1}$' 
		plt_nme_prp_2    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_4)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_4)
		slc_int_fg_2     = slc_sfr_int_fg[1]
		slc_int_bg_2     = slc_sfr_int_bg[1]
		xlabel_2         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_2    = 'SFF'
	elif int_typ_spl_2 == 'sSFR' and n_int_spt_2 == 0:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'sSFR_F'
		splt_smpl_sfx_2  = '-sSFR'
		splt_smpl_unt_2  = 'sSFR'
		plt_nme_prp_2    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv)
		slc_int_fg_2     = slc_ssf_int_fg[1]
		slc_int_bg_2     = slc_ssf_int_bg[1]
		xlabel_2         = 'sSFR [Gyr]'
		var_prp_hdr_2    = 'sSF'
	elif int_typ_spl_2 == 'sSFR' and n_int_spt_2 == 1:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'sSFR_F'
		splt_smpl_sfx_2  = '-sSFR'
		splt_smpl_unt_2  = 'sSFR'
		plt_nme_prp_2    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_1)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_1)
		slc_int_fg_2     = slc_ssf_int_fg[1]
		slc_int_bg_2     = slc_ssf_int_bg[1]
		xlabel_2         = 'sSFR [Gyr]'
		var_prp_hdr_2    = 'sSF'
	elif int_typ_spl_2 == 'sSFR' and n_int_spt_2 == 2:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'sSFR_F'
		splt_smpl_sfx_2  = '-sSFR'
		splt_smpl_unt_2  = 'sSFR'
		plt_nme_prp_2    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_2)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_2)
		slc_int_fg_2     = slc_ssf_int_fg[1]
		slc_int_bg_2     = slc_ssf_int_bg[1]
		xlabel_2         = 'sSFR [Gyr]'
		var_prp_hdr_2    = 'sSF'
	elif int_typ_spl_2 == 'sSFR' and n_int_spt_2 == 3:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'sSFR_F'
		splt_smpl_sfx_2  = '-sSFR'
		splt_smpl_unt_2  = 'sSFR'
		plt_nme_prp_2    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_3)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_3)
		slc_int_fg_2     = slc_ssf_int_fg[1]
		slc_int_bg_2     = slc_ssf_int_bg[1]
		xlabel_2         = 'sSFR [Gyr]'
		var_prp_hdr_2    = 'sSF'
	elif int_typ_spl_2 == 'sSFR' and n_int_spt_2 == 4:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'sSFR_F'
		splt_smpl_sfx_2  = '-sSFR'
		splt_smpl_unt_2  = 'sSFR'
		plt_nme_prp_2    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_4)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_4)
		slc_int_fg_2     = slc_ssf_int_fg[1]
		slc_int_bg_2     = slc_ssf_int_bg[1]
		xlabel_2         = 'sSFR [Gyr]'
		var_prp_hdr_2    = 'sSF'
	elif int_typ_spl_2 == 'Lnuv' and n_int_spt_2 == 0:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'Lnuv_F'
		splt_smpl_sfx_2  = '-Lnuv'
		splt_smpl_unt_2  = 'ergs cm$^{-2}$ s$^{-1}$'
		plt_nme_prp_2    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv)
		slc_int_fg_2     = slc_luv_int_fg[1]
		slc_int_bg_2     = slc_luv_int_bg[1]
		xlabel_2         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_2    = 'UVF'
	elif int_typ_spl_2 == 'Lnuv' and n_int_spt_2 == 1:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'Lnuv_F'
		splt_smpl_sfx_2  = '-Lnuv'
		splt_smpl_unt_2  = 'ergs cm$^{-2}$ s$^{-1}$'
		plt_nme_prp_2    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_1)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_1)
		slc_int_fg_2     = slc_luv_int_fg[1]
		slc_int_bg_2     = slc_luv_int_bg[1]
		xlabel_2         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_2    = 'UVF'
	elif int_typ_spl_2 == 'Lnuv' and n_int_spt_2 == 2:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'Lnuv_F'
		splt_smpl_sfx_2  = '-Lnuv'
		splt_smpl_unt_2  = 'ergs cm$^{-2}$ s$^{-1}$'
		plt_nme_prp_2    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_2)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_2)
		slc_int_fg_2     = slc_luv_int_fg[1]
		slc_int_bg_2     = slc_luv_int_bg[1]
		xlabel_2         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_2    = 'UVF'
	elif int_typ_spl_2 == 'Lnuv' and n_int_spt_2 == 3:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'Lnuv_F'
		splt_smpl_sfx_2  = '-Lnuv'
		splt_smpl_unt_2  = 'ergs cm$^{-2}$ s$^{-1}$'
		plt_nme_prp_2    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_3)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_3)
		slc_int_fg_2     = slc_luv_int_fg[1]
		slc_int_bg_2     = slc_luv_int_bg[1]
		xlabel_2         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_2    = 'UVF'
	elif int_typ_spl_2 == 'Lnuv' and n_int_spt_2 == 4:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'Lnuv_F'
		splt_smpl_sfx_2  = '-Lnuv'
		splt_smpl_unt_2  = 'ergs cm$^{-2}$ s$^{-1}$'
		plt_nme_prp_2    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_4)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_4)
		slc_int_fg_2     = slc_luv_int_fg[1]
		slc_int_bg_2     = slc_luv_int_bg[1]
		xlabel_2         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_2    = 'UVF'
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 0:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = 'arcsec'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 1:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = 'arcsec'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_1[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_1[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 2:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = 'arcsec'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_2[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_2[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 3:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = 'arcsec'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_3[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_3[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 4:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = 'arcsec'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_4[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_4[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 5:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = 'arcsec'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_5[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_5[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 6:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = 'arcsec'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_6[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_6[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
	elif int_typ_spl_2 == 'magi' and n_int_spt_2 == 0:# in specfile_glx:
		splt_smpl_sfx_f2 = 'magi_F'
		splt_smpl_sfx_2  = '_magi'
		splt_smpl_unt_2  = 'arcsec'
		plt_nme_prp_2    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv)
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'mag$_{i}$'
		var_prp_hdr_2    = 'magi'#'SAS'
	elif int_typ_spl_2 == 'magi' and n_int_spt_2 == 1:# in specfile_glx:
		splt_smpl_sfx_f2 = 'magi_F'
		splt_smpl_sfx_2  = '_magi'
		splt_smpl_unt_2  = 'mag'
		plt_nme_prp_2    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv)
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'mag$_{i}$'
		var_prp_hdr_2    = 'magi'#'SAS'
	elif int_typ_spl_2 == 'magi' and n_int_spt_2 == 2:# in specfile_glx:
		splt_smpl_sfx_f2 = 'magi_F'
		splt_smpl_sfx_2  = '_magi'
		splt_smpl_unt_2  = 'mag'
		plt_nme_prp_2    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_2)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_2)
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'mag$_{i}$'
		var_prp_hdr_2    = 'magi'#'SAS'
	elif int_typ_spl_2 == 'magi' and n_int_spt_2 == 3:# in specfile_glx:
		splt_smpl_sfx_f2 = 'magi_F'
		splt_smpl_sfx_2  = '_magi'
		splt_smpl_unt_2  = 'mag'
		plt_nme_prp_2    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_3)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_3)
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'mag$_{i}$'
		var_prp_hdr_2    = 'magi'#'SAS'
	elif int_typ_spl_2 == 'magi' and n_int_spt_2 == 4:# in specfile_glx:
		splt_smpl_sfx_f2 = 'magi_F'
		splt_smpl_sfx_2  = '_magi'
		splt_smpl_unt_2  = 'mag'
		plt_nme_prp_2    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_4)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_4)
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'mag$_{i}$'
		var_prp_hdr_2    = 'magi'#'SAS'
	elif int_typ_spl_2 == 'phi' and n_int_spt_2 == 0:# in specfile_glx:
		splt_smpl_sfx_f2 = 'PHI'
		splt_smpl_sfx_2  = '-phi'
		splt_smpl_unt_2  = 'deg'
		plt_nme_prp_2    = 'PHI'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv)
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr_2    = 'PHI'#'SAS'
	elif int_typ_spl_2 == 'phi'  and n_int_spt_2 == 2:# in specfile_glx:
		splt_smpl_sfx_f2 = 'PHI'
		splt_smpl_sfx_2  = '-phi'
		splt_smpl_unt_2  = 'deg'
		plt_nme_prp_2    = 'PHI'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv_23_2)			
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr_2    = 'PHI'#'SAS'
	elif int_typ_spl_2 == 'phi'  and n_int_spt_2 == 3:# in specfile_glx:
		splt_smpl_sfx_f2 = 'PHI'
		splt_smpl_sfx_2  = '-phi'
		splt_smpl_unt_2  = 'deg'
		plt_nme_prp_2    = 'PHI'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv_23_3)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv_23_3)			
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr_2    = 'PHI'#'SAS'
	elif int_typ_spl_2 == 'icl_fg' and n_int_spt_2 == 0:# in specfile_glx:
		splt_smpl_sfx_f2 = 'q_F'
		splt_smpl_sfx_2  = '-icl'
		splt_smpl_unt_2  = 'deg'
		plt_nme_prp_2    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv)
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$q$'
		var_prp_hdr_2    = 'q'#'SAS'
	elif int_typ_spl_2 == 'icl_fg' and n_int_spt_2 == 2:# in specfile_glx:
		splt_smpl_sfx_f2 = 'q_F'
		splt_smpl_sfx_2  = '-icl'
		splt_smpl_unt_2  = 'deg'
		plt_nme_prp_2    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv_23_2)
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$q$'
		var_prp_hdr_2    = 'q'#'SAS'
	elif int_typ_spl_2 == 'icl_fg' and n_int_spt_2 == 3:# in specfile_glx:
		splt_smpl_sfx_f2 = 'q_F'
		splt_smpl_sfx_2  = '-icl'
		splt_smpl_unt_2  = 'deg'
		plt_nme_prp_2    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv_23_3)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv_23_3)
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$q$'
		var_prp_hdr_2    = 'q'#'SAS'
	elif int_typ_spl_2 == 'icl_fg' and n_int_spt_2 == 4:# in specfile_glx:
		splt_smpl_sfx_f2 = 'q_F'
		splt_smpl_sfx_2  = '-icl'
		splt_smpl_unt_2  = 'deg'
		plt_nme_prp_2    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv_23_4)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv_23_4)			
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$q$'
		var_prp_hdr_2    = 'q'#'SAS'
	elif int_typ_spl_2 == 'n_sersic_fg' and n_int_spt_2 == 0:# in specfile_glx:
		splt_smpl_sfx_f2 = 'n_F'
		splt_smpl_sfx_2  = '-n_srs'
		splt_smpl_unt_2  = 'n'
		plt_nme_prp_2    = 'n_srs'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,n_srs_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,n_srs_itv)
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = 'n'
		var_prp_hdr_2    = 'nsr'#'SAS'
	elif int_typ_spl_2 == 'n_sersic_fg'  and n_int_spt_2 == 2:# in specfile_glx:
		splt_smpl_sfx_f2 = 'n_F'
		splt_smpl_sfx_2  = '-n_srs'
		splt_smpl_unt_2  = 'n'
		plt_nme_prp_2    = 'n_srs'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,n_srs_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,n_srs_itv_23_2)			
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = 'n'
		var_prp_hdr_2    = 'nsr'#'SAS'
	elif int_typ_spl_2 == 'r_eff_fg' and n_int_spt_2 == 0:# in specfile_glx:
		splt_smpl_sfx_f2 = 're_F'
		splt_smpl_sfx_2  = '-r_eff'
		splt_smpl_unt_2  = 'arcsec'
		plt_nme_prp_2    = 'r_eff'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv)
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]  
		xlabel_2         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr_2    = 'ref'#'SAS'
	elif int_typ_spl_2 == 'r_eff_fg'  and n_int_spt_2 == 2:# in specfile_glx:
		splt_smpl_sfx_f2 = 're_F'
		splt_smpl_sfx_2  = '-r_eff'
		splt_smpl_unt_2  = 'arcsec'
		plt_nme_prp_2    = 'r_eff'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv_23_2)			
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr_2    = 'ref'#'SAS'
	elif int_typ_spl_2 == 'r_eff_fg'  and n_int_spt_2 == 3:# in specfile_glx:
		splt_smpl_sfx_f2 = 're_F'
		splt_smpl_sfx_2  = '-r_eff'
		splt_smpl_unt_2  = 'arcsec'
		plt_nme_prp_2    = 'r_eff'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv_23_3)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv_23_3)			
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr_2    = 'ref'#'SAS'
	else:
		print
		print (colored('Such combination (2nd-split) does not exist!','yellow'))
		print (colored('Variable: '+str(int_typ_spl_2)+', # bins: '+str(n_int_spt_2),'yellow'))
		print
		quit()

	####

	FILES_M_BG =[]
	FILES_A_BG =[]
	FILES_M_FG =[]
	FILES_A_FG =[]

	FLSHS_FG = []
	FLSHW_FG = []

	FLSHS_BG = []
	FLSHW_BG = []
	'''
	if frg_ref_plt == True:
		for element,a in  enumerate(itertools.product(range(len(slc_int_fg_1)-1,len(slc_int_fg_1)),range(lower_shift_2,len(slc_int_fg_2)-upper_shift_2))):	
			index_int_1 = a[0]
			index_int_2 = a[1]
			print element,slc_int_fg_1[index_int_1],slc_int_fg_2[index_int_2]
			ini_fg_spc_m  = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-' + splt_smpl_sfx_f1 +'-'+str(slc_int_fg_1[index_int_1]) +'-ss-' + splt_smpl_sfx_f2 +'-'+str(slc_int_fg_2[index_int_2]) + '-stk-med'+str(stk_function)+'.fits'
			ini_fg_spc_a  = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-' + splt_smpl_sfx_f1 +'-'+str(slc_int_fg_1[index_int_1]) +'-ss-' + splt_smpl_sfx_f2 +'-'+str(slc_int_fg_2[index_int_2]) + '-stk-avg'+str(stk_function)+'.fits'
			print
			print ini_fg_spc_m
			print ini_fg_spc_a
			print

			#FILES_M_BG.append(ini_fg_spc_m)
			#FILES_A_BG.append(ini_fg_spc_a)
			#FILES_A_BG.append(ini_fg_spc_a)
	elif frg_ref_plt == False:
		pass
	print 'zfsdfsd'
	print
	'''

	splt_smpl_sfx_f1_plt=[]	
	splt_smpl_sfx_f2_plt=[]
	splt_smpl_sfx_f1_plt_fnc_m = []
	splt_smpl_sfx_f1_plt_fnc_a = []

	for element,a in  enumerate(itertools.product(range(lower_shift_1,len(slc_int_fg_1)-upper_shift_1),range(lower_shift_2,len(slc_int_fg_2)-upper_shift_2))):
		#print element,a
		index_int_1 = a[0]
		index_int_2 = a[1]
		print element,slc_int_fg_1[index_int_1],slc_int_fg_2[index_int_2]
		ini_fg_spc_m    = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-' + splt_smpl_sfx_f1 +'-'+str(slc_int_fg_1[index_int_1]) +'-ss-' + splt_smpl_sfx_f2 +'-'+str(slc_int_fg_2[index_int_2]) + '-stk-med'+str(stk_function)+'.fits'
		ini_fg_spc_a    = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-' + splt_smpl_sfx_f1 +'-'+str(slc_int_fg_1[index_int_1]) +'-ss-' + splt_smpl_sfx_f2 +'-'+str(slc_int_fg_2[index_int_2]) + '-stk-avg'+str(stk_function)+'.fits'
		ini_bg_spc_m    = res_stk_res + 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-' + splt_smpl_sfx_f1 +'-'+str(slc_int_fg_1[index_int_1]) +'-ss-' + splt_smpl_sfx_f2 +'-'+str(slc_int_fg_2[index_int_2]) + '-stk-med'+str(stk_function)+'.fits'
		ini_bg_spc_a    = res_stk_res + 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-' + splt_smpl_sfx_f1 +'-'+str(slc_int_fg_1[index_int_1]) +'-ss-' + splt_smpl_sfx_f2 +'-'+str(slc_int_fg_2[index_int_2]) + '-stk-avg'+str(stk_function)+'.fits'

		ini_fg_spc_hst  = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-' + splt_smpl_sfx_f1 +'-'+str(slc_int_fg_1[index_int_1]) +'-ss-' + splt_smpl_sfx_f2 +'-'+str(slc_int_fg_2[index_int_2]) + '-stk-hst.fits' #'-ss-sep_as-0-' + str(max_sep) + '-ss' + splt_smpl_sfx_f +'-'+str(slc_int_fg[index_int]) + '-stk-hst.fits'
		ini_fg_spc_hsw  = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-' + splt_smpl_sfx_f1 +'-'+str(slc_int_fg_1[index_int_1]) +'-ss-' + splt_smpl_sfx_f2 +'-'+str(slc_int_fg_2[index_int_2]) + '-stk-hsw.fits' #'-ss-sep_as-0-' + str(max_sep) + '-ss' + splt_smpl_sfx_f +'-'+str(slc_int_fg[index_int]) + '-stk-hsw.fits'
		ini_bg_spc_hst  = res_stk_res + 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-' + splt_smpl_sfx_f1 +'-'+str(slc_int_fg_1[index_int_1]) +'-ss-' + splt_smpl_sfx_f2 +'-'+str(slc_int_fg_2[index_int_2]) + '-stk-hst.fits' #'-ss-sep_as-0-' + str(max_sep) + '-ss' + splt_smpl_sfx_f +'-'+str(slc_int_fg[index_int]) + '-stk-hst.fits'
		ini_bg_spc_hsw  = res_stk_res + 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-' + splt_smpl_sfx_f1 +'-'+str(slc_int_fg_1[index_int_1]) +'-ss-' + splt_smpl_sfx_f2 +'-'+str(slc_int_fg_2[index_int_2]) + '-stk-hsw.fits' #'-ss-sep_as-0-' + str(max_sep) + '-ss' + splt_smpl_sfx_f +'-'+str(slc_int_fg[index_int]) + '-stk-hsw.fits'

		print
		print ini_fg_spc_m
		print ini_fg_spc_a
		print ini_fg_spc_hst
		print ini_fg_spc_hsw
		print
		print ini_bg_spc_m
		print ini_bg_spc_a
		print ini_bg_spc_hst
		print ini_bg_spc_hsw
		print 		
		FILES_M_BG.append(ini_bg_spc_m)
		FILES_A_BG.append(ini_bg_spc_a)
		FILES_M_FG.append(ini_fg_spc_m)
		FILES_A_FG.append(ini_fg_spc_a)

		FLSHS_FG.append(ini_fg_spc_hst)
		FLSHW_FG.append(ini_fg_spc_hsw)

		FLSHS_BG.append(ini_bg_spc_hst)
		FLSHW_BG.append(ini_bg_spc_hsw)

		splt_smpl_sfx_f1_plt.append(splt_smpl_sfx_f1 +'-'+str(slc_int_fg_1[index_int_1]))
		splt_smpl_sfx_f2_plt.append(splt_smpl_sfx_f2 +'-'+str(slc_int_fg_2[index_int_2]))
		splt_smpl_sfx_f1_plt_fnc_m.append((ini_fg_spc_m.split('-stk',1)[1]).split('.fits',1)[0])
		splt_smpl_sfx_f1_plt_fnc_a.append((ini_fg_spc_a.split('-stk',1)[1]).split('.fits',1)[0])

	print
	print colored('Intervals to be plotted: ','yellow')
	print colored('Indices : '+str(range(lower_shift_1,len(slc_int_bg_1)-upper_shift_1)),'yellow')
	print colored('Indices : '+str(range(lower_shift_2,len(slc_int_bg_2)-upper_shift_2)),'yellow')
	print

	#for interval_range in range(lower_shift,len(slc_int_bg)-upper_shift):
		#print colored('Interval: ' + str(interval_range) + ': ' + str(slc_int_fg[interval_range]),'yellow')
		#cur_spc_1 = res_stk_res + specfile_glx_b + str(slc_int_fg[interval_range]) + '-stk-med'+str(stk_function)+'.fits'
		#cur_spc_2 = res_stk_res + specfile_glx_b + str(slc_int_fg[interval_range]) + '-stk-avg'+str(stk_function)+'.fits'
		#FILES_M_BG.append(cur_spc_1)
		#FILES_A_BG.append(cur_spc_2)
		#FILES_A_BG.append(cur_spc_2)
		#
	#if 'Fg' in specfile_glx_b[2]:
		#glx_type = 'Fg'
		#clr_plt  = 'red'
	#elif 'Bg' in specfile_glx_b[2]:
		#glx_type = 'Bg'
		#clr_plt  = 'blue'
		#
	if mlt_stk_fct == 'med':#stk_function_m == True:
		stk_function_file = 'med-c'
		
	elif mlt_stk_fct == 'avg':#stk_function_a == True:
		stk_function_file = 'avg-c'
		
	elif mlt_stk_fct == 'both':#stk_function_b == True:
		stk_function_file = 'med-avg'

	print
	print colored('EW from spectra files: ','yellow')
	print
	print colored("\n".join([FILE for FILE in FILES_M_BG]),'blue')
	print colored("\n".join([FILE for FILE in FILES_M_FG]),'blue')
	print
	print colored("\n".join([FILE for FILE in FILES_A_BG]),'red')
	print colored("\n".join([FILE for FILE in FILES_A_FG]),'red')
	print
	print colored("\n".join([str(FILE) for FILE in FLSHS_BG]),'white')
	print colored("\n".join([str(FILE) for FILE in FLSHS_FG]),'white')
	print
	print colored("\n".join([str(FILE) for FILE in FLSHW_BG]),'green')
	print colored("\n".join([str(FILE) for FILE in FLSHW_FG]),'green')
	print
	print
	print colored('Reshaping filename array.','yellow')
	print colored('Split by: ' + int_typ_spl_1 + ' in # bins: ' +str(n_int_spt_1) ,'yellow')
	print colored("\n".join([str(FILE) for FILE in slc_int_fg_1]),'yellow')
	print
	print colored('Split by: ' + int_typ_spl_2 + ' in # bins: ' +str(n_int_spt_2) ,'yellow')
	print colored("\n".join([str(FILE) for FILE in slc_int_fg_2]),'yellow')
	print

	###################################
	#############ORGINAL###############
	###################################
	#FILES_A_BG_AUX = np.reshape(FILES_A_BG, (n_int_spt_1,n_int_spt_2))
	#FILES_A_FG_AUX = np.reshape(FILES_A_FG, (n_int_spt_1,n_int_spt_2))
	#FILES_M_BG_AUX = np.reshape(FILES_M_BG, (n_int_spt_1,n_int_spt_2))
	#FILES_M_FG_AUX = np.reshape(FILES_M_FG, (n_int_spt_1,n_int_spt_2))
	###################################
	#############ORGINAL###############
	###################################

	FILES_A_BG_AUX = np.reshape(FILES_A_BG, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))
	FILES_A_FG_AUX = np.reshape(FILES_A_FG, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))
	FILES_M_BG_AUX = np.reshape(FILES_M_BG, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))
	FILES_M_FG_AUX = np.reshape(FILES_M_FG, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))

	FLSHS_BG_AUX   = np.reshape(FLSHS_BG, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))
	FLSHS_FG_AUX   = np.reshape(FLSHS_FG, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))
	FLSHW_BG_AUX   = np.reshape(FLSHW_BG, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))
	FLSHW_FG_AUX   = np.reshape(FLSHW_FG, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))


	###################################
	#############ORGINAL###############
	###################################
	#splt_smpl_sfx_f1_plt_aux         = np.reshape(splt_smpl_sfx_f1_plt, (n_int_spt_1,n_int_spt_2))
	#splt_smpl_sfx_f1_plt_fnc_m_aux   = np.reshape(splt_smpl_sfx_f1_plt_fnc_m, (n_int_spt_1,n_int_spt_2))
	#splt_smpl_sfx_f1_plt_fnc_a_aux   = np.reshape(splt_smpl_sfx_f1_plt_fnc_a, (n_int_spt_1,n_int_spt_2))
	###################################
	#############ORGINAL###############
	###################################
	splt_smpl_sfx_f1_plt_aux         = np.reshape(splt_smpl_sfx_f1_plt      , (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))
	splt_smpl_sfx_f2_plt_aux         = np.reshape(splt_smpl_sfx_f2_plt      , (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))
	splt_smpl_sfx_f1_plt_fnc_m_aux   = np.reshape(splt_smpl_sfx_f1_plt_fnc_m, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))
	splt_smpl_sfx_f1_plt_fnc_a_aux   = np.reshape(splt_smpl_sfx_f1_plt_fnc_a, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))

	print
	print colored('EW from spectra files: ','yellow')
	print
	print colored("\n".join([str(FILE) for FILE in FILES_M_BG]),'blue')
	print colored("\n".join([str(FILE) for FILE in FILES_M_FG]),'blue')
	print
	print colored("\n".join([str(FILE) for FILE in FILES_A_BG]),'red')
	print colored("\n".join([str(FILE) for FILE in FILES_A_FG]),'red')
	print
	print colored("\n".join([str(FILE) for FILE in FLSHS_BG]),'white')
	print colored("\n".join([str(FILE) for FILE in FLSHS_FG]),'white')
	print
	print colored("\n".join([str(FILE) for FILE in FLSHW_BG]),'green')
	print colored("\n".join([str(FILE) for FILE in FLSHW_FG]),'green')
	print	

	#print
	#print colored('EW from spectra files: ','yellow')
	#print
	#print colored("\n".join([str(FILE) for FILE in FILES_M_BG_AUX]),'blue')
	#print colored("\n".join([str(FILE) for FILE in FILES_M_FG_AUX]),'blue')
	#print
	#print colored("\n".join([str(FILE) for FILE in FILES_A_BG_AUX]),'red')
	#print colored("\n".join([str(FILE) for FILE in FILES_A_FG_AUX]),'red')
	#print	
	##########
	#############
	#plt_sufix_fnm = specfile_glx  + slc_int_fg[lower_shift]  + '-' + slc_int_fg[len(slc_int_bg)-upper_shift-1]

	B_FLAG = (FILES_M_BG_AUX[0][0].split('ss-zf_B-')[1]).rsplit('-ss-zf_F-')[0]
	F_FLAG = (FILES_M_BG_AUX[0][0].split('ss-zf_F-')[1]).rsplit('-ss-'+int_typ_spl_1+'-')[0]


	try:
		plt_sufix_fnm = ((FILES_M_BG_AUX[0][0].split('/')[-1])).rsplit(int_typ_spl_1)[0] + int_typ_spl_1 + '-' + str((n_int_spt_1)) + '-' +int_typ_spl_2 +'-' + str((n_int_spt_2)) #slc_int_fg_1[lower_shift_1] +'-' +slc_int_fg_1[len(slc_int_bg_2[0])-upper_shift_2-1]
		PLOT_TITLE    = 'z_Bg: ' + B_FLAG + ', z_Fg:' + F_FLAG + ', bins: ' +  int_typ_spl_1 + ': ' + str((n_int_spt_1)) + ', ' +int_typ_spl_2 +': ' + str((n_int_spt_2))#+ '-' + str(slc_int_fg_1[1][len(slc_int_bg_2[0])-upper_shift_2-1]) 
	except IndexError:
		plt_sufix_fnm = ((FILES_M_BG_AUX[0][0].split('/')[-1])).rsplit(int_typ_spl_1)[0] + int_typ_spl_1 + '-' + str((n_int_spt_1)) + '-' +int_typ_spl_2 +'-' + str((n_int_spt_2)) #slc_int_fg_1[lower_shift_1] +'-' +slc_int_fg_1[len(slc_int_bg_2)-upper_shift_2-1]
		PLOT_TITLE    = 'z_Bg: ' + B_FLAG + ', z_Fg:' + F_FLAG + ', bins: ' +  int_typ_spl_1 + ': ' + str((n_int_spt_1)) + ', ' +int_typ_spl_2 +': ' + str((n_int_spt_2))#+ '-' + str(slc_int_fg_1[1][len(slc_int_bg_2)-upper_shift_2-1]) 

	
	#[Plot_Idp_Spc_Lne_Mlt_Plt(FILE[0],plt_sufix_fnm=plt_sufix_fnm,splt_smpl_sfx_f1_plt=FILE[1],stk_function_sfx_f1_plt=FILE[2],**kwargs)for FILE in zip(FILES_M_BG_AUX,splt_smpl_sfx_f1_plt_aux,splt_smpl_sfx_f1_plt_fnc_m_aux)]
	#[Plot_Idp_Spc_Lne_Mlt_Plt(FILE[0],plt_sufix_fnm=plt_sufix_fnm,splt_smpl_sfx_f1_plt=FILE[1],stk_function_sfx_f1_plt=FILE[2],**kwargs)for FILE in zip(FILES_A_BG_AUX,splt_smpl_sfx_f1_plt_aux,splt_smpl_sfx_f1_plt_fnc_a_aux)]

	if (mlt_stk_fct == 'med' or mlt_stk_fct == 'both') and fpt_foreground == True:
		print
		print plt_sufix_fnm
		print PLOT_TITLE
		print
		print len(FILES_M_FG_AUX)		
		print
		print colored("\n".join([str(FILE) for FILE in FILES_M_FG_AUX]),'blue')
		print
		print colored("\n".join([str(FILE) for FILE in splt_smpl_sfx_f1_plt_fnc_m_aux]),'blue')
		[Plot_Idp_Spc_Lne_Mlt_Plt(FILE[0],FILE[1],FILE[2],
				plt_sufix_fnm=plt_sufix_fnm,
				splt_smpl_sfx_f1_plt=FILE[3],
				stk_function_sfx_f1_plt=FILE[4],
				splt_smpl_sfx_f2_plt=FILE[5],**kwargs)
				for FILE in zip(FILES_M_FG_AUX,FLSHS_FG_AUX,FLSHW_FG_AUX,splt_smpl_sfx_f1_plt_aux,splt_smpl_sfx_f1_plt_fnc_m_aux,splt_smpl_sfx_f2_plt_aux)]
	else:
		pass
	if (mlt_stk_fct == 'avg' or mlt_stk_fct == 'both') and fpt_foreground == True:
		print
		print plt_sufix_fnm
		print PLOT_TITLE
		print
		print len(FILES_M_FG_AUX)		
		print
		print colored("\n".join([str(FILE) for FILE in FILES_M_FG_AUX]),'blue')
		print
		print colored("\n".join([str(FILE) for FILE in splt_smpl_sfx_f1_plt_fnc_m_aux]),'blue')
		[Plot_Idp_Spc_Lne_Mlt_Plt(FILE[0],FILE[1],FILE[2],
				plt_sufix_fnm=plt_sufix_fnm,
				splt_smpl_sfx_f1_plt=FILE[3],
				stk_function_sfx_f1_plt=FILE[4],
				splt_smpl_sfx_f2_plt=FILE[5],**kwargs)
				for FILE in zip(FILES_A_FG_AUX,FLSHS_FG_AUX,FLSHW_FG_AUX,splt_smpl_sfx_f1_plt_aux,splt_smpl_sfx_f1_plt_fnc_a_aux,splt_smpl_sfx_f2_plt_aux)]

	else:
		pass
	if (mlt_stk_fct == 'both' or mlt_stk_fct == 'med') and fpt_background == True:
		print
		print plt_sufix_fnm
		print PLOT_TITLE
		print
		print len(FILES_A_BG_AUX)		
		print
		print colored("\n".join([str(FILE) for FILE in FILES_A_BG_AUX]),'red')
		print
		print colored("\n".join([str(FILE) for FILE in splt_smpl_sfx_f1_plt_fnc_a_aux]),'red')
		[Plot_Idp_Spc_Lne_Mlt_Plt(FILE[0],FILE[1],FILE[2],
				plt_sufix_fnm=plt_sufix_fnm,
				splt_smpl_sfx_f1_plt=FILE[3],
				stk_function_sfx_f1_plt=FILE[4],
				splt_smpl_sfx_f2_plt=FILE[5],**kwargs)
				for FILE in zip(FILES_M_BG_AUX,FLSHS_BG_AUX,FLSHW_BG_AUX,splt_smpl_sfx_f1_plt_aux,splt_smpl_sfx_f1_plt_fnc_m_aux,splt_smpl_sfx_f2_plt_aux)]
	else:
		pass
	if (mlt_stk_fct == 'both' or mlt_stk_fct == 'avg') and fpt_background == True:
		print
		print plt_sufix_fnm
		print PLOT_TITLE
		print
		print len(FILES_A_FG_AUX)		
		print
		print colored("\n".join([str(FILE) for FILE in FILES_A_BG_AUX]),'red')
		print
		print colored("\n".join([str(FILE) for FILE in splt_smpl_sfx_f1_plt_fnc_a_aux]),'red')
		[Plot_Idp_Spc_Lne_Mlt_Plt(FILE[0],FILE[1],FILE[2],
				plt_sufix_fnm=plt_sufix_fnm,
				splt_smpl_sfx_f1_plt=FILE[3],
				stk_function_sfx_f1_plt=FILE[4],
				splt_smpl_sfx_f2_plt=FILE[5],**kwargs)
				for FILE in zip(FILES_A_BG_AUX,FLSHS_BG_AUX,FLSHW_BG_AUX,splt_smpl_sfx_f1_plt_aux,splt_smpl_sfx_f1_plt_fnc_a_aux,splt_smpl_sfx_f2_plt_aux)]

	else:
		pass

def Plot_Idp_Spc_Lne_Mlt_Plt(Mltp_Spec_Files_2b_Plot,Mltp_Spec_Files_2b_Plot_HST,Mltp_Spec_Files_2b_Plot_HSW,*args, **kwargs):
	z_glx_Ps      = kwargs.get('z_glx_Ps'    ,0)
	dest_dir      = kwargs.get('dest_dir'    , None)
	verbose       = kwargs.get('verbose'     , False)
	epssave       = kwargs.get('epssave'     , False)
	showplot      = kwargs.get('showplot'    , False) 

	autoaxis_Idp  = kwargs.get('autoaxis_Idp', False)
	#min_y_lim_Idp = kwargs.get('min_y_lim'   , 0.5)
	#max_y_lim_Idp = kwargs.get('max_y_lim'   , 1.5)

	lmb_min       = kwargs.get('lmb_min',1200)
	lmb_max       = kwargs.get('lmb_max',1700)

	lmb_min_lim   = lmb_min
	lmb_max_lim   = lmb_max

	#upper_shift   = kwargs.get('upper_shift',0)
	#lower_shift   = kwargs.get('lower_shift',0)
	#stk_function  = kwargs.get('stk_function','med')

	fit_fnct      = kwargs.get('fit_fnct','gauss')
	fit_type      = kwargs.get('fit_type','lmfit')
	pre_off_plt   = kwargs.get('pre_off_plt',False)
	dest_dir      = kwargs.get('dest_dir',None)

	n_int_spt     = kwargs.get('n_int_spt',0)

	int_typ_spl   = kwargs.get('int_typ_spl','arcsec')

	upper_shift_1   = kwargs.get('upper_shift_1',0)
	lower_shift_1   = kwargs.get('lower_shift_1',0)
	upper_shift_2   = kwargs.get('upper_shift_2',0)
	lower_shift_2   = kwargs.get('lower_shift_2',0)

	#stk_function_m  = kwargs.get('stk_function_m',False)
	#stk_function_a  = kwargs.get('stk_function_a',False)
	#stk_function_b  = kwargs.get('stk_function_b',False)
	mlt_stk_fct     = kwargs.get('mlt_stk_fct','both')

	plt_sufix_fnm   = kwargs.get('plt_sufix_fnm',None)
	MSK_NTMS=2.5

	splt_smpl_sfx_f1_plt     = kwargs.get('splt_smpl_sfx_f1_plt',None)
	splt_smpl_sfx_f2_plt     = kwargs.get('splt_smpl_sfx_f2_plt',None)
	stk_function_sfx_f1_plt  = kwargs.get('stk_function_sfx_f1_plt','med')

	stk_function    = stk_function_sfx_f1_plt[0]

	max_sep         = kwargs.get('max_sep'         ,23)

	empty_plots     = kwargs.get('empty_plots',1)
	landscape_plt   = kwargs.get('landscape_plt',True)

	int_vlf_hdr    = kwargs.get('int_vlf_hdr',True)
	fit_vls_hdr    = kwargs.get('fit_vls_hdr',True)
	uft_lne_vls    = kwargs.get('uft_lne_vls',False)

	cnt_bnp_adj    = kwargs.get('cnt_bnp_adj',False)

	print
	print colored(Mltp_Spec_Files_2b_Plot,'green')
	print colored(splt_smpl_sfx_f1_plt,'magenta')
	print

	for lines in range(len(LINES[0])):
		if lmb_min < LINES[0][lines]*(1+z_glx_Ps) < lmb_max :
			if cnt_bnp_adj == False and 500 < LINES[0][lines]*(1+z_glx_Ps) <1390:
				spc_stt_lmbd_i= 1110 
				spc_stt_lmbd_f= 1200 
			########CONTIINUUM BAND PASS TALIA 20#########
			elif cnt_bnp_adj == True and 1258< LINES[0][lines]*(1+z_glx_Ps) <1265:
				spc_stt_lmbd_i = 1270
				spc_stt_lmbd_f = 1285
			elif cnt_bnp_adj == True and 1300< LINES[0][lines]*(1+z_glx_Ps) <1305:
				spc_stt_lmbd_i = 1310#1270
				spc_stt_lmbd_f = 1325#1285
			elif cnt_bnp_adj == True and 1330< LINES[0][lines]*(1+z_glx_Ps) <1340:
				spc_stt_lmbd_i = 1350 #1350
				spc_stt_lmbd_f = 1375 #1365
			elif cnt_bnp_adj == True and 1395< LINES[0][lines]*(1+z_glx_Ps) <1405:
				spc_stt_lmbd_i = 1430 #1440
				spc_stt_lmbd_f = 1455 #1455
			elif cnt_bnp_adj == True and 1520< LINES[0][lines]*(1+z_glx_Ps) <1530:
				spc_stt_lmbd_i = 1460
				spc_stt_lmbd_f = 1490
			elif cnt_bnp_adj == True and 1545< LINES[0][lines]*(1+z_glx_Ps) <1555:
				spc_stt_lmbd_i = 1580
				spc_stt_lmbd_f = 1600
			elif cnt_bnp_adj == True and 1605< LINES[0][lines]*(1+z_glx_Ps) <1610:
				spc_stt_lmbd_i = 1615
				spc_stt_lmbd_f = 1630
			elif cnt_bnp_adj == True and 1665< LINES[0][lines]*(1+z_glx_Ps) <1675:
				spc_stt_lmbd_i = 1680
				spc_stt_lmbd_f = 1700
			elif cnt_bnp_adj == True and 1855< LINES[0][lines]*(1+z_glx_Ps) <1865:
				spc_stt_lmbd_i = 1810
				spc_stt_lmbd_f = 1840
			########CONTIINUUM BAND PASS TALIA 20#########
			elif cnt_bnp_adj == False and 1390< LINES[0][lines]*(1+z_glx_Ps) <1700:
				spc_stt_lmbd_i = 1420 
				spc_stt_lmbd_f = 1500 
			elif cnt_bnp_adj == False and 1700< LINES[0][lines]*(1+z_glx_Ps) <2020:
				spc_stt_lmbd_i = 1920 
				spc_stt_lmbd_f = 2020 
			elif cnt_bnp_adj == False and 2020< LINES[0][lines]*(1+z_glx_Ps) <2200:
				spc_stt_lmbd_i = 2100 
				spc_stt_lmbd_f = 2200 
			elif cnt_bnp_adj == False and 2220< LINES[0][lines]*(1+z_glx_Ps) <2500:
				spc_stt_lmbd_i = 2200 
				spc_stt_lmbd_f = 2300 
			elif cnt_bnp_adj == False and 2500< LINES[0][lines]*(1+z_glx_Ps) <4000:
				spc_stt_lmbd_i = 2650 
				spc_stt_lmbd_f = 2750
			else:
				spc_stt_lmbd_i = 1410
				spc_stt_lmbd_f = 1510
			########################################################PLOT PER LINE########################################################
			fxsize=11
			fysize=8
			f = plt.figure(num=None, figsize=(fxsize, fysize), dpi=180, facecolor='w',
				edgecolor='k')
			plt.subplots_adjust(
				left 	= (36/25.4)/fxsize,       #-26 bigger 22-def
				bottom 	= (22/25.4)/fysize,       #20 bigger  19-def
				right 	= 1 - (2/25.4)/fxsize,    #          2-def
				top 	= 1 - (8/25.4)/fysize)    #          4-def
			plt.subplots_adjust(hspace=0)#,wspace=0)

			#f.suptitle('An overall title', size=20)
			gs0 = gridspec.GridSpec(1, 1)

			#############################################################STACK###########################################################
			gs11 = gridspec.GridSpecFromSubplotSpec(3, 1, subplot_spec=gs0[0])
				
			ax110 = plt.Subplot(f, gs11[0:3,0])
			f.add_subplot(ax110)

			ax110.set_rasterization_zorder(1)
			plt.autoscale(enable=True, axis='y', tight=False)
			ax110.xaxis.set_tick_params(labelsize=26)
			ax110.yaxis.set_tick_params(labelsize=26)
			#ax110.set_title(PLOT_TITLE)
			xticklabels = ax110.get_xticklabels()
			plt.setp(xticklabels, visible=True,family='serif')
			yticklabels = ax110.get_yticklabels()
			plt.setp(yticklabels, visible=True,family='serif')
			ax110.yaxis.set_tick_params(which='both',labelsize=26,direction='in',color='black',bottom=True,top=True,left=True,right=True)
			ax110.xaxis.set_tick_params(which='both',labelsize=26,direction='in',color='black',bottom=True,top=True,left=True,right=True)

			#minorLocator_x   = plt.MultipleLocator(0.5)
			#majorLocator_x   = plt.MultipleLocator(5)
			##minorLocator_y   = plt.MultipleLocator(0.1)
			##majorLocator_y   = plt.MultipleLocator(0.5)
			#ax110.xaxis.set_minor_locator(minorLocator_x)
			#ax110.xaxis.set_major_locator(majorLocator_x)
			##ax110.yaxis.set_minor_locator(minorLocator_y)
			##ax110.yaxis.set_major_locator(majorLocator_y)
			plt.tick_params(which='both' , width=0.7)
			plt.tick_params(which='major', length=5)
			plt.tick_params(which='minor', length=2)
			ax110.minorticks_on()

			plt.xlabel('$\lambda$',fontsize=28, family = 'serif')
			plt.ylabel('F$_\lambda$ (ergs/sec/cm$^{2}/\AA$)',fontsize=28, family = 'serif')

			#######################################################DIF-SEPARATIONS#######################################################
			for index,(specfile_glx,specfile_glx_hst,specfile_glx_hsw) in enumerate(zip(Mltp_Spec_Files_2b_Plot,Mltp_Spec_Files_2b_Plot_HST,Mltp_Spec_Files_2b_Plot_HSW)):
				print 
				print specfile_glx
				glx = Spectra_x_y(specfile_glx)
				glxhst = Spectra_x_y(specfile_glx_hst)
				glxhsw = Spectra_x_y(specfile_glx_hsw)
				lambda_glx,inten_glx,crval_glx,cdel1_glx,cd1_glx = glx[0], glx[1], glx[2], glx[3], glx[4]
				lambda_glx_hst,inten_glx_hst,crval_glx_hst,cdel1_glx_hst,cd1_glx_hst = glxhst[0], glxhst[1], glxhst[2], glxhst[3], glxhst[4]
				lambda_glx_hsw,inten_glx_hsw,crval_glx_hsw,cdel1_glx_hsw,cd1_glx_hsw = glxhsw[0], glxhsw[1], glxhsw[2], glxhsw[3], glxhsw[4]
				stk_glx_nmb = Header_Get(specfile_glx,'STK_NUM')
				
				if 'Bg' in specfile_glx:
					colors = "bgrcmykw"
				elif 'Fg' in specfile_glx:
					colors = "rgbcmykw"

				#lambda_glx,inten_glx,crval_glx,cdel1_glx,cd1_glx = glx[0], glx[1], glx[2], glx[3], glx[4]
				#stk_glx_nmb = Header_Get(specfile_glx,'STK_NUM')

				if uft_lne_vls == False and fit_vls_hdr == True and int_vlf_hdr==True:
					print
					print colored('Initial Guess Values foor line Fitting will be recorded!','yellow')
					print colored('Info from Lines_Dictionary.py!','yellow')
					print
					Header_Add(specfile_glx,str(LINES[5][lines])+'_WF_0',float(LINES[1][lines]) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-1 Wdt-Fit  1GF-IntVal')
					Header_Add(specfile_glx,str(LINES[5][lines])+'_WP_0',float(LINES[2][lines]) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-2 Wdt-Plt  1GF-IntVal')
					Header_Add(specfile_glx,str(LINES[5][lines])+'_CF_0',float(LINES[7][lines]) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-7 Ctr Fit Bnds  1GF-IntVal')
					Header_Add(specfile_glx,str(LINES[5][lines])+'_CO_0',float(LINES[8][lines]) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-8 Ctr Fit Ofst  1GF-IntVal')
					Header_Add(specfile_glx,str(LINES[5][lines])+'_AF_0',float(LINES[10][lines]),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-10 Amp Fit Bnds  1GF-IntVal')
					Header_Add(specfile_glx,str(LINES[5][lines])+'_AF_0',float(LINES[10][lines]),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' LINES-10 Amp Fit Bnds  1GF-IntVal')
				else:
					print
					print colored('Initial Guess Values for line Fitting will NOT be recorded!','yellow')
					print
					pass

				########################################################LINE-FIT#######################################################
				if 'DblF' in LINES[3][lines] and fit_fnct=='gauss' and uft_lne_vls == False:
					fit_typ = 'G'
					#GAUSSIAN FIT
					MSK_NTMS=2.5
					print 
					print colored('Double Line Fit (Ind)','yellow')
					print LINES[3][lines-1], LINES[0][lines-1] , LINES[1][lines-1]
					print LINES[3][lines]  , LINES[0][lines]   , LINES[1][lines]
					print LINES[3][lines-2], LINES[0][lines-2] , LINES[1][lines-2]

					# Now to fit the data create a new superposition with initial
					# guesses for the parameters:
					lmb_min_lim_line_ft_1 = LINES[0][lines-1] - MSK_NTMS*LINES[1][lines-1]
					lmb_max_lim_line_ft_1 = LINES[0][lines-1] + MSK_NTMS*LINES[1][lines-1]

					lmb_min_lim_line_ft_2 = LINES[0][lines-2] - MSK_NTMS*LINES[1][lines-2]
					lmb_max_lim_line_ft_2 = LINES[0][lines-2] + MSK_NTMS*LINES[1][lines-2]

					lmb_min_lim_line_ft_D = LINES[0][lines] - MSK_NTMS*LINES[1][lines]
					lmb_max_lim_line_ft_D = LINES[0][lines] + MSK_NTMS*LINES[1][lines]

					lmb_min_lim_line_1    = LINES[0][lines-1]*(1+z_glx_Ps) - LINES[2][lines-1]#- 20#LINES[2][lines] - 10
					lmb_max_lim_line_1    = LINES[0][lines-1]*(1+z_glx_Ps) + LINES[2][lines-1]#+ 20#LINES[2][lines] + 10

					lmb_min_lim_line_2    = LINES[0][lines-2]*(1+z_glx_Ps) - LINES[2][lines-2]#- 20#LINES[2][lines] - 10
					lmb_max_lim_line_2    = LINES[0][lines-2]*(1+z_glx_Ps) + LINES[2][lines-2]#+ 20#LINES[2][lines] + 10

					lmb_min_lim_line_D    = LINES[0][lines]*(1+z_glx_Ps) - LINES[2][lines]#- 20#LINES[2][lines] - 10
					lmb_max_lim_line_D    = LINES[0][lines]*(1+z_glx_Ps) + LINES[2][lines]#+ 20#LINES[2][lines] + 10

					lmb_min_lim_line_ft   = lmb_min_lim_line_ft_D
					lmb_max_lim_line_ft   = lmb_max_lim_line_ft_D

					mask_pl_1             = (lambda_glx >= lmb_min_lim_line_1)    & (lambda_glx <= lmb_max_lim_line_1)
					mask_ft_1             = (lambda_glx >= lmb_min_lim_line_ft_1) & (lambda_glx <= lmb_max_lim_line_ft_1)

					mask_pl_2             = (lambda_glx >= lmb_min_lim_line_2)    & (lambda_glx <= lmb_max_lim_line_2)
					mask_ft_2             = (lambda_glx >= lmb_min_lim_line_ft_2) & (lambda_glx <= lmb_max_lim_line_ft_2)

					mask_pl_D             = (lambda_glx >= lmb_min_lim_line_D)    & (lambda_glx <= lmb_max_lim_line_D)
					mask_ft_D             = (lambda_glx >= lmb_min_lim_line_ft_D) & (lambda_glx <= lmb_max_lim_line_ft_D)

					X0_f2DG_1             = LINES[0][lines-1]
					SIGMA_f2DG_1          = LINES[1][lines-1]
					A_f2DG_1              = -(1-(min(inten_glx[mask_ft_1])))

					X0_f2DG_2             = LINES[0][lines-2]
					SIGMA_f2DG_2          = LINES[1][lines-2]
					A_f2DG_2              = -(1-(min(inten_glx[mask_ft_2])))

					initial_guess_O_D     = (X0_f2DG_1,A_f2DG_1,SIGMA_f2DG_1,
											X0_f2DG_2,A_f2DG_2,SIGMA_f2DG_2,max(inten_glx[mask_ft_D])-1)
					initial_guess_0_D     = (X0_f2DG_1,A_f2DG_1,SIGMA_f2DG_1,
											X0_f2DG_2,A_f2DG_2,SIGMA_f2DG_2)
					try:
						popt_0_D, pcov_0_D  = opt.curve_fit(func_2_1D_Gaussian, lambda_glx[mask_ft_D],inten_glx[mask_ft_D], 
												p0=initial_guess_0_D,
												bounds=([
															X0_f2DG_1-(X0_f2DG_1*LINES[7][lines]),A_f2DG_1-0.001,-np.inf,
															X0_f2DG_2-(X0_f2DG_2*LINES[7][lines]),A_f2DG_2-0.001,-np.inf
														], #[lmb_min_lim_line,A_f2DG-0.001,-np.inf],
														[
															X0_f2DG_1+(X0_f2DG_1*LINES[7][lines]),A_f2DG_1      , np.inf,
															X0_f2DG_2+(X0_f2DG_2*LINES[7][lines]),A_f2DG_2      , np.inf
														]))#[lmb_max_lim_line,A_f2DG      ,np.inf]))
						data_fitted_0_D = func_2_1D_Gaussian((lambda_glx[mask_ft_D]), *popt_0_D)

						CTRE_G_0_D_1    = popt_0_D[0]
						AMPL_G_0_D_1    = popt_0_D[1]
						SGMA_G_0_D_1    = popt_0_D[2]

						CTRE_G_0_D_2    = popt_0_D[3]
						AMPL_G_0_D_2    = popt_0_D[4]
						SGMA_G_0_D_2    = popt_0_D[5]
						FWHM_G_0_D_1    = lw_sgma2fwhm(popt_0_D[2])
						FWHM_G_0_D_2    = lw_sgma2fwhm(popt_0_D[5])
						W_0_D           = 99#integrate.quad(lambda x: popt_0_D[1]*np.exp(-((x)**2)/(2*popt_0_D[2]**2)), -np.inf, np.inf)
						EW_0_D          = 99#np.round(abs(np.asarray(W_0_D[0])),3)
						EWE_0_D         = 99#np.round(abs(np.asarray(W_0_D[1])),10)
						#logger.error("Gaussian fit OK         : "+str(LINES[4][lines] + ' ' + str(LINES[3][lines]) ))
					except (RuntimeError,ValueError):
						#print RuntimeError
						popt_0_D            = [
												999999.99999,999999.99999,999999.99999,
												999999.99999,999999.99999,999999.99999]
						pcov_0_D            = [						
												999999.99999,999999.99999,999999.99999,
												999999.99999,999999.99999,999999.99999]
						perr_0_D            = [
												999999.99999,999999.99999,999999.99999,
												999999.99999,999999.99999,999999.99999]
						CTRE_G_0_D_1        = 999999.99999
						AMPL_G_0_D_1        = 999999.99999
						SGMA_G_0_D_1        = 999999.99999
						CTRE_G_0_D_2        = 999999.99999
						AMPL_G_0_D_2        = 999999.99999
						SGMA_G_0_D_2        = 999999.99999

						FWHM_G_0_D_1        = 999999.99999
						FWHM_G_0_D_2        = 999999.99999
						EW_0_D              = 999999.99999
						EWE_0_D             = 999999.99999
						#logger.error("Error in Gaussian fit   : "+str(LINES[4][lines] + ' ' + str(LINES[3][lines]) ))
					if fit_vls_hdr == True:
						Header_Add(specfile_glx,str(LINES[5][lines])+'_CGF0',float(CTRE_G_0_D) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_AGF0',float(AMPL_G_0_D) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_FGF0',float(FWHM_G_0_D) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WGF0',float(EW_0_D)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EGF0',float(EWE_0_D)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct')
					else:
						print
						print colored('The fit values will not be added to the fits headers!','magenta')
						print
					try:
						popt_O_D, pcov_O_D  = opt.curve_fit(func_2_1D_Gaussian_O, lambda_glx[mask_ft_D],inten_glx[mask_ft_D], 
												p0=initial_guess_O_D,
												bounds=([
															X0_f2DG_1-(X0_f2DG_1*LINES[7][lines]),A_f2DG_1-0.001,-np.inf,-np.inf,
															X0_f2DG_2-(X0_f2DG_2*LINES[7][lines]),A_f2DG_2-0.001,-np.inf,-np.inf
														], #[lmb_min_lim_line,A_f2DG-0.001,-np.inf],
														[
															X0_f2DG_1+(X0_f2DG_1*LINES[7][lines]),A_f2DG_1      , np.inf, np.inf,
															X0_f2DG_2+(X0_f2DG_2*LINES[7][lines]),A_f2DG_2      , np.inf, np.inf
																]))#[lmb_max_lim_line,A_f2DG      ,np.inf]))

						perr_O_D        = np.sqrt(np.diag(pcov_O_D))		
						data_fitted_O_D = func_2_1D_Gaussian_O((lambda_glx[mask_ft_D]), *popt_O_D)

						CTRE_G_O_D_1    = popt_O_D[0]
						AMPL_G_O_D_1    = popt_O_D[1]
						SGMA_G_O_D_1    = popt_O_D[2]
						CTRE_G_O_D_2    = popt_O_D[3]
						AMPL_G_O_D_2    = popt_O_D[4]
						SGMA_G_O_D_2    = popt_O_D[5]
						OFST_G_O_D      = popt_O_D[6]
						FWHM_G_O_D_1    = lw_sgma2fwhm(popt_O_D[2])
						FWHM_G_O_D_2    = lw_sgma2fwhm(popt_O_D[5])
						W_O_D           = 99#integrate.quad(lambda x: popt_O_D[1]*np.exp(-((x)**2)/(2*popt_O_D[2]**2)), -np.inf, np.inf)
						EW_O_D          = 99#np.round(abs(np.asarray(W_O_D[0])),3)
						EWE_O_D         = 99#np.round(abs(np.asarray(W_O_D[1])),10)

						#inten_glx[mask_ft] = inten_glx[mask_ft] - popt_O[3]
						inten_glx[mask_ft_D] = inten_glx[mask_ft_D] - popt_O_D[3]
						A_f2DG_1             = -(1-(min(inten_glx[mask_ft_D])))
						initial_guess_C_D    = (X0_f2DG_1,A_f2DG_1,SIGMA_f2DG_1)#,max(inten_glx[mask_ft_D])-1)
						popt_C_D, pcov_C_D   = opt.curve_fit(func_2_1D_Gaussian, lambda_glx[mask_ft_D],inten_glx[mask_ft_D], 
												p0=initial_guess_C_D,
												bounds=([
															X0_f2DG_1-(X0_f2DG_1*LINES[7][lines]),A_f2DG_1-0.001,-np.inf,
															X0_f2DG_2-(X0_f2DG_2*LINES[7][lines]),A_f2DG_2-0.001,-np.inf
															], #[lmb_min_lim_line,A_f2DG-0.001,-np.inf],
														[
															X0_f2DG_1+(X0_f2DG_1*LINES[7][lines]),A_f2DG_1      , np.inf,
															X0_f2DG_2+(X0_f2DG_2*LINES[7][lines]),A_f2DG_2      , np.inf
														]))#[lmb_max_lim_line,A_f2DG      ,np.inf]))
						data_fitted_C_D      = func_2_1D_Gaussian((lambda_glx[mask_ft_D]), *popt_C_D)

						CTRE_G_C_D_1    = popt_C_D[0]
						AMPL_G_C_D_1    = popt_C_D[1]
						SGMA_G_C_D_1    = popt_C_D[2]
						CTRE_G_C_D_2    = popt_C_D[3]
						AMPL_G_C_D_2    = popt_C_D[4]
						SGMA_G_C_D_2    = popt_C_D[5]
						FWHM_G_C_D      = 99#lw_sgma2fwhm(popt_C_D[2])
						W_C_D           = 99#integrate.quad(lambda x: popt_C_D[1]*np.exp(-((x)**2)/(2*popt_C_D[2]**2)), -np.inf, np.inf)
						EW_C_D          = 99#np.round(abs(np.asarray(W_C_D[0])),3)
						EWE_C_D         = 99#np.round(abs(np.asarray(W_C_D[1])),10)

						print
						print 'Initial 1 (0,O,C):'
						print colored(initial_guess_0_D,'green')
						print colored(initial_guess_O_D,'green')
						print colored(initial_guess_C_D,'green')
						#logger.error("Gaussian fit OK         : "+str(LINES[4][lines] + ' ' + str(LINES[3][lines]) ))
					except (RuntimeError,ValueError):
						#print RuntimeError
						popt_C_D            =  [
												999999.99999,999999.99999,999999.99999,
												999999.99999,999999.99999,999999.99999
												]
						pcov_C_D            =  [
												999999.99999,999999.99999,999999.99999,
												999999.99999,999999.99999,999999.99999
												]
						perr_C_D           =  [
												999999.99999,999999.99999,999999.99999,
												999999.99999,999999.99999,999999.99999
												]
						CTRE_G_C_D_1       = 999999.99999
						AMPL_G_C_D_1       = 999999.99999
						SGMA_G_C_D_1       = 999999.99999
						CTRE_G_C_D_2       = 999999.99999
						AMPL_G_C_D_2       = 999999.99999
						SGMA_G_C_D_2       = 999999.99999

						FWHM_G_C_D         = 999999.99999
						EW_C_D             = 999999.99999
						EWE_C_D            = 999999.99999
						popt_O_D           = [
												999999.99999,999999.99999,999999.99999,999999.99999,
												999999.99999,999999.99999,999999.99999,999999.99999
												]
						pcov_O_D           = [
												999999.99999,999999.99999,999999.99999,999999.99999,
												999999.99999,999999.99999,999999.99999,999999.99999
												]
						perr_O_D           = [
												999999.99999,999999.99999,999999.99999,999999.99999,
												999999.99999,999999.99999,999999.99999,999999.99999
												]
						CTRE_G_O_D_1       = 999999.99999
						AMPL_G_O_D_1       = 999999.99999
						SGMA_G_O_D_1       = 999999.99999
						CTRE_G_O_D_2       = 999999.99999
						AMPL_G_O_D_2       = 999999.99999
						SGMA_G_O_D_2       = 999999.99999
						FWHM_G_O_D         = 999999.99999
						EW_O_D             = 999999.99999
						EWE_O_D            = 999999.99999
						#logger.error("Error in Gaussian fit   : "+str(LINES[4][lines] + ' ' + str(LINES[3][lines]) ))
					print
					print 'Fit 1 (O,C):'
					print colored(popt_0_D,'magenta')
					print colored(popt_O_D,'magenta')
					print colored(popt_C_D,'magenta')

					if fit_vls_hdr == True:
						Header_Add(specfile_glx,str(LINES[5][lines])+'_CGFO',float(CTRE_G_O_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Offst')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_AGFO',float(AMPL_G_O_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Offst')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_FGFO',float(FWHM_G_O_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Offst')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WGFO',float(EW_O_1)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Offst')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EGFO',float(EWE_O_1)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Offst')

						Header_Add(specfile_glx,str(LINES[5][lines])+'_CGFC',float(CTRE_G_C_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_AGFC',float(AMPL_G_C_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_FGFC',float(FWHM_G_C_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WGFC',float(EW_C_1)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EGFC',float(EWE_C_1)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct')
					else:
						print
						print colored('The fit values will not be added to the fits headers!','magenta')
						print
					#print colored(specfile_glx,'green')
				elif 'DblF' not in LINES[3][lines] and fit_fnct=='gauss'   and fit_type == 'scipy' and uft_lne_vls == False:
					fit_typ = 'G'
					#GAUSSIAN FIT
					MSK_NTMS=2.5
					print
					print colored('1D Gaussian Fit Mode Choosen: scipy (Offset)','cyan')
					print

					lmb_min_lim_line_ft = (LINES[0][lines]-LINES[8][lines]) - MSK_NTMS*LINES[1][lines]#IT WAS LINE CTR - LINE OFFSET
					lmb_max_lim_line_ft = (LINES[0][lines]+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]

					###################################
					#############ORGINAL###############
					###################################
					#lmb_min_lim_line    = (LINES[0][lines]-LINES[8][lines])*(1+z_glx_Ps) - LINES[2][lines]#- 20#LINES[2][lines] - 10
					#lmb_max_lim_line    = (LINES[0][lines]+LINES[8][lines])*(1+z_glx_Ps) + LINES[2][lines]#+ 20#LINES[2][lines] + 10
					###################################
					#############ORGINAL###############
					###################################

					lmb_min_lim_line    = (LINES[0][lines]-LINES[8][lines])*(1+z_glx_Ps) - MSK_NTMS*LINES[2][lines]#- 20#LINES[2][lines] - 10
					lmb_max_lim_line    = (LINES[0][lines]+LINES[8][lines])*(1+z_glx_Ps) + MSK_NTMS*LINES[2][lines]#+ 20#LINES[2][lines] + 10

					mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
					mask_ft    = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
					label_glx  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function

					X0_f2DG    = (LINES[0][lines]+LINES[8][lines])
					SIGMA_f2DG = LINES[1][lines]
					A_f2DG     = -(1-(min(inten_glx[mask_ft])))

					max_val    = -(1-min(inten_glx[mask_ft]))
					lambda_max = (lambda_glx[np.where(inten_glx==min(inten_glx[mask_ft]))[0]][0])

					#plt.step(lambda_glx[mask_pl], inten_glx[mask_pl],
							#colors[index],
							#where='mid',lw=3.0,alpha=0.5,linestyle=':',color='gray',
							#label='Original Spectrum')

					initial_guess_O   = (X0_f2DG,A_f2DG,SIGMA_f2DG,max(inten_glx[mask_ft])-1)
					initial_guess_0   = (X0_f2DG,A_f2DG,SIGMA_f2DG)
					try:
						popt_0, pcov_0    = opt.curve_fit(func_1D_Gaussian, lambda_glx[mask_ft],inten_glx[mask_ft], 
													p0=initial_guess_0,
													#bounds=([X0_f2DG-(X0_f2DG*LINES[7][lines]),A_f2DG-0.001,-np.inf], #[lmb_min_lim_line,A_f2DG-0.001,-np.inf],
															#[X0_f2DG+(X0_f2DG*LINES[7][lines]),A_f2DG      , np.inf]))#[lmb_max_lim_line,A_f2DG      ,np.inf]))
													bounds=([X0_f2DG-(X0_f2DG*LINES[7][lines]),A_f2DG  - (A_f2DG*LINES[10][lines]),-np.inf], #[lmb_min_lim_line,A_f2DG-0.001,-np.inf],
															[X0_f2DG+(X0_f2DG*LINES[7][lines]),A_f2DG  + (A_f2DG*LINES[10][lines]), np.inf]))#[lmb_max_lim_line,A_f2DG      ,np.inf]))
						
						perr_0             = np.sqrt(np.diag(pcov_0))
						data_fitted_0      = func_1D_Gaussian((lambda_glx[mask_ft]), *popt_0)
						CTRE_G_0           = popt_0[0]
						AMPL_G_0           = popt_0[1]
						SGMA_G_0           = popt_0[2]
						FWHM_G_0           = lw_sgma2fwhm(popt_0[2])
						CTRE_G_0_E         = perr_0[0]
						AMPL_G_0_E         = perr_0[1]
						SGMA_G_0_E         = perr_0[2]
						W_0                = integrate.quad(lambda x: popt_0[1]*np.exp(-((x)**2)/(2*popt_0[2]**2)), -np.inf, np.inf)
						EW_0               = np.round(abs(np.asarray(W_0[0])),3)
						EWE_0              = np.round(abs(np.asarray(W_0[1])),10)
						#print colored('OK 0 fit','cyan')
					except (RuntimeError,ValueError):
						popt_0, pcov_0     = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
						perr_0             = [999999.99999,999999.99999,999999.99999]
						CTRE_G_0           = 999999.99999
						AMPL_G_0           = 999999.99999
						SGMA_G_0           = 999999.99999
						FWHM_G_0           = 999999.99999
						CTRE_G_0_E         = perr_0[0]
						AMPL_G_0_E         = perr_0[1]
						SGMA_G_0_E         = perr_0[2]
						EW_0               = 999999.99999
						EWE_0              = 999999.99999

					if fit_vls_hdr == True:
						Header_Add(specfile_glx,str(LINES[5][lines])+'_CGF0',float(CTRE_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_AGF0',float(AMPL_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_FGF0',float(FWHM_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WGF0',float(EW_0)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EGF0',float(EWE_0)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct')
					else:
						print
						print colored('The fit values will not be added to the fits headers!','magenta')
						print
					try:
						popt_O, pcov_O     = opt.curve_fit(func_1D_Gaussian_O, lambda_glx[mask_ft],inten_glx[mask_ft],
												p0=initial_guess_O,
												#bounds=([X0_f2DG-(X0_f2DG*LINES[7][lines]),A_f2DG-0.001,-np.inf,-np.inf], #[lmb_min_lim_line,A_f2DG-0.001,-np.inf],
														#[X0_f2DG+(X0_f2DG*LINES[7][lines]),A_f2DG      , np.inf, np.inf]))#[lmb_max_lim_line,A_f2DG      ,np.inf]))
												bounds=([X0_f2DG-(X0_f2DG*LINES[7][lines]),A_f2DG  - (A_f2DG*LINES[10][lines]),-np.inf], #[lmb_min_lim_line,A_f2DG-0.001,-np.inf],
														[X0_f2DG+(X0_f2DG*LINES[7][lines]),A_f2DG  + (A_f2DG*LINES[10][lines]), np.inf]))#[lmb_max_lim_line,A_f2DG      ,np.inf]))

						perr_O             = np.sqrt(np.diag(pcov_O))
						data_fitted_O      = func_1D_Gaussian_O((lambda_glx[mask_ft]), *popt_O)

						CTRE_G_O           = popt_O[0]
						AMPL_G_O           = popt_O[1]
						SGMA_G_O           = popt_O[2]
						OFST_G_O           = popt_O[3]
						FWHM_G_O           = lw_sgma2fwhm(popt_O[2])
						CTRE_G_O_E         = perr_O[0]
						AMPL_G_O_E         = perr_O[1]
						SGMA_G_O_E         = perr_O[2]
						OFST_G_O_E         = perr_O[3]
						W_O                = integrate.quad(lambda x: popt_O[1]*np.exp(-((x)**2)/(2*popt_O[2]**2)), -np.inf, np.inf)
						EW_O               = np.round(abs(np.asarray(W_O[0])),3)
						EWE_O              = np.round(abs(np.asarray(W_O[1])),10)

						inten_glx[mask_ft] = inten_glx[mask_ft] - popt_O[3]
						A_f2DG             = -(1-(min(inten_glx[mask_ft])))
						initial_guess_C    = (X0_f2DG,A_f2DG,SIGMA_f2DG)#,max(inten_glx[mask_ft])-1)
						popt_C, pcov_C     = opt.curve_fit(func_1D_Gaussian, lambda_glx[mask_ft],inten_glx[mask_ft], p0=initial_guess_C,
															#bounds=([X0_f2DG-(X0_f2DG*LINES[7][lines]),A_f2DG-0.001,-np.inf], #[lmb_min_lim_line,A_f2DG-0.001,-np.inf],
																	#[X0_f2DG+(X0_f2DG*LINES[7][lines]),A_f2DG      , np.inf]))#[lmb_max_lim_line,A_f2DG      ,np.inf]))
															bounds=([X0_f2DG-(X0_f2DG*LINES[7][lines]),A_f2DG  - (A_f2DG*LINES[10][lines]),-np.inf], #[lmb_min_lim_line,A_f2DG-0.001,-np.inf],
																	[X0_f2DG+(X0_f2DG*LINES[7][lines]),A_f2DG  + (A_f2DG*LINES[10][lines]), np.inf]))#[lmb_max_lim_line,A_f2DG      ,np.inf]))

						perr_C             = np.sqrt(np.diag(pcov_C))		
						data_fitted_C      = func_1D_Gaussian((lambda_glx[mask_ft]), *popt_C)
						CTRE_G_C           = popt_C[0]
						AMPL_G_C           = popt_C[1]
						SGMA_G_C           = abs(popt_C[2])
						FWHM_G_C           = lw_sgma2fwhm(popt_C[2])
						CTRE_G_C_E         = perr_C[0]
						AMPL_G_C_E         = perr_C[1]
						SGMA_G_C_E         = perr_C[2]
						W_C                = integrate.quad(lambda x: popt_C[1]*np.exp(-((x)**2)/(2*popt_C[2]**2)), -np.inf, np.inf)

						EW_C               = np.round(abs(np.asarray(W_C[0])),3)
						EWE_C              = np.round(abs(np.asarray(W_C[1])),10)
						
						AMPL_SNR           = AMPL_G_C
						CTRE_SNR           = CTRE_G_C
						SGMA_SNR           = abs(SGMA_G_C)
						#print colored('OK O C fit','cyan')
					except (RuntimeError,ValueError):
						print colored('RuntimeError','cyan')
						popt_C, pcov_C     = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
						perr_C             = [999999.99999,999999.99999,999999.99999]
						CTRE_G_C           = 999999.99999
						AMPL_G_C           = 999999.99999
						SGMA_G_C           = 999999.99999
						FWHM_G_C           = 999999.99999
						CTRE_G_C_E         = 999999.99999
						AMPL_G_C_E         = 999999.99999
						SGMA_G_C_E         = 999999.99999
						EW_C               = 999999.99999
						EWE_C              = 999999.99999

						popt_O, pcov_O     = [999999.99999,999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999,999999.99999]
						perr_O             = [999999.99999,999999.99999,999999.99999,999999.99999]
						CTRE_G_O           = 999999.99999
						AMPL_G_O           = 999999.99999
						SGMA_G_O           = 999999.99999
						OFST_G_O           = 999999.99999
						FWHM_G_O           = 999999.99999
						CTRE_G_O_E         = 999999.99999
						AMPL_G_O_E         = 999999.99999
						SGMA_G_O_E         = 999999.99999
						OFST_G_O_E         = 999999.99999
						EW_O               = 999999.99999
						EWE_O              = 999999.99999

						AMPL_SNR           = 999999.99999
						CTRE_SNR           = 999999.99999
						SGMA_SNR           = 999999.99999				
						#logger.error("Error in Gaussian fit   : "+str(LINES[4][lines] + ' ' + str(LINES[3][lines]) ))
					######################CHI-2######################
					data_fitted_C    = func_1D_Gaussian((lambda_glx[mask_pl]), *popt_C)
					g_exp_mxr        = data_fitted_C
					g_obs_mxr        = (lambda_glx[mask_pl])

					if Cube2bPlot_1D_Err == None:
						FLX_ERR_STD   = np.std(inten_glx[mask_pl])
						chisqr_C      = sum((g_obs_mxr-g_exp_mxr)**2/(FLX_ERR_STD**2))#*(1/float(len(XAXIS)-1))
						redchi_C      = chisqr_C/float(len(g_exp_mxr)-1)
					elif Cube2bPlot_1D_Err != None:
						chisqr_C      = sum((g_obs_mxr-g_exp_mxr)**2/(FLX_ERR_STD**2))#*(1/float(len(XAXIS)-1))
						redchi_C      = chisqr_C/float(len(g_exp_mxr)-1)
					######################CHI-2######################
					if fit_vls_hdr == True:
						Header_Add(specfile_glx,'BSF_FCT',str(fit_fnct)                       ,header_comment = 'Fit function')
						Header_Add(specfile_glx,'BSF_MTH',str(fit_type)                       ,header_comment = 'Fit method')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_CGAO',float(CTRE_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Offst' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_AGAO',float(AMPL_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Offst' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_FGAO',float(FWHM_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Offst' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WGAO',float(EW_O)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Offst' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EGAO',float(EWE_O)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Offst' + str(fit_type))

						Header_Add(specfile_glx,str(LINES[5][lines])+'_CGAC',float(CTRE_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_AGAC',float(AMPL_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_SGAC',float(SGMA_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_FGAC',float(FWHM_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WGAC',float(EW_C)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EGAC',float(EWE_C)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))

						Header_Add(specfile_glx,str(LINES[5][lines])+'_CAEC',float(CTRE_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_AAEC',float(AMPL_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_SAEC',float(SGMA_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))

						Header_Add(specfile_glx,str(LINES[5][lines])+'_CHGA',float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 1GF' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_CRGA',float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 Reduced 1GF' + str(fit_type))
					else:
						print
						print colored('The fit values will not be added to the fits headers!','magenta')
						print
				elif 'DblF' not in LINES[3][lines] and fit_fnct=='gauss'   and fit_type == 'lmfit' and uft_lne_vls == False:
					fit_typ = 'G'
					#GAUSSIAN FIT
					MSK_NTMS=2.5
					print
					print colored('1D Gaussian Fit Mode Choosen: Lmfit (Offset)','cyan')
					print
					from lmfit import Model

					lmb_min_lim_line_ft = (LINES[0][lines]-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
					lmb_max_lim_line_ft = (LINES[0][lines]+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]

					###################################
					#############ORGINAL###############
					###################################
					#lmb_min_lim_line    = (LINES[0][lines]-LINES[8][lines])*(1+z_glx_Ps) - LINES[2][lines]#- 20#LINES[2][lines] - 10
					#lmb_max_lim_line    = (LINES[0][lines]+LINES[8][lines])*(1+z_glx_Ps) + LINES[2][lines]#+ 20#LINES[2][lines] + 10
					###################################
					#############ORGINAL###############
					###################################

					lmb_min_lim_line    = (LINES[0][lines]-LINES[8][lines])*(1+z_glx_Ps) - MSK_NTMS*LINES[2][lines]#- 20#LINES[2][lines] - 10
					lmb_max_lim_line    = (LINES[0][lines]+LINES[8][lines])*(1+z_glx_Ps) + MSK_NTMS*LINES[2][lines]#+ 20#LINES[2][lines] + 10

					mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
					mask_ft    = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
					label_glx  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function

					X0_f2DG    = (LINES[0][lines]+LINES[8][lines])
					SIGMA_f2DG = LINES[1][lines]
					A_f2DG     = -(1-(min(inten_glx[mask_ft])))

					max_val    = -(1-min(inten_glx[mask_ft]))
					lambda_max = (lambda_glx[np.where(inten_glx==min(inten_glx[mask_ft]))[0]][0])					

					if pre_off_plt == True:
						plt.step(lambda_glx[mask_pl], inten_glx[mask_pl],
								where='mid',lw=3.0,alpha=0.5,linestyle=':',color='gray',
								label='Original Spectrum')
					elif pre_off_plt == False:
						pass

					##########COMMENT ADD HEADER###########
					hsw_nmb_med = np.ceil(np.median(inten_glx_hst[mask_ft]))
					hsw_nmb_med = np.ceil(np.median(inten_glx_hsw[mask_ft]))
					Header_Add(specfile_glx,str(LINES[5][lines])+'_NHT',float(hsw_nmb_med) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + '# glxs stk hst Fit Spec Reg (med)')
					Header_Add(specfile_glx,str(LINES[5][lines])+'_NHW',float(hsw_nmb_med) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + '# glxs stk hsw Fit Spec Reg (med)')
					print specfile_glx,str(LINES[5][lines])+'_NHT',float(hsw_nmb_med) 
					print specfile_glx,str(LINES[5][lines])+'_NHW',float(hsw_nmb_med)
					##########COMMENT ADD HEADER###########

					initial_guess_O   = (X0_f2DG,A_f2DG,SIGMA_f2DG,max(inten_glx[mask_ft])-1)
					initial_guess_0   = (X0_f2DG,A_f2DG,SIGMA_f2DG)
					try:
						gmodel_0           = Model(func_1D_Gaussian)
						gmodel_0.set_param_hint('X_0'  , value=X0_f2DG   , min=X0_f2DG - (X0_f2DG*LINES[7][lines]) , max=X0_f2DG + (X0_f2DG*LINES[7][lines]))
						gmodel_0.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG  - (A_f2DG*LINES[10][lines]) , max=A_f2DG  + (A_f2DG*LINES[10][lines]))#min=A_f2DG-0.001, max=A_f2DG)
						gmodel_0.set_param_hint('SIGMA', value=SIGMA_f2DG)
						pars_0             = gmodel_0.make_params()							
						result_0           = gmodel_0.fit(inten_glx[mask_ft],pars_0,
												X=lambda_glx[mask_ft],
												X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,
												nan_policy = 'omit')
						CTRE_G_0           = result_0.params['X_0'].value
						AMPL_G_0           = result_0.params['A'].value
						SGMA_G_0           = abs(result_0.params['SIGMA'].value)
						FWHM_G_0           = lw_sgma2fwhm(SGMA_G_0)
						W_0                = integrate.quad(lambda x: AMPL_G_0*np.exp(-((x)**2)/(2*SGMA_G_0**2)), -np.inf, np.inf)
						EW_0               = np.round(abs(np.asarray(W_0[0])),3)
						EWE_0              = np.round(abs(np.asarray(W_0[1])),10)
						data_fitted_0      = func_1D_Gaussian((lambda_glx[mask_ft]), CTRE_G_0,AMPL_G_0,SGMA_G_0)

						CTRE_G_0_E         = result_0.params['X_0'].stderr
						AMPL_G_0_E         = result_0.params['A'].stderr
						SGMA_G_0_E         = result_0.params['SIGMA'].stderr

						CTRE_G_0_cor       = result_0.params['X_0'].correl
						AMPL_G_0_cor       = result_0.params['A'].correl
						SGMA_G_0_cor       = result_0.params['SIGMA'].correl

						chisqr_0           = result_0.chisqr
						redchi_0           = result_0.redchi
					except (RuntimeError,ValueError,TypeError):
						popt_0, pcov_0     = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
						perr_0             = [999999.99999,999999.99999,999999.99999]
						CTRE_G_0           = 999999.99999
						AMPL_G_0           = 999999.99999
						SGMA_G_0           = 999999.99999
						FWHM_G_0           = 999999.99999
						EW_0               = 999999.99999
						EWE_0              = 999999.99999

						CTRE_G_0_E         = 999999.99999
						AMPL_G_0_E         = 999999.99999
						SGMA_G_0_E         = 999999.99999

						CTRE_G_0_cor       = 999999.99999
						AMPL_G_0_cor       = 999999.99999
						SGMA_G_0_cor       = 999999.99999

						chisqr_0           = 999999.99999
						redchi_0           = 999999.99999

					##########COMMENT ADD HEADER###########
					if fit_vls_hdr == True:
						Header_Add(specfile_glx,str(LINES[5][lines])+'_CGF0',float(CTRE_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_AGF0',float(AMPL_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_FGF0',float(FWHM_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WGF0',float(EW_0)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EGF0',float(EWE_0)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct')
					else:
						print
						print colored('The fit values will not be added to the fits headers!','magenta')
						print
					##########COMMENT ADD HEADER###########
					try:
						gmodel_O           = Model(func_1D_Gaussian_O)
						gmodel_O.set_param_hint('X_0'   , value=X0_f2DG   , min=X0_f2DG-(X0_f2DG*LINES[7][lines]), max=X0_f2DG+(X0_f2DG*LINES[7][lines]))
						#gmodel_O.set_param_hint('A'     , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
						gmodel_O.set_param_hint('A'     , value=A_f2DG    , min=A_f2DG  - (A_f2DG*LINES[10][lines]) , max=A_f2DG  + (A_f2DG*LINES[10][lines]))#min=A_f2DG-0.001, max=A_f2DG)
						gmodel_O.set_param_hint('SIGMA' , value=SIGMA_f2DG)
						gmodel_O.set_param_hint('OFFSET', value=max(inten_glx[mask_ft])-1)
						pars_O             = gmodel_O.make_params()

						result_O           = gmodel_O.fit(inten_glx[mask_ft],pars_O,
												X=lambda_glx[mask_ft],X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,OFFSET=max(inten_glx[mask_ft])-1,
												nan_policy = 'omit')
						CTRE_G_O           = result_O.params['X_0'].value
						AMPL_G_O           = result_O.params['A'].value
						SGMA_G_O           = abs(result_O.params['SIGMA'].value)
						OFST_G_O           = abs(result_O.params['OFFSET'].value)
						FWHM_G_O           = lw_sgma2fwhm(SGMA_G_O)
						W_O                = integrate.quad(lambda x: AMPL_G_O*np.exp(-((x)**2)/(2*SGMA_G_O**2)), -np.inf, np.inf)
						EW_O               = np.round(abs(np.asarray(W_O[0])),3)
						EWE_O              = np.round(abs(np.asarray(W_O[1])),10)
						data_fitted_O      = func_1D_Gaussian_O((lambda_glx[mask_ft]),CTRE_G_O,AMPL_G_O,SGMA_G_O,OFST_G_O)

						CTRE_G_O_E         = result_O.params['X_0'].stderr
						AMPL_G_O_E         = result_O.params['A'].stderr
						SGMA_G_O_E         = result_O.params['SIGMA'].stderr

						CTRE_G_O_cor       = result_O.params['X_0'].correl
						AMPL_G_O_cor       = result_O.params['A'].correl
						SGMA_G_O_cor       = result_O.params['SIGMA'].correl

						chisqr_O           = result_O.chisqr
						redchi_O           = result_O.redchi


						inten_glx[mask_ft] = inten_glx[mask_ft] - OFST_G_O #MENOS OFFSET
						A_f2DG             = -(1-(min(inten_glx[mask_ft])))
						initial_guess_C    = (X0_f2DG,A_f2DG,SIGMA_f2DG)#,max(inten_glx[mask_ft])-1)

						gmodel_C           = Model(func_1D_Gaussian)
						gmodel_C.set_param_hint('X_0'  , value=X0_f2DG   , min=X0_f2DG-(X0_f2DG*LINES[7][lines]), max=X0_f2DG+(X0_f2DG*LINES[7][lines]))
						#gmodel_C.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
						gmodel_C.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG  - (A_f2DG*LINES[10][lines]) , max=A_f2DG  + (A_f2DG*LINES[10][lines]))#min=A_f2DG-0.001, max=A_f2DG)
						gmodel_C.set_param_hint('SIGMA', value=SIGMA_f2DG)
						pars_C             = gmodel_C.make_params()
						result_C           = gmodel_C.fit(inten_glx[mask_ft],pars_C,
												X=lambda_glx[mask_ft],X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,
												nan_policy = 'omit')
						CTRE_G_C           = result_C.params['X_0'].value
						AMPL_G_C           = result_C.params['A'].value
						SGMA_G_C           = abs(result_C.params['SIGMA'].value)
						FWHM_G_C           = lw_sgma2fwhm(SGMA_G_C)
						W_C                = integrate.quad(lambda x: AMPL_G_C*np.exp(-((x)**2)/(2*SGMA_G_C**2)), -np.inf, np.inf)

						EW_C               = np.round(abs(np.asarray(W_C[0])),3)
						EWE_C              = np.round(abs(np.asarray(W_C[1])),10)
						data_fitted_C      = func_1D_Gaussian((lambda_glx[mask_ft]), CTRE_G_C,AMPL_G_C,SGMA_G_C)

						CTRE_G_C_E         = result_C.params['X_0'].stderr
						AMPL_G_C_E         = result_C.params['A'].stderr
						SGMA_G_C_E         = result_C.params['SIGMA'].stderr

						CTRE_G_C_cor       = result_C.params['X_0'].correl
						AMPL_G_C_cor       = result_C.params['A'].correl
						SGMA_G_C_cor       = result_C.params['SIGMA'].correl

						AMPL_SNR           = AMPL_G_C
						CTRE_SNR           = CTRE_G_C
						SGMA_SNR           = abs(SGMA_G_C)

						if CTRE_G_C_E == None:
							CTRE_G_C_E = 999999.99999
						else:
							pass
						if AMPL_G_C_E == None:
							AMPL_G_C_E = 999999.99999
						else:
							pass
						if SGMA_G_C_E == None:
							SGMA_G_C_E = 999999.99999
						else:
							pass
						if CTRE_G_C_cor == None:
							CTRE_G_C_cor = 999999.99999
						else:
							pass
						if AMPL_G_C_cor == None:
							AMPL_G_C_cor = 999999.99999
						else:
							pass
						if SGMA_G_C_cor == None:
							SGMA_G_C_cor = 999999.99999
						else:
							pass
						chisqr_C           = result_C.chisqr
						redchi_C           = result_C.redchi
					except (RuntimeError,ValueError,TypeError):
						print colored('RuntimeError','cyan')
						popt_C, pcov_C  = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
						perr_C          = [999999.99999,999999.99999,999999.99999]
						CTRE_G_C        = 999999.99999
						AMPL_G_C        = 999999.99999
						SGMA_G_C        = 999999.99999
						FWHM_G_C        = 999999.99999
						EW_C            = 999999.99999
						EWE_C           = 999999.99999

						CTRE_G_C_E      = 999999.99999
						AMPL_G_C_E      = 999999.99999
						SGMA_G_C_E      = 999999.99999
						CTRE_G_C_cor    = 999999.99999
						AMPL_G_C_cor    = 999999.99999
						SGMA_G_C_cor    = 999999.99999
						chisqr_C        = 999999.99999
						redchi_C        = 999999.99999

						popt_O, pcov_O  = [999999.99999,999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999,999999.99999]
						perr_O          = [999999.99999,999999.99999,999999.99999,999999.99999]
						CTRE_G_O        = 999999.99999
						AMPL_G_O        = 999999.99999
						SGMA_G_O        = 999999.99999
						OFST_G_O        = 999999.99999
						FWHM_G_O        = 999999.99999
						EW_O            = 999999.99999
						EWE_O           = 999999.99999

						CTRE_G_O_E      = 999999.99999
						AMPL_G_O_E      = 999999.99999
						SGMA_G_O_E      = 999999.99999
						CTRE_G_O_cor    = 999999.99999
						AMPL_G_O_cor    = 999999.99999
						SGMA_G_O_cor    = 999999.99999
						OFST_G_O_cor    = 999999.99999
						chisqr_O        = 999999.99999
						redchi_O        = 999999.99999

						AMPL_SNR        = 999999.99999
						CTRE_SNR        = 999999.99999
						SGMA_SNR        = 999999.99999
					print
					print colored(specfile_glx,'cyan')
					print
					print str(LINES[0][lines])+'-'+str(LINES[3][lines])
					print
					print str(LINES[5][lines])+'_CGLC',float(CTRE_G_C)  
					print str(LINES[5][lines])+'_AGLC',float(AMPL_G_C)  
					print str(LINES[5][lines])+'_SGLC',float(SGMA_G_C)  
					print str(LINES[5][lines])+'_FGLC',float(FWHM_G_C)  
					print str(LINES[5][lines])+'_WGLC',float(EW_C)      
					print str(LINES[5][lines])+'_EGLC',float(EWE_C)
					print
					print
					##########COMMENT ADD HEADER###########
					if fit_vls_hdr == True:
						Header_Add(specfile_glx,'BSF_FCT',str(fit_fnct)                       ,header_comment = 'Fit function')
						Header_Add(specfile_glx,'BSF_MTH',str(fit_type)                       ,header_comment = 'Fit method')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_CGLO',float(CTRE_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Offst' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_AGLO',float(AMPL_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Offst' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_FGLO',float(FWHM_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Offst' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WGLO',float(EW_O)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Offst' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EGLO',float(EWE_O)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Offst' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_OFSO',float(OFST_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ofst 1GF Offst' + str(fit_type))
						##
						Header_Add(specfile_glx,str(LINES[5][lines])+'_CGLC',float(CTRE_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_AGLC',float(AMPL_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_SGLC',float(SGMA_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_FGLC',float(FWHM_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WGLC',float(EW_C)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EGLC',float(EWE_C)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
						##
						Header_Add(specfile_glx,str(LINES[5][lines])+'_CLEC',float(CTRE_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_ALEC',float(AMPL_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_SLEC',float(SGMA_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))
						##
						Header_Add(specfile_glx,str(LINES[5][lines])+'_CHGL',float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 1GF' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_CRGL',float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 Reduced 1GF' + str(fit_type))
					else:
						print
						print colored('The fit values will not be added to the fits headers!','magenta')
						print
					##########COMMENT ADD HEADER###########
				elif 'DblF' not in LINES[3][lines] and fit_fnct=='lorentz' and fit_type == 'scipy' and uft_lne_vls == False:
					##LORENTZIAN FIT
					MSK_NTMS=2.5
					fit_typ = 'L'
					print
					print colored('1D Lorentz Fit Mode Choosen: scipy (Offset)','cyan')
					print

					lmb_min_lim_line_ft = (LINES[0][lines]-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
					lmb_max_lim_line_ft = (LINES[0][lines]+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]

					###################################
					#############ORGINAL###############
					###################################
					#lmb_min_lim_line    = (LINES[0][lines]-LINES[8][lines])*(1+z_glx_Ps) - LINES[2][lines]#- 20#LINES[2][lines] - 10
					#lmb_max_lim_line    = (LINES[0][lines]+LINES[8][lines])*(1+z_glx_Ps) + LINES[2][lines]#+ 20#LINES[2][lines] + 10
					###################################
					#############ORGINAL###############
					###################################

					lmb_min_lim_line    = (LINES[0][lines]-LINES[8][lines])*(1+z_glx_Ps) - MSK_NTMS*LINES[2][lines]#- 20#LINES[2][lines] - 10
					lmb_max_lim_line    = (LINES[0][lines]+LINES[8][lines])*(1+z_glx_Ps) + MSK_NTMS*LINES[2][lines]#+ 20#LINES[2][lines] + 10

					mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
					mask_ft    = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
					label_glx  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function

					X0_f2DG    = (LINES[0][lines]+LINES[8][lines])
					SIGMA_f2DG = LINES[1][lines]
					A_f2DG     = -(1-(min(inten_glx[mask_ft])))

					max_val    = -(1-min(inten_glx[mask_ft]))
					lambda_max = (lambda_glx[np.where(inten_glx==min(inten_glx[mask_ft]))[0]][0])

					plt.step(lambda_glx[mask_pl], inten_glx[mask_pl],
							colors[index],
							where='mid',lw=3.0,alpha=0.5,linestyle=':',color='gray',
							label='Original Spectrum')

					initial_guess_O   = (X0_f2DG,A_f2DG,SIGMA_f2DG,max(inten_glx[mask_ft])-1)
					initial_guess_0   = (X0_f2DG,A_f2DG,SIGMA_f2DG)
					initial_guess_0   = (X0_f2DG,1.0,SIGMA_f2DG*0.5)

					initial_guess   = initial_guess_0
					try:
						popt_0, pcov_0  = opt.curve_fit(func_Lorentzian,
												lambda_glx[mask_ft],inten_glx[mask_ft],
												p0=initial_guess_0)#,bounds=([0.8,-np.inf,-np.inf],[1.0,np.inf,np.inf]))
						perr_0        = np.sqrt(np.diag(pcov_0))
						data_fitted_0 = func_Lorentzian((lambda_glx[mask_ft]), *popt_0)
						CTRE_L_0      = popt_0[0]
						FWHM_L_0      = 2*(popt_0[1])
						W_0           = integrate.quad(lambda x: (1 / popt_0[1]*np.pi) * ((popt_0[1]**2) / ((x-popt_0[0])**2 + popt_0[1] **2)), -np.inf, np.inf)
						EW_0          = np.round(abs(np.asarray(W[0])),3)
						EWE_0         = np.round(abs(np.asarray(W[1])),10)
						CTRE_L_0_E    = perr_0[0]
						FWHM_L_0_E    = 2*(perr_0[1])
					except RuntimeError:
						print RuntimeError
						popt_0, pcov_0 = [999999.99999,999999.99999],[999999.99999,999999.99999]
						perr_0         = [999999.99999,999999.99999]

						CTRE_L_0       = 999999.99999
						FWHM_L_0       = 999999.99999
						EW_0           = 999999.99999
						EWE_0          = 999999.99999



					popt_hdr = [str(LINES[3][lines])+'_LFL',str(LINES[3][lines])+'_GFL']
					#pcv1_hdr = [str(LINES[3][lines])+'_AAC',str(LINES[3][lines])+'_ALC']
					#pcv2_hdr = [str(LINES[3][lines])+'_SAC',str(LINES[3][lines])+'_SLC']
					perr_hdr = [str(LINES[3][lines])+'_LEL',str(LINES[3][lines])+'_GEL']

					if fit_vls_hdr == True:
						[Header_Add(specfile,str(name),float(val)) for name,val in zip(popt_hdr,popt)]
						[Header_Add(specfile,str(name),float(val)) for name,val in zip(perr_hdr,perr)]
						
						Header_Add(specfile,str(LINES[3][lines])+'_FWG',float(FWHM_G))
						Header_Add(specfile,str(LINES[3][lines])+'_EWG',float(EW))
						Header_Add(specfile,str(LINES[3][lines])+'_WEG',float(EWE))
					else:
						print
						print colored('The fit values will not be added to the fits headers!','magenta')
						print
				elif 'DblF' not in LINES[3][lines] and fit_fnct=='voigt'   and fit_type == 'scipy' and uft_lne_vls == False:
					#VOIGT FIT
					MSK_NTMS=4
					fit_typ = 'V'
					print
					print colored('1D Voigt Fit Mode Choosen: scipy (Offset)','cyan')
					print

					lmb_min_lim_line_ft = (LINES[0][lines]-LINES[8][lines]) - MSK_NTMS*LINES[1][lines]#IT WAS LINE CTR - LINE OFFSET
					lmb_max_lim_line_ft = (LINES[0][lines]+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]

					###################################
					#############ORGINAL###############
					###################################
					#lmb_min_lim_line    = (LINES[0][lines]-LINES[8][lines])*(1+z_glx_Ps) - LINES[2][lines]#- 20#LINES[2][lines] - 10
					#lmb_max_lim_line    = (LINES[0][lines]+LINES[8][lines])*(1+z_glx_Ps) + LINES[2][lines]#+ 20#LINES[2][lines] + 10
					###################################
					#############ORGINAL###############
					###################################

					lmb_min_lim_line    = (LINES[0][lines]-LINES[8][lines])*(1+z_glx_Ps) - MSK_NTMS*LINES[2][lines]#- 20#LINES[2][lines] - 10
					lmb_max_lim_line    = (LINES[0][lines]+LINES[8][lines])*(1+z_glx_Ps) + MSK_NTMS*LINES[2][lines]#+ 20#LINES[2][lines] + 10

					mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
					mask_ft    = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
					label_glx  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function

					X0_f2DG    = (LINES[0][lines]+LINES[8][lines])
					SIGMA_f2DG = LINES[1][lines]
					A_f2DG     = -(1-(min(inten_glx[mask_ft])))

					max_val    = -(1-min(inten_glx[mask_ft]))
					lambda_max = (lambda_glx[np.where(inten_glx==min(inten_glx[mask_ft]))[0]][0])

					plt.step(lambda_glx[mask_pl], inten_glx[mask_pl],
							colors[index],
							where='mid',lw=3.0,alpha=0.5,linestyle=':',color='gray',
							label='Original Spectrum')

					initial_guess_O   = (X0_f2DG,1.0,SIGMA_f2DG*0.5,max(inten_glx[mask_ft])-1)
					initial_guess_0   = (X0_f2DG,SIGMA_f2DG*np.sqrt(2 * np.log(2)),0.5)
					initial_guess     = initial_guess_0

					try:
						popt_0, pcov_0  = opt.curve_fit(func_Voigt,
														lambda_glx[mask_ft],inten_glx[mask_ft], 
														p0=initial_guess_0,
														#bounds=([lmb_min_lim_line,-np.inf,-np.inf],
																#[lmb_max_lim_line,np.inf,np.inf]),
														#bounds=([X0_f2DG-(X0_f2DG*LINES[7][lines]),-np.inf,-np.inf],
																#[X0_f2DG+(X0_f2DG*LINES[7][lines]), np.inf, np.inf]))
														bounds=([X0_f2DG-(X0_f2DG*LINES[7][lines]),A_f2DG  - (A_f2DG*LINES[10][lines]),-np.inf], #[lmb_min_lim_line,A_f2DG-0.001,-np.inf],
																[X0_f2DG+(X0_f2DG*LINES[7][lines]),A_f2DG  + (A_f2DG*LINES[10][lines]), np.inf]))#[lmb_max_lim_line,A_f2DG      ,np.inf]))


						perr_0          = np.sqrt(np.diag(pcov_0))
						data_fitted_0   = func_Voigt((lambda_glx[mask_ft]), *popt_0)

						CTRE_V_0        = popt_0[0]
						ALPH_V_0        = popt_0[1]
						GAMA_V_0        = popt_0[2]
						FWHM_G_V_0      = 2 * popt_0[1]
						FWHM_L_V_0      = 2 * popt_0[2]
						FWHM_V_0        = 0.5346 * FWHM_L_V_0 + np.sqrt((0.2166*FWHM_G_V_0)**2 + FWHM_L_V_0**2)
						
						W_V_0           = integrate.quad(lambda x: popt_0[1]*np.exp(-((x)**2)/(2*popt_0[2]**2)), -np.inf, np.inf)
						EW_V_0          = np.asarray(W_V_0[0])
						EWE_V_0         = np.asarray(W_V_0[1])

						AMPL_SNR        = max(data_fitted_0)
						CTRE_SNR        = CTRE_V_0
						SGMA_SNR        = abs(ALPH_V_0/np.sqrt(2 * np.log(2)))

						#logger.error("Voigt fit OK            : "+str(LINES[4][lines] + ' ' + str(LINES[3][lines]) ))
					except RuntimeError:
						#print RuntimeError
						popt_0, pcov_0  = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
						perr_0          = [999999.99999,999999.99999,999999.99999]

						SIGMA_V_0       = 999999.99999
						CTRE_V_0        = 999999.99999
						FWHM_G_V_0      = 999999.99999
						FWHM_L_V_0      = 999999.99999
						FWHM_V_0        = 999999.99999

						EW_V_0          = 999999.99999
						EWE_V_0         = 999999.99999

					if fit_vls_hdr == True:
						Header_Add(specfile_glx,'BSF_FCT',str(fit_fnct)                      ,header_comment = 'Fit function')
						Header_Add(specfile_glx,'BSF_MTH',str(fit_type)                      ,header_comment = 'Fit method')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_CVF0',float(CTRE_V_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1VF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_AVF0',float(ALPH_V_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Alph 1VF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_GVF0',float(GAMA_V_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Gama 1VF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_FVF0',float(FWHM_V_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1VF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WVF0',float(EW_V_0)   ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1VF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EVF0',float(EWE_V_0)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1VF Crct')
					else:
						print
						print colored('The fit values will not be added to the fits headers!','magenta')
						print
					######################CHI-2######################
					data_fitted_C    = data_fitted_0#func_1D_Gaussian((lambda_glx[mask_pl]), *popt_C)
					g_exp_mxr        = data_fitted_C
					g_obs_mxr        = (lambda_glx[mask_pl])
					
					if Cube2bPlot_1D_Err == None:
						FLX_ERR_STD   = np.std(inten_glx[mask_pl])
						chisqr_V_0    = 999999.99999#sum((g_obs_mxr-g_exp_mxr)**2/(FLX_ERR_STD**2))#*(1/float(len(XAXIS)-1))
						redchi_V_0    = 999999.99999#chisqr_V_0#chisqr_V_0/float(len(g_exp_mxr)-1)
					elif Cube2bPlot_1D_Err != None:
						chisqr_V_0    = sum((g_obs_mxr-g_exp_mxr)**2/(FLX_ERR_STD**2))#*(1/float(len(XAXIS)-1))
						redchi_V_0    = chisqr_V_0#chisqr_V_0/float(len(g_exp_mxr)-1)
					######################CHI-2######################
					if fit_vls_hdr == True:
						Header_Add(specfile_glx,str(LINES[5][lines])+'_CHI2',float(chisqr_V_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Chi2')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_CH2R',float(redchi_V_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Chi2 Reduced')
					else:
						print
						print colored('The fit values will not be added to the fits headers!','magenta')
						print
					##
				elif 'DblF' not in LINES[3][lines] and fit_fnct=='voigt'   and fit_type == 'lmfit' and uft_lne_vls == False:
					#VOIGT FIT
					MSK_NTMS=4
					fit_typ = 'V'
					print
					print colored('1D Voigt Fit Mode Choosen: lmfit ','cyan')
					print
					from lmfit import Model
					lmb_min_lim_line_ft = (LINES[0][lines]-LINES[8][lines]) - MSK_NTMS*LINES[1][lines]#IT WAS LINE CTR - LINE OFFSET
					lmb_max_lim_line_ft = (LINES[0][lines]+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]

					###################################
					#############ORGINAL###############
					###################################
					#lmb_min_lim_line    = (LINES[0][lines]-LINES[8][lines])*(1+z_glx_Ps) - LINES[2][lines]#- 20#LINES[2][lines] - 10
					#lmb_max_lim_line    = (LINES[0][lines]+LINES[8][lines])*(1+z_glx_Ps) + LINES[2][lines]#+ 20#LINES[2][lines] + 10
					###################################
					#############ORGINAL###############
					###################################

					lmb_min_lim_line    = (LINES[0][lines]-LINES[8][lines])*(1+z_glx_Ps) - MSK_NTMS*LINES[2][lines]#- 20#LINES[2][lines] - 10
					lmb_max_lim_line    = (LINES[0][lines]+LINES[8][lines])*(1+z_glx_Ps) + MSK_NTMS*LINES[2][lines]#+ 20#LINES[2][lines] + 10

					mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
					mask_ft    = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
					label_glx  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function

					X0_f2DG    = (LINES[0][lines]+LINES[8][lines])
					SIGMA_f2DG = LINES[1][lines]
					A_f2DG     = -(1-(min(inten_glx[mask_ft])))

					max_val    = -(1-min(inten_glx[mask_ft]))
					lambda_max = (lambda_glx[np.where(inten_glx==min(inten_glx[mask_ft]))[0]][0])

					plt.step(lambda_glx[mask_pl], inten_glx[mask_pl],
							colors[index],
							where='mid',lw=3.0,alpha=0.5,linestyle=':',color='gray',
							label='Original Spectrum')

					initial_guess_O   = (X0_f2DG,1.0,SIGMA_f2DG*0.5,max(inten_glx[mask_ft])-1)
					initial_guess_0   = (X0_f2DG,SIGMA_f2DG*np.sqrt(2 * np.log(2)),0.5)
					initial_guess     = initial_guess_0

					try:
						gmodel_0        = Model(func_Voigt)
						result_0        = gmodel_0.fit(inten_glx[mask_ft],
												X=lambda_glx[mask_ft],X_0=X0_f2DG,ALPHA=SIGMA_f2DG*np.sqrt(2 * np.log(2)),GAMMA=0.5,
												nan_policy = 'omit')	
						CTRE_V_0        = result_0.params['X_0'].value
						ALPH_V_0        = result_0.params['ALPHA'].value
						GAMA_V_0        = abs(result_0.params['GAMMA'].value)
						data_fitted_0   = func_Voigt((lambda_glx[mask_ft]),X_0=CTRE_V_0,ALPHA=ALPH_V_0,GAMMA=GAMA_V_0)

						FWHM_G_V_0      = 2 * ALPH_V_0#popt_0[1]
						FWHM_L_V_0      = 2 * GAMA_V_0#popt_0[2]
						FWHM_V_0        = 0.5346 * FWHM_L_V_0 + np.sqrt((0.2166*FWHM_G_V_0)**2 + FWHM_L_V_0**2)
						
						W_V_0           = integrate.quad(lambda x:FWHM_G_V_0*np.exp(-((x)**2)/(2*FWHM_L_V_0**2)), -np.inf, np.inf)
						EW_V_0          = np.asarray(W_V_0[0])
						EWE_V_0         = np.asarray(W_V_0[1])

						CTRE_V_0_E      = result_0.params['X_0'].stderr
						ALPH_V_0_E      = result_0.params['ALPHA'].stderr
						GAMA_V_0_E      = result_0.params['GAMMA'].stderr

						CTRE_V_0_cor    = result_0.params['X_0'].correl
						ALPH_V_0_cor    = result_0.params['ALPHA'].correl
						GAMA_V_0_cor    = result_0.params['GAMMA'].correl

						chisqr_V_0      = result_0.chisqr
						redchi_V_0      = result_0.redchi

						AMPL_SNR        = max(data_fitted_0)
						CTRE_SNR        = CTRE_V_0
						SGMA_SNR        = abs(ALPH_V_0/np.sqrt(2 * np.log(2)))
						
					except RuntimeError:
						print RuntimeError
						popt_0, pcov_0  = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
						perr_0          = [999999.99999,999999.99999,999999.99999]

						SIGMA_V_0       = 999999.99999
						CTRE_V_0        = 999999.99999
						FWHM_G_V_0      = 999999.99999
						FWHM_L_V_0      = 999999.99999
						FWHM_V_0        = 999999.99999

						EW_V_0          = 999999.99999
						EWE_V_0         = 999999.99999

					if fit_vls_hdr == True:
						Header_Add(specfile_glx,'BSF_FCT',str(fit_fnct)                      ,header_comment = 'Fit function')
						Header_Add(specfile_glx,'BSF_MTH',str(fit_type)                      ,header_comment = 'Fit method')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_CVF0',float(CTRE_V_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1VF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_AVF0',float(ALPH_V_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Alph 1VF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_GVF0',float(GAMA_V_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Gama 1VF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_FVF0',float(FWHM_V_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1VF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WVF0',float(EW_V_0)   ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1VF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EVF0',float(EWE_V_0)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1VF Crct')

						Header_Add(specfile_glx,str(LINES[5][lines])+'_CH2V',float(chisqr_V_0),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Chi2 1VF')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_CHRV',float(redchi_V_0),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Chi2 Reduced 1VF')
					else:
						print
						print colored('The fit values will not be added to the fits headers!','magenta')
						print
				elif 'DblF' in LINES[3][lines] and fit_fnct=='gauss' and uft_lne_vls == True:
					print 'Line-fitting Cleaning Method. To be checked Fnc_Stk_Plt.py def(Plot_Idp_Spc_Lne) 11658!'
					quit()
					'''
					fit_typ = 'G'
					#GAUSSIAN FIT
					MSK_NTMS=2.5
					print 
					print colored('Double Line Fit (Ind)','yellow')
					print LINES[3][lines-1], LINES[0][lines-1] , LINES[1][lines-1]
					print LINES[3][lines]  , LINES[0][lines]   , LINES[1][lines]
					print LINES[3][lines-2], LINES[0][lines-2] , LINES[1][lines-2]

					# Now to fit the data create a new superposition with initial
					# guesses for the parameters:
					lmb_min_lim_line_ft_1 = LINES[0][lines-1] - MSK_NTMS*LINES[1][lines-1]
					lmb_max_lim_line_ft_1 = LINES[0][lines-1] + MSK_NTMS*LINES[1][lines-1]

					lmb_min_lim_line_ft_2 = LINES[0][lines-2] - MSK_NTMS*LINES[1][lines-2]
					lmb_max_lim_line_ft_2 = LINES[0][lines-2] + MSK_NTMS*LINES[1][lines-2]

					lmb_min_lim_line_ft_D = LINES[0][lines] - MSK_NTMS*LINES[1][lines]
					lmb_max_lim_line_ft_D = LINES[0][lines] + MSK_NTMS*LINES[1][lines]

					lmb_min_lim_line_1    = LINES[0][lines-1]*(1+z_glx_Ps) - LINES[2][lines-1]#- 20#LINES[2][lines] - 10
					lmb_max_lim_line_1    = LINES[0][lines-1]*(1+z_glx_Ps) + LINES[2][lines-1]#+ 20#LINES[2][lines] + 10

					lmb_min_lim_line_2    = LINES[0][lines-2]*(1+z_glx_Ps) - LINES[2][lines-2]#- 20#LINES[2][lines] - 10
					lmb_max_lim_line_2    = LINES[0][lines-2]*(1+z_glx_Ps) + LINES[2][lines-2]#+ 20#LINES[2][lines] + 10

					lmb_min_lim_line_D    = LINES[0][lines]*(1+z_glx_Ps) - LINES[2][lines]#- 20#LINES[2][lines] - 10
					lmb_max_lim_line_D    = LINES[0][lines]*(1+z_glx_Ps) + LINES[2][lines]#+ 20#LINES[2][lines] + 10

					lmb_min_lim_line_ft   = lmb_min_lim_line_ft_D
					lmb_max_lim_line_ft   = lmb_max_lim_line_ft_D

					mask_pl_1             = (lambda_glx >= lmb_min_lim_line_1)    & (lambda_glx <= lmb_max_lim_line_1)
					mask_ft_1             = (lambda_glx >= lmb_min_lim_line_ft_1) & (lambda_glx <= lmb_max_lim_line_ft_1)

					mask_pl_2             = (lambda_glx >= lmb_min_lim_line_2)    & (lambda_glx <= lmb_max_lim_line_2)
					mask_ft_2             = (lambda_glx >= lmb_min_lim_line_ft_2) & (lambda_glx <= lmb_max_lim_line_ft_2)

					mask_pl_D             = (lambda_glx >= lmb_min_lim_line_D)    & (lambda_glx <= lmb_max_lim_line_D)
					mask_ft_D             = (lambda_glx >= lmb_min_lim_line_ft_D) & (lambda_glx <= lmb_max_lim_line_ft_D)

					X0_f2DG_1             = LINES[0][lines-1]
					SIGMA_f2DG_1          = LINES[1][lines-1]
					A_f2DG_1              = -(1-(min(inten_glx[mask_ft_1])))

					X0_f2DG_2             = LINES[0][lines-2]
					SIGMA_f2DG_2          = LINES[1][lines-2]
					A_f2DG_2              = -(1-(min(inten_glx[mask_ft_2])))

					initial_guess_O_D     = (X0_f2DG_1,A_f2DG_1,SIGMA_f2DG_1,
											X0_f2DG_2,A_f2DG_2,SIGMA_f2DG_2,max(inten_glx[mask_ft_D])-1)
					initial_guess_0_D     = (X0_f2DG_1,A_f2DG_1,SIGMA_f2DG_1,
											X0_f2DG_2,A_f2DG_2,SIGMA_f2DG_2)
					try:
						popt_0_D, pcov_0_D  = opt.curve_fit(func_2_1D_Gaussian, lambda_glx[mask_ft_D],inten_glx[mask_ft_D], 
												p0=initial_guess_0_D,
												bounds=([
															X0_f2DG_1-(X0_f2DG_1*LINES[7][lines]),A_f2DG_1-0.001,-np.inf,
															X0_f2DG_2-(X0_f2DG_2*LINES[7][lines]),A_f2DG_2-0.001,-np.inf
														], #[lmb_min_lim_line,A_f2DG-0.001,-np.inf],
														[
															X0_f2DG_1+(X0_f2DG_1*LINES[7][lines]),A_f2DG_1      , np.inf,
															X0_f2DG_2+(X0_f2DG_2*LINES[7][lines]),A_f2DG_2      , np.inf
														]))#[lmb_max_lim_line,A_f2DG      ,np.inf]))
						data_fitted_0_D = func_2_1D_Gaussian((lambda_glx[mask_ft_D]), *popt_0_D)

						CTRE_G_0_D_1    = popt_0_D[0]
						AMPL_G_0_D_1    = popt_0_D[1]
						SGMA_G_0_D_1    = popt_0_D[2]

						CTRE_G_0_D_2    = popt_0_D[3]
						AMPL_G_0_D_2    = popt_0_D[4]
						SGMA_G_0_D_2    = popt_0_D[5]
						FWHM_G_0_D_1    = lw_sgma2fwhm(popt_0_D[2])
						FWHM_G_0_D_2    = lw_sgma2fwhm(popt_0_D[5])
						W_0_D           = 99#integrate.quad(lambda x: popt_0_D[1]*np.exp(-((x)**2)/(2*popt_0_D[2]**2)), -np.inf, np.inf)
						EW_0_D          = 99#np.round(abs(np.asarray(W_0_D[0])),3)
						EWE_0_D         = 99#np.round(abs(np.asarray(W_0_D[1])),10)
						#logger.error("Gaussian fit OK         : "+str(LINES[4][lines] + ' ' + str(LINES[3][lines]) ))
					except (RuntimeError,ValueError):
						#print RuntimeError
						popt_0_D            = [
												999999.99999,999999.99999,999999.99999,
												999999.99999,999999.99999,999999.99999]
						pcov_0_D            = [						
												999999.99999,999999.99999,999999.99999,
												999999.99999,999999.99999,999999.99999]
						perr_0_D            = [
												999999.99999,999999.99999,999999.99999,
												999999.99999,999999.99999,999999.99999]
						CTRE_G_0_D_1        = 999999.99999
						AMPL_G_0_D_1        = 999999.99999
						SGMA_G_0_D_1        = 999999.99999
						CTRE_G_0_D_2        = 999999.99999
						AMPL_G_0_D_2        = 999999.99999
						SGMA_G_0_D_2        = 999999.99999

						FWHM_G_0_D_1        = 999999.99999
						FWHM_G_0_D_2        = 999999.99999
						EW_0_D              = 999999.99999
						EWE_0_D             = 999999.99999
						#logger.error("Error in Gaussian fit   : "+str(LINES[4][lines] + ' ' + str(LINES[3][lines]) ))
					'''
					popt_0_D            = [
											999999.99999,999999.99999,999999.99999,
											999999.99999,999999.99999,999999.99999]
					pcov_0_D            = [						
											999999.99999,999999.99999,999999.99999,
											999999.99999,999999.99999,999999.99999]
					perr_0_D            = [
											999999.99999,999999.99999,999999.99999,
											999999.99999,999999.99999,999999.99999]
					CTRE_G_0_D_1        = 999999.99999
					AMPL_G_0_D_1        = 999999.99999
					SGMA_G_0_D_1        = 999999.99999
					CTRE_G_0_D_2        = 999999.99999
					AMPL_G_0_D_2        = 999999.99999
					SGMA_G_0_D_2        = 999999.99999

					FWHM_G_0_D_1        = 999999.99999
					FWHM_G_0_D_2        = 999999.99999
					EW_0_D              = 999999.99999
					EWE_0_D             = 999999.99999
					if fit_vls_hdr == True:
						Header_Add(specfile_glx,str(LINES[5][lines])+'_CGF0',float(CTRE_G_0_D) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_AGF0',float(AMPL_G_0_D) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_FGF0',float(FWHM_G_0_D) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WGF0',float(EW_0_D)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EGF0',float(EWE_0_D)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct')
					else:
						print
						print colored('The fit values will not be added to the fits headers!','magenta')
						print
					'''
					try:
						popt_O_D, pcov_O_D  = opt.curve_fit(func_2_1D_Gaussian_O, lambda_glx[mask_ft_D],inten_glx[mask_ft_D], 
												p0=initial_guess_O_D,
												bounds=([
															X0_f2DG_1-(X0_f2DG_1*LINES[7][lines]),A_f2DG_1-0.001,-np.inf,-np.inf,
															X0_f2DG_2-(X0_f2DG_2*LINES[7][lines]),A_f2DG_2-0.001,-np.inf,-np.inf
														], #[lmb_min_lim_line,A_f2DG-0.001,-np.inf],
														[
															X0_f2DG_1+(X0_f2DG_1*LINES[7][lines]),A_f2DG_1      , np.inf, np.inf,
															X0_f2DG_2+(X0_f2DG_2*LINES[7][lines]),A_f2DG_2      , np.inf, np.inf
																]))#[lmb_max_lim_line,A_f2DG      ,np.inf]))

						perr_O_D        = np.sqrt(np.diag(pcov_O_D))		
						data_fitted_O_D = func_2_1D_Gaussian_O((lambda_glx[mask_ft_D]), *popt_O_D)

						CTRE_G_O_D_1    = popt_O_D[0]
						AMPL_G_O_D_1    = popt_O_D[1]
						SGMA_G_O_D_1    = popt_O_D[2]
						CTRE_G_O_D_2    = popt_O_D[3]
						AMPL_G_O_D_2    = popt_O_D[4]
						SGMA_G_O_D_2    = popt_O_D[5]
						OFST_G_O_D      = popt_O_D[6]
						FWHM_G_O_D_1    = lw_sgma2fwhm(popt_O_D[2])
						FWHM_G_O_D_2    = lw_sgma2fwhm(popt_O_D[5])
						W_O_D           = 99#integrate.quad(lambda x: popt_O_D[1]*np.exp(-((x)**2)/(2*popt_O_D[2]**2)), -np.inf, np.inf)
						EW_O_D          = 99#np.round(abs(np.asarray(W_O_D[0])),3)
						EWE_O_D         = 99#np.round(abs(np.asarray(W_O_D[1])),10)

						#inten_glx[mask_ft] = inten_glx[mask_ft] - popt_O[3]
						inten_glx[mask_ft_D] = inten_glx[mask_ft_D] - popt_O_D[3]
						A_f2DG_1             = -(1-(min(inten_glx[mask_ft_D])))
						initial_guess_C_D    = (X0_f2DG_1,A_f2DG_1,SIGMA_f2DG_1)#,max(inten_glx[mask_ft_D])-1)
						popt_C_D, pcov_C_D   = opt.curve_fit(func_2_1D_Gaussian, lambda_glx[mask_ft_D],inten_glx[mask_ft_D], 
												p0=initial_guess_C_D,
												bounds=([
															X0_f2DG_1-(X0_f2DG_1*LINES[7][lines]),A_f2DG_1-0.001,-np.inf,
															X0_f2DG_2-(X0_f2DG_2*LINES[7][lines]),A_f2DG_2-0.001,-np.inf
															], #[lmb_min_lim_line,A_f2DG-0.001,-np.inf],
														[
															X0_f2DG_1+(X0_f2DG_1*LINES[7][lines]),A_f2DG_1      , np.inf,
															X0_f2DG_2+(X0_f2DG_2*LINES[7][lines]),A_f2DG_2      , np.inf
														]))#[lmb_max_lim_line,A_f2DG      ,np.inf]))
						data_fitted_C_D      = func_2_1D_Gaussian((lambda_glx[mask_ft_D]), *popt_C_D)

						CTRE_G_C_D_1    = popt_C_D[0]
						AMPL_G_C_D_1    = popt_C_D[1]
						SGMA_G_C_D_1    = popt_C_D[2]
						CTRE_G_C_D_2    = popt_C_D[3]
						AMPL_G_C_D_2    = popt_C_D[4]
						SGMA_G_C_D_2    = popt_C_D[5]
						FWHM_G_C_D      = 99#lw_sgma2fwhm(popt_C_D[2])
						W_C_D           = 99#integrate.quad(lambda x: popt_C_D[1]*np.exp(-((x)**2)/(2*popt_C_D[2]**2)), -np.inf, np.inf)
						EW_C_D          = 99#np.round(abs(np.asarray(W_C_D[0])),3)
						EWE_C_D         = 99#np.round(abs(np.asarray(W_C_D[1])),10)

						print
						print 'Initial 1 (0,O,C):'
						print colored(initial_guess_0_D,'green')
						print colored(initial_guess_O_D,'green')
						print colored(initial_guess_C_D,'green')
						#logger.error("Gaussian fit OK         : "+str(LINES[4][lines] + ' ' + str(LINES[3][lines]) ))
					except (RuntimeError,ValueError):
						#print RuntimeError
						popt_C_D            =  [
												999999.99999,999999.99999,999999.99999,
												999999.99999,999999.99999,999999.99999
												]
						pcov_C_D            =  [
												999999.99999,999999.99999,999999.99999,
												999999.99999,999999.99999,999999.99999
												]
						perr_C_D           =  [
												999999.99999,999999.99999,999999.99999,
												999999.99999,999999.99999,999999.99999
												]
						CTRE_G_C_D_1       = 999999.99999
						AMPL_G_C_D_1       = 999999.99999
						SGMA_G_C_D_1       = 999999.99999
						CTRE_G_C_D_2       = 999999.99999
						AMPL_G_C_D_2       = 999999.99999
						SGMA_G_C_D_2       = 999999.99999

						FWHM_G_C_D         = 999999.99999
						EW_C_D             = 999999.99999
						EWE_C_D            = 999999.99999
						popt_O_D           = [
												999999.99999,999999.99999,999999.99999,999999.99999,
												999999.99999,999999.99999,999999.99999,999999.99999
												]
						pcov_O_D           = [
												999999.99999,999999.99999,999999.99999,999999.99999,
												999999.99999,999999.99999,999999.99999,999999.99999
												]
						perr_O_D           = [
												999999.99999,999999.99999,999999.99999,999999.99999,
												999999.99999,999999.99999,999999.99999,999999.99999
												]
						CTRE_G_O_D_1       = 999999.99999
						AMPL_G_O_D_1       = 999999.99999
						SGMA_G_O_D_1       = 999999.99999
						CTRE_G_O_D_2       = 999999.99999
						AMPL_G_O_D_2       = 999999.99999
						SGMA_G_O_D_2       = 999999.99999
						FWHM_G_O_D         = 999999.99999
						EW_O_D             = 999999.99999
						EWE_O_D            = 999999.99999
						#logger.error("Error in Gaussian fit   : "+str(LINES[4][lines] + ' ' + str(LINES[3][lines]) ))
					print
					print 'Fit 1 (O,C):'
					print colored(popt_0_D,'magenta')
					print colored(popt_O_D,'magenta')
					print colored(popt_C_D,'magenta')
					'''
					popt_C_D            =  [
											999999.99999,999999.99999,999999.99999,
											999999.99999,999999.99999,999999.99999
											]
					pcov_C_D            =  [
											999999.99999,999999.99999,999999.99999,
											999999.99999,999999.99999,999999.99999
											]
					perr_C_D           =  [
											999999.99999,999999.99999,999999.99999,
											999999.99999,999999.99999,999999.99999
											]
					CTRE_G_C_D_1       = 999999.99999
					AMPL_G_C_D_1       = 999999.99999
					SGMA_G_C_D_1       = 999999.99999
					CTRE_G_C_D_2       = 999999.99999
					AMPL_G_C_D_2       = 999999.99999
					SGMA_G_C_D_2       = 999999.99999

					FWHM_G_C_D         = 999999.99999
					EW_C_D             = 999999.99999
					EWE_C_D            = 999999.99999
					popt_O_D           = [
											999999.99999,999999.99999,999999.99999,999999.99999,
											999999.99999,999999.99999,999999.99999,999999.99999
											]
					pcov_O_D           = [
											999999.99999,999999.99999,999999.99999,999999.99999,
											999999.99999,999999.99999,999999.99999,999999.99999
											]
					perr_O_D           = [
											999999.99999,999999.99999,999999.99999,999999.99999,
											999999.99999,999999.99999,999999.99999,999999.99999
											]
					CTRE_G_O_D_1       = 999999.99999
					AMPL_G_O_D_1       = 999999.99999
					SGMA_G_O_D_1       = 999999.99999
					CTRE_G_O_D_2       = 999999.99999
					AMPL_G_O_D_2       = 999999.99999
					SGMA_G_O_D_2       = 999999.99999
					FWHM_G_O_D         = 999999.99999
					EW_O_D             = 999999.99999
					EWE_O_D            = 999999.99999
					if fit_vls_hdr == True:
						Header_Add(specfile_glx,str(LINES[5][lines])+'_CGFO',float(CTRE_G_O_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Offst')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_AGFO',float(AMPL_G_O_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Offst')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_FGFO',float(FWHM_G_O_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Offst')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WGFO',float(EW_O_1)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Offst')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EGFO',float(EWE_O_1)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Offst')

						Header_Add(specfile_glx,str(LINES[5][lines])+'_CGFC',float(CTRE_G_C_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_AGFC',float(AMPL_G_C_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_FGFC',float(FWHM_G_C_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WGFC',float(EW_C_1)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EGFC',float(EWE_C_1)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct')
					else:
						print
						print colored('The fit values will not be added to the fits headers!','magenta')
						print
					#print colored(specfile_glx,'green')
				elif 'DblF' not in LINES[3][lines] and fit_fnct=='gauss'   and fit_type == 'scipy' and uft_lne_vls == True:
					print 'Line-fitting Cleaning Method. To be checked Fnc_Stk_Plt.py def(Plot_Idp_Spc_Lne) 11969!'
					quit()
					'''
					fit_typ = 'G'
					#GAUSSIAN FIT
					MSK_NTMS=2.5
					print
					print colored('1D Gaussian Fit Mode Choosen: scipy (Offset)','cyan')
					print

					lmb_min_lim_line_ft = (LINES[0][lines]-LINES[8][lines]) - MSK_NTMS*LINES[1][lines]#IT WAS LINE CTR - LINE OFFSET
					lmb_max_lim_line_ft = (LINES[0][lines]+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]

					###################################
					#############ORGINAL###############
					###################################
					#lmb_min_lim_line    = (LINES[0][lines]-LINES[8][lines])*(1+z_glx_Ps) - LINES[2][lines]#- 20#LINES[2][lines] - 10
					#lmb_max_lim_line    = (LINES[0][lines]+LINES[8][lines])*(1+z_glx_Ps) + LINES[2][lines]#+ 20#LINES[2][lines] + 10
					###################################
					#############ORGINAL###############
					###################################

					lmb_min_lim_line    = (LINES[0][lines]-LINES[8][lines])*(1+z_glx_Ps) - MSK_NTMS*LINES[2][lines]#- 20#LINES[2][lines] - 10
					lmb_max_lim_line    = (LINES[0][lines]+LINES[8][lines])*(1+z_glx_Ps) + MSK_NTMS*LINES[2][lines]#+ 20#LINES[2][lines] + 10

					mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
					mask_ft    = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
					label_glx  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function

					X0_f2DG    = (LINES[0][lines]+LINES[8][lines])
					SIGMA_f2DG = LINES[1][lines]
					A_f2DG     = -(1-(min(inten_glx[mask_ft])))

					max_val    = -(1-min(inten_glx[mask_ft]))
					lambda_max = (lambda_glx[np.where(inten_glx==min(inten_glx[mask_ft]))[0]][0])

					#plt.step(lambda_glx[mask_pl], inten_glx[mask_pl],
							#colors[index],
							#where='mid',lw=3.0,alpha=0.5,linestyle=':',color='gray',
							#label='Original Spectrum')

					initial_guess_O   = (X0_f2DG,A_f2DG,SIGMA_f2DG,max(inten_glx[mask_ft])-1)
					initial_guess_0   = (X0_f2DG,A_f2DG,SIGMA_f2DG)
					try:
						popt_0, pcov_0    = opt.curve_fit(func_1D_Gaussian, lambda_glx[mask_ft],inten_glx[mask_ft], 
													p0=initial_guess_0,
													#bounds=([X0_f2DG-(X0_f2DG*LINES[7][lines]),A_f2DG-0.001,-np.inf], #[lmb_min_lim_line,A_f2DG-0.001,-np.inf],
															#[X0_f2DG+(X0_f2DG*LINES[7][lines]),A_f2DG      , np.inf]))#[lmb_max_lim_line,A_f2DG      ,np.inf]))
													bounds=([X0_f2DG-(X0_f2DG*LINES[7][lines]),A_f2DG  - (A_f2DG*LINES[10][lines]),-np.inf], #[lmb_min_lim_line,A_f2DG-0.001,-np.inf],
															[X0_f2DG+(X0_f2DG*LINES[7][lines]),A_f2DG  + (A_f2DG*LINES[10][lines]), np.inf]))#[lmb_max_lim_line,A_f2DG      ,np.inf]))
						
						perr_0             = np.sqrt(np.diag(pcov_0))
						data_fitted_0      = func_1D_Gaussian((lambda_glx[mask_ft]), *popt_0)
						CTRE_G_0           = popt_0[0]
						AMPL_G_0           = popt_0[1]
						SGMA_G_0           = popt_0[2]
						FWHM_G_0           = lw_sgma2fwhm(popt_0[2])
						CTRE_G_0_E         = perr_0[0]
						AMPL_G_0_E         = perr_0[1]
						SGMA_G_0_E         = perr_0[2]
						W_0                = integrate.quad(lambda x: popt_0[1]*np.exp(-((x)**2)/(2*popt_0[2]**2)), -np.inf, np.inf)
						EW_0               = np.round(abs(np.asarray(W_0[0])),3)
						EWE_0              = np.round(abs(np.asarray(W_0[1])),10)
						#print colored('OK 0 fit','cyan')
					except (RuntimeError,ValueError):
						popt_0, pcov_0     = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
						perr_0             = [999999.99999,999999.99999,999999.99999]
						CTRE_G_0           = 999999.99999
						AMPL_G_0           = 999999.99999
						SGMA_G_0           = 999999.99999
						FWHM_G_0           = 999999.99999
						CTRE_G_0_E         = perr_0[0]
						AMPL_G_0_E         = perr_0[1]
						SGMA_G_0_E         = perr_0[2]
						EW_0               = 999999.99999
						EWE_0              = 999999.99999
					'''
					popt_0, pcov_0     = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
					perr_0             = [999999.99999,999999.99999,999999.99999]
					CTRE_G_0           = 999999.99999
					AMPL_G_0           = 999999.99999
					SGMA_G_0           = 999999.99999
					FWHM_G_0           = 999999.99999
					CTRE_G_0_E         = perr_0[0]
					AMPL_G_0_E         = perr_0[1]
					SGMA_G_0_E         = perr_0[2]
					EW_0               = 999999.99999
					EWE_0              = 999999.99999
					if fit_vls_hdr == True:
						Header_Add(specfile_glx,str(LINES[5][lines])+'_CGF0',float(CTRE_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_AGF0',float(AMPL_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_FGF0',float(FWHM_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WGF0',float(EW_0)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EGF0',float(EWE_0)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct')
					else:
						print
						print colored('The fit values will not be added to the fits headers!','magenta')
						print
					'''
					try:
						popt_O, pcov_O     = opt.curve_fit(func_1D_Gaussian_O, lambda_glx[mask_ft],inten_glx[mask_ft],
												p0=initial_guess_O,
												#bounds=([X0_f2DG-(X0_f2DG*LINES[7][lines]),A_f2DG-0.001,-np.inf,-np.inf], #[lmb_min_lim_line,A_f2DG-0.001,-np.inf],
														#[X0_f2DG+(X0_f2DG*LINES[7][lines]),A_f2DG      , np.inf, np.inf]))#[lmb_max_lim_line,A_f2DG      ,np.inf]))
												bounds=([X0_f2DG-(X0_f2DG*LINES[7][lines]),A_f2DG  - (A_f2DG*LINES[10][lines]),-np.inf], #[lmb_min_lim_line,A_f2DG-0.001,-np.inf],
														[X0_f2DG+(X0_f2DG*LINES[7][lines]),A_f2DG  + (A_f2DG*LINES[10][lines]), np.inf]))#[lmb_max_lim_line,A_f2DG      ,np.inf]))

						perr_O             = np.sqrt(np.diag(pcov_O))
						data_fitted_O      = func_1D_Gaussian_O((lambda_glx[mask_ft]), *popt_O)

						CTRE_G_O           = popt_O[0]
						AMPL_G_O           = popt_O[1]
						SGMA_G_O           = popt_O[2]
						OFST_G_O           = popt_O[3]
						FWHM_G_O           = lw_sgma2fwhm(popt_O[2])
						CTRE_G_O_E         = perr_O[0]
						AMPL_G_O_E         = perr_O[1]
						SGMA_G_O_E         = perr_O[2]
						OFST_G_O_E         = perr_O[3]
						W_O                = integrate.quad(lambda x: popt_O[1]*np.exp(-((x)**2)/(2*popt_O[2]**2)), -np.inf, np.inf)
						EW_O               = np.round(abs(np.asarray(W_O[0])),3)
						EWE_O              = np.round(abs(np.asarray(W_O[1])),10)

						inten_glx[mask_ft] = inten_glx[mask_ft] - popt_O[3]
						A_f2DG             = -(1-(min(inten_glx[mask_ft])))
						initial_guess_C    = (X0_f2DG,A_f2DG,SIGMA_f2DG)#,max(inten_glx[mask_ft])-1)
						popt_C, pcov_C     = opt.curve_fit(func_1D_Gaussian, lambda_glx[mask_ft],inten_glx[mask_ft], p0=initial_guess_C,
															#bounds=([X0_f2DG-(X0_f2DG*LINES[7][lines]),A_f2DG-0.001,-np.inf], #[lmb_min_lim_line,A_f2DG-0.001,-np.inf],
																	#[X0_f2DG+(X0_f2DG*LINES[7][lines]),A_f2DG      , np.inf]))#[lmb_max_lim_line,A_f2DG      ,np.inf]))
															bounds=([X0_f2DG-(X0_f2DG*LINES[7][lines]),A_f2DG  - (A_f2DG*LINES[10][lines]),-np.inf], #[lmb_min_lim_line,A_f2DG-0.001,-np.inf],
																	[X0_f2DG+(X0_f2DG*LINES[7][lines]),A_f2DG  + (A_f2DG*LINES[10][lines]), np.inf]))#[lmb_max_lim_line,A_f2DG      ,np.inf]))

						perr_C             = np.sqrt(np.diag(pcov_C))		
						data_fitted_C      = func_1D_Gaussian((lambda_glx[mask_ft]), *popt_C)
						CTRE_G_C           = popt_C[0]
						AMPL_G_C           = popt_C[1]
						SGMA_G_C           = abs(popt_C[2])
						FWHM_G_C           = lw_sgma2fwhm(popt_C[2])
						CTRE_G_C_E         = perr_C[0]
						AMPL_G_C_E         = perr_C[1]
						SGMA_G_C_E         = perr_C[2]
						W_C                = integrate.quad(lambda x: popt_C[1]*np.exp(-((x)**2)/(2*popt_C[2]**2)), -np.inf, np.inf)

						EW_C               = np.round(abs(np.asarray(W_C[0])),3)
						EWE_C              = np.round(abs(np.asarray(W_C[1])),10)
						
						AMPL_SNR           = AMPL_G_C
						CTRE_SNR           = CTRE_G_C
						SGMA_SNR           = abs(SGMA_G_C)
						#print colored('OK O C fit','cyan')
					except (RuntimeError,ValueError):
						print colored('RuntimeError','cyan')
						popt_C, pcov_C     = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
						perr_C             = [999999.99999,999999.99999,999999.99999]
						CTRE_G_C           = 999999.99999
						AMPL_G_C           = 999999.99999
						SGMA_G_C           = 999999.99999
						FWHM_G_C           = 999999.99999
						CTRE_G_C_E         = 999999.99999
						AMPL_G_C_E         = 999999.99999
						SGMA_G_C_E         = 999999.99999
						EW_C               = 999999.99999
						EWE_C              = 999999.99999

						popt_O, pcov_O     = [999999.99999,999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999,999999.99999]
						perr_O             = [999999.99999,999999.99999,999999.99999,999999.99999]
						CTRE_G_O           = 999999.99999
						AMPL_G_O           = 999999.99999
						SGMA_G_O           = 999999.99999
						OFST_G_O           = 999999.99999
						FWHM_G_O           = 999999.99999
						CTRE_G_O_E         = 999999.99999
						AMPL_G_O_E         = 999999.99999
						SGMA_G_O_E         = 999999.99999
						OFST_G_O_E         = 999999.99999
						EW_O               = 999999.99999
						EWE_O              = 999999.99999

						AMPL_SNR           = 999999.99999
						CTRE_SNR           = 999999.99999
						SGMA_SNR           = 999999.99999				
						#logger.error("Error in Gaussian fit   : "+str(LINES[4][lines] + ' ' + str(LINES[3][lines]) ))
					######################CHI-2######################
					data_fitted_C    = func_1D_Gaussian((lambda_glx[mask_pl]), *popt_C)
					g_exp_mxr        = data_fitted_C
					g_obs_mxr        = (lambda_glx[mask_pl])

					if Cube2bPlot_1D_Err == None:
						FLX_ERR_STD   = np.std(inten_glx[mask_pl])
						chisqr_C      = sum((g_obs_mxr-g_exp_mxr)**2/(FLX_ERR_STD**2))#*(1/float(len(XAXIS)-1))
						redchi_C      = chisqr_C/float(len(g_exp_mxr)-1)
					elif Cube2bPlot_1D_Err != None:
						chisqr_C      = sum((g_obs_mxr-g_exp_mxr)**2/(FLX_ERR_STD**2))#*(1/float(len(XAXIS)-1))
						redchi_C      = chisqr_C/float(len(g_exp_mxr)-1)
					######################CHI-2######################
					'''
					popt_C, pcov_C     = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
					perr_C             = [999999.99999,999999.99999,999999.99999]
					CTRE_G_C           = 999999.99999
					AMPL_G_C           = 999999.99999
					SGMA_G_C           = 999999.99999
					FWHM_G_C           = 999999.99999
					CTRE_G_C_E         = 999999.99999
					AMPL_G_C_E         = 999999.99999
					SGMA_G_C_E         = 999999.99999
					EW_C               = 999999.99999
					EWE_C              = 999999.99999

					popt_O, pcov_O     = [999999.99999,999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999,999999.99999]
					perr_O             = [999999.99999,999999.99999,999999.99999,999999.99999]
					CTRE_G_O           = 999999.99999
					AMPL_G_O           = 999999.99999
					SGMA_G_O           = 999999.99999
					OFST_G_O           = 999999.99999
					FWHM_G_O           = 999999.99999
					CTRE_G_O_E         = 999999.99999
					AMPL_G_O_E         = 999999.99999
					SGMA_G_O_E         = 999999.99999
					OFST_G_O_E         = 999999.99999
					EW_O               = 999999.99999
					EWE_O              = 999999.99999

					AMPL_SNR           = 999999.99999
					CTRE_SNR           = 999999.99999
					SGMA_SNR           = 999999.99999
					chisqr_C           = 999999.99999
					redchi_C           = 999999.99999

					if fit_vls_hdr == True:
						Header_Add(specfile_glx,'BSF_FCT',str(fit_fnct)                       ,header_comment = 'Fit function')
						Header_Add(specfile_glx,'BSF_MTH',str(fit_type)                       ,header_comment = 'Fit method')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_CGAO',float(CTRE_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Offst' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_AGAO',float(AMPL_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Offst' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_FGAO',float(FWHM_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Offst' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WGAO',float(EW_O)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Offst' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EGAO',float(EWE_O)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Offst' + str(fit_type))

						Header_Add(specfile_glx,str(LINES[5][lines])+'_CGAC',float(CTRE_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_AGAC',float(AMPL_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_SGAC',float(SGMA_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Sigm 1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_FGAC',float(FWHM_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WGAC',float(EW_C)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EGAC',float(EWE_C)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct' + str(fit_type))

						Header_Add(specfile_glx,str(LINES[5][lines])+'_CAEC',float(CTRE_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  err 1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_AAEC',float(AMPL_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  err 1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_SAEC',float(SGMA_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Sigm err 1GF Crct' + str(fit_type))

						Header_Add(specfile_glx,str(LINES[5][lines])+'_CHGA',float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Chi2 1GF' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_CRGA',float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Chi2 Reduced 1GF' + str(fit_type))
					else:
						print
						print colored('The fit values will not be added to the fits headers!','magenta')
						print
				elif 'DblF' not in LINES[3][lines] and fit_fnct=='gauss'   and fit_type == 'lmfit' and uft_lne_vls == True:
					print 'Line-fitting Cleaning Method. To be checked Fnc_Stk_Plt.py def(Plot_Idp_Spc_Lne) 7554!'
					
					fit_typ = 'G'
					#GAUSSIAN FIT
					MSK_NTMS=2.5
					'''
					print
					print colored('1D Gaussian Fit Mode Choosen: Lmfit (Offset)','cyan')
					print
					from lmfit import Model

					'''
					lmb_min_lim_line_ft = (LINES[0][lines]-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
					lmb_max_lim_line_ft = (LINES[0][lines]+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]
					lmb_min_lim_line    = (LINES[0][lines]-LINES[8][lines])*(1+z_glx_Ps) - 1.5*MSK_NTMS*LINES[2][lines]#- 20#LINES[2][lines] - 10 #IT WAS LINE CTR - LINE OFFSET
					lmb_max_lim_line    = (LINES[0][lines]+LINES[8][lines])*(1+z_glx_Ps) + 1.5*MSK_NTMS*LINES[2][lines]#+ 20#LINES[2][lines] + 10

					mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
					mask_ft    = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
					'''
					label_glx  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function

					X0_f2DG    = (LINES[0][lines]+LINES[8][lines])
					SIGMA_f2DG = LINES[1][lines]
					A_f2DG     = -(1-(min(inten_glx[mask_ft])))

					max_val    = -(1-min(inten_glx[mask_ft]))
					lambda_max = (lambda_glx[np.where(inten_glx==min(inten_glx[mask_ft]))[0]][0])					

					if pre_off_plt == True:
						plt.step(lambda_glx[mask_pl], inten_glx[mask_pl],
								where='mid',lw=3.0,alpha=0.5,linestyle=':',color='gray',
								label='Original Spectrum')
					elif pre_off_plt == False:
						pass

					'''
					#hsw_nmb_med = np.ceil(np.median(inten_glx_hst[mask_ft]))
					#hsw_nmb_med = np.ceil(np.median(inten_glx_hsw[mask_ft]))
					#Header_Add(specfile_glx,str(LINES[5][lines])+'_NHT',float(hsw_nmb_med) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + '# glxs stk hst Fit Spec Reg (med)')
					#Header_Add(specfile_glx,str(LINES[5][lines])+'_NHW',float(hsw_nmb_med) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + '# glxs stk hsw Fit Spec Reg (med)')
					#print specfile_glx,str(LINES[5][lines])+'_NHT',float(hsw_nmb_med)
					#print specfile_glx,str(LINES[5][lines])+'_NHW',float(hsw_nmb_med)
					'''
					initial_guess_O   = (X0_f2DG,A_f2DG,SIGMA_f2DG,max(inten_glx[mask_ft])-1)
					initial_guess_0   = (X0_f2DG,A_f2DG,SIGMA_f2DG)
					try:
						gmodel_0           = Model(func_1D_Gaussian)
						gmodel_0.set_param_hint('X_0'  , value=X0_f2DG   , min=X0_f2DG-(X0_f2DG*LINES[7][lines]), max=X0_f2DG+(X0_f2DG*LINES[7][lines]))
						#gmodel_0.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
						gmodel_0.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG  - (A_f2DG*LINES[10][lines]) , max=A_f2DG  + (A_f2DG*LINES[10][lines]))#min=A_f2DG-0.001, max=A_f2DG)
						gmodel_0.set_param_hint('SIGMA', value=SIGMA_f2DG)
						pars_0             = gmodel_0.make_params()							
						result_0           = gmodel_0.fit(inten_glx[mask_ft],pars_0,
												X=lambda_glx[mask_ft],
												X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,
												nan_policy = 'omit')
						CTRE_G_0           = result_0.params['X_0'].value
						AMPL_G_0           = result_0.params['A'].value
						SGMA_G_0           = abs(result_0.params['SIGMA'].value)
						FWHM_G_0           = lw_sgma2fwhm(SGMA_G_0)
						W_0                = integrate.quad(lambda x: AMPL_G_0*np.exp(-((x)**2)/(2*SGMA_G_0**2)), -np.inf, np.inf)
						EW_0               = np.round(abs(np.asarray(W_0[0])),3)
						EWE_0              = np.round(abs(np.asarray(W_0[1])),10)
						data_fitted_0      = func_1D_Gaussian((lambda_glx[mask_ft]), CTRE_G_0,AMPL_G_0,SGMA_G_0)

						CTRE_G_0_E         = result_0.params['X_0'].stderr
						AMPL_G_0_E         = result_0.params['A'].stderr
						SGMA_G_0_E         = result_0.params['SIGMA'].stderr

						CTRE_G_0_cor       = result_0.params['X_0'].correl
						AMPL_G_0_cor       = result_0.params['A'].correl
						SGMA_G_0_cor       = result_0.params['SIGMA'].correl

						chisqr_0           = result_0.chisqr
						redchi_0           = result_0.redchi

					except (RuntimeError,ValueError,TypeError):
						popt_0, pcov_0     = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
						perr_0             = [999999.99999,999999.99999,999999.99999]
						CTRE_G_0           = 999999.99999
						AMPL_G_0           = 999999.99999
						SGMA_G_0           = 999999.99999
						FWHM_G_0           = 999999.99999
						EW_0               = 999999.99999
						EWE_0              = 999999.99999

						CTRE_G_0_E         = 999999.99999
						AMPL_G_0_E         = 999999.99999
						SGMA_G_0_E         = 999999.99999

						CTRE_G_0_cor       = 999999.99999
						AMPL_G_0_cor       = 999999.99999
						SGMA_G_0_cor       = 999999.99999

						chisqr_0           = 999999.99999
						redchi_0           = 999999.99999
					'''
					popt_0, pcov_0     = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
					perr_0             = [999999.99999,999999.99999,999999.99999]
					CTRE_G_0           = 999999.99999
					AMPL_G_0           = 999999.99999
					SGMA_G_0           = 999999.99999
					FWHM_G_0           = 999999.99999
					EW_0               = 999999.99999
					EWE_0              = 999999.99999

					CTRE_G_0_E         = 999999.99999
					AMPL_G_0_E         = 999999.99999
					SGMA_G_0_E         = 999999.99999

					CTRE_G_0_cor       = 999999.99999
					AMPL_G_0_cor       = 999999.99999
					SGMA_G_0_cor       = 999999.99999

					chisqr_0           = 999999.99999
					redchi_0           = 999999.99999
					if fit_vls_hdr == True:
						Header_Add(specfile_glx,str(LINES[5][lines])+'_CGF0',float(CTRE_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_AGF0',float(AMPL_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_FGF0',float(FWHM_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WGF0',float(EW_0)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EGF0',float(EWE_0)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct')
					else:
						print
						print colored('The fit values will not be added to the fits headers!','magenta')
						print
					'''
					try:
						gmodel_O           = Model(func_1D_Gaussian_O)
						gmodel_O.set_param_hint('X_0'   , value=X0_f2DG   , min=X0_f2DG-(X0_f2DG*LINES[7][lines]), max=X0_f2DG+(X0_f2DG*LINES[7][lines]))
						#gmodel_O.set_param_hint('A'     , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
						gmodel_O.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG  - (A_f2DG*LINES[10][lines]) , max=A_f2DG  + (A_f2DG*LINES[10][lines]))#min=A_f2DG-0.001, max=A_f2DG)
						gmodel_O.set_param_hint('SIGMA' , value=SIGMA_f2DG)
						gmodel_O.set_param_hint('OFFSET', value=max(inten_glx[mask_ft])-1)
						pars_O             = gmodel_O.make_params()

						result_O           = gmodel_O.fit(inten_glx[mask_ft],pars_O,
												X=lambda_glx[mask_ft],X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,OFFSET=max(inten_glx[mask_ft])-1,
												nan_policy = 'omit')
						CTRE_G_O           = result_O.params['X_0'].value
						AMPL_G_O           = result_O.params['A'].value
						SGMA_G_O           = abs(result_O.params['SIGMA'].value)
						OFST_G_O           = abs(result_O.params['OFFSET'].value)
						FWHM_G_O           = lw_sgma2fwhm(SGMA_G_O)
						W_O                = integrate.quad(lambda x: AMPL_G_O*np.exp(-((x)**2)/(2*SGMA_G_O**2)), -np.inf, np.inf)
						EW_O               = np.round(abs(np.asarray(W_O[0])),3)
						EWE_O              = np.round(abs(np.asarray(W_O[1])),10)
						data_fitted_O      = func_1D_Gaussian_O((lambda_glx[mask_ft]),CTRE_G_O,AMPL_G_O,SGMA_G_O,OFST_G_O)

						CTRE_G_O_E         = result_O.params['X_0'].stderr
						AMPL_G_O_E         = result_O.params['A'].stderr
						SGMA_G_O_E         = result_O.params['SIGMA'].stderr

						CTRE_G_O_cor       = result_O.params['X_0'].correl
						AMPL_G_O_cor       = result_O.params['A'].correl
						SGMA_G_O_cor       = result_O.params['SIGMA'].correl

						chisqr_O           = result_O.chisqr
						redchi_O           = result_O.redchi
						
						#####################################################################################################################
						if ofs_ctr_fit == True:
							print
							print colored('Using Fitted Center From Offset Fit to Redefine Fitting Region!','yellow')
							print
							lmb_min_lim_line_ft = (CTRE_G_O-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
							lmb_max_lim_line_ft = (CTRE_G_O+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]
							#lmb_min_lim_line    = (CTRE_G_O-LINES[8][lines])*(1+z_glx_Ps) - 1.5*MSK_NTMS*LINES[2][lines]#-20#LINES[2][lines] - 10 #IT WAS LINE CTR - LINE OFFSET
							#lmb_max_lim_line    = (CTRE_G_O+LINES[8][lines])*(1+z_glx_Ps) + 1.5*MSK_NTMS*LINES[2][lines]#+20#LINES[2][lines] + 10
							#mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
							mask_ft     = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
						else:
							pass
						#####################################################################################################################

						inten_glx[mask_ft] = inten_glx[mask_ft] - OFST_G_O #MENOS OFFSET
						A_f2DG             = -(1-(min(inten_glx[mask_ft])))
						initial_guess_C    = (X0_f2DG,A_f2DG,SIGMA_f2DG)#,max(inten_glx[mask_ft])-1)

						gmodel_C           = Model(func_1D_Gaussian)
						gmodel_C.set_param_hint('X_0'  , value=X0_f2DG   , min=X0_f2DG-(X0_f2DG*LINES[7][lines]), max=X0_f2DG+(X0_f2DG*LINES[7][lines]))
						#gmodel_C.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
						gmodel_C.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG  - (A_f2DG*LINES[10][lines]) , max=A_f2DG  + (A_f2DG*LINES[10][lines]))#min=A_f2DG-0.001, max=A_f2DG)
						gmodel_C.set_param_hint('SIGMA', value=SIGMA_f2DG)
						pars_C             = gmodel_C.make_params()
						result_C           = gmodel_C.fit(inten_glx[mask_ft],pars_C,
												X=lambda_glx[mask_ft],X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,
												nan_policy = 'omit')
						CTRE_G_C           = result_C.params['X_0'].value
						AMPL_G_C           = result_C.params['A'].value
						SGMA_G_C           = abs(result_C.params['SIGMA'].value)
						FWHM_G_C           = lw_sgma2fwhm(SGMA_G_C)
						W_C                = integrate.quad(lambda x: AMPL_G_C*np.exp(-((x)**2)/(2*SGMA_G_C**2)), -np.inf, np.inf)

						EW_C               = np.round(abs(np.asarray(W_C[0])),3)
						EWE_C              = np.round(abs(np.asarray(W_C[1])),10)
						data_fitted_C      = func_1D_Gaussian((lambda_glx[mask_ft]), CTRE_G_C,AMPL_G_C,SGMA_G_C)

						CTRE_G_C_E         = result_C.params['X_0'].stderr
						AMPL_G_C_E         = result_C.params['A'].stderr
						SGMA_G_C_E         = result_C.params['SIGMA'].stderr

						CTRE_G_C_cor       = result_C.params['X_0'].correl
						AMPL_G_C_cor       = result_C.params['A'].correl
						SGMA_G_C_cor       = result_C.params['SIGMA'].correl

						AMPL_SNR           = AMPL_G_C
						CTRE_SNR           = CTRE_G_C
						SGMA_SNR           = abs(SGMA_G_C)

						if CTRE_G_C_E == None:
							CTRE_G_C_E = 999999.99999
						else:
							pass
						if AMPL_G_C_E == None:
							AMPL_G_C_E = 999999.99999
						else:
							pass
						if SGMA_G_C_E == None:
							SGMA_G_C_E = 999999.99999
						else:
							pass
						if CTRE_G_C_cor == None:
							CTRE_G_C_cor = 999999.99999
						else:
							pass
						if AMPL_G_C_cor == None:
							AMPL_G_C_cor = 999999.99999
						else:
							pass
						if SGMA_G_C_cor == None:
							SGMA_G_C_cor = 999999.99999
						else:
							pass
						chisqr_C           = result_C.chisqr
						redchi_C           = result_C.redchi
					except (RuntimeError,ValueError,TypeError):
						print colored('RuntimeError','cyan')
						popt_C, pcov_C  = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
						perr_C          = [999999.99999,999999.99999,999999.99999]
						CTRE_G_C        = 999999.99999
						AMPL_G_C        = 999999.99999
						SGMA_G_C        = 999999.99999
						FWHM_G_C        = 999999.99999
						EW_C            = 999999.99999
						EWE_C           = 999999.99999

						CTRE_G_C_E      = 999999.99999
						AMPL_G_C_E      = 999999.99999
						SGMA_G_C_E      = 999999.99999
						CTRE_G_C_cor    = 999999.99999
						AMPL_G_C_cor    = 999999.99999
						SGMA_G_C_cor    = 999999.99999
						chisqr_C        = 999999.99999
						redchi_C        = 999999.99999

						popt_O, pcov_O  = [999999.99999,999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999,999999.99999]
						perr_O          = [999999.99999,999999.99999,999999.99999,999999.99999]
						CTRE_G_O        = 999999.99999
						AMPL_G_O        = 999999.99999
						SGMA_G_O        = 999999.99999
						OFST_G_O        = 999999.99999
						FWHM_G_O        = 999999.99999
						EW_O            = 999999.99999
						EWE_O           = 999999.99999

						CTRE_G_O_E      = 999999.99999
						AMPL_G_O_E      = 999999.99999
						SGMA_G_O_E      = 999999.99999
						CTRE_G_O_cor    = 999999.99999
						AMPL_G_O_cor    = 999999.99999
						SGMA_G_O_cor    = 999999.99999
						OFST_G_O_cor    = 999999.99999
						chisqr_O        = 999999.99999
						redchi_O        = 999999.99999

						AMPL_SNR        = 999999.99999
						CTRE_SNR        = 999999.99999
						SGMA_SNR        = 999999.99999

					'''
					perr_C          = [999999.99999,999999.99999,999999.99999]
					CTRE_G_C        = 999999.99999
					AMPL_G_C        = 999999.99999
					SGMA_G_C        = 999999.99999
					FWHM_G_C        = 999999.99999
					EW_C            = 999999.99999
					EWE_C           = 999999.99999

					CTRE_G_C_E      = 999999.99999
					AMPL_G_C_E      = 999999.99999
					SGMA_G_C_E      = 999999.99999
					CTRE_G_C_cor    = 999999.99999
					AMPL_G_C_cor    = 999999.99999
					SGMA_G_C_cor    = 999999.99999
					chisqr_C        = 999999.99999
					redchi_C        = 999999.99999

					popt_O, pcov_O  = [999999.99999,999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999,999999.99999]
					perr_O          = [999999.99999,999999.99999,999999.99999,999999.99999]
					CTRE_G_O        = 999999.99999
					AMPL_G_O        = 999999.99999
					SGMA_G_O        = 999999.99999
					OFST_G_O        = 999999.99999
					FWHM_G_O        = 999999.99999
					EW_O            = 999999.99999
					EWE_O           = 999999.99999

					CTRE_G_O_E      = 999999.99999
					AMPL_G_O_E      = 999999.99999
					SGMA_G_O_E      = 999999.99999
					CTRE_G_O_cor    = 999999.99999
					AMPL_G_O_cor    = 999999.99999
					SGMA_G_O_cor    = 999999.99999
					OFST_G_O_cor    = 999999.99999
					chisqr_O        = 999999.99999
					redchi_O        = 999999.99999

					AMPL_SNR        = 999999.99999
					CTRE_SNR        = 999999.99999
					SGMA_SNR        = 999999.99999
					print
					print colored(specfile_glx,'cyan')
					print
					print colored(str(LINES[0][lines])+'-'+str(LINES[3][lines]),'yellow')
					print
					print colored(str(LINES[5][lines])+'_CGLC: ' + str(CTRE_G_C)  ,'yellow')
					print colored(str(LINES[5][lines])+'_AGLC: ' + str(AMPL_G_C)  ,'yellow')
					print colored(str(LINES[5][lines])+'_SGLC: ' + str(SGMA_G_C)  ,'yellow')
					print colored(str(LINES[5][lines])+'_FGLC: ' + str(FWHM_G_C)  ,'yellow')
					print colored(str(LINES[5][lines])+'_WGLC: ' + str(EW_C)      ,'yellow')
					print colored(str(LINES[5][lines])+'_EGLC: ' + str(EWE_C),'yellow')
					print
					print
					if fit_vls_hdr == True:
						Header_Add(specfile_glx,'BSF_FCT',str(fit_fnct)                       ,header_comment = 'Fit function')
						Header_Add(specfile_glx,'BSF_MTH',str(fit_type)                       ,header_comment = 'Fit method')
						Header_Add(specfile_glx,str(LINES[5][lines])+'_CGLO',float(CTRE_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Offst' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_AGLO',float(AMPL_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Offst' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_FGLO',float(FWHM_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Offst' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WGLO',float(EW_O)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Offst' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EGLO',float(EWE_O)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Offst' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_OFSO',float(OFST_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ofst 1GF Offst' + str(fit_type))

						Header_Add(specfile_glx,str(LINES[5][lines])+'_CGLC',float(CTRE_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_AGLC',float(AMPL_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_SGLC',float(SGMA_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_FGLC',float(FWHM_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_WGLC',float(EW_C)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_EGLC',float(EWE_C)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))

						Header_Add(specfile_glx,str(LINES[5][lines])+'_CLEC',float(CTRE_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_ALEC',float(AMPL_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_SLEC',float(SGMA_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))

						Header_Add(specfile_glx,str(LINES[5][lines])+'_CHGL',float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 1GF' + str(fit_type))
						Header_Add(specfile_glx,str(LINES[5][lines])+'_CRGL',float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 Reduced 1GF' + str(fit_type))
					else:
						print
						print colored('The fit values will not be added to the fits headers!','magenta')
						print
						pass
				else:
					pass
				########################################################LINE-FIT#######################################################
				########################################################LINE-SNR#######################################################
				#spc_stt_lmbd_i = kwargs.get('spc_stt_lmbd_i',1200)
				#spc_stt_lmbd_f = kwargs.get('spc_stt_lmbd_f',1750)
				x_type         = kwargs.get('x_type','lambda')

				spc_val_stt    = Spectra_Cont_GetVal(specfile_glx,gcv_lmbd_i=spc_stt_lmbd_i,gcv_lmbd_f=spc_stt_lmbd_f,x_type=x_type)

				SPC_SNR_FUNC_UB_1   = SNR(inten_glx)
				SPC_SNR_FUNC_UB_2   = SNR(spc_val_stt[0])
				SPC_SNR_FUNC_UB_3   = SNR(inten_glx[mask_ft])
				SPC_SNR_FUNC_UB_4   = SNR(inten_glx[mask_pl])

				if 'DblF' not in LINES[3][lines] and fit_fnct=='gauss'   and fit_type =='scipy':
					CTRE_G_C_SNR = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGAC')
					AMPL_G_C_SNR = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGAC')
					SGMA_G_C_SNR = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGAC')
				elif 'DblF' not in LINES[3][lines] and fit_fnct=='gauss' and fit_type =='lmfit':
					CTRE_G_C_SNR = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGLC')
					AMPL_G_C_SNR = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGLC')
					SGMA_G_C_SNR = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGLC')
				else:
					CTRE_G_C_SNR = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGLC')
					AMPL_G_C_SNR = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGLC')
					SGMA_G_C_SNR = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGLC')

				SPC_SNR_UB_1 = abs(AMPL_G_C_SNR)/SPC_SNR_FUNC_UB_1[2]
				SPC_SNR_UB_2 = abs(AMPL_G_C_SNR)/SPC_SNR_FUNC_UB_2[2]
				SPC_SNR_UB_3 = abs(AMPL_G_C_SNR)/SPC_SNR_FUNC_UB_3[2]
				SPC_SNR_UB_4 = abs(AMPL_G_C_SNR)/SPC_SNR_FUNC_UB_4[2]

				###### SNR out the line plot region #####
				if AMPL_G_C_SNR == 999999.99999:
					SPC_SNR_UB_1 = 999999.99999
					SPC_SNR_UB_2 = 999999.99999
					SPC_SNR_UB_3 = 999999.99999
					SPC_SNR_UB_4 = 999999.99999

					bin_size     = 999999.99999
					bin_number   = 999999.99999
					SPC_NSE_BN_1 = 999999.99999
					SPC_NSE_BN_2 = 999999.99999
					SPC_NSE_BN_3 = 999999.99999
					SPC_SNR_BN_1 = 999999.99999
					SPC_SNR_BN_2 = 999999.99999
					SPC_SNR_BN_3 = 999999.99999
				else:				

					lne_lim_inf_sgm,lne_lim_sup_sgm = CTRE_G_C-SGMA_G_C_SNR,CTRE_G_C+SGMA_G_C_SNR
					lne_lim_inf_fwh,lne_lim_sup_fwh = CTRE_G_C-(sigma2fwhm(SGMA_G_C_SNR)/2),CTRE_G_C+(sigma2fwhm(SGMA_G_C_SNR)/2)

					chn_lim_ctr = np.digitize(1*abs(CTRE_G_C),lambda_glx[mask_pl],right=False)
					chn_lim_inf = np.digitize(1*abs(lne_lim_inf_fwh),lambda_glx[mask_pl],right=False)
					chn_lim_sup = np.digitize(1*abs(lne_lim_sup_fwh),lambda_glx[mask_pl],right=True)

					indx_inf = np.arange(0,chn_lim_inf)
					indx_sup = np.arange(chn_lim_sup+1,len(lambda_glx[mask_pl]))
					indx_tot = np.hstack((indx_inf,indx_sup))

					flx_tot    = inten_glx[mask_pl][indx_tot]#[0,1,2,3,4,5,6,7,8,9]
					bin_size   = len(lambda_glx[mask_pl][chn_lim_inf:chn_lim_sup+1])
					
					#MODIFIED TT PASS LINE CLEAN METHOD#
					if bin_size == 0:
						bin_size = 1
					else:
						pass
					#MODIFIED TT PASS LINE CLEAN METHOD#
					bin_number = np.ceil(len(inten_glx[mask_pl][indx_tot])/float(bin_size))
					binned_arrays = split_list(flx_tot, wanted_parts=int(bin_number))

					NST_STS_AVG = []
					NST_STS_MED = []
					NST_STS_SUM = []
					NST_STS_STD = []
					for array_iteration in binned_arrays:
						#print
						#print array_iteration
						#print np.mean(array_iteration)
						#print np.median(array_iteration)
						#print np.sum(array_iteration)
						NST_STS_AVG.append(np.mean(array_iteration))
						NST_STS_MED.append(np.median(array_iteration))
						NST_STS_SUM.append(np.sum(array_iteration))
						NST_STS_STD.append(np.std(array_iteration))
						#print

					if bin_number == 1:
						SPC_NSE_BN_1 = NST_STS_STD[0]
						SPC_NSE_BN_2 = NST_STS_STD[0]
						SPC_NSE_BN_3 = NST_STS_STD[0]
					else:
						SPC_NSE_BN_1 = np.std(NST_STS_AVG)
						SPC_NSE_BN_2 = np.std(NST_STS_MED)
						SPC_NSE_BN_3 = np.std(NST_STS_SUM)

					SPC_SNR_BN_1 = abs(AMPL_G_C_SNR)/SPC_NSE_BN_1
					SPC_SNR_BN_2 = abs(AMPL_G_C_SNR)/SPC_NSE_BN_2
					SPC_SNR_BN_3 = abs(AMPL_G_C_SNR)/SPC_NSE_BN_3

					if verbose == True:
						pass
					else:
						pass
				###### SNR out the line plot region #####
				Header_Add(specfile_glx,str(LINES[5][lines])+'_NSU1',float(SPC_SNR_FUNC_UB_1[2]) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE UBIN SPC REG ALL')
				Header_Add(specfile_glx,str(LINES[5][lines])+'_NSU2',float(SPC_SNR_FUNC_UB_2[2]) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE UBIN SPC REG CNT')
				Header_Add(specfile_glx,str(LINES[5][lines])+'_NSU3',float(SPC_SNR_FUNC_UB_3[2]) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE UBIN SPC REG FIT')
				Header_Add(specfile_glx,str(LINES[5][lines])+'_NSU4',float(SPC_SNR_FUNC_UB_4[2]) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE UBIN SPC REG PLT')

				Header_Add(specfile_glx,str(LINES[5][lines])+'_SNU1',float(SPC_SNR_UB_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR UBIN SPC REG ALL')
				Header_Add(specfile_glx,str(LINES[5][lines])+'_SNU2',float(SPC_SNR_UB_2) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR UBIN SPC REG CNT')
				Header_Add(specfile_glx,str(LINES[5][lines])+'_SNU3',float(SPC_SNR_UB_3) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR UBIN SPC REG FIT')
				Header_Add(specfile_glx,str(LINES[5][lines])+'_SNU4',float(SPC_SNR_UB_4) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR UBIN SPC REG PLT')

				Header_Add(specfile_glx,str(LINES[5][lines])+'_SNBS',float(bin_size)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR BINNED Size')
				Header_Add(specfile_glx,str(LINES[5][lines])+'_SNBN',float(bin_number)   ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR BINNED # Bins')

				try:
					Header_Add(specfile_glx,str(LINES[5][lines])+'_NSB1',float(SPC_NSE_BN_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE BINNED AVG')
					Header_Add(specfile_glx,str(LINES[5][lines])+'_NSB2',float(SPC_NSE_BN_2) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE BINNED MED')
					Header_Add(specfile_glx,str(LINES[5][lines])+'_NSB3',float(SPC_NSE_BN_3) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE BINNED SUM')				
				except ValueError:
					Header_Add(specfile_glx,str(LINES[5][lines])+'_NSB1',float(999999.99999) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE BINNED AVG')
					Header_Add(specfile_glx,str(LINES[5][lines])+'_NSB2',float(999999.99999) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE BINNED MED')
					Header_Add(specfile_glx,str(LINES[5][lines])+'_NSB3',float(999999.99999) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE BINNED SUM')									

				try:
					Header_Add(specfile_glx,str(LINES[5][lines])+'_SNB1',float(999999.99999) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR BINNED AVG')
					Header_Add(specfile_glx,str(LINES[5][lines])+'_SNB2',float(999999.99999) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR BINNED MED')
					Header_Add(specfile_glx,str(LINES[5][lines])+'_SNB3',float(999999.99999) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR BINNED SUM')				
				except ValueError:
					Header_Add(specfile_glx,str(LINES[5][lines])+'_SNB1',float(999999.99999) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR BINNED AVG')
					Header_Add(specfile_glx,str(LINES[5][lines])+'_SNB2',float(999999.99999) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR BINNED MED')
					Header_Add(specfile_glx,str(LINES[5][lines])+'_SNB3',float(999999.99999) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR BINNED SUM')				


				########################################################LINE-SNR#######################################################
				print
				print colored('Fit Values ('+fit_type+')','yellow')
				print colored(str(CTRE_G_C)+', '+str(AMPL_G_C)+', '+str(SGMA_G_C),'yellow')
				print
				if fit_fnct is not None:
					if AMPL_G_O <0: #popt_O[1]
						lambda_glx_lne_fit = np.arange(lmb_min_lim_line,lmb_max_lim_line,0.1)
						if fit_fnct=='gauss' and not 'DblF' in LINES[3][lines]:
							#print 'Not Dbl Gaussian Function'
							if pre_off_plt == True:
								try:
									plt.plot(lambda_glx_lne_fit,
												func_1D_Gaussian(lambda_glx_lne_fit,*popt_0),
												color = 'gray'  ,ls=':',lw=3.0,
												label = label_glx + ' g fit Org: ' + 
												'EW: ' + str(EW_0), 
												alpha=0.5)
									plt.plot(lambda_glx_lne_fit,
												func_1D_Gaussian_O(lambda_glx_lne_fit,*popt_O),
												color = 'gray'  ,ls='--',lw=3.0,
												label = label_glx + ' g fit Off: ' + 
												'EW: ' + str(EW_O) + ', '  
												'OFS: ' + str(np.round(OFST_G_O,2)), 
												alpha=0.5)
								except UnboundLocalError:
									plt.plot(lambda_glx_lne_fit,
												func_1D_Gaussian(lambda_glx_lne_fit,CTRE_G_0,AMPL_G_0,SGMA_G_0)     ,
												color = 'gray'  ,ls=':',lw=3.0,
												label = label_glx + ' g fit Org: ' + 
												'EW: ' + str(EW_0), 
												alpha=0.5)
									plt.plot(lambda_glx_lne_fit,
												func_1D_Gaussian_O(lambda_glx_lne_fit,CTRE_G_O,AMPL_G_O,SGMA_G_O,OFST_G_O)  ,
												color = 'gray'  ,ls='--',lw=3.0,
												label = label_glx + ' g fit Off: ' + 
												'EW: ' + str(EW_O) + ', '  
												'OFS: ' + str(np.round(OFST_G_O,2)), 
												alpha=0.5)
							elif pre_off_plt == False:
								pass
							try:
								plt.plot(lambda_glx_lne_fit,func_1D_Gaussian(lambda_glx_lne_fit,*popt_C)    ,
										color = colors[index]   ,ls='-',lw=3.0,
										label = label_glx + ' '+
										#'g fit C: ' + 
										#'$\lambda_{0}$='+ str(np.round(CTRE_G_C,2)) + ', ' +
										#'$\sigma$=' + str(np.round(SGMA_G_C,2)) + ',' + 
										#'fwhm=' + str(np.round(sigma2fwhm(SGMA_G_C),2)) +
										#'A: '+ str(np.round(AMPL_G_C,2)) + ', ' + 
										'EW: ' + str(EW_C) + ', ' +
										'N : ' + str(stk_glx_nmb) +  ', ' +
										"\n" +
										'SNR UB 1-A, 2-C :' +#, 3-F, 4-P : ' +
										str(np.round(SPC_SNR_UB_1,2)) +
										', ' + str(np.round(SPC_SNR_UB_2,2)) #+
										#', ' + str(np.round(SPC_SNR_UB_3,2)) +
										#', ' + str(np.round(SPC_SNR_UB_4,2)) +
										#"\n"+
										#'SNR BN 1-A, 2-M, 3-S : ' + str(np.round(SPC_SNR_BN_1,2)) +
										#', ' + str(np.round(SPC_SNR_BN_2,2)) +
										#', ' + str(np.round(SPC_SNR_BN_3,2)),
										,
										alpha=1.0# + ', EWE: '+str(EWE)
										)
							except UnboundLocalError:
								plt.plot(lambda_glx_lne_fit,
										func_1D_Gaussian(lambda_glx_lne_fit,CTRE_G_C,AMPL_G_C,SGMA_G_C)    ,
										color = colors[index]   ,ls='-',lw=3.0,
										label = label_glx + ' '+
										#'g fit C: ' + 
										#'$\lambda_{0}$='+ str(np.round(CTRE_G_C,2)) + ', ' +
										#'$\sigma$=' + str(np.round(SGMA_G_C,2)) + ',' + 
										#'fwhm=' + str(np.round(sigma2fwhm(SGMA_G_C),2)) +
										#'A: '+ str(np.round(AMPL_G_C,2)) + ', ' + 
										'EW: ' + str(EW_C) + ', ' +
										'N : ' + str(stk_glx_nmb) +  ', ' +
										"\n" +
										'SNR UB 1-A, 2-C :' +#, 3-F, 4-P : ' +
										str(np.round(SPC_SNR_UB_1,2)) +
										', ' + str(np.round(SPC_SNR_UB_2,2)) #+
										#', ' + str(np.round(SPC_SNR_UB_3,2)) +
										#', ' + str(np.round(SPC_SNR_UB_4,2)) +
										#"\n"+
										#'SNR BN 1-A, 2-M, 3-S : ' + str(np.round(SPC_SNR_BN_1,2)) +
										#', ' + str(np.round(SPC_SNR_BN_2,2)) +
										#', ' + str(np.round(SPC_SNR_BN_3,2))
										,
										#'$\chi^{2}$: '+str(chisqr_C)+ ', ' +
										#'$\chi^{2}_{r}$:' + str(redchi_C),
										alpha=1.0)

							plt.step(lambda_glx[mask_pl], inten_glx[mask_pl], colors[index],where='mid',lw=3.0,alpha=0.6,linestyle='-')#label=label_glx,
						elif fit_fnct=='gauss' and 'DblF' in LINES[3][lines]:
							lambda_glx_lne_fit_1 = np.arange(lmb_min_lim_line_1,lmb_max_lim_line_1,0.1)
							lambda_glx_lne_fit_2 = np.arange(lmb_min_lim_line_2,lmb_max_lim_line_2,0.1)
							lambda_glx_lne_fit_D = np.arange(lmb_min_lim_line_1,lmb_max_lim_line_2,0.1)
							print
							print 'Dbl Gaussian Function'

							#plt.plot(lambda_glx_lne_fit_D,func_2_1D_Gaussian(lambda_glx_lne_fit_D,*popt_0_D)     ,
										#color=colors[index]  ,ls=':' ,lw=3.0 ,alpha=0.3,
										#label = '')#label_glx + ' g fit 0: $\lambda_{0}$='+ str(np.round(CTRE_G_0,2))+ ', $\sigma$=' + str(np.round(SGMA_G_0,2))+', EW: ' + str(EW_0), 
										##alpha=0.3)# + ', EWE: '+str(EWE))
							###plt.plot(lambda_glx_lne_fit_1,func_2_1D_Gaussian_O(lambda_glx_lne_fit_1,*popt_O_D)   ,
										#color='white'        ,ls='--',lw=3.0 ,alpha=0.1,
										###label = '')#label_glx + ' g fit O: $\lambda_{0}$='+ str(np.round(CTRE_G_O,2))+ ', $\sigma$=' + str(np.round(SGMA_G_O,2))+', EW: ' + str(EW_O) + ', OFS: ' + str(np.round(OFST_G_O,2)), 
										####alpha=0.1)# + ', EWE: '+str(EWE))
							##plt.plot(lambda_glx_lne_fit_1,func_2_1D_Gaussian(lambda_glx_lne_fit_1,*popt_C_D)    ,
										#color=colors[index]   ,ls='-' ,lw=3.0 ,alpha=1.0,
										##label = label_glx + ' EW: ' + str(EW_C_D), )#' g fit C: $\lambda_{0}$='+ str(np.round(CTRE_G_C,2))+ ', $\sigma$=' + str(np.round(SGMA_G_C,2))+', EW: ' + str(EW_C), 
										###alpha=1.0)# + ', EWE: '+str(EWE)


							#plt.plot(lambda_glx_lne_fit_2,func_1D_Gaussian(lambda_glx_lne_fit_2,*popt_0_2)     ,
										#color=colors[index]  ,ls=':' ,lw=3.0 ,alpha=0.3,
										#label = '')#label_glx + ' g fit 0: $\lambda_{0}$='+ str(np.round(CTRE_G_0,2))+ ', $\sigma$=' + str(np.round(SGMA_G_0,2))+', EW: ' + str(EW_0), 
										##alpha=0.3)# + ', EWE: '+str(EWE))
							#plt.plot(lambda_glx_lne_fit_2,func_1D_Gaussian_O(lambda_glx_lne_fit_2,*popt_O_2)   ,
										#color='white'        ,ls='--',lw=3.0 ,alpha=0.1,
										#label = '')#label_glx + ' g fit O: $\lambda_{0}$='+ str(np.round(CTRE_G_O,2))+ ', $\sigma$=' + str(np.round(SGMA_G_O,2))+', EW: ' + str(EW_O) + ', OFS: ' + str(np.round(OFST_G_O,2)), 
										##alpha=0.1)# + ', EWE: '+str(EWE))
							#plt.plot(lambda_glx_lne_fit_2,func_1D_Gaussian(lambda_glx_lne_fit_2,*popt_C_2)    ,
										#color=colors[index]   ,ls='-' ,lw=3.0 ,alpha=1.0,
										#label = label_glx + ' EW: ' + str(EW_C_2), )#' g fit C: $\lambda_{0}$='+ str(np.round(CTRE_G_C,2))+ ', $\sigma$=' + str(np.round(SGMA_G_C,2))+', EW: ' + str(EW_C), 
										##alpha=1.0)# + ', EWE: '+str(EWE)

							plt.step(lambda_glx[mask_pl_D], inten_glx[mask_pl_D], colors[index],
										where='mid',lw=3.0,alpha=0.6,linestyle='-')#label=label_glx,
							plt.step(lambda_glx[mask_pl_D], inten_glx[mask_pl_D], colors[index],
										where='mid',lw=3.0,alpha=0.6,linestyle='-')#label=label_glx,
					else:
						pass
				else:
					pass
				########################################################LINE-FIT#######################################################

			#######################################################DIF-SEPARATIONS#######################################################			
			plt.xlim([lmb_min_lim_line-2,lmb_max_lim_line+2])
			xmin, xmax = plt.xlim()
			plt.xlim((xmin,xmax))

			#plt.ylim([min_y,max_y])
			#ymin, ymax = plt.ylim()
			#plt.ylim((ymin,ymax))
			min_y, max_y = ax110.get_ylim()

			left, width    = lmb_min_lim_line, (lmb_max_lim_line - lmb_min_lim_line)
			bottom, height = min_y, (max_y - min_y)
			right          = lmb_max_lim_line + width
			top            = max_y

			# build a rectangle in axes coords
			left, width = 0, 0.95
			bottom, height = 0, 0.95
			right = left + width
			top = bottom + height
         
			#p = patches.Rectangle(
			#(left, bottom), width, height,
			#fill=False, transform=ax110.transAxes, clip_on=False
			#)

			#ax110.add_patch(p)
			#https://matplotlib.org/users/text_props.html

			#ax110.text(left, top, 'z flags_F: '+(specfile_glx.split('-ss-zf_F-',1)[1]).split('-ss-sep_as',1)[0] + ', z_flags_B: '+(specfile_glx.split('-ss-zf_B-',1)[1]).split('-ss-zf_F-',1)[0] ,
			#ax110.text(left, bottom, 
					#'z flags_F: '+
					#(specfile_glx.split('-ss-zf_F-',1)[1]).split('-ss-sep' + 
					#splt_smpl_sfx ,1)[0] + ', ' +
					 #'z_flags_B: '+
					 #(specfile_glx.split('-ss-zf_B-',1)[1]).split('-ss-zf_F-',1)[0] + ', ' +
					 #splt_smpl_unt
					 #, 
			#horizontalalignment='left',
			#verticalalignment='top',
			#fontsize = 16,
			#transform=ax110.transAxes)

			###################################
			#############ORGINAL###############
			###################################			
			#plt.plot([lmb_min_lim_line, lmb_max_lim_line], [1, 1]        , color='black', lw=1, alpha=0.6)
			#lg1 = plt.legend(loc=0,prop={'size':22})
			#lg1.draw_frame(False)
			#plt.plot([LINES[0][lines]+LINES[8][lines]    ,LINES[0][lines]+LINES[8][lines]]    , [min_y, max_y],
						#color='black', lw=1, alpha=0.6,ls=':',label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function)
			#plt.plot([lmb_min_lim_line_ft,lmb_min_lim_line_ft], [min_y, max_y], color='black', lw=1, alpha=0.6,ls=':')#,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$')
			#plt.plot([lmb_max_lim_line_ft,lmb_max_lim_line_ft], [min_y, max_y], color='black', lw=1, alpha=0.6,ls=':')#,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$')
			#lg2=plt.legend(loc=0,prop={'size':22})
			#lg2.draw_frame(False)
			###################################
			#############ORGINAL###############
			###################################

			plt.plot([lmb_min_lim_line, lmb_max_lim_line], [1, 1]        , color='black', lw=1, alpha=0.6)
			lg1 = plt.legend(loc=0,prop={'size':22})
			lg1.draw_frame(False)

			lmb_min_lim_line_ft = (LINES[0][lines]-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
			lmb_max_lim_line_ft = (LINES[0][lines]+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]

			plt.plot([LINES[0][lines],LINES[0][lines]],
						[min_y, max_y],
						color='black', lw=1, alpha=0.8,ls=':',
						label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function)

			plt.plot([LINES[0][lines]+LINES[8][lines],LINES[0][lines]+LINES[8][lines]],
						[min_y, max_y],
						color='black', lw=1, alpha=0.8,ls='dashed'
						#,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function)
						)
			plt.plot([lmb_min_lim_line_ft,lmb_min_lim_line_ft], [min_y, max_y], 
						color='black', lw=1, alpha=0.8,ls=':'
						#,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$')
						)
			plt.plot([lmb_max_lim_line_ft,lmb_max_lim_line_ft], [min_y, max_y], 
						color='black', lw=1, alpha=0.8,ls=':'
						#,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$')
						)

			lg2=plt.legend(loc=0,prop={'size':22})
			lg2.draw_frame(False)

			################################################################SAVE###########################################################

			###################################
			#############ORGINAL###############
			###################################
			'''
			if dest_dir != None:
				PLOTFILENAME1 = str(dest_dir) + plt_sufix_fnm+'-' + str(splt_smpl_sfx_f1_plt[0]) +'-'+str(int(LINES[0][lines]))+'-'+str(LINES[4][lines])+ '-' + stk_function +'-' + fit_type + '-'+fit_typ +'.pdf'
				PLOTFILENAME2 = str(dest_dir) + plt_sufix_fnm+'-' + str(splt_smpl_sfx_f1_plt[0]) +'-'+str(int(LINES[0][lines]))+'-'+str(LINES[4][lines])+ '-' + stk_function +'-' + fit_type + '-'+fit_typ +'.eps'

			elif dest_dir == None:
				PLOTFILENAME1 = fit_plt_res + plt_sufix_fnm+'-' + str(splt_smpl_sfx_f1_plt[0]) +'-'+str(int(LINES[0][lines]))+'-'+str(LINES[4][lines])+ '-' + stk_function +'-' + fit_type + '-' + fit_typ +'.pdf'
				PLOTFILENAME2 = fit_plt_res + plt_sufix_fnm+'-' + str(splt_smpl_sfx_f1_plt[0]) +'-'+str(int(LINES[0][lines]))+'-'+str(LINES[4][lines])+ '-' + stk_function +'-' + fit_type + '-' + fit_typ +'.eps'
				'''
			###################################
			#############ORGINAL###############
			###################################


			if dest_dir != None:
				PLOTFILENAME1 = str(dest_dir) + plt_sufix_fnm + '-' + str(splt_smpl_sfx_f1_plt[0]) +'-'+str(splt_smpl_sfx_f2_plt[0])+'-'+ str(int(LINES[0][lines]))+'-'+str(LINES[4][lines])+ '-' + stk_function + '-' + fit_typ + '.pdf'
				PLOTFILENAME2 = str(dest_dir) + plt_sufix_fnm + '-' + str(splt_smpl_sfx_f1_plt[0]) +'-'+str(splt_smpl_sfx_f2_plt[0])+'-'+ str(int(LINES[0][lines]))+'-'+str(LINES[4][lines])+ '-' + stk_function + '-' + fit_typ + '.eps'

			elif dest_dir == None:
				PLOTFILENAME1 = fit_plt_res   + plt_sufix_fnm + '-' + str(splt_smpl_sfx_f1_plt[0]) +'-'+str(splt_smpl_sfx_f2_plt[0])+'-'+ str(int(LINES[0][lines]))+'-'+str(LINES[4][lines])+ '-' + stk_function + '-' + fit_typ + '.pdf'
				PLOTFILENAME2 = fit_plt_res   + plt_sufix_fnm + '-' + str(splt_smpl_sfx_f1_plt[0]) +'-'+str(splt_smpl_sfx_f2_plt[0])+'-'+ str(int(LINES[0][lines]))+'-'+str(LINES[4][lines])+ '-' + stk_function + '-' + fit_typ + '.eps'

			
			plt.savefig(PLOTFILENAME1)
			if verbose == True:
				print
				print colored('Generated Plot: ' + str(PLOTFILENAME1),'cyan')
			elif verbose ==False:
				pass
			if epssave == True:
				plt.savefig(PLOTFILENAME2, rasterized=True)
				#os.system('open Spectra.eps')
			elif epssave == False:
				pass
			if showplot == True:
				#os.system('open '+str(PLOTFILENAME))
				pass
			elif showplot == False:
				pass	
			plt.close('all')
			########################################################PLOT PER LINE########################################################
		elif (lmb_min < LINES[0][lines]*(1+z_glx_Ps)) or (LINES[0][lines]*(1+z_glx_Ps) > lmb_max) :
			print
			print colored('Line not covered by spectrum!','magenta')
			print colored('Line: '+str(LINES[3][lines]*(1+z_glx_Ps)),'magenta')
			print colored('Line: '+str(LINES[0][lines]+LINES[8][lines]*(1+z_glx_Ps)),'magenta')
			print colored('Spectrum limits: '+str(lambda_glx[0])+'-'+str(lambda_glx[-1]),'magenta')
			print			
			break

def Plot_Slc_Spc_Lne(int_typ_spl,n_int_spt,*args, **kwargs):
	z_glx_Ps       = kwargs.get('z_glx_Ps'    , 0)
	dest_dir       = kwargs.get('dest_dir'    , None)
	verbose        = kwargs.get('verbose'     , False)
	epssave        = kwargs.get('epssave'     , False)
	showplot       = kwargs.get('showplot'    , False) 

	autoaxis_SSL   = kwargs.get('autoaxis_SSL'  , True)
	min_y_lim_SSL  = kwargs.get('min_y_lim_SSL' , -2.0)
	max_y_lim_SSL  = kwargs.get('max_y_lim_SSL' , 1.0)

	aaxs_SSL_ml_y  = kwargs.get('aaxs_SSL_ml_y' ,False)

	#min_x_lim_Idp  = kwargs.get('min_x_lim_Idp' , 1200)
	#max_x_lim_Idp  = kwargs.get('max_x_lim_Idp' , 1750)

	lmb_min        = kwargs.get('lmb_min',1200)
	lmb_max        = kwargs.get('lmb_max',1700)

	lmb_min_lim    = lmb_min
	lmb_max_lim    = lmb_max

	upper_shift    = kwargs.get('upper_shift',0)
	lower_shift    = kwargs.get('lower_shift',0)
	stk_function   = kwargs.get('stk_function','med')

	fit_fnct       = kwargs.get('fit_fnct','gauss')
	fit_type       = kwargs.get('fit_type','lmfit')
	pre_off_plt    = kwargs.get('pre_off_plt',False)
	dest_dir       = kwargs.get('dest_dir',None)
	
	plt_ind_fit    = kwargs.get('plt_ind_fit',False)

	max_sep        = kwargs.get('max_sep',23)

	lbl_col_idv    = kwargs.get('lbl_col_idv',True)

	stk_fct        = kwargs.get('stk_fct','med')
	fpt_background = kwargs.get('fpt_background' , True)
	fpt_foreground = kwargs.get('fpt_foreground', False)

	empty_plots    = kwargs.get('empty_plots',1)
	landscape_plt  = kwargs.get('landscape_plt',True)

	int_vlf_hdr    = kwargs.get('int_vlf_hdr',True)
	fit_vls_hdr    = kwargs.get('fit_vls_hdr',True)
	uft_lne_vls    = kwargs.get('uft_lne_vls',False)
	fit_lne        = kwargs.get('fit_lne',False)

	splt_ind_lns   = kwargs.get('splt_ind_lns',False)


	if int_typ_spl == 'kpc' and n_int_spt == 0:#in specfile_glx:
		splt_smpl_sfx = '_kpc'
		splt_smpl_sfx_f = '_kpc_F'
		splt_smpl_unt = 'kpc'
		splt_smpl_unl = 'kpc'
		slc_kpc_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv)
		slc_kpc_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv)
		slc_int_fg = slc_kpc_int_fg[1]
		slc_int_bg = slc_kpc_int_bg[1]
	elif int_typ_spl == 'kpc' and n_int_spt == 1:#in specfile_glx:
		splt_smpl_sfx = '_kpc'
		splt_smpl_sfx_f = '_kpc_F'
		splt_smpl_unt = 'kpc'
		splt_smpl_unl = 'kpc'
		slc_kpc_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_2)
		slc_kpc_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_2)
		slc_int_fg = slc_kpc_int_fg[1]
		slc_int_bg = slc_kpc_int_bg[1]
	elif int_typ_spl == 'kpc' and n_int_spt == 2:#in specfile_glx:
		splt_smpl_sfx = '_kpc'
		splt_smpl_sfx_f = '_kpc_F'
		splt_smpl_unt = 'kpc'
		splt_smpl_unl = 'kpc'
		slc_kpc_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_3)
		slc_kpc_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_3)
		slc_int_fg = slc_kpc_int_fg[1]
		slc_int_bg = slc_kpc_int_bg[1]
	elif int_typ_spl == 'kpc' and n_int_spt == 3:#in specfile_glx:
		splt_smpl_sfx = '_kpc'
		splt_smpl_sfx_f = '_kpc_F'
		splt_smpl_unt = 'kpc'
		splt_smpl_unl = 'kpc'
		slc_kpc_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_4)
		slc_kpc_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_4)
		slc_int_fg = slc_kpc_int_fg[1]
		slc_int_bg = slc_kpc_int_bg[1]	
	elif int_typ_spl == 'kpc' and n_int_spt == 4:#in specfile_glx:
		splt_smpl_sfx = '_kpc'
		splt_smpl_sfx_f = '_kpc_F'
		splt_smpl_unt = 'kpc'
		splt_smpl_unl = 'kpc'
		slc_int_fg = slc_kpc_int_fg[1]
		slc_int_bg = slc_kpc_int_bg[1]	
	elif int_typ_spl == 'mass' and n_int_spt == 0:# in specfile_glx:
		splt_smpl_sfx = '-mass'
		splt_smpl_sfx_f = '-mass_F'
		splt_smpl_unt = 'mass'
		splt_smpl_unl = 'log[M/M$\odot$]'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv)
		slc_int_fg = slc_mss_int_fg[1]
		slc_int_bg = slc_mss_int_bg[1]
	elif int_typ_spl == 'mass'  and n_int_spt == 1 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '-mass'
		splt_smpl_sfx_f = '-mass_F'
		splt_smpl_unt = 'mass'
		splt_smpl_unl = 'log[M/M$\odot$]'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_1)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_1)			
		slc_int_fg = slc_mss_int_fg[1]
		slc_int_bg = slc_mss_int_bg[1]
	elif int_typ_spl == 'mass'  and n_int_spt == 2 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '-mass'
		splt_smpl_sfx_f = '-mass_F'
		splt_smpl_unt = 'mass'
		splt_smpl_unl = 'log[M/M$\odot$]'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_2)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_2)			
		slc_int_fg = slc_mss_int_fg[1]
		slc_int_bg = slc_mss_int_bg[1]
	elif int_typ_spl == 'mass'  and n_int_spt == 3 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '-mass'
		splt_smpl_sfx_f = '-mass_F'
		splt_smpl_unt = 'mass'
		splt_smpl_unl = 'log[M/M$\odot$]'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_3)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_3)			
		slc_int_fg = slc_mss_int_fg[1]
		slc_int_bg = slc_mss_int_bg[1]
	elif int_typ_spl == 'mass' and n_int_spt == 4 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '-mass'
		splt_smpl_sfx_f = '-mass_F'
		splt_smpl_unt = 'mass'
		splt_smpl_unl = 'log[M/M$\odot$]'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_4)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_4)
		slc_int_fg = slc_mss_int_fg[1]
		slc_int_bg = slc_mss_int_bg[1]
	elif int_typ_spl == 'Age' and n_int_spt == 0:#in specfile_glx:
		splt_smpl_sfx = '-Age'
		splt_smpl_sfx_f = '-Age_F'
		splt_smpl_unt = 'Age'
		splt_smpl_unl = 'Age'
		slc_age_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv)
		slc_age_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv)
		slc_int_fg = slc_age_int_fg[1]
		slc_int_bg = slc_age_int_bg[1]
	elif int_typ_spl == 'Age' and n_int_spt == 1 and max_sep ==23:#in specfile_glx:
		splt_smpl_sfx = '-Age'
		splt_smpl_sfx_f = '-Age_F'
		splt_smpl_unt = 'Age'
		splt_smpl_unl = 'Age'
		slc_age_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_1)
		slc_age_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_1)
		slc_int_fg = slc_age_int_fg[1]
		slc_int_bg = slc_age_int_bg[1]
	elif int_typ_spl == 'Age' and n_int_spt == 2 and max_sep ==23:#in specfile_glx:
		splt_smpl_sfx = '-Age'
		splt_smpl_sfx_f = '-Age_F'
		splt_smpl_unt = 'Age'
		splt_smpl_unl = 'Age'
		slc_age_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_2)
		slc_age_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_2)
		slc_int_fg = slc_age_int_fg[1]
		slc_int_bg = slc_age_int_bg[1]
	elif int_typ_spl == 'Age' and n_int_spt == 3 and max_sep ==23:#in specfile_glx:
		splt_smpl_sfx = '-Age'
		splt_smpl_sfx_f = '-Age_F'
		splt_smpl_unt = 'Age'
		splt_smpl_unl = 'Age'
		slc_age_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_3)
		slc_age_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_3)
		slc_int_fg = slc_age_int_fg[1]
		slc_int_bg = slc_age_int_bg[1]
	elif int_typ_spl == 'Age' and n_int_spt == 4 and max_sep ==23:#in specfile_glx:
		splt_smpl_sfx = '-Age'
		splt_smpl_sfx_f = '-Age_F'
		splt_smpl_unt = 'Age'
		splt_smpl_unl = 'Age'
		slc_age_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_4)
		slc_age_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_4)
		slc_int_fg = slc_age_int_fg[1]
		slc_int_bg = slc_age_int_bg[1]						
	elif int_typ_spl == 'SFR' and n_int_spt == 0:#in specfile_glx:
		splt_smpl_sfx   = '-SFR' 
		splt_smpl_sfx_f = '-SFR_F'
		splt_smpl_unt   = 'M$_{\odot}$yr$^{-1}$'
		splt_smpl_unl   = 'M$_{\odot}$yr$^{-1}$'
		slc_sfr_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv)
		slc_sfr_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv)
		slc_int_fg = slc_sfr_int_fg[1]
		slc_int_bg = slc_sfr_int_bg[1]
	elif int_typ_spl == 'SFR' and n_int_spt == 1 and max_sep ==23:#in specfile_glx:
		splt_smpl_sfx   = '-SFR' 
		splt_smpl_sfx_f = '-SFR_F'
		splt_smpl_unt   = 'M$_{\odot}$yr$^{-1}$'
		splt_smpl_unl   = 'M$_{\odot}$yr$^{-1}$'
		slc_sfr_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_1)
		slc_sfr_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_1)
		slc_int_fg = slc_sfr_int_fg[1]
		slc_int_bg = slc_sfr_int_bg[1]
	elif int_typ_spl == 'SFR' and n_int_spt == 2 and max_sep ==23:#in specfile_glx:
		splt_smpl_sfx   = '-SFR' 
		splt_smpl_sfx_f = '-SFR_F'
		splt_smpl_unt   = 'M$_{\odot}$yr$^{-1}$'
		splt_smpl_unl   = 'M$_{\odot}$yr$^{-1}$'
		slc_sfr_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_2)
		slc_sfr_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_2)
		slc_int_fg = slc_sfr_int_fg[1]
		slc_int_bg = slc_sfr_int_bg[1]
	elif int_typ_spl == 'SFR' and n_int_spt == 3 and max_sep ==23:#in specfile_glx:
		splt_smpl_sfx   = '-SFR' 
		splt_smpl_sfx_f = '-SFR_F'
		splt_smpl_unt   = 'M$_{\odot}$yr$^{-1}$'
		splt_smpl_unl   = 'M$_{\odot}$yr$^{-1}$'
		slc_sfr_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_3)
		slc_sfr_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_3)
		slc_int_fg = slc_sfr_int_fg[1]
		slc_int_bg = slc_sfr_int_bg[1]
	elif int_typ_spl == 'SFR' and n_int_spt == 4 and max_sep ==23:#in specfile_glx:
		splt_smpl_sfx   = '-SFR' 
		splt_smpl_sfx_f = '-SFR_F'
		splt_smpl_unt   = 'M$_{\odot}$yr$^{-1}$'
		splt_smpl_unl   = 'M$_{\odot}$yr$^{-1}$'
		slc_sfr_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_4)
		slc_sfr_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_4)
		slc_int_fg = slc_sfr_int_fg[1]
		slc_int_bg = slc_sfr_int_bg[1]
	elif int_typ_spl == 'sSFR' and n_int_spt == 0:# in specfile_glx:
		splt_smpl_sfx = '-sSFR'
		splt_smpl_sfx_f = '-sSFR_F'
		splt_smpl_unt = 'sSFR'
		splt_smpl_unl = 'sSFR'
		slc_ssf_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv)
		slc_ssf_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv)
		slc_int_fg = slc_ssf_int_fg[1]
		slc_int_bg = slc_ssf_int_bg[1]
	elif int_typ_spl == 'sSFR' and n_int_spt == 1 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '-sSFR'
		splt_smpl_sfx_f = '-sSFR_F'
		splt_smpl_unt = 'sSFR'
		splt_smpl_unl = 'sSFR'
		slc_ssf_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_1)
		slc_ssf_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_1)
		slc_int_fg = slc_ssf_int_fg[1]
		slc_int_bg = slc_ssf_int_bg[1]
	elif int_typ_spl == 'sSFR' and n_int_spt == 2 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '-sSFR'
		splt_smpl_sfx_f = '-sSFR_F'
		splt_smpl_unt = 'sSFR'
		splt_smpl_unl = 'sSFR'
		slc_ssf_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_2)
		slc_ssf_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_2)
		slc_int_fg = slc_ssf_int_fg[1]
		slc_int_bg = slc_ssf_int_bg[1]
	elif int_typ_spl == 'sSFR' and n_int_spt == 3 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '-sSFR'
		splt_smpl_sfx_f = '-sSFR_F'
		splt_smpl_unt = 'sSFR'
		splt_smpl_unl = 'sSFR'
		slc_ssf_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_3)
		slc_ssf_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_3)
		slc_int_fg = slc_ssf_int_fg[1]
		slc_int_bg = slc_ssf_int_bg[1]
	elif int_typ_spl == 'sSFR' and n_int_spt == 4 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '-sSFR'
		splt_smpl_sfx_f = '-sSFR_F'
		splt_smpl_unt = 'sSFR'
		splt_smpl_unl = 'sSFR'
		slc_ssf_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_4)
		slc_ssf_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_4)
		slc_int_fg = slc_ssf_int_fg[1]
		slc_int_bg = slc_ssf_int_bg[1]						
	elif int_typ_spl == 'Lnuv' and n_int_spt == 0:# in specfile_glx:
		splt_smpl_sfx = '-Lnuv'
		splt_smpl_sfx_f = '-Lnuv_F'
		splt_smpl_unt = 'Lnuv'
		splt_smpl_unl = 'Lnuv'
		slc_luv_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv)
		slc_luv_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv)
		slc_int_fg = slc_luv_int_fg[1]
		slc_int_bg = slc_luv_int_bg[1]
	elif int_typ_spl == 'Lnuv' and n_int_spt == 1 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '-Lnuv'
		splt_smpl_sfx_f = '-Lnuv_F'
		splt_smpl_unt = 'Lnuv'
		splt_smpl_unl = 'Lnuv'
		slc_luv_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_1)
		slc_luv_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_1)
		slc_int_fg = slc_luv_int_fg[1]
		slc_int_bg = slc_luv_int_bg[1]
	elif int_typ_spl == 'Lnuv' and n_int_spt == 2 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '-Lnuv'
		splt_smpl_sfx_f = '-Lnuv_F'
		splt_smpl_unt = 'Lnuv'
		splt_smpl_unl = 'Lnuv'
		slc_luv_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_2)
		slc_luv_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_2)
		slc_int_fg = slc_luv_int_fg[1]
		slc_int_bg = slc_luv_int_bg[1]
	elif int_typ_spl == 'Lnuv' and n_int_spt == 3 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '-Lnuv'
		splt_smpl_sfx_f = '-Lnuv_F'
		splt_smpl_unt = 'Lnuv'
		splt_smpl_unl = 'Lnuv'
		slc_luv_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_3)
		slc_luv_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_3)
		slc_int_fg = slc_luv_int_fg[1]
		slc_int_bg = slc_luv_int_bg[1]
	elif int_typ_spl == 'Lnuv' and n_int_spt == 4 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '-Lnuv'
		splt_smpl_sfx_f = '-Lnuv_F'
		splt_smpl_unt = 'Lnuv'
		splt_smpl_unl = 'Lnuv'
		slc_luv_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_4)
		slc_luv_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_4)
		slc_int_fg = slc_luv_int_fg[1]
		slc_int_bg = slc_luv_int_bg[1]								
	elif int_typ_spl == 'sep_as' and n_int_spt == 0:# in specfile_glx:
		splt_smpl_sfx = '_as'
		splt_smpl_sfx_f = '_as_F'
		splt_smpl_unt = 'arcsec'
		splt_smpl_unl = '$^{\\prime\\prime}$'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep[1])
		slc_int_fg = slc_sep_int_fg[1]
		slc_int_bg = slc_sep_int_bg[1]
	elif int_typ_spl == 'sep_as' and n_int_spt == 1 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '_as'
		splt_smpl_sfx_f = '_as_F'
		splt_smpl_unt = 'arcsec'
		splt_smpl_unl = '$^{\\prime\\prime}$'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_1[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_1[1])
		slc_int_fg = slc_sep_int_fg[1]
		slc_int_bg = slc_sep_int_bg[1]
	elif int_typ_spl == 'sep_as' and n_int_spt == 2 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '_as'
		splt_smpl_sfx_f = '_as_F'
		splt_smpl_unt = 'arcsec'
		splt_smpl_unl = '$^{\\prime\\prime}$'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_2[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_2[1])
		slc_int_fg = slc_sep_int_fg[1]
		slc_int_bg = slc_sep_int_bg[1]
	elif int_typ_spl == 'sep_as' and n_int_spt == 3 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '_as'
		splt_smpl_sfx_f = '_as_F'
		splt_smpl_unt = 'arcsec'
		splt_smpl_unl = '$^{\\prime\\prime}$'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_3[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_3[1])
		slc_int_fg = slc_sep_int_fg[1]
		slc_int_bg = slc_sep_int_bg[1]
	elif int_typ_spl == 'sep_as' and n_int_spt == 4 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '_as'
		splt_smpl_sfx_f = '_as_F'
		splt_smpl_unt = 'arcsec'
		splt_smpl_unl = '$^{\\prime\\prime}$'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_4[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_4[1])
		slc_int_fg = slc_sep_int_fg[1]
		slc_int_bg = slc_sep_int_bg[1]
	elif int_typ_spl == 'sep_as' and n_int_spt == 5 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '_as'
		splt_smpl_sfx_f = '_as_F'
		splt_smpl_unt = 'arcsec'
		splt_smpl_unl = '$^{\\prime\\prime}$'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_5[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_5[1])
		slc_int_fg = slc_sep_int_fg[1]
		slc_int_bg = slc_sep_int_bg[1]
	elif int_typ_spl == 'sep_as' and n_int_spt == 6 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '_as'
		splt_smpl_sfx_f = '_as_F'
		splt_smpl_unt = 'arcsec'
		splt_smpl_unl = '$^{\\prime\\prime}$'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_6[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_6[1])
		slc_int_fg = slc_sep_int_fg[1]
		slc_int_bg = slc_sep_int_bg[1]
	elif int_typ_spl == 'sep_as' and n_int_spt == 1 and max_sep ==25:# in specfile_glx:
		splt_smpl_sfx = '_as'
		splt_smpl_sfx_f = '_as_F'
		splt_smpl_unt = 'arcsec'
		splt_smpl_unl = '$^{\\prime\\prime}$'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_1[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_1[1])
		slc_int_fg = slc_sep_int_fg[1]
		slc_int_bg = slc_sep_int_bg[1]
	elif int_typ_spl == 'sep_as' and n_int_spt == 2 and max_sep ==25:# in specfile_glx:
		splt_smpl_sfx = '_as'
		splt_smpl_sfx_f = '_as_F'
		splt_smpl_unt = 'arcsec'
		splt_smpl_unl = '$^{\\prime\\prime}$'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_2[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_2[1])
		slc_int_fg = slc_sep_int_fg[1]
		slc_int_bg = slc_sep_int_bg[1]
	elif int_typ_spl == 'sep_as' and n_int_spt == 3 and max_sep ==25:# in specfile_glx:
		splt_smpl_sfx = '_as'
		splt_smpl_sfx_f = '_as_F'
		splt_smpl_unt = 'arcsec'
		splt_smpl_unl = '$^{\\prime\\prime}$'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_3[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_3[1])
		slc_int_fg = slc_sep_int_fg[1]
		slc_int_bg = slc_sep_int_bg[1]
	elif int_typ_spl == 'sep_as' and n_int_spt == 4 and max_sep ==25:# in specfile_glx:
		splt_smpl_sfx = '_as'
		splt_smpl_sfx_f = '_as_F'
		splt_smpl_unt = 'arcsec'
		splt_smpl_unl = '$^{\\prime\\prime}$'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_4[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_4[1])
		slc_int_fg = slc_sep_int_fg[1]
		slc_int_bg = slc_sep_int_bg[1]
	elif int_typ_spl == 'sep_as' and n_int_spt == 5 and max_sep ==25:# in specfile_glx:
		splt_smpl_sfx = '_as'
		splt_smpl_sfx_f = '_as_F'
		splt_smpl_unt = 'arcsec'
		splt_smpl_unl = '$^{\\prime\\prime}$'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_5[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_5[1])
		slc_int_fg = slc_sep_int_fg[1]
		slc_int_bg = slc_sep_int_bg[1]
	elif int_typ_spl == 'sep_as' and n_int_spt == 6 and max_sep ==25:# in specfile_glx:
		splt_smpl_sfx = '_as'
		splt_smpl_sfx_f = '_as_F'
		splt_smpl_unt = 'arcsec'
		splt_smpl_unl = '$^{\\prime\\prime}$'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_6[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_6[1])
		slc_int_fg = slc_sep_int_fg[1]
		slc_int_bg = slc_sep_int_bg[1]
	elif int_typ_spl == 'magi' and n_int_spt == 0:# in specfile_glx:
		splt_smpl_sfx = '_magi'
		splt_smpl_sfx_f = '-magi_F'
		splt_smpl_unt = 'arcsec'
		splt_smpl_unl = '$^{\\prime\\prime}$'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv)
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv)
		slc_int_fg = slc_sep_int_fg[1]
		slc_int_bg = slc_sep_int_bg[1]
	elif int_typ_spl == 'magi' and n_int_spt == 1:# in specfile_glx:
		splt_smpl_sfx = '_magi'
		splt_smpl_sfx_f = '-magi_F'
		splt_smpl_unt = 'mag'
		splt_smpl_unl = 'mag'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv)
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv)
		slc_int_fg = slc_sep_int_fg[1]
		slc_int_bg = slc_sep_int_bg[1]
	elif int_typ_spl == 'magi' and n_int_spt == 2 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '_magi'
		splt_smpl_sfx_f = '-magi_F'
		splt_smpl_unt = 'mag'
		splt_smpl_unl = 'mag'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_2)
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_2)
		slc_int_fg = slc_sep_int_fg[1]
		slc_int_bg = slc_sep_int_bg[1]
	elif int_typ_spl == 'magi' and n_int_spt == 3 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '_magi'
		splt_smpl_sfx_f = '-magi_F'
		splt_smpl_unt = 'mag'
		splt_smpl_unl = 'mag'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_3)
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_3)
		slc_int_fg = slc_sep_int_fg[1]
		slc_int_bg = slc_sep_int_bg[1]
	elif int_typ_spl == 'magi' and n_int_spt == 4 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx = '_magi'
		splt_smpl_sfx_f = '-magi_F'
		splt_smpl_unt = 'mag'
		splt_smpl_unl = 'mag'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_4)
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_4)
		slc_int_fg = slc_sep_int_fg[1]
		slc_int_bg = slc_sep_int_bg[1]
	elif int_typ_spl == 'phi' and n_int_spt == 0:# in specfile_glx:
		splt_smpl_sfx = '-phi'
		splt_smpl_sfx_f = '-PHI'
		splt_smpl_unt = 'deg'
		splt_smpl_unl = 'deg'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv)
		slc_int_fg = slc_mss_int_fg[1]
		slc_int_bg = slc_mss_int_bg[1]
	elif int_typ_spl == 'phi' and n_int_spt == 2:# in specfile_glx:
		splt_smpl_sfx = '-phi'
		splt_smpl_sfx_f = '-PHI'
		splt_smpl_unt = 'deg'
		splt_smpl_unl = 'deg'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv_23_2)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv_23_2)			
		slc_int_fg = slc_mss_int_fg[1]
		slc_int_bg = slc_mss_int_bg[1]
	elif int_typ_spl == 'phi' and n_int_spt == 3:# in specfile_glx:
		splt_smpl_sfx = '-phi'
		splt_smpl_sfx_f = '-PHI'
		splt_smpl_unt = 'deg'
		splt_smpl_unl = 'deg'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv_23_3)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv_23_3)			
		slc_int_fg = slc_mss_int_fg[1]
		slc_int_bg = slc_mss_int_bg[1]
	elif int_typ_spl == 'icl_fg' and n_int_spt == 0:# in specfile_glx:
		splt_smpl_sfx = '-icl'
		splt_smpl_sfx_f = '-q_F'
		splt_smpl_unt = 'deg'
		splt_smpl_unl = 'deg'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv)
		slc_int_fg = slc_mss_int_fg[1]
		slc_int_bg = slc_mss_int_bg[1]
	elif int_typ_spl == 'icl_fg' and n_int_spt == 2:# in specfile_glx:
		splt_smpl_sfx = '-icl'
		splt_smpl_sfx_f = '-q_F'
		splt_smpl_unt = 'deg'
		splt_smpl_unl = 'deg'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv_23_2)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv_23_2)			
		slc_int_fg = slc_mss_int_fg[1]
		slc_int_bg = slc_mss_int_bg[1]
	elif int_typ_spl == 'icl_fg' and n_int_spt == 3:# in specfile_glx:
		splt_smpl_sfx = '-icl'
		splt_smpl_sfx_f = '-q_F'
		splt_smpl_unt = 'deg'
		splt_smpl_unl = 'deg'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv_23_3)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv_23_3)			
		slc_int_fg = slc_mss_int_fg[1]
		slc_int_bg = slc_mss_int_bg[1]
	elif int_typ_spl == 'icl_fg'  and n_int_spt == 4:# in specfile_glx:
		splt_smpl_sfx = '-icl'
		splt_smpl_sfx_f = '-q_F'
		splt_smpl_unt = 'deg'
		splt_smpl_unl = 'deg'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv_23_4)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv_23_4)			
		slc_int_fg = slc_mss_int_fg[1]
		slc_int_bg = slc_mss_int_bg[1]
	elif int_typ_spl == 'n_sersic_fg' and n_int_spt == 0:# in specfile_glx:
		splt_smpl_sfx = '-n_srs'
		splt_smpl_sfx_f = '-n_F'
		splt_smpl_unt = 'n'
		splt_smpl_unl = 'n'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,n_srs_itv)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,n_srs_itv)
		slc_int_fg = slc_mss_int_fg[1]
		slc_int_bg = slc_mss_int_bg[1]
	elif int_typ_spl == 'n_sersic_fg'  and n_int_spt == 2:# in specfile_glx:
		splt_smpl_sfx = '-n_srs'
		splt_smpl_sfx_f = '-n_F'
		splt_smpl_unt = 'n'
		splt_smpl_unl = 'n'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,n_srs_itv_23_2)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,n_srs_itv_23_2)			
		slc_int_fg = slc_mss_int_fg[1]
		slc_int_bg = slc_mss_int_bg[1]
	elif int_typ_spl == 'r_eff_fg' and n_int_spt == 0:# in specfile_glx:
		splt_smpl_sfx = '-r_eff'
		splt_smpl_sfx_f = '-re_F'
		splt_smpl_unt = 'arcsec'
		splt_smpl_unl = '$^{\\prime\\prime}$'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv)
		slc_int_fg = slc_mss_int_fg[1]
		slc_int_bg = slc_mss_int_bg[1]
	elif int_typ_spl == 'r_eff_fg'  and n_int_spt == 2:# in specfile_glx:
		splt_smpl_sfx = '-r_eff'
		splt_smpl_sfx_f = '-re_F'
		splt_smpl_unt = 'arcsec'
		splt_smpl_unl = '$^{\\prime\\prime}$'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv_23_2)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv_23_2)			
		slc_int_fg = slc_mss_int_fg[1]
		slc_int_bg = slc_mss_int_bg[1]	
	elif int_typ_spl == 'r_eff_fg'  and n_int_spt == 3:# in specfile_glx:
		splt_smpl_sfx = '-r_eff'
		splt_smpl_sfx_f = '-re_F'
		splt_smpl_unt = 'arcsec'
		splt_smpl_unl = '$^{\\prime\\prime}$'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv_23_3)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv_23_3)			
		slc_int_fg = slc_mss_int_fg[1]
		slc_int_bg = slc_mss_int_bg[1]						

	############CHECK NUMBER OF BINS############
	if (lower_shift+upper_shift)>=len(slc_int_bg):
		print
		print colored('Upper and Lower shifts larger than number of bins!','yellow')
		print colored('Number of bins       : ' + str(len(slc_int_bg)),'yellow')
		print colored('Number of slices     : ' + str(n_int_spt),'yellow')
		print colored('Lower & Upper shifts : ' + str(lower_shift)+' - '+str(upper_shift),'yellow')
		print colored('Check: lower_shift & upper_shift parameters','yellow')
		print
		quit()
	else:
		print
		print colored('Number of bins       : ' + str(len(slc_int_bg)),'yellow')
		print colored('Number of slices     : ' + str(n_int_spt),'yellow')
		print colored('Lower & Upper shifts : ' + str(lower_shift)+' - '+str(upper_shift),'yellow')
		print
		pass
	############CHECK NUMBER OF BINS############

	FILES_M_BG  = []
	FILES_A_BG  = []
	FILES_M_FG  = []
	FILES_A_FG  = []

	for element,interval_range in enumerate(range(lower_shift,len(slc_int_bg)-upper_shift)):
		index_int = interval_range
		if int_typ_spl == 'sep_as':
			ini_fg_spc_m  = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-' + str(slc_int_fg[index_int]) + '-stk-'+str(stk_function)+'.fits'
			ini_fg_spc_a  = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-' + str(slc_int_fg[index_int]) + '-stk-'+str(stk_function)+'.fits'
			ini_bg_spc_m  = res_stk_res + 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-' + str(slc_int_fg[index_int]) + '-stk-'+str(stk_function)+'.fits'
			ini_bg_spc_a  = res_stk_res + 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-' + str(slc_int_fg[index_int]) + '-stk-'+str(stk_function)+'.fits'

			ini_fg_spc_hst  = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-' + str(slc_int_fg[index_int]) + '-stk-hst.fits'
			ini_fg_spc_hsw  = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-' + str(slc_int_fg[index_int]) + '-stk-hsw.fits'
			ini_bg_spc_hst  = res_stk_res + 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-' + str(slc_int_fg[index_int]) + '-stk-hst.fits'
			ini_bg_spc_hsw  = res_stk_res + 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-' + str(slc_int_fg[index_int]) + '-stk-hsw.fits'

		else:
			ini_fg_spc_m  = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-0-' + str(max_sep) + '-ss' + splt_smpl_sfx_f +'-'+str(slc_int_fg[index_int]) + '-stk-'+str(stk_function)+'.fits'
			ini_fg_spc_a  = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-0-' + str(max_sep) + '-ss' + splt_smpl_sfx_f +'-'+str(slc_int_fg[index_int]) + '-stk-'+str(stk_function)+'.fits'
			ini_bg_spc_m  = res_stk_res + 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-0-' + str(max_sep) + '-ss' + splt_smpl_sfx_f +'-'+str(slc_int_fg[index_int]) + '-stk-'+str(stk_function)+'.fits'
			ini_bg_spc_a  = res_stk_res + 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-0-' + str(max_sep) + '-ss' + splt_smpl_sfx_f +'-'+str(slc_int_fg[index_int]) + '-stk-'+str(stk_function)+'.fits'

			ini_fg_spc_hst  = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-0-' + str(max_sep) + '-ss' + splt_smpl_sfx_f +'-'+str(slc_int_fg[index_int]) + '-stk-hst.fits'
			ini_fg_spc_hsw  = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-0-' + str(max_sep) + '-ss' + splt_smpl_sfx_f +'-'+str(slc_int_fg[index_int]) + '-stk-hsw.fits'
			ini_bg_spc_hst  = res_stk_res + 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-0-' + str(max_sep) + '-ss' + splt_smpl_sfx_f +'-'+str(slc_int_fg[index_int]) + '-stk-hst.fits'
			ini_bg_spc_hsw  = res_stk_res + 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-0-' + str(max_sep) + '-ss' + splt_smpl_sfx_f +'-'+str(slc_int_fg[index_int]) + '-stk-hsw.fits'		

		FILES_M_BG.append(ini_bg_spc_m)
		FILES_A_BG.append(ini_bg_spc_a)
		FILES_M_FG.append(ini_fg_spc_m)
		FILES_A_FG.append(ini_fg_spc_a)

	print
	print colored('Intervals: '+str(slc_int_fg)	,'yellow')
	print
	print colored('Lower shift: '+str(lower_shift),'yellow')
	print colored('Lower shift: '+str(slc_int_fg[lower_shift]),'yellow')
	print colored('Upper shift: '+str(upper_shift)+','+str(upper_shift-1),'yellow')
	print colored('Upper shift: '+str(slc_int_fg[len(slc_int_bg)-upper_shift-1]),'yellow')
	print

	B_FLAG = (FILES_M_BG[0].split('ss-zf_B-')[1]).rsplit('-ss-zf_F-')[0]
	F_FLAG = (FILES_M_FG[0].split('ss-zf_F-')[1]).rsplit('-ss-sep_as-')[0]
	print
	print colored('Background Redshift Flag: '+str(B_FLAG),'yellow')
	print colored('Foreground Redshift Flag: '+str(F_FLAG),'yellow')
	print

	print
	print colored('Fitting ' + str(len(LINES[0])) + ' lines in the range ' +str(lmb_min_lim) +'-'+str(lmb_max_lim),'yellow') 
	print "\n".join([lineinrange[0] + '-' +str(lineinrange[1]) +  '-' +str(lineinrange[2]) +  '-' +str(lineinrange[3]) for lineinrange in zip(LINES[4],LINES[0],LINES[5],LINES[9])])
	print

	PLOT_TITLE    = 'z_Bg: ' + B_FLAG + ', z_Fg:' + F_FLAG + ' ' + str(slc_int_fg[lower_shift]) + '-' + str(slc_int_fg[len(slc_int_bg)-upper_shift-1]) + ' ' + stk_function

	print
	print stk_fct[0]
	print fpt_background
	print fpt_foreground
	print
	if (stk_fct[0] == 'med') and fpt_background == True:
		FILES = FILES_M_BG
		plt_sufix_fnm = 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-0-' + str(max_sep) + '-ss' + splt_smpl_sfx_f +'-'+str(slc_int_fg[index_int])  + slc_int_fg[lower_shift] +'-' +slc_int_fg[len(slc_int_bg)-upper_shift-1]
		print
		print colored("\n".join([str(FILE) for FILE in FILES]),'blue')
		print
	elif (stk_fct[0] == 'avg') and fpt_background == True:
		FILES = FILES_A_BG
		plt_sufix_fnm = 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-0-' + str(max_sep) + '-ss' + splt_smpl_sfx_f +'-'+str(slc_int_fg[index_int])  + slc_int_fg[lower_shift] +'-' +slc_int_fg[len(slc_int_bg)-upper_shift-1]
		print		
		print colored("\n".join([str(FILE) for FILE in FILES]),'red')
		print
	elif (stk_fct[0] == 'avg') and fpt_foreground == True:
		FILES = FILES_A_FG
		plt_sufix_fnm = 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-0-' + str(max_sep) + '-ss' + splt_smpl_sfx_f +'-'+str(slc_int_fg[index_int])  + slc_int_fg[lower_shift] +'-' +slc_int_fg[len(slc_int_bg)-upper_shift-1]
		print
		print colored("\n".join([str(FILE) for FILE in FILES]),'blue')
		print
	elif (stk_fct[0] == 'med') and fpt_foreground == True:
		FILES = FILES_A_FG
		plt_sufix_fnm = 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-0-' + str(max_sep) + '-ss' + splt_smpl_sfx_f +'-'+str(slc_int_fg[index_int])  + slc_int_fg[lower_shift] +'-' +slc_int_fg[len(slc_int_bg)-upper_shift-1]
		print		
		print colored("\n".join([str(FILE) for FILE in FILES]),'red')
		print
	else:
		pass

	#################
	if 'Fg' in FILES[0]:
		glx_type = 'Fg'
		clr_plt  = 'red'
	elif 'Bg' in FILES[0]:
		glx_type = 'Bg'
		clr_plt  = 'blue'

	LINES_NEW = np.asarray(LINES[0][:]*(1+z_glx_Ps))
	INDXS_NEW = np.where(np.logical_and(LINES_NEW>=lmb_min, LINES_NEW<=lmb_max))
	LENIN_NEW  =len(INDXS_NEW[0])

	print
	print LINES_NEW[INDXS_NEW]
	print

	##################SELECT LINES PLOT IN ONE PANEL#################
	LINES_SUBSMPL_PLT = []
	LINES_SUBSMPL_LNE = []
	LINES_SUBSMPL_DBL = []
	LINES_SUBSMPL_SKP = []
	for j,lines in enumerate(INDXS_NEW[0]):
		min_y_ind_spec = []
		max_y_ind_spec = []		
		if (abs(LINES[0][lines] - LINES[0][lines+1])<22) and ((abs(LINES[0][lines] - LINES[0][lines-1])>22)) and ('Dbl' not in LINES[3][lines+2]) and ('Dbl' not in LINES[3][lines]):#or (abs(LINES[0][lines] - LINES[0][lines+1])<22):
			LINES_SUBSMPL_PLT.append(True)
			LINES_SUBSMPL_LNE.append(LINES[0][lines])
			LINES_SUBSMPL_DBL.append(LINES[0][lines])
			LINES_SUBSMPL_SKP.append(LINES[0][lines+1])
			print
			print '1',LINES[0][lines],LINES[3][lines]
			#print (abs(LINES[0][lines] - LINES[0][lines+1])<22)
			#print ((abs(LINES[0][lines] - LINES[0][lines-1])>22))
		elif (abs(LINES[0][lines] - LINES[0][lines-1])<22) and ((abs(LINES[0][lines] - LINES[0][lines+1])>22)) and ('Dbl' not in LINES[3][lines+1]) and ('Dbl' not in LINES[3][lines]):
			print
			print colored(LINES[4][lines]+'-'+LINES[3][lines]+'-'+str(LINES[0][lines]),'yellow')
			print colored(LINES[4][lines-1]+'-'+LINES[3][lines-1]+'-'+str(LINES[0][lines-1]),'yellow')
			print
			LNS_NOT_CTG = False
			PLT_REG_DFN = False
			print
			print '1a'
			print LNS_NOT_CTG
			print PLT_REG_DFN
			print

		elif ('Dbl' in LINES[3][lines]):
			LINES_SUBSMPL_LNE.append(LINES[0][lines])
			LINES_SUBSMPL_PLT.append(True)
			LINES_SUBSMPL_DBL.append(LINES[0][lines])
			print
			print '2',LINES[0][lines],LINES[3][lines]
		elif ((abs(LINES[0][lines] - LINES[0][lines+1])<22) and ((abs(LINES[0][lines] - LINES[0][lines-1])>22)) and ('Dbl' in LINES[3][lines+2])):
			pass
			LINES_SUBSMPL_PLT.append(True)
			#LINES_SUBSMPL_LNE.append(LINES[0][lines])
			LINES_SUBSMPL_SKP.append(LINES[0][lines+1])

			print
			print '3a',LINES[0][lines],LINES[3][lines]

		elif ((abs(LINES[0][lines] - LINES[0][lines-1])<22) and ((abs(LINES[0][lines] - LINES[0][lines+1])<22)) and ('Dbl' in LINES[3][lines+1])): 
			pass
			LINES_SUBSMPL_PLT.append(True)
			#LINES_SUBSMPL_LNE.append(LINES[0][lines])
			LINES_SUBSMPL_SKP.append(LINES[0][lines+1])

			print
			print '3b',LINES[0][lines],LINES[3][lines]

		else:
			pass
			LINES_SUBSMPL_PLT.append(False)
			LINES_SUBSMPL_LNE.append(LINES[0][lines])
			print
			print '4',LINES[0][lines],LINES[3][lines]


	print
	print len(INDXS_NEW[0])
	print 'LINES_SUBSMPL_DBL',len(LINES_SUBSMPL_DBL),LINES_SUBSMPL_DBL
	print 'LINES_SUBSMPL_PLT',len(LINES_SUBSMPL_PLT),LINES_SUBSMPL_PLT
	print 'LINES_SUBSMPL_LNE',len(LINES_SUBSMPL_LNE),LINES_SUBSMPL_LNE
	print 'LINES_SUBSMPL_SKP',len(LINES_SUBSMPL_SKP),LINES_SUBSMPL_SKP
	print
	LENIN_NEW  =len(INDXS_NEW[0])-len(np.where(LINES_SUBSMPL_SKP)[0])
	#quit()
	##################SELECT LINES PLOT IN ONE PANEL#################

	if LENIN_NEW == 1:
		#LENIN_NEW = 2
		nmb_cols  = 2
		empty_plots = 1
	else:
		pass
		print
		print len(INDXS_NEW[0]),LENIN_NEW,empty_plots
		print len(INDXS_NEW[0]) / 1,empty_plots
		print len(INDXS_NEW[0]) / 1==empty_plots
		print len(INDXS_NEW[0]) / 1!=empty_plots
		print
		if lbl_col_idv == True:
			i=1
			while (LENIN_NEW / i) != empty_plots:
				print 'while',i, (LENIN_NEW / i )
				i +=1
			nmb_cols = i
		elif lbl_col_idv == False:
			nmb_cols = 4
			nmb_cols   = kwargs.get('nmb_cols',4)
		print
		print 'end-while',i, (LENIN_NEW / i )
		print

	nmb_rows    = LENIN_NEW/nmb_cols
	nmb_rows    = int(np.ceil(float(LENIN_NEW)/float(nmb_cols)))
	pnl_indx    = np.arange(0,nmb_cols*nmb_rows)
	empty_plots = len(pnl_indx)-LENIN_NEW
	print
	print colored('Number of cols & rows           : ' + str(nmb_cols)+','+str(nmb_rows),'yellow')
	print colored('Total number of panels          : ' + str(nmb_cols*nmb_rows),'yellow')
	print colored('Total number of lines           : ' + str(len(INDXS_NEW[0])),'yellow')
	print colored('Total number of lines unrepeated: ' + str(LENIN_NEW),'yellow')
	print colored('Total empty panels              : ' + str(abs(len(INDXS_NEW[0])-nmb_cols*nmb_rows))+'-'+str(len(pnl_indx)-LENIN_NEW),'yellow')
	print colored('Total empty plots               : ' + str(empty_plots),'yellow')
	print

	if landscape_plt == True:
		fxsize=11*1.5            #16 *nmb_cols
		fysize=8#*nmb_rows       #16 *nmb_rows
	else:
		fysize=11*1.5            #16 *nmb_cols
		fxsize=8#*nmb_rows       #16 *nmb_rows
	'''
	fxsize=11*1.5            #16 *nmb_cols
	fysize=8#*nmb_rows       #16 *nmb_rows
	'''
	f = plt.figure(num=None, figsize=(fxsize, fysize), dpi=180, facecolor='w',
		edgecolor='k')
	plt.subplots_adjust(
		left 	= (34/25.4)/fxsize,     #22-def --> 26 bigger
		bottom 	= (26/25.4)/fysize,     #19-def --> 20 bigger
		right 	= 1 - (8/25.4)/fxsize,  # 2-def --> 6  bigger
		top 	= 1 - (10/25.4)/fysize)  # 4-def --> 8  bigger
	plt.subplots_adjust(hspace=0.18,wspace=0.30)

	f.add_subplot(111, frameon=False)
	#plt.frameon=False
	plt.tick_params(labelcolor='none', top=False, bottom=False, left=False, right=False)
	plt.xlabel('$\lambda$'  ,labelpad=25,fontsize=38, family = 'serif', ha='center')
	plt.ylabel('F$_\lambda$',labelpad=50,fontsize=38, family = 'serif', va='center', rotation='vertical')

	gs0 = gridspec.GridSpec(nmb_rows,nmb_cols)
	MSK_NTMS     = 2.5
	MSK_NTMS_PLT = 1.5

	if 'Bg' in FILES[0]:
		colors = "bgrcmykw"
	elif 'Fg' in FILES[0]:
		colors = "rgbcmykw"

	print [slc_int_fg [interval_range] for interval_range in range(lower_shift,len(slc_int_bg)-upper_shift)]

	if lbl_col_idv == True or (lbl_col_idv == False and nmb_cols==2):
		pass
		ax110 = plt.Subplot(f, gs0[-empty_plots])
		f.add_subplot(ax110)
		ax110.axis('off')
		#ax110.set_frame_on(False)
		#xticklabels = ax110.get_xticklabels()
		#yticklabels = ax110.get_yticklabels()		
		#plt.setp(xticklabels, visible=False,family='serif')
		#plt.setp(yticklabels, visible=False,family='serif')
		print [ax110.annotate('['+str(slc_int_fg [interval_range] + '] ' + splt_smpl_unl), (0.05, 0.8 - (subsmpl*0.15)),xytext=((0.15, 0.8 - (subsmpl*0.15))),arrowprops=dict(arrowstyle = '-',fc=colors[subsmpl],ec=colors[subsmpl],relpos=(0.5, 0.5),lw=2.5),xycoords='axes fraction', family='serif',fontsize=18, va='center') for subsmpl,interval_range in enumerate(range(lower_shift,len(slc_int_bg)-upper_shift))]
		#print [f.text(0.60+(subsmpl*0.1), 0.02, '   - ' + '['+str(slc_int_fg [interval_range] + '] $^{\\prime\\prime}$')  ,fontsize=24, ha='left',color=colors[subsmpl]) for subsmpl,interval_range in enumerate(range(lower_shift,len(slc_int_bg)-upper_shift))]
	elif (lbl_col_idv == False and nmb_cols>2):
		print [f.text(0.60+(subsmpl*0.1), 0.02, '   - ' + '['+str(slc_int_fg [interval_range] + '] '+ splt_smpl_unl)  ,family='serif',fontsize=24, ha='left',color=colors[subsmpl]) for subsmpl,interval_range in enumerate(range(lower_shift,len(slc_int_bg)-upper_shift))]
	#quit()
	
	for j,lines in enumerate(INDXS_NEW[0]):
		min_y_ind_spec = []
		max_y_ind_spec = []		
		print
		print colored('Line: ','yellow')
		print colored(LINES[4][lines]+'-'+LINES[3][lines]+'-'+str(LINES[0][lines]),'yellow')
		print
		if (abs(LINES[0][lines] - LINES[0][lines+1])<22) and ((abs(LINES[0][lines] - LINES[0][lines-1])>22)) and ('Dbl' not in LINES[3][lines+2]) and ('Dbl' not in LINES[3][lines]):
			print
			print colored(LINES[4][lines]+'-'+LINES[3][lines]+'-'+str(LINES[0][lines]),'yellow')
			print colored(LINES[4][lines-1]+'-'+LINES[3][lines-1]+'-'+str(LINES[0][lines-1]),'yellow')
			print
			LNS_NOT_CTG = False
			PLT_REG_DFN = True
			print
			print '1'
			print 'LNS_NOT_CTG: ',LNS_NOT_CTG
			print 'PLT_REG_DFN: ',PLT_REG_DFN
			print
		elif (abs(LINES[0][lines] - LINES[0][lines-1])<22) and ((abs(LINES[0][lines] - LINES[0][lines+1])>22)) and ('Dbl' not in LINES[3][lines+1]) and ('Dbl' not in LINES[3][lines]):
			print
			print colored(LINES[4][lines]+'-'+LINES[3][lines]+'-'+str(LINES[0][lines]),'yellow')
			print colored(LINES[4][lines-1]+'-'+LINES[3][lines-1]+'-'+str(LINES[0][lines-1]),'yellow')
			print
			LNS_NOT_CTG = False
			PLT_REG_DFN = False
			print
			print '1a'
			print 'LNS_NOT_CTG: ',LNS_NOT_CTG
			print 'PLT_REG_DFN: ',PLT_REG_DFN
			print
		elif ('Dbl' in LINES[3][lines]):
			print
			print colored(LINES[4][lines-2]+'-'+LINES[3][lines-2]+'-'+str(LINES[0][lines-2]),'yellow')
			print colored(LINES[4][lines-1]+'-'+LINES[3][lines-1]+'-'+str(LINES[0][lines-1]),'yellow')
			print
			LNS_NOT_CTG = True
			PLT_REG_DFN = True
			print
			print '2'
			print 'LNS_NOT_CTG: ',LNS_NOT_CTG
			print 'PLT_REG_DFN: ',PLT_REG_DFN
			print
		elif ((abs(LINES[0][lines] - LINES[0][lines+1])<22) and ((abs(LINES[0][lines] - LINES[0][lines-1])>22)) and ('Dbl' in LINES[3][lines+2])):
			print
			print colored(LINES[4][lines]  +'-'+LINES[3][lines]+'-'+str(LINES[0][lines]),'yellow')
			print colored(LINES[4][lines-1]+'-'+LINES[3][lines-1]+'-'+str(LINES[0][lines+1]),'yellow')			
			print colored(LINES[4][lines+1]+'-'+LINES[3][lines+1]+'-'+str(LINES[0][lines+1]),'yellow')
			print
			LNS_NOT_CTG = False
			PLT_REG_DFN = False
			print
			print '3a'
			print 'LNS_NOT_CTG: ',LNS_NOT_CTG
			print 'PLT_REG_DFN: ',PLT_REG_DFN
			print
		elif ((abs(LINES[0][lines] - LINES[0][lines-1])<22) and ((abs(LINES[0][lines] - LINES[0][lines+1])<22)) and ('Dbl' in LINES[3][lines+1])): 
			print
			print colored(LINES[4][lines]  +'-'+LINES[3][lines]+'-'+str(LINES[0][lines]),'yellow')
			print colored(LINES[4][lines-1]+'-'+LINES[3][lines-1]+'-'+str(LINES[0][lines+1]),'yellow')
			print colored(LINES[4][lines+1]+'-'+LINES[3][lines+1]+'-'+str(LINES[0][lines+1]),'yellow')
			print
			LNS_NOT_CTG = False
			PLT_REG_DFN = False
			print
			print '3b'
			print 'LNS_NOT_CTG: ',LNS_NOT_CTG
			print 'PLT_REG_DFN: ',PLT_REG_DFN
			print
		else:
			LNS_NOT_CTG = True
			PLT_REG_DFN = True
			print
			print '4'
			print 'LNS_NOT_CTG: ',LNS_NOT_CTG
			print 'PLT_REG_DFN: ',PLT_REG_DFN
			print
			pass
		lmb_min_lim_line_ft = LINES[0][lines] - MSK_NTMS*LINES[1][lines]
		lmb_max_lim_line_ft = LINES[0][lines] + MSK_NTMS*LINES[1][lines]

		lmb_min_lim_line = LINES[0][lines]*(1+z_glx_Ps) - MSK_NTMS_PLT*LINES[2][lines]
		lmb_max_lim_line = LINES[0][lines]*(1+z_glx_Ps) + MSK_NTMS_PLT*LINES[2][lines]
		
		if splt_ind_lns == False and PLT_REG_DFN == True:
			print colored('Plot line profiles of all bins overlaid!','yellow')
			print colored(splt_ind_lns,'yellow')
			crt_idx =  np.where(LINES[0][lines]==np.asarray(LINES_SUBSMPL_LNE))[0]
			if crt_idx.size == 0:
				print 'empty',LINES[0][lines]
				crt_idx =  np.where(LINES[0][lines+1]==np.asarray(LINES_SUBSMPL_LNE))[0]
			else:
				pass
			print LINES[0][lines]
			print crt_idx
			ax110 = plt.Subplot(f, gs0[crt_idx])#gs0[j])
			f.add_subplot(ax110)
			splt_ind_lns_sfx = ''
			
			#ax110.set_rasterization_zorder(1)
			#plt.autoscale(enable=True, axis='both', tight=False)
			#plt.autoscale(enable=True, axis='y', tight=True)
			##ax110.set_title(PLOT_TITLE)
			xticklabels = ax110.get_xticklabels()
			yticklabels = ax110.get_yticklabels()
			plt.setp(xticklabels, visible=False,family='serif')
			#plt.setp(yticklabels, visible=True ,family='serif')
			ax110.yaxis.set_tick_params(which='both',labelsize=18,direction='in',color='black',bottom=True,top=True,left=True,right=True)
			ax110.xaxis.set_tick_params(which='both',labelsize=18,direction='in',color='black',bottom=True,top=True,left=True,right=True)
			#
			minorLocator_x   = plt.MultipleLocator(1)
			majorLocator_x   = plt.MultipleLocator(5)
			#minorLocator_y   = plt.MultipleLocator(0.1)
			#majorLocator_y   = plt.MultipleLocator(0.5)
			ax110.xaxis.set_minor_locator(minorLocator_x)
			ax110.xaxis.set_major_locator(majorLocator_x)
			#ax110.yaxis.set_minor_locator(minorLocator_y)
			#ax110.yaxis.set_major_locator(majorLocator_y)
			plt.tick_params(which='both', width=0.7)
			plt.tick_params(which='major', length=5)
			plt.tick_params(which='minor', length=2)
			yticklabels = ax110.get_yticklabels()
			ax110.minorticks_on()
			#
			#ax110.yaxis.set_major_formatter(mticker.FormatStrFormatter('%.2f'))
			#
			##plt.xlabel('$\lambda$',fontsize=28, family = 'serif')
			##plt.ylabel('F$_\lambda$ (ergs/sec/cm$^{2}/\AA$)',fontsize=28, family = 'serif')
			##plt.ylabel('F$_\lambda$',fontsize=28, family = 'serif')
		elif splt_ind_lns == True and PLT_REG_DFN == True:
			pass
			print colored('Plot line profile per bin individually!','yellow')
			print colored(splt_ind_lns,'yellow')
			print
			'''
			xticklabels = ax110.get_xticklabels()
			yticklabels = ax110.get_yticklabels()			
			plt.setp(xticklabels, visible=False,family='serif')
			#plt.setp(yticklabels, visible=True ,family='serif')
			ax110.yaxis.set_tick_params(which='both',labelsize=18,direction='in',color='black',bottom=True,top=True,left=True,right=True)
			ax110.xaxis.set_tick_params(which='both',labelsize=18,direction='in',color='black',bottom=True,top=True,left=True,right=True)
			minorLocator_x   = plt.MultipleLocator(5)
			majorLocator_x   = plt.MultipleLocator(10)
			#minorLocator_y   = plt.MultipleLocator(0.1)
			#majorLocator_y   = plt.MultipleLocator(0.5)
			ax110.xaxis.set_minor_locator(minorLocator_x)
			ax110.xaxis.set_major_locator(majorLocator_x)
			#ax110.yaxis.set_minor_locator(minorLocator_y)
			#ax110.yaxis.set_major_locator(majorLocator_y)			
			plt.tick_params(which='both', width=0.7)
			plt.tick_params(which='major', length=5)
			plt.tick_params(which='minor', length=2)
			ax110.minorticks_on()
			'''			
			crt_idx =  np.where(LINES[0][lines]==np.asarray(LINES_SUBSMPL_LNE))[0]
			if crt_idx.size == 0:
				print 'empty',LINES[0][lines]
				crt_idx =  np.where(LINES[0][lines+1]==np.asarray(LINES_SUBSMPL_LNE))[0]
			else:
				pass
			
			ax999 = plt.Subplot(f, gs0[crt_idx])#gs0[j])
			f.add_subplot(ax999)
			#ax999.set_title('sadasd')
			xticklabels999 = ax999.get_xticklabels()
			yticklabels999 = ax999.get_yticklabels()			
			plt.setp(xticklabels999, visible=False)
			plt.setp(yticklabels999, visible=False)
			plt.tick_params(top=False, bottom=False, left=False, right=False, labelleft=False, labelbottom=True)



			gs11 = gridspec.GridSpecFromSubplotSpec(1, len(FILES), subplot_spec=gs0[crt_idx], hspace=0, wspace=0)#gs0[j], hspace=0, wspace=0)
			splt_ind_lns_sfx = '-Splt'
			axs_splt_lns   = []
			min_y_splt_lns = []
			max_y_splt_lns = []
		else:
			splt_ind_lns_sfx = ''
			pass

		#######################################################DIF-SEPARATIONS#######################################################
		if 'Bg' in FILES[0]:
			colors = "bgrcmykw"
		elif 'Fg' in FILES[0]:
			colors = "rgbcmykw"
		for index,specfile_glx in enumerate(FILES):
			print
			print specfile_glx
			print
			glx = Spectra_x_y(specfile_glx)
			lambda_glx,inten_glx,crval_glx,cdel1_glx,cd1_glx = glx[0], glx[1], glx[2], glx[3], glx[4]
			stk_glx_nmb = Header_Get(specfile_glx,'STK_NUM')
			########################################################LINE-FIT#######################################################
			if 'Dbl' in LINES[3][lines] and fit_fnct=='gauss' and fit_type == 'lmfit' and fit_lne == False and LNS_NOT_CTG == True:
				fit_typ = 'G'
				#GAUSSIAN FIT
				MSK_NTMS=2
				print
				print colored('1D Gaussian Fit Mode Choosen: Lmfit (Offset)','cyan')
				print colored('********************************************','cyan')
				print colored('****************Double Line*****************','cyan')
				print colored('********Defining Plottiing Variables********','cyan')
				print colored('********************************************','cyan')
				print colored('********************A***********************','cyan')
				print
				from lmfit import Model

				'''
				lmb_min_lim_line_ft_D = (LINES[0][lines-2]+LINES[8][lines-2]) - MSK_NTMS*LINES[1][lines-2] #IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line_ft_D = (LINES[0][lines-1]+LINES[8][lines-1]) + MSK_NTMS*LINES[1][lines-1]
				lmb_min_lim_line_D    = (LINES[0][lines-2]-LINES[8][lines-2])*(1+z_glx_Ps) - LINES[2][lines-2]-5#- 20#LINES[2][lines] - 10 #IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line_D    = (LINES[0][lines-1]+LINES[8][lines-1])*(1+z_glx_Ps) + LINES[2][lines-1]+5#+ 20#LINES[2][lines] + 10

				lmb_min_lim_line_ft_1 = (LINES[0][lines-2]+LINES[8][lines-2]) - MSK_NTMS*LINES[1][lines-2] #IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line_ft_1 = (LINES[0][lines-2]+LINES[8][lines-2]) + MSK_NTMS*LINES[1][lines-2]
				lmb_min_lim_line_1    = (LINES[0][lines-2]+LINES[8][lines-2])*(1+z_glx_Ps) - LINES[2][lines-2]-5#- 20#LINES[2][lines-2] - 10 #IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line_1    = (LINES[0][lines-2]+LINES[8][lines-2])*(1+z_glx_Ps) + LINES[2][lines-2]+5#+ 20#LINES[2][lines-2] + 10

				lmb_min_lim_line_ft_2 = (LINES[0][lines-1]+LINES[8][lines-1]) - MSK_NTMS*LINES[1][lines-1] #IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line_ft_2 = (LINES[0][lines-1]+LINES[8][lines-1]) + MSK_NTMS*LINES[1][lines-1]
				lmb_min_lim_line_2    = (LINES[0][lines-1]+LINES[8][lines-1])*(1+z_glx_Ps) - LINES[2][lines-1]-5#- 20#LINES[2][lines-1] - 10 #IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line_2    = (LINES[0][lines-1]+LINES[8][lines-1])*(1+z_glx_Ps) + LINES[2][lines-1]+5#+ 20#LINES[2][lines-1] + 10

				mask_pl    = (lambda_glx >= lmb_min_lim_line_D)    & (lambda_glx <= lmb_max_lim_line_D)
				mask_ft    = (lambda_glx >= lmb_min_lim_line_ft_D) & (lambda_glx <= lmb_max_lim_line_ft_D)
				label_glx  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function

				mask_pl_1    = (lambda_glx >= lmb_min_lim_line_1)    & (lambda_glx <= lmb_max_lim_line_1)
				mask_ft_1    = (lambda_glx >= lmb_min_lim_line_ft_1) & (lambda_glx <= lmb_max_lim_line_ft_1)
				label_glx_1  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function

				mask_pl_2    = (lambda_glx >= lmb_min_lim_line_2)    & (lambda_glx <= lmb_max_lim_line_2)
				mask_ft_2    = (lambda_glx >= lmb_min_lim_line_ft_2) & (lambda_glx <= lmb_max_lim_line_ft_2)
				label_glx_2  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function
				'''
				L1_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WF01')        #LINES-1  Wdt-Fit  1GF-IntVal      WIDTH-FIT
				L2_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WP01')        #LINES-2  Wdt-Plt  1GF-IntVal      WIDTH-PLT
				L7_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CF01')        #LINES-7  Ctr Fit Bnds  1GF-IntVal CTR-FIT-BNDS
				L8_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CO01')        #LINES-8  Ctr Fit Ofst  1GF-IntVal CTR-OFFSET
				L10_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF01')        #LINES-10 Ctr Fit Amp   1GF-IntVal LNE_AMP_BNDS

				L1_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WF02')        #LINES-1  Wdt-Fit  1GF-IntVal      WIDTH-FIT
				L2_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WP02')        #LINES-2  Wdt-Plt  1GF-IntVal      WIDTH-PLT
				L7_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CF02')        #LINES-7  Ctr Fit Bnds  1GF-IntVal CTR-FIT-BNDS
				L8_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CO02')        #LINES-8  Ctr Fit Ofst  1GF-IntVal CTR-OFFSET
				L10_2 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF02')        #LINES-10 Ctr Fit Amp   1GF-IntVal LNE_AMP_BNDS

				lmb_min_lim_line_ft = (LINES[0][lines-2]+L8_1) - MSK_NTMS*L1_1 ##IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line_ft = (LINES[0][lines-2]+L8_1) + MSK_NTMS*L1_1
				lmb_min_lim_line    = (LINES[0][lines-2]+L8_1)*(1+z_glx_Ps) - 1.5*MSK_NTMS*L2_1#- 20#L2_1 - 10 ##IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line    = (LINES[0][lines-2]+L8_1)*(1+z_glx_Ps) + 1.5*MSK_NTMS*L2_1#+ 20#L2_1 + 10

				mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
				mask_ft    = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
				label_glx  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function

				CTRE_G_0_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CF01')#,float(CTRE_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct')
				AMPL_G_0_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF01')#,float(AMPL_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct')
				FWHM_G_0_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FF01')#,float(FWHM_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct')
				EW_0_1        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WF01')#,float(EW_0)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct')
				EWE_0_1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EF01')#,float(EWE_0)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct')

				CTRE_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLO1')#,float(CTRE_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Offst' + str(fit_type))
				AMPL_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALO1')#,float(AMPL_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Offst' + str(fit_type))
				FWHM_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FLO1')#,float(FWHM_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Offst' + str(fit_type))
				EW_O_1        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WLO1')#,float(EW_O)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Offst' + str(fit_type))
				EWE_O_1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_ELO1')#,float(EWE_O)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Offst' + str(fit_type))
				OFST_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_OFO1')#,float(OFST_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ofst 1GF Offst' + str(fit_type))

				CTRE_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLC1')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
				AMPL_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALC1')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
				SGMA_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_SLC1')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
				FWHM_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FLC1')#,float(FWHM_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
				EW_C_1        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WLC1')#,float(EW_C)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
				EWE_C_1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_ELC1')#,float(EWE_C)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
				CTRE_G_C_1_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CEC1')#,float(CTRE_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
				AMPL_G_C_1_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_AEC1')#,float(AMPL_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
				SGMA_G_C_1_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_SEC1')#,float(SGMA_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))

				chisqr_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CHL1')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 1GF' + str(fit_type))
				redchi_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CRL1')#,float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 Reduced 1GF' + str(fit_type))

				CTRE_G_0_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CF02')#,float(CTRE_G_0) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'Ctr  1GF Crct')
				AMPL_G_0_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF02')#,float(AMPL_G_0) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'Amp  1GF Crct')
				FWHM_G_0_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FF02')#,float(FWHM_G_0) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'FWHM 1GF Crct')
				EW_0_2        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WF02')#,float(EW_0)     ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'EW   1GF Crct')
				EWE_0_2       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EF02')#,float(EWE_0)    ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'EWE  1GF Crct')

				CTRE_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLO2')#,float(CTRE_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ctr  1GF Offst' + str(fit_type))
				AMPL_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALO2')#,float(AMPL_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Amp  1GF Offst' + str(fit_type))
				FWHM_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FLO2')#,float(FWHM_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' FWHM 1GF Offst' + str(fit_type))
				EW_O_2        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WLO2')#,float(EW_O)      ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EW   1GF Offst' + str(fit_type))
				EWE_O_2       = Header_Get(specfile_glx,str(LINES[5][lines])+'_ELO2')#,float(EWE_O)     ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EWE  1GF Offst' + str(fit_type))
				OFST_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_OFO2')#,float(OFST_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ofst 1GF Offst' + str(fit_type))

				CTRE_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLC2')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ctr  1GF Crct' + str(fit_type))
				AMPL_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALC2')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Amp  1GF Crct' + str(fit_type))
				SGMA_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_SLC2')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Sigm 1GF Crct' + str(fit_type))
				FWHM_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FLC2')#,float(FWHM_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' FWHM 1GF Crct' + str(fit_type))
				EW_C_2        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WLC2')#,float(EW_C)      ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EW   1GF Crct' + str(fit_type))
				EWE_C_2       = Header_Get(specfile_glx,str(LINES[5][lines])+'_ELC2')#,float(EWE_C)     ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EWE  1GF Crct' + str(fit_type))
				CTRE_G_C_2_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CEC2')#,float(CTRE_G_C_E),header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ctr  err 1GF Crct' + str(fit_type))
				AMPL_G_C_2_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_AEC2')#,float(AMPL_G_C_E),header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Amp  err 1GF Crct' + str(fit_type))
				SGMA_G_C_2_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_SEC2')#,float(SGMA_G_C_E),header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Sigm err 1GF Crct' + str(fit_type))

				chisqr_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CHL2')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Chi2 1GF' + str(fit_type))
				redchi_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CRL2')#,float(redchi_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Chi2 Reduced 1GF' + str(fit_type))
			elif 'Dbl' in LINES[3][lines] and fit_fnct=='gaussM' and fit_type == 'lmfit' and fit_lne == False and LNS_NOT_CTG == True:
				fit_typ = 'GM'
				#GAUSSIAN FIT
				MSK_NTMS=2
				print
				print colored('1D Gaussian Fit Mode Choosen: Lmfit (Offset)','cyan')
				print colored('********************************************','cyan')
				print colored('****************Double Line*****************','cyan')
				print colored('********Defining Plottiing Variables********','cyan')
				print colored('********************************************','cyan')
				print colored('********************B***********************','cyan')
				print


				L1_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WF01')        #LINES-1  Wdt-Fit  1GF-IntVal      WIDTH-FIT
				L2_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WP01')        #LINES-2  Wdt-Plt  1GF-IntVal      WIDTH-PLT
				L7_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CF01')        #LINES-7  Ctr Fit Bnds  1GF-IntVal CTR-FIT-BNDS
				L8_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CO01')        #LINES-8  Ctr Fit Ofst  1GF-IntVal CTR-OFFSET
				L10_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF01')        #LINES-10 Ctr Fit Amp   1GF-IntVal LNE_AMP_BNDS

				L1_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WF02')        #LINES-1  Wdt-Fit  1GF-IntVal      WIDTH-FIT
				L2_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_WP02')        #LINES-2  Wdt-Plt  1GF-IntVal      WIDTH-PLT
				L7_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CF02')        #LINES-7  Ctr Fit Bnds  1GF-IntVal CTR-FIT-BNDS
				L8_2  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CO02')        #LINES-8  Ctr Fit Ofst  1GF-IntVal CTR-OFFSET
				L10_2 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF02')        #LINES-10 Ctr Fit Amp   1GF-IntVal LNE_AMP_BNDS

				
				##########################################PLOT-LIMITS-FROM Plot_Idp_Spc_Lne ###########################################
				########################Getting Line Fitting Initial Values From Statcked Spectrum Fits Header#########################
				lmb_min_lim_line_ft = (LINES[0][lines-2]+L8_1) - MSK_NTMS*L1_1 ##IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line_ft = (LINES[0][lines-2]+L8_1) + MSK_NTMS*L1_1
				lmb_min_lim_line    = (LINES[0][lines-2]+L8_1)*(1+z_glx_Ps) - 1.5*MSK_NTMS*L2_1#- 20#L2_1 - 10 ##IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line    = (LINES[0][lines-2]+L8_1)*(1+z_glx_Ps) + 1.5*MSK_NTMS*L2_1#+ 20#L2_1 + 10

				mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
				mask_ft    = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
				label_glx  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function

				idx_ctr_ft_reg = np.abs(lambda_glx[mask_ft] - (LINES[0][lines-2]+L8_1)).argmin()
				########################Getting Line Fitting Initial Values From Statcked Spectrum Fits Header#########################
				##################################################CENTRAL GAUSSIAN-1###################################################
				###
				lmb_min_lim_line_ft = (LINES[0][lines-1]+L8_2) - MSK_NTMS*LINES[1][lines-1] ##IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line_ft = (LINES[0][lines-1]+L8_2) + MSK_NTMS*LINES[1][lines-1]
				lmb_min_lim_line    = (LINES[0][lines-1]+L8_2)*(1+z_glx_Ps) - 1.5*MSK_NTMS*L2_2#- 20#L2_2 - 10 ##IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line    = (LINES[0][lines-1]+L8_2)*(1+z_glx_Ps) + 1.5*MSK_NTMS*L2_2#+ 20#L2_2 + 10

				mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
				mask_ft    = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
				label_glx  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function
				idx_ctr_ft_reg = np.abs(lambda_glx[mask_ft] - (LINES[0][lines-1]+L8_2)).argmin()
				##################################################CENTRAL GAUSSIAN-1###################################################
				##########################################PLOT-LIMITS-FROM Plot_Idp_Spc_Lne ###########################################

				CTRE_G_0_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CM01')#,float(CTRE_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct')
				AMPL_G_0_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AM01')#,float(AMPL_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct')
				FWHM_G_0_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FM01')#,float(FWHM_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct')
				EW_0_1        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WM01')#,float(EW_0)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct')
				EWE_0_1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EM01')#,float(EWE_0)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct')

				CTRE_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CMO1')#,float(CTRE_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Offst' + str(fit_type))
				AMPL_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AMO1')#,float(AMPL_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Offst' + str(fit_type))
				FWHM_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FMO1')#,float(FWHM_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Offst' + str(fit_type))
				EW_O_1        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WMO1')#,float(EW_O)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Offst' + str(fit_type))
				EWE_O_1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EMO1')#,float(EWE_O)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Offst' + str(fit_type))
				OFST_G_O_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_OMO1')#,float(OFST_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ofst 1GF Offst' + str(fit_type))

				CTRE_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CMC1')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
				AMPL_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AMC1')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
				SGMA_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_SMC1')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
				FWHM_G_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FMC1')#,float(FWHM_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
				EW_C_1        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WMC1')#,float(EW_C)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
				EWE_C_1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EMC1')#,float(EWE_C)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
				CTRE_G_C_1_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CMC1')#,float(CTRE_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
				AMPL_G_C_1_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_AMC1')#,float(AMPL_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
				SGMA_G_C_1_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_SMC1')#,float(SGMA_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))

				chisqr_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CHM1')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 1GF' + str(fit_type))
				redchi_C_1    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CRM1')#,float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 Reduced 1GF' + str(fit_type))


				CTRE_G_0_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CM02')#,float(CTRE_G_0) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'Ctr  1GF Crct')
				AMPL_G_0_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AM02')#,float(AMPL_G_0) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'Amp  1GF Crct')
				FWHM_G_0_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FM02')#,float(FWHM_G_0) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'FWHM 1GF Crct')
				EW_0_2        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WM02')#,float(EW_0)     ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'EW   1GF Crct')
				EWE_0_2       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EM02')#,float(EWE_0)    ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'EWE  1GF Crct')

				CTRE_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CMO2')#,float(CTRE_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ctr  1GF Offst' + str(fit_type))
				AMPL_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AMO2')#,float(AMPL_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Amp  1GF Offst' + str(fit_type))
				FWHM_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FMO2')#,float(FWHM_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' FWHM 1GF Offst' + str(fit_type))
				EW_O_2        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WMO2')#,float(EW_O)      ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EW   1GF Offst' + str(fit_type))
				EWE_O_2       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EMO2')#,float(EWE_O)     ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EWE  1GF Offst' + str(fit_type))
				OFST_G_O_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_OMO2')#,float(OFST_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ofst 1GF Offst' + str(fit_type))

				CTRE_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CMC2')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ctr  1GF Crct' + str(fit_type))
				AMPL_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AMC2')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Amp  1GF Crct' + str(fit_type))
				SGMA_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_SMC2')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Sigm 1GF Crct' + str(fit_type))
				FWHM_G_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FMC2')#,float(FWHM_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' FWHM 1GF Crct' + str(fit_type))
				EW_C_2        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WMC2')#,float(EW_C)      ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EW   1GF Crct' + str(fit_type))
				EWE_C_2       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EMC2')#,float(EWE_C)     ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' EWE  1GF Crct' + str(fit_type))
				CTRE_G_C_2_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CMC2')#,float(CTRE_G_C_E),header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Ctr  err 1GF Crct' + str(fit_type))
				AMPL_G_C_2_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_AMC2')#,float(AMPL_G_C_E),header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Amp  err 1GF Crct' + str(fit_type))
				SGMA_G_C_2_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_SMC2')#,float(SGMA_G_C_E),header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Sigm err 1GF Crct' + str(fit_type))

				chisqr_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CHM2')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Chi2 1GF' + str(fit_type))
				redchi_C_2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CRM2')#,float(redchi_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' Chi2 Reduced 1GF' + str(fit_type))

				CTRE_G_0 = CTRE_G_0_1

				chisqr_C       = Header_Get(specfile_glx,str(LINES[5][lines])+'_CHML')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 1GF' + str(fit_type))
				redchi_C       = Header_Get(specfile_glx,str(LINES[5][lines])+'_CRML')#,float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 Reduced 1GF' + str(fit_type))
				CTRE_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGM1')#,float(CTRE_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
				AMPL_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGM1')#,float(AMPL_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
				SGMA_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGM1')#,float(SGMA_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
				FWHM_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGM1')#,float(FWHM_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
				EW_C_PRE       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGM1')#,float(EW_C_PRE)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
				EWE_C_PRE      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGM1')#,float(EWE_C_PRE)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
				CTRE_G_C_PRE_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_CME1')#,float(CTRE_G_C_PRE_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
				AMPL_G_C_PRE_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_AME1')#,float(AMPL_G_C_PRE_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
				SGMA_G_C_PRE_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_SME1')#,float(SGMA_G_C_PRE_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))
				
				x_a            = Header_Get(specfile_glx,str(LINES[5][lines])+'_XAM1')#,float(x_a),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PRE GAU-LNR X1 COO')
				y_a            = Header_Get(specfile_glx,str(LINES[5][lines])+'_YAM1')#,float(y_a),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PRE GAU-LNR Y1 COO')
				#EW_C_PR1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WLM1')#,float(EW_C_PR1),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])   + ' EW   PRE' + str(fit_type))
				#EWE_C_PR1      = Header_Get(specfile_glx,str(LINES[5][lines])+'_ELM1')#,float(EWE_C_PR1),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])  + ' EWE  PRE' + str(fit_type))
				
				pre_shf_lim    = Header_Get(specfile_glx,str(LINES[5][lines])+'_GSM1')#,float(pre_shf_lim) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Shf from expt ctr wvl for PRE G-1')
				pre_shf_ctr    = Header_Get(specfile_glx,str(LINES[5][lines])+'_GCM1')#,float(pre_shf_ctr) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Gaussian Ctr Int Val for PRE G-1')


				CTRE_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGM2')#,float(CTRE_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
				AMPL_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGM2')#,float(AMPL_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
				SGMA_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGM2')#,float(SGMA_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
				FWHM_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGM2')#,float(FWHM_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
				EW_C_PST       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGM2')#,float(EW_C_PST)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
				EWE_C_PST      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGM2')#,float(EWE_C_PST)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
				CTRE_G_C_PST_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_CME2')#,float(CTRE_G_C_PST_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
				AMPL_G_C_PST_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_AME2')#,float(AMPL_G_C_PST_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
				SGMA_G_C_PST_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_SME2')#,float(SGMA_G_C_PST_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))
				
				x_b            = Header_Get(specfile_glx,str(LINES[5][lines])+'_XAM2')#,float(x_b),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PST GAU-LNR X2 COO')
				y_b            = Header_Get(specfile_glx,str(LINES[5][lines])+'_YAM2')#,float(y_b),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PST GAU-LNR Y2 COO')
				#EW_C_PS2       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WRM2')#,float(EW_C_PS2),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])   + ' EW   PST' + str(fit_type))
				#EWE_C_PS2      = Header_Get(specfile_glx,str(LINES[5][lines])+'_ERM2')#,float(EWE_C_PS2),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])  + ' EWE  PST' + str(fit_type))
				
				pst_shf_lim    = Header_Get(specfile_glx,str(LINES[5][lines])+'_GSM2')#,float(pre_shf_lim) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Shf from expt ctr wvl for PRE G-1')
				pst_shf_ctr    = Header_Get(specfile_glx,str(LINES[5][lines])+'_GCM2')#,float(pre_shf_ctr) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Gaussian Ctr Int Val for PRE G-1')
			elif 'Dbl' in LINES[3][lines] and fit_fnct=='gauss'  and fit_type == 'scipy' and fit_lne == False and LNS_NOT_CTG == True:
				fit_typ = 'G'
				#GAUSSIAN FIT
				MSK_NTMS=2
				print
				print colored('1D Gaussian Fit Mode Choosen: Lmfit (Offset)','cyan')
				print colored('********************************************','cyan')
				print colored('****************Double Line*****************','cyan')
				print colored('********Defining Plottiing Variables********','cyan')
				print colored('********************************************','cyan')
				print colored('********************C***********************','cyan')
				print
				from lmfit import Model

				lmb_min_lim_line_ft_D = (LINES[0][lines-2]+LINES[8][lines-2]) - MSK_NTMS*LINES[1][lines-2] #IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line_ft_D = (LINES[0][lines-1]+LINES[8][lines-1]) + MSK_NTMS*LINES[1][lines-1]
				lmb_min_lim_line_D    = (LINES[0][lines-2]-LINES[8][lines-2])*(1+z_glx_Ps) - LINES[2][lines-2]-5#- 20#LINES[2][lines] - 10 #IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line_D    = (LINES[0][lines-1]+LINES[8][lines-1])*(1+z_glx_Ps) + LINES[2][lines-1]+5#+ 20#LINES[2][lines] + 10

				lmb_min_lim_line_ft_1 = (LINES[0][lines-2]+LINES[8][lines-2]) - MSK_NTMS*LINES[1][lines-2] #IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line_ft_1 = (LINES[0][lines-2]+LINES[8][lines-2]) + MSK_NTMS*LINES[1][lines-2]
				lmb_min_lim_line_1    = (LINES[0][lines-2]+LINES[8][lines-2])*(1+z_glx_Ps) - LINES[2][lines-2]-5#- 20#LINES[2][lines-2] - 10 #IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line_1    = (LINES[0][lines-2]+LINES[8][lines-2])*(1+z_glx_Ps) + LINES[2][lines-2]+5#+ 20#LINES[2][lines-2] + 10

				lmb_min_lim_line_ft_2 = (LINES[0][lines-1]+LINES[8][lines-1]) - MSK_NTMS*LINES[1][lines-1] #IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line_ft_2 = (LINES[0][lines-1]+LINES[8][lines-1]) + MSK_NTMS*LINES[1][lines-1]
				lmb_min_lim_line_2    = (LINES[0][lines-1]+LINES[8][lines-1])*(1+z_glx_Ps) - LINES[2][lines-1]-5#- 20#LINES[2][lines-1] - 10 #IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line_2    = (LINES[0][lines-1]+LINES[8][lines-1])*(1+z_glx_Ps) + LINES[2][lines-1]+5#+ 20#LINES[2][lines-1] + 10

				mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
				mask_ft    = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
				label_glx  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function

				mask_pl_1    = (lambda_glx >= lmb_min_lim_line_1)    & (lambda_glx <= lmb_max_lim_line_1)
				mask_ft_1    = (lambda_glx >= lmb_min_lim_line_ft_1) & (lambda_glx <= lmb_max_lim_line_ft_1)
				label_glx_1  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function

				mask_pl_2    = (lambda_glx >= lmb_min_lim_line_2)    & (lambda_glx <= lmb_max_lim_line_2)
				mask_ft_2    = (lambda_glx >= lmb_min_lim_line_ft_2) & (lambda_glx <= lmb_max_lim_line_ft_2)
				label_glx_2  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function
				
				CTRE_G_0_1  = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_CGF0')#,float(CTRE_G_0) ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + 'Ctr  1GF Crct')
				AMPL_G_0_1  = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_AGF0')#,float(AMPL_G_0) ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + 'Amp  1GF Crct')
				FWHM_G_0_1  = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_FGF0')#,float(FWHM_G_0) ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + 'FWHM 1GF Crct')
				EW_0_1      = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_WGF0')#,float(EW_0)     ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + 'EW   1GF Crct')
				EWE_0_1     = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_EGF0')#,float(EWE_0)    ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + 'EWE  1GF Crct')

				CTRE_G_0_2  = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_CGF0')#,float(CTRE_G_0) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'Ctr  1GF Crct')
				AMPL_G_0_2  = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_AGF0')#,float(AMPL_G_0) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'Amp  1GF Crct')
				FWHM_G_0_2  = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_FGF0')#,float(FWHM_G_0) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'FWHM 1GF Crct')
				EW_0_2      = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_WGF0')#,float(EW_0)     ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'EW   1GF Crct')
				EWE_0_2     = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_EGF0')#,float(EWE_0)    ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'EWE  1GF Crct'

				CTRE_G_O_1   = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_CGAO')#,float(CTRE_G_O)  ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + 'Ctr  1GF Offst' + str(fit_type))
				AMPL_G_O_1   = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_AGAO')#,float(AMPL_G_O)  ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + 'Amp  1GF Offst' + str(fit_type))
				FWHM_G_O_1   = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_FGAO')#,float(FWHM_G_O)  ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + 'FWHM 1GF Offst' + str(fit_type))
				EW_O_1       = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_WGAO')#,float(EW_O)      ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + 'EW   1GF Offst' + str(fit_type))
				EWE_O_1      = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_EGAO')#,float(EWE_O)     ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + 'EWE  1GF Offst' + str(fit_type))
				OFST_G_O_1   = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_OFSO')#,float(OFST_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines-2]) + ' Ofst 1GF Offst' + str(fit_type))

				CTRE_G_O_2   = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_CGAO')#,float(CTRE_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'Ctr  1GF Offst' + str(fit_type))
				AMPL_G_O_2   = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_AGAO')#,float(AMPL_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'Amp  1GF Offst' + str(fit_type))
				FWHM_G_O_2   = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_FGAO')#,float(FWHM_G_O)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'FWHM 1GF Offst' + str(fit_type))
				EW_O_2       = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_WGAO')#,float(EW_O)      ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'EW   1GF Offst' + str(fit_type))
				EWE_O_2      = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_EGAO')#,float(EWE_O)     ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'EWE  1GF Offst' + str(fit_type))
				OFST_G_O_2   = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_OFSO')#,float(OFST_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines-2]) + ' Ofst 1GF Offst' + str(fit_type))

				CTRE_G_C_1   = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_CGAC')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + 'Ctr  1GF Crct' + str(fit_type))
				AMPL_G_C_1   = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_AGAC')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + 'Amp  1GF Crct' + str(fit_type))
				SGMA_G_C_1   = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_SGAC')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + 'Sigm 1GF Crct' + str(fit_type))
				FWHM_G_C_1   = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_FGAC')#,float(FWHM_G_C)  ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + 'FWHM 1GF Crct' + str(fit_type))
				EW_C_1       = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_WGAC')#,float(EW_C)      ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + 'EW   1GF Crct' + str(fit_type))
				EWE_C_1      = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_EGAC')#,float(EWE_C)     ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + 'EWE  1GF Crct' + str(fit_type))

				CTRE_G_C_2   = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_CGAC')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'Ctr  1GF Crct' + str(fit_type))
				AMPL_G_C_2   = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_AGAC')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'Amp  1GF Crct' + str(fit_type))
				SGMA_G_C_2   = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_SGAC')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'Sigm 1GF Crct' + str(fit_type))
				FWHM_G_C_2   = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_FGAC')#,float(FWHM_G_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'FWHM 1GF Crct' + str(fit_type))
				EW_C_2       = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_WGAC')#,float(EW_C)      ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'EW   1GF Crct' + str(fit_type))
				EWE_C_2      = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_EGAC')#,float(EWE_C)     ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'EWE  1GF Crct' + str(fit_type))

				CTRE_G_C_E_1 = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_CAEC')#,float(CTRE_G_C_E),header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + 'Ctr  err 1GF Crct' + str(fit_type))
				AMPL_G_C_E_1 = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_AAEC')#,float(AMPL_G_C_E),header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + 'Amp  err 1GF Crct' + str(fit_type))
				SGMA_G_C_E_1 = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_SAEC')#,float(SGMA_G_C_E),header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + 'Sigm err 1GF Crct' + str(fit_type))

				CTRE_G_C_E_2 = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_CAEC')#,float(CTRE_G_C_E),header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'Ctr  err 1GF Crct' + str(fit_type))
				AMPL_G_C_E_2 = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_AAEC')#,float(AMPL_G_C_E),header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'Amp  err 1GF Crct' + str(fit_type))
				SGMA_G_C_E_2 = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_SAEC')#,float(SGMA_G_C_E),header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'Sigm err 1GF Crct' + str(fit_type))

				chisqr_C_1   = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_CHGA')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + 'Chi2 1GF' + str(fit_type))
				redchi_C_1   = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_CRGA')#,float(redchi_C)  ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + 'Chi2 Reduced 1GF' + str(fit_type))

				chisqr_C_2   = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_CHGA')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'Chi2 1GF' + str(fit_type))
				redchi_C_2   = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_CRGA')#,float(redchi_C)  ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + 'Chi2 Reduced 1GF' + str(fit_type))

				popt_C_1     = [CTRE_G_C_1,AMPL_G_C_1,SGMA_G_C_1]
				popt_C_2     = [CTRE_G_C_2,AMPL_G_C_2,SGMA_G_C_2]				
			elif 'Dbl' not in LINES[3][lines] and fit_fnct=='gauss'   and fit_type == 'scipy' and fit_lne == False and LNS_NOT_CTG == True:
				fit_typ = 'G'
				#GAUSSIAN FIT
				MSK_NTMS=2
				print
				print colored('********************************************','cyan')
				print colored('1D Gaussian Fit Mode Choosen: scipy (Offset)','cyan')
				print colored('********Defining Plottiing Variables********','cyan')
				print colored('********************************************','cyan')
				print colored('********************D***********************','cyan')
				print

				lmb_min_lim_line_ft = (LINES[0][lines]-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line_ft = (LINES[0][lines]+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]

				lmb_min_lim_line    = (LINES[0][lines]-LINES[8][lines])*(1+z_glx_Ps) - LINES[2][lines]#- 20#LINES[2][lines] - 10 #IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line    = (LINES[0][lines]+LINES[8][lines])*(1+z_glx_Ps) + LINES[2][lines]#+ 20#LINES[2][lines] + 10

				mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
				mask_ft    = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
				label_glx  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function

				CTRE_G_0  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGF0')#,float(CTRE_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct')
				AMPL_G_0  = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGF0')#,float(AMPL_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct')
				FWHM_G_0  = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGF0')#,float(FWHM_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct')
				EW_0      = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGF0')#,float(EW_0)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct')
				EWE_0     = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGF0')#,float(EWE_0)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct')

				#fit_fnct   = Header_Get(specfile_glx,'BSF_FCT')#,str(fit_fnct)                       ,header_comment = 'Fit function')
				#fit_type   = Header_Get(specfile_glx,'BSF_MTH')#,str(fit_type)                       ,header_comment = 'Fit method')
				CTRE_G_O   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGAO')#,float(CTRE_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Offst' + str(fit_type))
				AMPL_G_O   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGAO')#,float(AMPL_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Offst' + str(fit_type))
				FWHM_G_O   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGAO')#,float(FWHM_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Offst' + str(fit_type))
				EW_O       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGAO')#,float(EW_O)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Offst' + str(fit_type))
				EWE_O      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGAO')#,float(EWE_O)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Offst' + str(fit_type))

				CTRE_G_C   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGAC')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct' + str(fit_type))
				AMPL_G_C   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGAC')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct' + str(fit_type))
				SGMA_G_C   = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGAC')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Sigm 1GF Crct' + str(fit_type))
				FWHM_G_C   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGAC')#,float(FWHM_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct' + str(fit_type))
				EW_C       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGAC')#,float(EW_C)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct' + str(fit_type))
				EWE_C      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGAC')#,float(EWE_C)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct' + str(fit_type))

				CTRE_G_C_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_CAEC')#,float(CTRE_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  err 1GF Crct' + str(fit_type))
				AMPL_G_C_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_AAEC')#,float(AMPL_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  err 1GF Crct' + str(fit_type))
				SGMA_G_C_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_SAEC')#,float(SGMA_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Sigm err 1GF Crct' + str(fit_type))

				chisqr_C   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CHGA')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Chi2 1GF' + str(fit_type))
				redchi_C   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CRGA')#,float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Chi2 Reduced 1GF' + str(fit_type))

				popt_C     = [CTRE_G_C,AMPL_G_C,SGMA_G_C]
			elif 'Dbl' not in LINES[3][lines] and fit_fnct=='gauss'   and fit_type == 'lmfit' and fit_lne == False and LNS_NOT_CTG == True:
				fit_typ = 'G'
				#GAUSSIAN FIT
				MSK_NTMS=2
				print
				print colored('********************************************','cyan')
				print colored('1D Gaussian Fit Mode Choosen: Lmfit (Offset)','cyan')
				print colored('********Defining Plottiing Variables********','cyan')
				print colored('********************************************','cyan')
				print colored('********************E***********************','cyan')
				print LINES[3][lines],LINES[0][lines]
				print
				from lmfit import Model

				lmb_min_lim_line_ft = (LINES[0][lines]-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line_ft = (LINES[0][lines]+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]
				lmb_min_lim_line    = (LINES[0][lines]-LINES[8][lines])*(1+z_glx_Ps) - LINES[2][lines]-5#- 20#LINES[2][lines] - 10 #IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line    = (LINES[0][lines]+LINES[8][lines])*(1+z_glx_Ps) + LINES[2][lines]+5#+ 20#LINES[2][lines] + 10

				mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
				mask_ft    = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
				label_glx  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function

				CTRE_G_0  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGF0')#,float(CTRE_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct')
				AMPL_G_0  = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGF0')#,float(AMPL_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct')
				FWHM_G_0  = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGF0')#,float(FWHM_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct')
				EW_0      = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGF0')#,float(EW_0)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct')
				EWE_0     = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGF0')#,float(EWE_0)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct')

				#Header_Add(specfile_glx,'BSF_FCT',str(fit_fnct)                       ,header_comment = 'Fit function')
				#Header_Add(specfile_glx,'BSF_MTH',str(fit_type)                       ,header_comment = 'Fit method')
				CTRE_G_O   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGLO')#,float(CTRE_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Offst' + str(fit_type))
				AMPL_G_O   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGLO')#,float(AMPL_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Offst' + str(fit_type))
				FWHM_G_O   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGLO')#,float(FWHM_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Offst' + str(fit_type))
				EW_O       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGLO')#,float(EW_O)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Offst' + str(fit_type))
				EWE_O      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGLO')#,float(EWE_O)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Offst' + str(fit_type))
				OFST_G_O   = Header_Get(specfile_glx,str(LINES[5][lines])+'_OFSO')#,float(OFST_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ofst 1GF Offst' + str(fit_type))

				CTRE_G_C   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGLC')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct' + str(fit_type))
				AMPL_G_C   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGLC')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct' + str(fit_type))
				SGMA_G_C   = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGLC')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Sigm 1GF Crct' + str(fit_type))
				FWHM_G_C   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGLC')#,float(FWHM_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct' + str(fit_type))
				EW_C       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGLC')#,float(EW_C)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct' + str(fit_type))
				EWE_C      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGLC')#,float(EWE_C)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct' + str(fit_type))

				CTRE_G_C_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLEC')#,float(CTRE_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  err 1GF Crct' + str(fit_type))
				AMPL_G_C_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALEC')#,float(AMPL_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  err 1GF Crct' + str(fit_type))
				SGMA_G_C_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_SLEC')#,float(SGMA_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Sigm err 1GF Crct' + str(fit_type))

				chisqr_C   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CHGL')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Chi2 1GF' + str(fit_type))
				redchi_C   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CRGL')#,float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Chi2 Reduced 1GF' + str(fit_type))
			elif 'Dbl' not in LINES[3][lines] and fit_fnct=='gaussM'  and fit_type == 'lmfit' and fit_lne == False and LNS_NOT_CTG == True:
				fit_typ = 'GM'
				#GAUSSIAN FIT
				MSK_NTMS=2.5
				print
				print colored('********************************************','cyan')
				print colored('1D Gaussian Fit Mode Choosen: Lmfit (Offset)','cyan')
				print colored('********Defining Plottiing Variables********','cyan')
				print colored('********************************************','cyan')
				print colored('********************F***********************','cyan')
				print
				from lmfit import Model

				#lmb_min_lim_line    = (LINES[0][lines]+LINES[8][lines])*(1+z_glx_Ps) - LINES[2][lines]-5#- 20#LINES[2][lines] - 10
				#lmb_max_lim_line    = (LINES[0][lines]+LINES[8][lines])*(1+z_glx_Ps) + LINES[2][lines]+5#+ 20#LINES[2][lines] + 10
			

				##################################################CENTRAL GAUSSIAN###################################################
				CTRE_G_0    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CF0M')#,float(CTRE_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct')
				AMPL_G_0    = Header_Get(specfile_glx,str(LINES[5][lines])+'_AF0M')#,float(AMPL_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct')
				FWHM_G_0    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FF0M')#,float(FWHM_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct')
				EW_0        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WF0M')#,float(EW_0)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct')
				EWE_0       = Header_Get(specfile_glx,str(LINES[5][lines])+'_EF0M')#,float(EWE_0)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct')

				CTRE_G_O    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLOM')#,float(CTRE_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Offst' + str(fit_type))
				AMPL_G_O    = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALOM')#,float(AMPL_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Offst' + str(fit_type))
				FWHM_G_O    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FLOM')#,float(FWHM_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Offst' + str(fit_type))
				EW_O        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WLOM')#,float(EW_O)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Offst' + str(fit_type))
				EWE_O       = Header_Get(specfile_glx,str(LINES[5][lines])+'_ELOM')#,float(EWE_O)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Offst' + str(fit_type))
				OFST_G_O    = Header_Get(specfile_glx,str(LINES[5][lines])+'_OFOM')#,float(OFST_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ofst 1GF Offst' + str(fit_type))

				CTRE_G_C    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLCM')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
				AMPL_G_C    = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALCM')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
				SGMA_G_C    = Header_Get(specfile_glx,str(LINES[5][lines])+'_SLCM')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
				FWHM_G_C    = Header_Get(specfile_glx,str(LINES[5][lines])+'_FLCM')#,float(FWHM_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
				EW_C        = Header_Get(specfile_glx,str(LINES[5][lines])+'_WLCM')#,float(EW_C)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
				EWE_C       = Header_Get(specfile_glx,str(LINES[5][lines])+'_ELCM')#,float(EWE_C)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
				CTRE_G_C_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CECM')#,float(CTRE_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
				AMPL_G_C_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_AECM')#,float(AMPL_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
				SGMA_G_C_E  = Header_Get(specfile_glx,str(LINES[5][lines])+'_SECM')#,float(SGMA_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))

				chisqr_C    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CHLM')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 1GF' + str(fit_type))
				redchi_C    = Header_Get(specfile_glx,str(LINES[5][lines])+'_CRLM')#,float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 Reduced 1GF' + str(fit_type))
				##################################################CENTRAL GAUSSIAN###################################################

				lmb_min_lim_line_ft = (LINES[0][lines]-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line_ft = (LINES[0][lines]+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]
				lmb_min_lim_line    = (LINES[0][lines]-LINES[8][lines])*(1+z_glx_Ps) - LINES[2][lines] - 5#- 20#LINES[2][lines] - 10 #IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line    = (LINES[0][lines]+LINES[8][lines])*(1+z_glx_Ps) + LINES[2][lines] + 5#+ 20#LINES[2][lines] + 10
				#lmb_min_lim_line    = (CTRE_G_C-LINES[8][lines])*(1+z_glx_Ps) - LINES[2][lines] - 2#- 20#LINES[2][lines] - 10
				#lmb_max_lim_line    = (CTRE_G_C+LINES[8][lines])*(1+z_glx_Ps) + LINES[2][lines] + 2#+ 20#LINES[2][lines] + 10

				mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
				mask_ft    = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
				label_glx  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function

				#####################################################PRE GAUSSIAN####################################################
				print
				print colored('1 PRE-gaussian already fitted!','yellow')
				print colored('Values from fits header','yellow')
				chisqr_C       = Header_Get(specfile_glx,str(LINES[5][lines])+'_CHGL')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 1GF' + str(fit_type))
				redchi_C       = Header_Get(specfile_glx,str(LINES[5][lines])+'_CRGL')#,float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 Reduced 1GF' + str(fit_type))
				CTRE_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGL1')#,float(CTRE_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
				AMPL_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGL1')#,float(AMPL_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
				SGMA_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGL1')#,float(SGMA_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
				FWHM_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGL1')#,float(FWHM_G_C_PRE)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
				EW_C_PRE       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGL1')#,float(EW_C_PRE)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
				EWE_C_PRE      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGL1')#,float(EWE_C_PRE)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
				CTRE_G_C_PRE_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLE1')#,float(CTRE_G_C_PRE_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
				AMPL_G_C_PRE_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALE1')#,float(AMPL_G_C_PRE_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
				SGMA_G_C_PRE_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_SLE1')#,float(SGMA_G_C_PRE_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))

				x_a            = Header_Get(specfile_glx,str(LINES[5][lines])+'_XA1')#,float(x_a),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PRE GAU-LNR X1 COO')
				y_a            = Header_Get(specfile_glx,str(LINES[5][lines])+'_YA1')#,float(y_a),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PRE GAU-LNR Y1 COO')
				EW_C_PR1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WPR1')#,float(EW_C_PR1),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])   + ' EW   PRE' + str(fit_type))
				EWE_C_PR1      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EPR1')#,float(EWE_C_PR1),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])  + ' EWE  PRE' + str(fit_type))
				print
				print colored(str(LINES[0][lines])+'-'+str(LINES[3][lines])+'-PRE','yellow')
				print
				print colored(str(LINES[5][lines])+'_CGL1: ' + str(CTRE_G_C_PRE)  ,'yellow')
				print colored(str(LINES[5][lines])+'_AGL1: ' + str(AMPL_G_C_PRE)  ,'yellow')
				print colored(str(LINES[5][lines])+'_SGL1: ' + str(SGMA_G_C_PRE)  ,'yellow')
				print colored(str(LINES[5][lines])+'_FGL1: ' + str(FWHM_G_C_PRE)  ,'yellow')
				print colored(str(LINES[5][lines])+'_WGL1: ' + str(EW_C_PRE)      ,'yellow')
				print colored(str(LINES[5][lines])+'_EGL1: ' + str(EWE_C_PRE),'yellow')
				print colored('Fit Values Center, Amplitude, Sigma ('+fit_type+'):','yellow')
				print colored(str(CTRE_G_C_PRE)+', '+str(AMPL_G_C_PRE)+', '+str(SGMA_G_C_PRE),'yellow')
				print
				#####################################################PRE GAUSSIAN#################################################

				###################################################POST GAUSSIAN##################################################
				print
				print colored('2 PST-gaussian already fitted!','yellow')
				print colored('Values from fits header','yellow')
				CTRE_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGL2')#,float(CTRE_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
				AMPL_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGL2')#,float(AMPL_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
				SGMA_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGL2')#,float(SGMA_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
				FWHM_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGL2')#,float(FWHM_G_C_PST)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
				EW_C_PST       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGL2')#,float(EW_C_PST)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
				EWE_C_PST      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGL2')#,float(EWE_C_PST)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
				CTRE_G_C_PST_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLE2')#,float(CTRE_G_C_PST_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
				AMPL_G_C_PST_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALE2')#,float(AMPL_G_C_PST_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
				SGMA_G_C_PST_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_SLE2')#,float(SGMA_G_C_PST_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))

				x_b         = Header_Get(specfile_glx,str(LINES[5][lines])+'_XA2')#,float(x_b),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PST GAU-LNR X2 COO')
				y_b         = Header_Get(specfile_glx,str(LINES[5][lines])+'_YA2')#,float(y_b),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PST GAU-LNR Y2 COO')
				#EW_C_PS2    = Header_Get(specfile_glx,str(LINES[5][lines])+'_WPS2')#,float(EW_C_PS2),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])   + ' EW   PST' + str(fit_type))
				#EWE_C_PS2   = Header_Get(specfile_glx,str(LINES[5][lines])+'_EPS2')#,float(EWE_C_PS2),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])  + ' EWE  PST' + str(fit_type))
				print
				print colored(str(LINES[0][lines])+'-'+str(LINES[3][lines])+'-PST','yellow')
				print
				print colored(str(LINES[5][lines])+'_CGL2: ' + str(CTRE_G_C_PST)  ,'yellow')
				print colored(str(LINES[5][lines])+'_AGL2: ' + str(AMPL_G_C_PST)  ,'yellow')
				print colored(str(LINES[5][lines])+'_SGL2: ' + str(SGMA_G_C_PST)  ,'yellow')
				print colored(str(LINES[5][lines])+'_FGL2: ' + str(FWHM_G_C_PST)  ,'yellow')
				print colored(str(LINES[5][lines])+'_WGL2: ' + str(EW_C_PST)      ,'yellow')
				print colored(str(LINES[5][lines])+'_EGL2: ' + str(EWE_C_PST),'yellow')
				print
				print colored('Fit Values Center, Amplitude, Sigma ('+fit_type+'):','yellow')
				print colored(str(CTRE_G_C_PST)+', '+str(AMPL_G_C_PST)+', '+str(SGMA_G_C_PST),'yellow')
				print					
				###################################################POST GAUSSIAN##################################################										
			elif 'Dbl' not in LINES[3][lines] and fit_fnct=='gauss'   and fit_type == 'lmfit' and fit_lne == False and LNS_NOT_CTG == False and PLT_REG_DFN == True:
				fit_typ = 'G'
				#GAUSSIAN FIT
				MSK_NTMS=2
				print
				print colored('********************************************','cyan')
				print colored('1D Gaussian Fit Mode Choosen: Lmfit (Offset)','cyan')
				print colored('********************************************','cyan')
				print colored('****************Double Line*****************','cyan')
				print colored('********Defining Plottiing Variables********','cyan')
				print colored('********************************************','cyan')
				print colored('********************G***********************','cyan')
				print
				from lmfit import Model
				dif_lns = abs(LINES[0][lines]-LINES[0][lines+1])

				lmb_min_lim_line_ft_D = (LINES[0][lines]-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line_ft_D = (LINES[0][lines+1]+LINES[8][lines+1]) + MSK_NTMS*LINES[1][lines+1]
				lmb_min_lim_line_D    = (LINES[0][lines]-LINES[8][lines])*(1+z_glx_Ps) - LINES[2][lines]-5#- 20#LINES[2][lines] - 10 #IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line_D    = (LINES[0][lines+1]+LINES[8][lines+1])*(1+z_glx_Ps) + LINES[2][lines+1]+5#+ 20#LINES[2][lines] + 10

				lmb_min_lim_line_ft_1 = (LINES[0][lines]-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line_ft_1 = (LINES[0][lines]+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]
				lmb_min_lim_line_1    = (LINES[0][lines]-LINES[8][lines])*(1+z_glx_Ps) - LINES[2][lines]-5#- 20#LINES[2][lines] - 10 #IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line_1    = (LINES[0][lines]+LINES[8][lines])*(1+z_glx_Ps) + LINES[2][lines]+5#+ 20#LINES[2][lines] + 10

				lmb_min_lim_line_ft_2 = (LINES[0][lines+1]-LINES[8][lines+1]) - MSK_NTMS*LINES[1][lines+1] #IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line_ft_2 = (LINES[0][lines+1]+LINES[8][lines+1]) + MSK_NTMS*LINES[1][lines+1]
				lmb_min_lim_line_2    = (LINES[0][lines+1]-LINES[8][lines+1])*(1+z_glx_Ps) - LINES[2][lines+1]-5#- 20#LINES[2][lines+1] - 10 #IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line_2    = (LINES[0][lines+1]+LINES[8][lines+1])*(1+z_glx_Ps) + LINES[2][lines+1]+5#+ 20#LINES[2][lines+1] + 10

				mask_pl    = (lambda_glx >= lmb_min_lim_line_D)    & (lambda_glx <= lmb_max_lim_line_D)
				mask_ft    = (lambda_glx >= lmb_min_lim_line_ft_D) & (lambda_glx <= lmb_max_lim_line_ft_D)
				label_glx  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function

				mask_pl_1    = (lambda_glx >= lmb_min_lim_line_1)    & (lambda_glx <= lmb_max_lim_line_1)
				mask_ft_1    = (lambda_glx >= lmb_min_lim_line_ft_1) & (lambda_glx <= lmb_max_lim_line_ft_1)
				label_glx_1  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function

				mask_pl_2    = (lambda_glx >= lmb_min_lim_line_2)    & (lambda_glx <= lmb_max_lim_line_2)
				mask_ft_2    = (lambda_glx >= lmb_min_lim_line_ft_2) & (lambda_glx <= lmb_max_lim_line_ft_2)
				label_glx_2  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function

				CTRE_G_0_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGF0')#,float(CTRE_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct')
				AMPL_G_0_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGF0')#,float(AMPL_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct')
				FWHM_G_0_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGF0')#,float(FWHM_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct')
				EW_0_1      = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGF0')#,float(EW_0)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct')
				EWE_0_1     = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGF0')#,float(EWE_0)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct')

				CTRE_G_O_1   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGLO')#,float(CTRE_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Offst' + str(fit_type))
				AMPL_G_O_1   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGLO')#,float(AMPL_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Offst' + str(fit_type))
				FWHM_G_O_1   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGLO')#,float(FWHM_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Offst' + str(fit_type))
				EW_O_1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGLO')#,float(EW_O)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Offst' + str(fit_type))
				EWE_O_1      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGLO')#,float(EWE_O)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Offst' + str(fit_type))
				OFST_G_O_1   = Header_Get(specfile_glx,str(LINES[5][lines])+'_OFSO')#,float(OFST_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ofst 1GF Offst' + str(fit_type))

				CTRE_G_C_1   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGLC')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct' + str(fit_type))
				AMPL_G_C_1   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGLC')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct' + str(fit_type))
				SGMA_G_C_1   = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGLC')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Sigm 1GF Crct' + str(fit_type))
				FWHM_G_C_1   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGLC')#,float(FWHM_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct' + str(fit_type))
				EW_C_1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGLC')#,float(EW_C)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct' + str(fit_type))
				EWE_C_1      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGLC')#,float(EWE_C)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct' + str(fit_type))

				CTRE_G_C_E_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLEC')#,float(CTRE_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  err 1GF Crct' + str(fit_type))
				AMPL_G_C_E_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALEC')#,float(AMPL_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  err 1GF Crct' + str(fit_type))
				SGMA_G_C_E_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_SLEC')#,float(SGMA_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Sigm err 1GF Crct' + str(fit_type))

				chisqr_C_1   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CHGL')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Chi2 1GF' + str(fit_type))
				redchi_C_1   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CRGL')#,float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Chi2 Reduced 1GF' + str(fit_type))


				CTRE_G_0_2  = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_CGF0')#,float(CTRE_G_0) ,header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'Ctr  1GF Crct')
				AMPL_G_0_2  = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_AGF0')#,float(AMPL_G_0) ,header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'Amp  1GF Crct')
				FWHM_G_0_2  = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_FGF0')#,float(FWHM_G_0) ,header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'FWHM 1GF Crct')
				EW_0_2      = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_WGF0')#,float(EW_0)     ,header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'EW   1GF Crct')
				EWE_0_2     = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_EGF0')#,float(EWE_0)    ,header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'EWE  1GF Crct')

				CTRE_G_O_2   = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_CGLO')#,float(CTRE_G_O)  ,header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'Ctr  1GF Offst' + str(fit_type))
				AMPL_G_O_2   = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_AGLO')#,float(AMPL_G_O)  ,header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'Amp  1GF Offst' + str(fit_type))
				FWHM_G_O_2   = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_FGLO')#,float(FWHM_G_O)  ,header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'FWHM 1GF Offst' + str(fit_type))
				EW_O_2       = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_WGLO')#,float(EW_O)      ,header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'EW   1GF Offst' + str(fit_type))
				EWE_O_2      = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_EGLO')#,float(EWE_O)     ,header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'EWE  1GF Offst' + str(fit_type))
				OFST_G_O_2   = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_OFSO')#,float(OFST_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines-2]) + ' Ofst 1GF Offst' + str(fit_type))

				CTRE_G_C_2   = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_CGLC')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'Ctr  1GF Crct' + str(fit_type))
				AMPL_G_C_2   = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_AGLC')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'Amp  1GF Crct' + str(fit_type))
				SGMA_G_C_2   = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_SGLC')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'Sigm 1GF Crct' + str(fit_type))
				FWHM_G_C_2   = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_FGLC')#,float(FWHM_G_C)  ,header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'FWHM 1GF Crct' + str(fit_type))
				EW_C_2       = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_WGLC')#,float(EW_C)      ,header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'EW   1GF Crct' + str(fit_type))
				EWE_C_2      = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_EGLC')#,float(EWE_C)     ,header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'EWE  1GF Crct' + str(fit_type))

				CTRE_G_C_E_2 = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_CLEC')#,float(CTRE_G_C_E),header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'Ctr  err 1GF Crct' + str(fit_type))
				AMPL_G_C_E_2 = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_ALEC')#,float(AMPL_G_C_E),header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'Amp  err 1GF Crct' + str(fit_type))
				SGMA_G_C_E_2 = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_SLEC')#,float(SGMA_G_C_E),header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'Sigm err 1GF Crct' + str(fit_type))

				chisqr_C_2   = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_CHGL')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'Chi2 1GF' + str(fit_type))
				redchi_C_2   = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_CRGL')#,float(redchi_C)  ,header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'Chi2 Reduced 1GF' + str(fit_type))				
			elif 'Dbl' not in LINES[3][lines] and fit_fnct=='gaussM'  and fit_type == 'lmfit' and fit_lne == False and LNS_NOT_CTG == False and PLT_REG_DFN == True:
				fit_typ = 'GM'
				#GAUSSIAN FIT
				MSK_NTMS=2
				print
				print colored('********************************************','cyan')
				print colored('1D Gaussian Fit Mode Choosen: Lmfit (Offset)','cyan')
				print colored('********************************************','cyan')
				print colored('****************Double Line*****************','cyan')
				print colored('********Defining Plottiing Variables********','cyan')
				print colored('********************************************','cyan')
				print colored('********************H***********************','cyan')
				print
				from lmfit import Model
				dif_lns = abs(LINES[0][lines]-LINES[0][lines+1])

				lmb_min_lim_line_ft_D = (LINES[0][lines]-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line_ft_D = (LINES[0][lines+1]+LINES[8][lines+1]) + MSK_NTMS*LINES[1][lines+1]
				lmb_min_lim_line_D    = (LINES[0][lines]-LINES[8][lines])*(1+z_glx_Ps) - LINES[2][lines]-5#- 20#LINES[2][lines] - 10 #IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line_D    = (LINES[0][lines+1]+LINES[8][lines+1])*(1+z_glx_Ps) + LINES[2][lines+1]+5#+ 20#LINES[2][lines] + 10

				lmb_min_lim_line_ft_1 = (LINES[0][lines]-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line_ft_1 = (LINES[0][lines]+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]
				lmb_min_lim_line_1    = (LINES[0][lines]-LINES[8][lines])*(1+z_glx_Ps) - LINES[2][lines]-5#- 20#LINES[2][lines] - 10 #IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line_1    = (LINES[0][lines]+LINES[8][lines])*(1+z_glx_Ps) + LINES[2][lines]+5#+ 20#LINES[2][lines] + 10

				lmb_min_lim_line_ft_2 = (LINES[0][lines+1]-LINES[8][lines+1]) - MSK_NTMS*LINES[1][lines+1] #IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line_ft_2 = (LINES[0][lines+1]+LINES[8][lines+1]) + MSK_NTMS*LINES[1][lines+1]
				lmb_min_lim_line_2    = (LINES[0][lines+1]-LINES[8][lines+1])*(1+z_glx_Ps) - LINES[2][lines+1]-5#- 20#LINES[2][lines+1] - 10 #IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line_2    = (LINES[0][lines+1]+LINES[8][lines+1])*(1+z_glx_Ps) + LINES[2][lines+1]+5#+ 20#LINES[2][lines+1] + 10

				mask_pl    = (lambda_glx >= lmb_min_lim_line_D)    & (lambda_glx <= lmb_max_lim_line_D)
				mask_ft    = (lambda_glx >= lmb_min_lim_line_ft_D) & (lambda_glx <= lmb_max_lim_line_ft_D)
				label_glx  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function

				mask_pl_1    = (lambda_glx >= lmb_min_lim_line_1)    & (lambda_glx <= lmb_max_lim_line_1)
				mask_ft_1    = (lambda_glx >= lmb_min_lim_line_ft_1) & (lambda_glx <= lmb_max_lim_line_ft_1)
				label_glx_1  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function

				mask_pl_2    = (lambda_glx >= lmb_min_lim_line_2)    & (lambda_glx <= lmb_max_lim_line_2)
				mask_ft_2    = (lambda_glx >= lmb_min_lim_line_ft_2) & (lambda_glx <= lmb_max_lim_line_ft_2)
				label_glx_2  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function

				CTRE_G_0_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGF0')#,float(CTRE_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct')
				AMPL_G_0_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGF0')#,float(AMPL_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct')
				FWHM_G_0_1  = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGF0')#,float(FWHM_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct')
				EW_0_1      = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGF0')#,float(EW_0)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct')
				EWE_0_1     = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGF0')#,float(EWE_0)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct')

				CTRE_G_O_1   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGLO')#,float(CTRE_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Offst' + str(fit_type))
				AMPL_G_O_1   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGLO')#,float(AMPL_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Offst' + str(fit_type))
				FWHM_G_O_1   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGLO')#,float(FWHM_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Offst' + str(fit_type))
				EW_O_1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGLO')#,float(EW_O)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Offst' + str(fit_type))
				EWE_O_1      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGLO')#,float(EWE_O)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Offst' + str(fit_type))
				OFST_G_O_1   = Header_Get(specfile_glx,str(LINES[5][lines])+'_OFSO')#,float(OFST_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ofst 1GF Offst' + str(fit_type))

				CTRE_G_C_1   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGLC')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct' + str(fit_type))
				AMPL_G_C_1   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGLC')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct' + str(fit_type))
				SGMA_G_C_1   = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGLC')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Sigm 1GF Crct' + str(fit_type))
				FWHM_G_C_1   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGLC')#,float(FWHM_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct' + str(fit_type))
				EW_C_1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGLC')#,float(EW_C)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct' + str(fit_type))
				EWE_C_1      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGLC')#,float(EWE_C)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct' + str(fit_type))

				CTRE_G_C_E_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLEC')#,float(CTRE_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  err 1GF Crct' + str(fit_type))
				AMPL_G_C_E_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALEC')#,float(AMPL_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  err 1GF Crct' + str(fit_type))
				SGMA_G_C_E_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_SLEC')#,float(SGMA_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Sigm err 1GF Crct' + str(fit_type))

				chisqr_C_1   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CHGL')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Chi2 1GF' + str(fit_type))
				redchi_C_1   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CRGL')#,float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Chi2 Reduced 1GF' + str(fit_type))


				CTRE_G_0_2  = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_CGF0')#,float(CTRE_G_0) ,header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'Ctr  1GF Crct')
				AMPL_G_0_2  = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_AGF0')#,float(AMPL_G_0) ,header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'Amp  1GF Crct')
				FWHM_G_0_2  = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_FGF0')#,float(FWHM_G_0) ,header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'FWHM 1GF Crct')
				EW_0_2      = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_WGF0')#,float(EW_0)     ,header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'EW   1GF Crct')
				EWE_0_2     = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_EGF0')#,float(EWE_0)    ,header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'EWE  1GF Crct')

				CTRE_G_O_2   = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_CGLO')#,float(CTRE_G_O)  ,header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'Ctr  1GF Offst' + str(fit_type))
				AMPL_G_O_2   = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_AGLO')#,float(AMPL_G_O)  ,header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'Amp  1GF Offst' + str(fit_type))
				FWHM_G_O_2   = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_FGLO')#,float(FWHM_G_O)  ,header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'FWHM 1GF Offst' + str(fit_type))
				EW_O_2       = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_WGLO')#,float(EW_O)      ,header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'EW   1GF Offst' + str(fit_type))
				EWE_O_2      = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_EGLO')#,float(EWE_O)     ,header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'EWE  1GF Offst' + str(fit_type))
				OFST_G_O_2   = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_OFSO')#,float(OFST_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines-2]) + ' Ofst 1GF Offst' + str(fit_type))

				CTRE_G_C_2   = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_CGLC')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'Ctr  1GF Crct' + str(fit_type))
				AMPL_G_C_2   = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_AGLC')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'Amp  1GF Crct' + str(fit_type))
				SGMA_G_C_2   = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_SGLC')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'Sigm 1GF Crct' + str(fit_type))
				FWHM_G_C_2   = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_FGLC')#,float(FWHM_G_C)  ,header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'FWHM 1GF Crct' + str(fit_type))
				EW_C_2       = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_WGLC')#,float(EW_C)      ,header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'EW   1GF Crct' + str(fit_type))
				EWE_C_2      = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_EGLC')#,float(EWE_C)     ,header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'EWE  1GF Crct' + str(fit_type))

				CTRE_G_C_E_2 = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_CLEC')#,float(CTRE_G_C_E),header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'Ctr  err 1GF Crct' + str(fit_type))
				AMPL_G_C_E_2 = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_ALEC')#,float(AMPL_G_C_E),header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'Amp  err 1GF Crct' + str(fit_type))
				SGMA_G_C_E_2 = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_SLEC')#,float(SGMA_G_C_E),header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'Sigm err 1GF Crct' + str(fit_type))

				chisqr_C_2   = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_CHGL')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'Chi2 1GF' + str(fit_type))
				redchi_C_2   = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_CRGL')#,float(redchi_C)  ,header_comment = str(LINES[3][lines+1]) + str(LINES[0][lines+1]) + 'Chi2 Reduced 1GF' + str(fit_type))				

				###############################################PRE GAUSSIAN-LINE-1###################################################
				print
				print colored('LINE-1-1 PRE-gaussian already fitted!','yellow')
				print colored('Values from fits header','yellow')
				chisqr_C         = Header_Get(specfile_glx,str(LINES[5][lines])+'_CHGL')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 1GF' + str(fit_type))
				redchi_C         = Header_Get(specfile_glx,str(LINES[5][lines])+'_CRGL')#,float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 Reduced 1GF' + str(fit_type))
				CTRE_G_C_PRE_1   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGL1')#,float(CTRE_G_C_PRE_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
				AMPL_G_C_PRE_1   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGL1')#,float(AMPL_G_C_PRE_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
				SGMA_G_C_PRE_1   = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGL1')#,float(SGMA_G_C_PRE_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
				FWHM_G_C_PRE_1   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGL1')#,float(FWHM_G_C_PRE_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
				EW_C_PRE_1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGL1')#,float(EW_C_PRE_1)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
				EWE_C_PRE_1      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGL1')#,float(EWE_C_PRE_1)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
				CTRE_G_C_PRE_1_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLE1')#,float(CTRE_G_C_PRE_1_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
				AMPL_G_C_PRE_1_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALE1')#,float(AMPL_G_C_PRE_1_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
				SGMA_G_C_PRE_1_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_SLE1')#,float(SGMA_G_C_PRE_1_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))

				x_a_1            = Header_Get(specfile_glx,str(LINES[5][lines])+'_XA1')#,float(x_a),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PRE_1 GAU-LNR X1 COO')
				y_a_1            = Header_Get(specfile_glx,str(LINES[5][lines])+'_YA1')#,float(y_a),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PRE_1 GAU-LNR Y1 COO')
				EW_C_PR1_1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WPR1')#,float(EW_C_PR1),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])   + ' EW   PRE_1' + str(fit_type))
				EWE_C_PR1_1      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EPR1')#,float(EWE_C_PR1),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])  + ' EWE  PRE_1' + str(fit_type))
				print
				print colored(str(LINES[0][lines])+'-'+str(LINES[3][lines])+'-PRE-1','yellow')
				print
				print colored(str(LINES[5][lines])+'_CGL1: ' + str(CTRE_G_C_PRE_1)  ,'yellow')
				print colored(str(LINES[5][lines])+'_AGL1: ' + str(AMPL_G_C_PRE_1)  ,'yellow')
				print colored(str(LINES[5][lines])+'_SGL1: ' + str(SGMA_G_C_PRE_1)  ,'yellow')
				print colored(str(LINES[5][lines])+'_FGL1: ' + str(FWHM_G_C_PRE_1)  ,'yellow')
				print colored(str(LINES[5][lines])+'_WGL1: ' + str(EW_C_PRE_1)      ,'yellow')
				print colored(str(LINES[5][lines])+'_EGL1: ' + str(EWE_C_PRE_1),'yellow')
				print colored('Fit Values (PRE-1) Center, Amplitude, Sigma ('+fit_type+'):','yellow')
				print colored(str(CTRE_G_C_PRE_1)+', '+str(AMPL_G_C_PRE_1)+', '+str(SGMA_G_C_PRE_1),'yellow')
				print
				###############################################PRE GAUSSIAN-LINE-1################################################

				###############################################POST GAUSSIAN-LINE-1###############################################
				print
				print colored('LINE-1-2 PST-gaussian already fitted!','yellow')
				print colored('Values from fits header','yellow')
				CTRE_G_C_PST_1   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGL2')#,float(CTRE_G_C_PST_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
				AMPL_G_C_PST_1   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGL2')#,float(AMPL_G_C_PST_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
				SGMA_G_C_PST_1   = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGL2')#,float(SGMA_G_C_PST_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
				FWHM_G_C_PST_1   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGL2')#,float(FWHM_G_C_PST_1)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
				EW_C_PST_1       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGL2')#,float(EW_C_PST_1)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
				EWE_C_PST_1      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGL2')#,float(EWE_C_PST_1)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
				CTRE_G_C_PST_1_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLE2')#,float(CTRE_G_C_PST_1_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
				AMPL_G_C_PST_1_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALE2')#,float(AMPL_G_C_PST_1_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
				SGMA_G_C_PST_1_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_SLE2')#,float(SGMA_G_C_PST_1_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))

				x_b_2            = Header_Get(specfile_glx,str(LINES[5][lines])+'_XA2')#,float(x_b),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PST GAU-LNR X2 COO')
				y_b_2            = Header_Get(specfile_glx,str(LINES[5][lines])+'_YA2')#,float(y_b),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PST GAU-LNR Y2 COO')
				EW_C_PS2_2       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WPS2')#,float(EW_C_PS2),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])   + ' EW   PST' + str(fit_type))
				EWE_C_PS2_2      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EPS2')#,float(EWE_C_PS2),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])  + ' EWE  PST' + str(fit_type))
				print
				print colored(str(LINES[0][lines])+'-'+str(LINES[3][lines])+'-PST-1','yellow')
				print
				print colored(str(LINES[5][lines])+'_CGL2: ' + str(CTRE_G_C_PST_1)  ,'yellow')
				print colored(str(LINES[5][lines])+'_AGL2: ' + str(AMPL_G_C_PST_1)  ,'yellow')
				print colored(str(LINES[5][lines])+'_SGL2: ' + str(SGMA_G_C_PST_1)  ,'yellow')
				print colored(str(LINES[5][lines])+'_FGL2: ' + str(FWHM_G_C_PST_1)  ,'yellow')
				print colored(str(LINES[5][lines])+'_WGL2: ' + str(EW_C_PST_1)      ,'yellow')
				print colored(str(LINES[5][lines])+'_EGL2: ' + str(EWE_C_PST_1),'yellow')
				print
				print colored('Fit Values (PST-1) Center, Amplitude, Sigma ('+fit_type+'):','yellow')
				print colored(str(CTRE_G_C_PST_1)+', '+str(AMPL_G_C_PST_1)+', '+str(SGMA_G_C_PST_1),'yellow')
				print					
				###############################################POST GAUSSIAN-LINE-1###############################################

				###############################################PRE GAUSSIAN-LINE-2###################################################
				print
				print colored('LINE-1-1 PRE-gaussian already fitted!','yellow')
				print colored('Values from fits header','yellow')
				chisqr_C         = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_CHGL')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 1GF' + str(fit_type))
				redchi_C         = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_CRGL')#,float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Chi2 Reduced 1GF' + str(fit_type))
				CTRE_G_C_PRE_2   = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_CGL1')#,float(CTRE_G_C_PRE_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
				AMPL_G_C_PRE_2   = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_AGL1')#,float(AMPL_G_C_PRE_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
				SGMA_G_C_PRE_2   = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_SGL1')#,float(SGMA_G_C_PRE_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
				FWHM_G_C_PRE_2   = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_FGL1')#,float(FWHM_G_C_PRE_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
				EW_C_PRE_2       = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_WGL1')#,float(EW_C_PRE_2)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
				EWE_C_PRE_2      = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_EGL1')#,float(EWE_C_PRE_2)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
				CTRE_G_C_PRE_2_E = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_CLE1')#,float(CTRE_G_C_PRE_2_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
				AMPL_G_C_PRE_2_E = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_ALE1')#,float(AMPL_G_C_PRE_2_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
				SGMA_G_C_PRE_2_E = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_SLE1')#,float(SGMA_G_C_PRE_2_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))

				x_a_2            = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_XA1')#,float(x_a),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PRE_2 GAU-LNR X1 COO')
				y_a_2            = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_YA1')#,float(y_a),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PRE_2 GAU-LNR Y1 COO')
				EW_C_PR1_2       = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_WPR1')#,float(EW_C_PR1),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])   + ' EW   PRE_2' + str(fit_type))
				EWE_C_PR1_2      = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_EPR1')#,float(EWE_C_PR1),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])  + ' EWE  PRE_2' + str(fit_type))
				print
				print colored(str(LINES[0][lines])+'-'+str(LINES[3][lines])+'-PRE-1','yellow')
				print
				print colored(str(LINES[5][lines])+'_CGL1: ' + str(CTRE_G_C_PRE_2)  ,'yellow')
				print colored(str(LINES[5][lines])+'_AGL1: ' + str(AMPL_G_C_PRE_2)  ,'yellow')
				print colored(str(LINES[5][lines])+'_SGL1: ' + str(SGMA_G_C_PRE_2)  ,'yellow')
				print colored(str(LINES[5][lines])+'_FGL1: ' + str(FWHM_G_C_PRE_2)  ,'yellow')
				print colored(str(LINES[5][lines])+'_WGL1: ' + str(EW_C_PRE_2)      ,'yellow')
				print colored(str(LINES[5][lines])+'_EGL1: ' + str(EWE_C_PRE_2),'yellow')
				print colored('Fit Values (PRE-2) Center, Amplitude, Sigma ('+fit_type+'):','yellow')
				print colored(str(CTRE_G_C_PRE_2)+', '+str(AMPL_G_C_PRE_2)+', '+str(SGMA_G_C_PRE_2),'yellow')
				print
				###############################################PRE GAUSSIAN-LINE-2################################################

				###############################################POST GAUSSIAN-LINE-2###############################################
				print
				print colored('LINE-1-2 PST-gaussian already fitted!','yellow')
				print colored('Values from fits header','yellow')
				CTRE_G_C_PST_2   = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_CGL2')#,float(CTRE_G_C_PST_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  1GF Crct' + str(fit_type))
				AMPL_G_C_PST_2   = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_AGL2')#,float(AMPL_G_C_PST_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  1GF Crct' + str(fit_type))
				SGMA_G_C_PST_2   = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_SGL2')#,float(SGMA_G_C_PST_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm 1GF Crct' + str(fit_type))
				FWHM_G_C_PST_2   = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_FGL2')#,float(FWHM_G_C_PST_2)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' FWHM 1GF Crct' + str(fit_type))
				EW_C_PST_2       = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_WGL2')#,float(EW_C_PST_2)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EW   1GF Crct' + str(fit_type))
				EWE_C_PST_2      = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_EGL2')#,float(EWE_C_PST_2)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' EWE  1GF Crct' + str(fit_type))
				CTRE_G_C_PST_2_E = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_CLE2')#,float(CTRE_G_C_PST_2_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Ctr  err 1GF Crct' + str(fit_type))
				AMPL_G_C_PST_2_E = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_ALE2')#,float(AMPL_G_C_PST_2_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Amp  err 1GF Crct' + str(fit_type))
				SGMA_G_C_PST_2_E = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_SLE2')#,float(SGMA_G_C_PST_2_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' Sigm err 1GF Crct' + str(fit_type))

				x_b_2            = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_XA2')#,float(x_b),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PST GAU-LNR X2 COO')
				y_b_2            = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_YA2')#,float(y_b),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' PST GAU-LNR Y2 COO')
				EW_C_PS2_2       = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_WPS2')#,float(EW_C_PS2),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])   + ' EW   PST' + str(fit_type))
				EWE_C_PS2_2      = Header_Get(specfile_glx,str(LINES[5][lines+1])+'_EPS2')#,float(EWE_C_PS2),header_comment = str(LINES[3][lines]) + str(LINES[0][lines])  + ' EWE  PST' + str(fit_type))
				print
				print colored(str(LINES[0][lines])+'-'+str(LINES[3][lines])+'-PST-2','yellow')
				print
				print colored(str(LINES[5][lines])+'_CGL2: ' + str(CTRE_G_C_PST_2)  ,'yellow')
				print colored(str(LINES[5][lines])+'_AGL2: ' + str(AMPL_G_C_PST_2)  ,'yellow')
				print colored(str(LINES[5][lines])+'_SGL2: ' + str(SGMA_G_C_PST_2)  ,'yellow')
				print colored(str(LINES[5][lines])+'_FGL2: ' + str(FWHM_G_C_PST_2)  ,'yellow')
				print colored(str(LINES[5][lines])+'_WGL2: ' + str(EW_C_PST_2)      ,'yellow')
				print colored(str(LINES[5][lines])+'_EGL2: ' + str(EWE_C_PST_2),'yellow')
				print
				print colored('Fit Values (PST-2) Center, Amplitude, Sigma ('+fit_type+'):','yellow')
				print colored(str(CTRE_G_C_PST_2)+', '+str(AMPL_G_C_PST_2)+', '+str(SGMA_G_C_PST_2),'yellow')
				print					
				###############################################POST GAUSSIAN-LINE-2###############################################
			else:
				pass

			if 'Dbl' not in LINES[3][lines]:
				SPC_SNR_FUNC_UB_1_2 = Header_Get(specfile_glx,str(LINES[5][lines])+'_NSU1')#,float(SPC_SNR_FUNC_UB_1[2]) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE UBIN SPC REG ALL')
				SPC_SNR_FUNC_UB_2_2 = Header_Get(specfile_glx,str(LINES[5][lines])+'_NSU2')#,float(SPC_SNR_FUNC_UB_2[2]) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE UBIN SPC REG CNT')
				SPC_SNR_FUNC_UB_3_2 = Header_Get(specfile_glx,str(LINES[5][lines])+'_NSU3')#,float(SPC_SNR_FUNC_UB_3[2]) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE UBIN SPC REG FIT')
				SPC_SNR_FUNC_UB_4_2 = Header_Get(specfile_glx,str(LINES[5][lines])+'_NSU4')#,float(SPC_SNR_FUNC_UB_4[2]) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE UBIN SPC REG PLT')

				SPC_SNR_UB_1        = Header_Get(specfile_glx,str(LINES[5][lines])+'_SNU1')#,float(SPC_SNR_UB_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR UBIN SPC REG ALL')
				SPC_SNR_UB_2        = Header_Get(specfile_glx,str(LINES[5][lines])+'_SNU2')#,float(SPC_SNR_UB_2) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR UBIN SPC REG CNT')
				SPC_SNR_UB_3        = Header_Get(specfile_glx,str(LINES[5][lines])+'_SNU3')#,float(SPC_SNR_UB_3) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR UBIN SPC REG FIT')
				SPC_SNR_UB_4        = Header_Get(specfile_glx,str(LINES[5][lines])+'_SNU4')#,float(SPC_SNR_UB_4) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR UBIN SPC REG PLT')

				bin_size            = Header_Get(specfile_glx,str(LINES[5][lines])+'_SNBS')#,float(bin_size)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR BINNED Size')
				bin_number          = Header_Get(specfile_glx,str(LINES[5][lines])+'_SNBN')#,float(bin_number)   ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR BINNED # Bins')

				SPC_NSE_BN_1        = Header_Get(specfile_glx,str(LINES[5][lines])+'_NSB1')#,float(SPC_NSE_BN_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE BINNED AVG')
				SPC_NSE_BN_2        = Header_Get(specfile_glx,str(LINES[5][lines])+'_NSB2')#,float(SPC_NSE_BN_2) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE BINNED MED')
				SPC_NSE_BN_3        = Header_Get(specfile_glx,str(LINES[5][lines])+'_NSB3')#,float(SPC_NSE_BN_3) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE BINNED SUM')				

				SPC_SNR_BN_1        = Header_Get(specfile_glx,str(LINES[5][lines])+'_SNB1')#,float(SPC_SNR_BN_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR BINNED AVG')
				SPC_SNR_BN_2        = Header_Get(specfile_glx,str(LINES[5][lines])+'_SNB2')#,float(SPC_SNR_BN_2) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR BINNED MED')
				SPC_SNR_BN_3        = Header_Get(specfile_glx,str(LINES[5][lines])+'_SNB3')#,float(SPC_SNR_BN_3) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR BINNED SUM')
			elif 'Dbl' in LINES[3][lines]:
				SPC_SNR_FUNC_UB_1_2_1 = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_NSU1')#,float(SPC_SNR_FUNC_UB_1[2]) ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' NSE UBIN SPC REG ALL')
				SPC_SNR_FUNC_UB_2_2_1 = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_NSU2')#,float(SPC_SNR_FUNC_UB_2[2]) ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' NSE UBIN SPC REG CNT')
				SPC_SNR_FUNC_UB_3_2_1 = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_NSU3')#,float(SPC_SNR_FUNC_UB_3[2]) ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' NSE UBIN SPC REG FIT')
				SPC_SNR_FUNC_UB_4_2_1 = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_NSU4')#,float(SPC_SNR_FUNC_UB_4[2]) ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' NSE UBIN SPC REG PLT')

				SPC_SNR_UB_1_1        = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_SNU1')#,float(SPC_SNR_UB_1) ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' SNR UBIN SPC REG ALL')
				SPC_SNR_UB_2_1        = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_SNU2')#,float(SPC_SNR_UB_2) ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' SNR UBIN SPC REG CNT')
				SPC_SNR_UB_3_1        = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_SNU3')#,float(SPC_SNR_UB_3) ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' SNR UBIN SPC REG FIT')
				SPC_SNR_UB_4_1        = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_SNU4')#,float(SPC_SNR_UB_4) ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' SNR UBIN SPC REG PLT')

				bin_size_1            = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_SNBS')#,float(bin_size)     ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' SNR BINNED Size')
				bin_number_1          = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_SNBN')#,float(bin_number)   ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' SNR BINNED # Bins')

				SPC_NSE_BN_1_1        = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_NSB1')#,float(SPC_NSE_BN_1) ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' NSE BINNED AVG')
				SPC_NSE_BN_2_1        = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_NSB2')#,float(SPC_NSE_BN_2) ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' NSE BINNED MED')
				SPC_NSE_BN_3_1        = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_NSB3')#,float(SPC_NSE_BN_3) ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' NSE BINNED SUM')				

				SPC_SNR_BN_1_1        = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_SNB1')#,float(SPC_SNR_BN_1) ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' SNR BINNED AVG')
				SPC_SNR_BN_2_1        = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_SNB2')#,float(SPC_SNR_BN_2) ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' SNR BINNED MED')
				SPC_SNR_BN_3_1        = Header_Get(specfile_glx,str(LINES[5][lines-2])+'_SNB3')#,float(SPC_SNR_BN_3) ,header_comment = str(LINES[3][lines-2]) + str(LINES[0][lines-2]) + ' SNR BINNED SUM')


				SPC_SNR_FUNC_UB_1_2_2 = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_NSU1')#,float(SPC_SNR_FUNC_UB_1[2]) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' NSE UBIN SPC REG ALL')
				SPC_SNR_FUNC_UB_2_2_2 = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_NSU2')#,float(SPC_SNR_FUNC_UB_2[2]) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' NSE UBIN SPC REG CNT')
				SPC_SNR_FUNC_UB_3_2_2 = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_NSU3')#,float(SPC_SNR_FUNC_UB_3[2]) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' NSE UBIN SPC REG FIT')
				SPC_SNR_FUNC_UB_4_2_2 = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_NSU4')#,float(SPC_SNR_FUNC_UB_4[2]) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' NSE UBIN SPC REG PLT')

				SPC_SNR_UB_1_2        = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_SNU1')#,float(SPC_SNR_UB_1) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' SNR UBIN SPC REG ALL')
				SPC_SNR_UB_2_2        = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_SNU2')#,float(SPC_SNR_UB_2) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' SNR UBIN SPC REG CNT')
				SPC_SNR_UB_3_2        = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_SNU3')#,float(SPC_SNR_UB_3) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' SNR UBIN SPC REG FIT')
				SPC_SNR_UB_4_2        = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_SNU4')#,float(SPC_SNR_UB_4) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' SNR UBIN SPC REG PLT')

				bin_size_2            = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_SNBS')#,float(bin_size)     ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' SNR BINNED Size')
				bin_number_2          = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_SNBN')#,float(bin_number)   ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' SNR BINNED # Bins')

				SPC_NSE_BN_1_2        = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_NSB1')#,float(SPC_NSE_BN_1) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' NSE BINNED AVG')
				SPC_NSE_BN_2_2        = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_NSB2')#,float(SPC_NSE_BN_2) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' NSE BINNED MED')
				SPC_NSE_BN_3_2        = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_NSB3')#,float(SPC_NSE_BN_3) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' NSE BINNED SUM')				

				SPC_SNR_BN_1_2        = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_SNB1')#,float(SPC_SNR_BN_1) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' SNR BINNED AVG')
				SPC_SNR_BN_2_2        = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_SNB2')#,float(SPC_SNR_BN_2) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' SNR BINNED MED')
				SPC_SNR_BN_3_2        = Header_Get(specfile_glx,str(LINES[5][lines-1])+'_SNB3')#,float(SPC_SNR_BN_3) ,header_comment = str(LINES[3][lines-1]) + str(LINES[0][lines-1]) + ' SNR BINNED SUM')
			elif 'Dbl' in LINES[3][lines] and fit_fnct=='gaussM' and fit_type =='lmfit':
				CTRE_G_C_SNR_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_CMC1')
				AMPL_G_C_SNR_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AMC1')
				SGMA_G_C_SNR_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_SMC1')

				SPC_SNR_UB_1_1 = abs(AMPL_G_C_SNR_1)/SPC_SNR_FUNC_UB_1[2]
				SPC_SNR_UB_2_1 = abs(AMPL_G_C_SNR_1)/SPC_SNR_FUNC_UB_2[2]
				SPC_SNR_UB_3_1 = abs(AMPL_G_C_SNR_1)/SPC_SNR_FUNC_UB_3[2]
				SPC_SNR_UB_4_1 = abs(AMPL_G_C_SNR_1)/SPC_SNR_FUNC_UB_4[2]					

				CTRE_G_C_SNR_2 = Header_Get(specfile_glx,str(LINES[5][lines])+'_CMC2')
				AMPL_G_C_SNR_2 = Header_Get(specfile_glx,str(LINES[5][lines])+'_AMC2')
				SGMA_G_C_SNR_2 = Header_Get(specfile_glx,str(LINES[5][lines])+'_SMC2')

				SPC_SNR_UB_1_2 = abs(AMPL_G_C_SNR_2)/SPC_SNR_FUNC_UB_1[2]
				SPC_SNR_UB_2_2 = abs(AMPL_G_C_SNR_2)/SPC_SNR_FUNC_UB_2[2]
				SPC_SNR_UB_3_2 = abs(AMPL_G_C_SNR_2)/SPC_SNR_FUNC_UB_3[2]
				SPC_SNR_UB_4_2 = abs(AMPL_G_C_SNR_2)/SPC_SNR_FUNC_UB_4[2]

				CTRE_G_C_SNR  = CTRE_G_C_SNR_1
				AMPL_G_C_SNR  = AMPL_G_C_SNR_1
				SGMA_G_C_SNR  = SGMA_G_C_SNR_1
				SPC_SNR_UB_1  = SPC_SNR_UB_1_1
				SPC_SNR_UB_2  = SPC_SNR_UB_2_1
				SPC_SNR_UB_3  = SPC_SNR_UB_3_1
				SPC_SNR_UB_4  = SPC_SNR_UB_4_1	

			min_y_ind_spec.append(bn.nanmin(inten_glx[mask_pl]))
			max_y_ind_spec.append(bn.nanmax(inten_glx[mask_pl]))

			####################################################SPLT-LNE-PER-BIN###################################################
			#####################################################DEFINE PANELS#####################################################
			if splt_ind_lns == True and LNS_NOT_CTG == True and not 'Dbl' in LINES[3][lines]:
				print '&&&&&&&&&&&&&&&&&&&&'
				print 'Z-2',LINES[0][lines],LINES[3][lines]
				print '&&&&&&&&&&&&&&&&&&&&'
				try:
					ax110 = plt.Subplot(f, gs11[index],sharey=axs_splt_lns[-1])
				except IndexError:
					ax110 = plt.Subplot(f, gs11[index])
				axs_splt_lns.append(ax110)
				f.add_subplot(ax110, sharey=True)
				xticklabels = ax110.get_xticklabels()
				plt.setp(xticklabels, visible=False, family='serif',)
				yticklabels = ax110.get_yticklabels()
				plt.setp(yticklabels, visible=False, family='serif',)
				minorLocator_x   = plt.MultipleLocator(5)
				majorLocator_x   = plt.MultipleLocator(10)
				ax110.xaxis.set_minor_locator(minorLocator_x)
				ax110.xaxis.set_major_locator(majorLocator_x)				

				if autoaxis_SSL == True:
					min_y, max_y = ax110.get_ylim()
					min_y =  min_y_lim_SSL
					max_y =  max_y_lim_SSL

					min_dif = abs(1-bn.nanmin(min_y_ind_spec))
					max_dif = abs(1-bn.nanmax(max_y_ind_spec))
					abs_dif = max(min_dif,max_dif)
					min_y   = 1 - abs_dif - (abs_dif*1)#0.05
					max_y   = 1 + abs_dif + (abs_dif*1)#0.05

					#plt.ylim([min_y,max_y])
					#ymin, ymax = plt.ylim()
					#plt.ylim((ymin,ymax))

					#print '****'
					#print ymin,ymax
					#print '***'

				elif autoaxis_SSL == False:
					pass

				#plt.plot([LINES[0][lines]+LINES[8][lines],LINES[0][lines]+LINES[8][lines]],
						#[min_y, max_y],
						#color='black', lw=1.5, alpha=0.8,ls=':'
						##,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function)
						#)
			elif splt_ind_lns == True and LNS_NOT_CTG == True and 'Dbl' in LINES[3][lines]:
				print '&&&&&&&&&&&&&&&&&&&&'
				print 'Z-1',LINES[0][lines],LINES[3][lines]
				print '&&&&&&&&&&&&&&&&&&&&'
				try:
					ax110 = plt.Subplot(f, gs11[index],sharey=axs_splt_lns[-1])
				except IndexError:
					ax110 = plt.Subplot(f, gs11[index])
				axs_splt_lns.append(ax110)
				f.add_subplot(ax110, sharey=True)
				xticklabels = ax110.get_xticklabels()
				plt.setp(xticklabels, visible=False, family='serif',)
				yticklabels = ax110.get_yticklabels()
				plt.setp(yticklabels, visible=False, family='serif',)
				minorLocator_x   = plt.MultipleLocator(5)
				majorLocator_x   = plt.MultipleLocator(10)
				ax110.xaxis.set_minor_locator(minorLocator_x)
				ax110.xaxis.set_major_locator(majorLocator_x)				

				if autoaxis_SSL == True:
					min_y, max_y = ax110.get_ylim()
					min_y =  min_y_lim_SSL
					max_y =  max_y_lim_SSL

					min_dif = abs(1-bn.nanmin(min_y_ind_spec))
					max_dif = abs(1-bn.nanmax(max_y_ind_spec))
					abs_dif = max(min_dif,max_dif)
					min_y   = 1 - abs_dif - (abs_dif*1)#0.05
					max_y   = 1 + abs_dif + (abs_dif*1)#0.05

					#plt.ylim([min_y,max_y])
					#ymin, ymax = plt.ylim()
					#plt.ylim((ymin,ymax))

					#print '****'
					#print ymin,ymax
					#print '***'

				elif autoaxis_SSL == False:
					pass

				#plt.plot([LINES[0][lines-2]+LINES[8][lines-2],LINES[0][lines-2]+LINES[8][lines-2]],
						#[min_y, max_y],
						#color='black', lw=1.5, alpha=0.8,ls=':'
						##,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function)
						#)
				#plt.plot([LINES[0][lines-1]+LINES[8][lines-1],LINES[0][lines-1]+LINES[8][lines-1]],
						#[min_y, max_y],
						#color='black', lw=1.5, alpha=0.8,ls=':'
						##,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function)
						#)																		
			elif splt_ind_lns == True and LNS_NOT_CTG == False and PLT_REG_DFN == True:
				print '&&&&&&&&&&&&&&&&&&&&'
				print 'Y',LINES[0][lines],LINES[3][lines]
				print '&&&&&&&&&&&&&&&&&&&&'
				print axs_splt_lns
				try:
					ax110 = plt.Subplot(f, gs11[index],sharey=axs_splt_lns[-1])
				except IndexError:
					ax110 = plt.Subplot(f, gs11[index])
				axs_splt_lns.append(ax110)
				f.add_subplot(ax110, sharey=True)
				xticklabels = ax110.get_xticklabels()
				plt.setp(xticklabels, visible=False, family='serif',)
				yticklabels = ax110.get_yticklabels()
				plt.setp(yticklabels, visible=False, family='serif',)
				minorLocator_x   = plt.MultipleLocator(5)
				majorLocator_x   = plt.MultipleLocator(10)
				ax110.xaxis.set_minor_locator(minorLocator_x)
				ax110.xaxis.set_major_locator(majorLocator_x)				

				if autoaxis_SSL == True:
					min_y, max_y = ax110.get_ylim()
					min_y =  min_y_lim_SSL
					max_y =  max_y_lim_SSL

					min_dif = abs(1-bn.nanmin(min_y_ind_spec))
					max_dif = abs(1-bn.nanmax(max_y_ind_spec))
					abs_dif = max(min_dif,max_dif)
					min_y   = 1 - abs_dif - (abs_dif*1)#0.05
					max_y   = 1 + abs_dif + (abs_dif*1)#0.05

					#plt.ylim([min_y,max_y])
					#ymin, ymax = plt.ylim()
					#plt.ylim((ymin,ymax))

					#print '****'
					#print ymin,ymax
					#print '***'

				elif autoaxis_SSL == False:
					pass

				#plt.plot([LINES[0][lines]+LINES[8][lines],LINES[0][lines]+LINES[8][lines]],
						#[min_y, max_y],
						#color='black', lw=1.5, alpha=0.8,ls=':'
						##,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function)
						#)
				#plt.plot([LINES[0][lines+1]+LINES[8][lines+1],LINES[0][lines+1]+LINES[8][lines+1]],
						#[min_y, max_y],
						#color='black', lw=1.5, alpha=0.8,ls=':'
						##,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function)
						#)
			elif splt_ind_lns == True and LNS_NOT_CTG == False and PLT_REG_DFN == False:
				print '&&&&&&&&&&&&&&&&&&&&'
				print 'X',LINES[0][lines],LINES[3][lines]
				print '&&&&&&&&&&&&&&&&&&&&'
				#ax110 = plt.Subplot(f, gs11[index])#,sharey=axs_splt_lns[-1])
				#axs_splt_lns.append(ax110)
				#f.add_subplot(ax110, sharey=True)
				xticklabels = ax110.get_xticklabels()
				plt.setp(xticklabels, visible=False, family='serif',)
				yticklabels = ax110.get_yticklabels()
				plt.setp(yticklabels, visible=False, family='serif',)
				minorLocator_x   = plt.MultipleLocator(5)
				majorLocator_x   = plt.MultipleLocator(10)
				ax110.xaxis.set_minor_locator(minorLocator_x)
				ax110.xaxis.set_major_locator(majorLocator_x)				

				if autoaxis_SSL == True:
					min_y, max_y = ax110.get_ylim()
					min_y =  min_y_lim_SSL
					max_y =  max_y_lim_SSL

					min_dif = abs(1-bn.nanmin(min_y_ind_spec))
					max_dif = abs(1-bn.nanmax(max_y_ind_spec))
					abs_dif = max(min_dif,max_dif)
					min_y   = 1 - abs_dif - (abs_dif*1)#0.05
					max_y   = 1 + abs_dif + (abs_dif*1)#0.05

					#plt.ylim([min_y,max_y])
					#ymin, ymax = plt.ylim()
					#plt.ylim((ymin,ymax))

					#print '****'
					#print ymin,ymax
					#print '***'

				elif autoaxis_SSL == False:
					pass

				#plt.plot([LINES[0][lines]+LINES[8][lines],LINES[0][lines]+LINES[8][lines]],
						#[min_y, max_y],
						#color='black', lw=1.5, alpha=0.8,ls=':'
						##,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function)
						#)
			elif splt_ind_lns == False:
				pass
				xticklabels = ax110.get_xticklabels()
				yticklabels = ax110.get_yticklabels()
				plt.setp(xticklabels, visible=False,family='serif')
				plt.setp(yticklabels, visible=True ,family='serif')
				minorLocator_x   = plt.MultipleLocator(1)
				majorLocator_x   = plt.MultipleLocator(5)
				ax110.xaxis.set_minor_locator(minorLocator_x)
				ax110.xaxis.set_major_locator(majorLocator_x)

			ax110.set_rasterization_zorder(1)
			plt.autoscale(enable=True, axis='both', tight=False)
			plt.autoscale(enable=True, axis='y', tight=True)
			xticklabels = ax110.get_xticklabels()
			yticklabels = ax110.get_yticklabels()
			#plt.setp(xticklabels, visible=False,family='serif')
			#plt.setp(yticklabels, visible=True ,family='serif')


			ax110.yaxis.set_tick_params(which='both',labelsize=18,direction='in',color='black',bottom=True,top=True,left=True,right=True)
			ax110.xaxis.set_tick_params(which='both',labelsize=18,direction='in',color='black',bottom=True,top=True,left=True,right=True)

			#minorLocator_x   = plt.MultipleLocator(1)
			#majorLocator_x   = plt.MultipleLocator(5)
			##minorLocator_y   = plt.MultipleLocator(0.1)
			##majorLocator_y   = plt.MultipleLocator(0.5)
			#ax110.xaxis.set_minor_locator(minorLocator_x)
			#ax110.xaxis.set_major_locator(majorLocator_x)
			##ax110.yaxis.set_minor_locator(minorLocator_y)
			##ax110.yaxis.set_major_locator(majorLocator_y)
			plt.tick_params(which='both', width=0.7)
			plt.tick_params(which='major', length=5)
			plt.tick_params(which='minor', length=2)
			ax110.minorticks_on()

			ax110.yaxis.set_major_formatter(mticker.FormatStrFormatter('%.2f'))
			####################################################SPLT-LNE-PER-BIN###################################################
			#####################################################DEFINE PANELS#####################################################

			########################################################LINE-PLT#######################################################
			if fit_fnct is not None:
				#plt.step(lambda_glx[mask_pl], inten_glx[mask_pl], colors[index],
						#where='mid',
						#lw=2.0,alpha=0.6,linestyle='-')#label=label_glx,
				if not 'Dbl' in LINES[3][lines]: #popt_O[1]
					lambda_glx_lne_fit   = np.arange(lmb_min_lim_line,lmb_max_lim_line,0.1)
					if fit_fnct=='gauss' and LNS_NOT_CTG==True:
						print '**************'
						print 'Plotting'
						print '1'
						print LINES[3][lines]
						print '**************'
						print
						print 'Plot Not Dbl Gaussian Function'
						print
						if pre_off_plt == True and plt_ind_fit == True and AMPL_G_O <0:
							try:
								plt.plot(lambda_glx_lne_fit,
											func_1D_Gaussian(lambda_glx_lne_fit,*popt_0),
											color='gray'  ,ls=':',lw=1.5,
											#label = label_glx + ' g fit Org: ' + 
											#'EW: ' + str(EW_0), 
											alpha=0.5)
								plt.plot(lambda_glx_lne_fit,
											func_1D_Gaussian_O(lambda_glx_lne_fit,*popt_O),
											color='gray'  ,ls='--',lw=1.5,
											#label = label_glx + ' g fit Off: ' + 
											#'EW: ' + str(EW_O) + ', '  
											#'OFS: ' + str(np.round(OFST_G_O,2)), 
											alpha=0.5)
							except UnboundLocalError:
								plt.plot(lambda_glx_lne_fit,
											func_1D_Gaussian(lambda_glx_lne_fit,CTRE_G_0,AMPL_G_0,SGMA_G_0)     ,
											color='gray'  ,ls=':',lw=1.5,
											#label = label_glx + ' g fit Org: ' + 
											#'EW: ' + str(EW_0), 
											alpha=0.5)
								plt.plot(lambda_glx_lne_fit,
											func_1D_Gaussian_O(lambda_glx_lne_fit,CTRE_G_O,AMPL_G_O,SGMA_G_O,OFST_G_O)  ,
											color='gray'  ,ls='--',lw=1.5,
											#label = label_glx + ' g fit Off: ' + 
											#'EW: ' + str(EW_O) + ', '  
											#'OFS: ' + str(np.round(OFST_G_O,2)), 
											alpha=0.5)
						elif pre_off_plt == False:
							pass		
						if plt_ind_fit == True and AMPL_G_O <0:
							try:
								plt.plot(lambda_glx_lne_fit,func_1D_Gaussian(lambda_glx_lne_fit,*popt_C)    ,
										color=colors[index]   ,ls='-',lw=3.0,
										#label = label_glx + ' '+
										##'g fit C: ' + 
										##'$\lambda_{0}$='+ str(np.round(CTRE_G_C,2)) + ', ' +
										##'$\sigma$=' + str(np.round(SGMA_G_C,2)) + ',' + 
										##'fwhm=' + str(np.round(sigma2fwhm(SGMA_G_C),2)) +
										##'A: '+ str(np.round(AMPL_G_C,2)) + ', ' + 
										#'EW: ' + str(EW_C) + ', ' +
										#'N : ' + str(stk_glx_nmb),# +  ', ' +
										##'SNR (M) : ' + str(np.round(SPC_SNR_BN_2,2)),
										alpha=1.0)# + ', EWE: '+str(EWE))
							except UnboundLocalError:
								plt.plot(lambda_glx_lne_fit,
										func_1D_Gaussian(lambda_glx_lne_fit,CTRE_G_C,AMPL_G_C,SGMA_G_C)    ,
										color=colors[index]   ,ls='-',lw=3.0,
										#label = label_glx + ' '+ 'g fit Crc: ' + 
										#'EW: ' + str(EW_C) + ', ' +
										#"\n" +
										#'N : ' + str(stk_glx_nmb),# +  ', ' +
										##'SNR (M) : ' + str(np.round(SPC_SNR_BN_2,2))+ ', ' ,
										##'$\chi^{2}$: '+str(chisqr_C)+ ', ' +
										##'$\chi^{2}_{r}$:' + str(redchi_C),
										alpha=1.0)
						else:
							pass
						try:
							OFST_G_O = Header_Get(specfile_glx,str(LINES[5][lines])+'_OFSO')
							if OFST_G_O == 999999.99999:
								OFST_G_O = 0
							else:
								pass
							print
							print colored('Correcting Spectra by Offset Fitted Previously','yellow')
							print colored('Defined by Header: ' + str(LINES[5][lines])+'_OFSO','yellow')
							print
							inten_glx[mask_pl] = inten_glx[mask_pl] - OFST_G_O				 #MENOS OFFSET ACA			
						except:
							pass
						plt.step(lambda_glx[mask_pl], inten_glx[mask_pl], colors[index],
								where='mid',
								lw=1.5,alpha=0.6,linestyle='-')#label=label_glx,
					elif fit_fnct=='gauss' and LNS_NOT_CTG==False and PLT_REG_DFN == True and ((AMPL_G_O_1 <0) or (AMPL_G_O_2 <0)):
						print '**************'
						print 'Plotting'
						print '2'
						print LINES[3][lines-1]
						print LINES[3][lines]
						print LINES[3][lines+1]
						print '**************'
						if pre_off_plt == True and plt_ind_fit == True and AMPL_G_O <0:
							try:
								plt.plot(lambda_glx_lne_fit,
											func_1D_Gaussian(lambda_glx_lne_fit,*popt_0),
											color='gray'  ,ls=':',lw=1.5,
											#label = label_glx + ' g fit Org: ' + 
											#'EW: ' + str(EW_0), 
											alpha=0.5)
								plt.plot(lambda_glx_lne_fit,
											func_1D_Gaussian_O(lambda_glx_lne_fit,*popt_O),
											color='gray'  ,ls='--',lw=1.5,
											#label = label_glx + ' g fit Off: ' + 
											#'EW: ' + str(EW_O) + ', '  
											#'OFS: ' + str(np.round(OFST_G_O,2)), 
											alpha=0.5)
							except UnboundLocalError:
								plt.plot(lambda_glx_lne_fit,
											func_1D_Gaussian(lambda_glx_lne_fit,CTRE_G_0,AMPL_G_0,SGMA_G_0)     ,
											color='gray'  ,ls=':',lw=1.5,
											#label = label_glx + ' g fit Org: ' + 
											#'EW: ' + str(EW_0), 
											alpha=0.5)
								plt.plot(lambda_glx_lne_fit,
											func_1D_Gaussian_O(lambda_glx_lne_fit,CTRE_G_O,AMPL_G_O,SGMA_G_O,OFST_G_O)  ,
											color='gray'  ,ls='--',lw=1.5,
											#label = label_glx + ' g fit Off: ' + 
											#'EW: ' + str(EW_O) + ', '  
											#'OFS: ' + str(np.round(OFST_G_O,2)), 
											alpha=0.5)
						elif pre_off_plt == False:
							pass						
							##if plt_ind_fit == True and AMPL_G_O <0:
								##try:
									##plt.plot(lambda_glx_lne_fit,func_1D_Gaussian(lambda_glx_lne_fit,*popt_C)    ,
											##color=colors[index]   ,
											##ls='dashed',lw=3.0,
											###label = label_glx + ' '+
											####'g fit C: ' + 
											####'$\lambda_{0}$='+ str(np.round(CTRE_G_C,2)) + ', ' +
											####'$\sigma$=' + str(np.round(SGMA_G_C,2)) + ',' + 
											####'fwhm=' + str(np.round(sigma2fwhm(SGMA_G_C),2)) +
											####'A: '+ str(np.round(AMPL_G_C,2)) + ', ' + 
											###'EW: ' + str(EW_C) + ', ' +
											###'N : ' + str(stk_glx_nmb),# +  ', ' +
											####'SNR (M) : ' + str(np.round(SPC_SNR_BN_2,2)),
											##alpha=1.0)# + ', EWE: '+str(EWE))
								##except UnboundLocalError:
									##plt.plot(lambda_glx_lne_fit,
											##func_1D_Gaussian(lambda_glx_lne_fit,CTRE_G_C,AMPL_G_C,SGMA_G_C)    ,
											##color=colors[index]   ,
											##ls='dashed',lw=3.0,
											###label = label_glx + ' '+ 'g fit Crc: ' + 
											###'EW: ' + str(EW_C) + ', ' +
											###"\n" +
											###'N : ' + str(stk_glx_nmb),# +  ', ' +
											####'SNR (M) : ' + str(np.round(SPC_SNR_BN_2,2))+ ', ' ,
											####'$\chi^{2}$: '+str(chisqr_C)+ ', ' +
											####'$\chi^{2}_{r}$:' + str(redchi_C),
											##alpha=1.0)
						try:
							OFST_G_O = Header_Get(specfile_glx,str(LINES[5][lines])+'_OFSO')
							if OFST_G_O == 999999.99999:
								OFST_G_O = 0
							else:
								pass
							print
							print colored('Correcting Spectra by Offset Fitted Previously','yellow')
							print colored('Defined by Header: ' + str(LINES[5][lines])+'_OFSO','yellow')
							print
							inten_glx[mask_pl] = inten_glx[mask_pl] - OFST_G_O				 #MENOS OFFSET ACA			
						except:
							pass
						#plt.step(lambda_glx[mask_pl], inten_glx[mask_pl], colors[index],
								#where='mid',
								#lw=1.5,alpha=0.6,linestyle='-')#label=label_glx,
						lambda_glx_lne_fit  = np.arange(lmb_min_lim_line,lmb_max_lim_line,0.1)
						lambda_glx_lne_fitM = np.arange(min(lambda_glx[mask_pl]),max(lambda_glx[mask_pl]),0.1)
						if fit_fnct=='gauss' and (AMPL_G_O_1 <0) or (AMPL_G_O_2 <0):#not 'DblF' in LINES[3][lines]:
							try:
								OFST_G_O_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_OFO1')
								OFST_G_O_2 = Header_Get(specfile_glx,str(LINES[5][lines])+'_OFO2')
								if OFST_G_O_1 == 999999.99999:
									OFST_G_O_1 = 0
								else:
									pass
								if OFST_G_O_2 == 999999.99999:
									OFST_G_O_2 = 0
								else:
									pass
								print
								print colored('Correcting Spectra by Offset Fitted Previously','yellow')
								print colored('Defined by Header: ' + str(LINES[5][lines])+'_OFO1','yellow')
								print colored('Defined by Header: ' + str(LINES[5][lines])+'_OFO2','yellow')
								print
								inten_glx[mask_pl] = inten_glx[mask_pl] - OFST_G_O_1 - OFST_G_O_2				 #MENOS OFFSET			
							except:
								pass
							if pre_off_plt == True:
								try:
									plt.plot(lambda_glx_lne_fit,
												func_1D_Gaussian(lambda_glx_lne_fit,*popt_0),
												color = 'gray'  ,ls=':',lw=3.0,
												#label = label_glx + ' g fit Org: ' + 
												#'EW: ' + str(EW_0), 
												alpha=0.5)
									plt.plot(lambda_glx_lne_fit,
												func_1D_Gaussian_O(lambda_glx_lne_fit,*popt_O)- 1,
												color = 'gray'  ,ls='--',lw=3.0,
												#label = label_glx + ' g fit Off: ' + 
												#'EW: ' + str(EW_O) + ', '  
												#'OFS: ' + str(np.round(OFST_G_O,2)), 
												alpha=0.5)
								except UnboundLocalError:
									plt.plot(lambda_glx_lne_fit,
												func_1D_Gaussian(lambda_glx_lne_fit,CTRE_G_0,AMPL_G_0,SGMA_G_0)     ,
												color = 'gray'  ,ls=':',lw=3.0,
												#label = label_glx + ' g fit Org: ' + 
												#'EW: ' + str(EW_0), 
												alpha=0.5)
									plt.plot(lambda_glx_lne_fit,
												func_1D_Gaussian_O(lambda_glx_lne_fit,CTRE_G_O,AMPL_G_O,SGMA_G_O,OFST_G_O)  - 1,
												color = 'gray'  ,ls='--',lw=3.0,
												#label = label_glx + ' g fit Off: ' + 
												#'EW: ' + str(EW_O) + ', '  
												#'OFS: ' + str(np.round(OFST_G_O,2)), 
												alpha=0.5)
							elif pre_off_plt == False:
								pass
								mask_pl
								mask_ft
							if plt_ind_fit == True:
								#CTR#
								##try:
									##plt.plot(lambda_glx_lne_fitM,
											##func_1D_Gaussian(lambda_glx_lne_fitM,*popt_C),
											##color = 'green',#colors[index]   ,
											##ls='-',lw=3.0,
											##label = label_glx + ' '+
											##' X$_{0}$: '  + str(np.round(CTRE_G_C,2)) +
											##' A: '        + str(np.round(AMPL_G_C,2)) +
											##' $\sigma$: ' + str(np.round(SGMA_G_C,2))
											##,
											##alpha=1.0)
								##except UnboundLocalError:
									##plt.plot(lambda_glx_lne_fitM,
											##func_1D_Gaussian(lambda_glx_lne_fitM,CTRE_G_C,AMPL_G_C,SGMA_G_C),
											##color = 'green',#colors[index]   ,
											##ls='-',lw=3.0,
											##label = label_glx + ' '+
											##' X$_{0}$: '  + str(np.round(CTRE_G_C,2)) +
											##' A: '        + str(np.round(AMPL_G_C,2)) +
											##' $\sigma$: ' + str(np.round(SGMA_G_C,2))
											##,
											##alpha=1.0)
								#CTR#
								#G-1#
								#try:
									#plt.plot(lambda_glx_lne_fitM,
											#func_1D_Gaussian(lambda_glx_lne_fitM,*popt_C_1),
											#color = 'cyan'   ,
											#ls=':',
											#lw=1.0,
											##label = label_glx + ' '+
											##' X$_{0}$: '  + str(np.round(CTRE_G_C_1,2)) +
											##' A: '        + str(np.round(AMPL_G_C_1,2)) +
											##' $\sigma$: ' + str(np.round(SGMA_G_C_1,2))
											##,
											#alpha=1.0)
								#except UnboundLocalError:
									#plt.plot(lambda_glx_lne_fitM,
											#func_1D_Gaussian(lambda_glx_lne_fitM,CTRE_G_C_1,AMPL_G_C_1,SGMA_G_C_1),
											#color = 'cyan'   ,
											#ls=':',
											#lw=1.0,
											##label = label_glx + ' '+
											##' X$_{0}$: '  + str(np.round(CTRE_G_C_1,2)) +
											##' A: '        + str(np.round(AMPL_G_C_1,2)) +
											##' $\sigma$: ' + str(np.round(SGMA_G_C_1,2))
											##,
											#alpha=1.0)
								#G-1#
								#G-2#
								#try:
									#plt.plot(lambda_glx_lne_fitM,
											#func_1D_Gaussian(lambda_glx_lne_fitM,*popt_C_2),
											#color = 'magenta'   ,ls='-.',lw=1.0,
											##label = label_glx + ' '+
											##' X$_{0}$: '  + str(np.round(CTRE_G_C_2,2)) +
											##' A: '        + str(np.round(AMPL_G_C_2,2)) +
											##' $\sigma$: ' + str(np.round(SGMA_G_C_2,2))
											##,
											#alpha=1.0)
								#except UnboundLocalError:
									#plt.plot(lambda_glx_lne_fitM,
											#func_1D_Gaussian(lambda_glx_lne_fitM,CTRE_G_C_2,AMPL_G_C_2,SGMA_G_C_2),
											#color = 'magenta'   ,ls='-.',lw=1.0,
											##label = label_glx + ' '+
											##' X$_{0}$: '  + str(np.round(CTRE_G_C_2,2)) +
											##' A: '        + str(np.round(AMPL_G_C_2,2)) +
											##' $\sigma$: ' + str(np.round(SGMA_G_C_2,2))
											##,
											#alpha=1.0)							
								#G-2#
								#SUM:G_1+G_2#
								try:
									plt.plot(lambda_glx_lne_fitM,
											#func_1D_Gaussian(lambda_glx_lne_fitM,*popt_C)    +
											(func_1D_Gaussian(lambda_glx_lne_fitM,*popt_C_1))+
											(func_1D_Gaussian(lambda_glx_lne_fitM,*popt_C_2)) -
											2,
											color = colors[index],#'black',
											ls='-',lw=3.0,
											#label = label_glx + ' '
											#,
											alpha=1.0)
								except UnboundLocalError:
									plt.plot(lambda_glx_lne_fitM,
											#func_1D_Gaussian(lambda_glx_lne_fitM,CTRE_G_C,AMPL_G_C,SGMA_G_C)                   +
											(func_1D_Gaussian(lambda_glx_lne_fitM,CTRE_G_C_1,AMPL_G_C_1,SGMA_G_C_1)) +
											(func_1D_Gaussian(lambda_glx_lne_fitM,CTRE_G_C_2,AMPL_G_C_2,SGMA_G_C_2)) - 
											1,
											color = colors[index],#'black',
											ls='-',lw=3.0,
											#label = label_glx + ' '
											#,
											alpha=1.0)							
								#SUM:G_1+G_2#
							else:
								pass
							min_y, max_y = ax110.get_ylim()
						else:
							pass
						plt.step(lambda_glx[mask_pl], inten_glx[mask_pl], 
									colors[index],
									where='mid',lw=1.5,alpha=0.6,linestyle='-')#label=label_glx,
					elif fit_fnct=='gaussM' and (AMPL_G_O) and LNS_NOT_CTG==True:
						print '**************'
						print 'Plotting'
						print '3'
						print LINES[3][lines]
						print LNS_NOT_CTG
						print PLT_REG_DFN
						print lambda_glx[mask_pl][0]
						print lambda_glx[mask_pl][-1]
						print '**************'
						#inten_glx[mask_ft_plp] = inten_glx[mask_ft_plp] - OFST_G_O #OFFSET -
						lambda_glx_lne_fitM = np.arange(min(lambda_glx[mask_pl]),max(lambda_glx[mask_pl]),0.1)
						
						try:
							OFST_G_O = Header_Get(specfile_glx,str(LINES[5][lines])+'_OFSO')
							if OFST_G_O == 999999.99999:
								OFST_G_O = 0
							else:
								pass
							print
							print colored('Correcting Spectra by Offset Fitted Previously','yellow')
							print colored('Defined by Header: ' + str(LINES[5][lines])+'_OFSO','yellow')
							print
							inten_glx[mask_pl] = inten_glx[mask_pl] - OFST_G_O				 #MENOS OFFSET			
						except:
							pass

						if pre_off_plt == True and plt_ind_fit == True and AMPL_G_O <0:
							try:
								plt.plot(lambda_glx_lne_fit,
											func_1D_Gaussian(lambda_glx_lne_fit,*popt_0),
											color = 'gray'  ,ls=':',lw=3.0,
											label = label_glx + ' g fit Org: ' + 
											'EW: ' + str(EW_0), 
											alpha=0.5)
								plt.plot(lambda_glx_lne_fit,
											func_1D_Gaussian_O(lambda_glx_lne_fit,*popt_O)- 1,
											color = 'gray'  ,ls='--',lw=3.0,
											label = label_glx + ' g fit Off: ' + 
											'EW: ' + str(EW_O) + ', '  
											'OFS: ' + str(np.round(OFST_G_O,2)), 
											alpha=0.5)
							except UnboundLocalError:
								plt.plot(lambda_glx_lne_fit,
											func_1D_Gaussian(lambda_glx_lne_fit,CTRE_G_0,AMPL_G_0,SGMA_G_0)     ,
											color = 'gray'  ,ls=':',lw=3.0,
											label = label_glx + ' g fit Org: ' + 
											'EW: ' + str(EW_0), 
											alpha=0.5)
								plt.plot(lambda_glx_lne_fit,
											func_1D_Gaussian_O(lambda_glx_lne_fit,CTRE_G_O,AMPL_G_O,SGMA_G_O,OFST_G_O)  - 1,
											color = 'gray'  ,ls='--',lw=3.0,
											label = label_glx + ' g fit Off: ' + 
											'EW: ' + str(EW_O) + ', '  
											'OFS: ' + str(np.round(OFST_G_O,2)), 
											alpha=0.5)
						elif pre_off_plt == False:
							pass
							mask_pl
							mask_ft
						if plt_ind_fit == True and AMPL_G_O <0:
							'''
							#CTR#
							try:
								plt.plot(lambda_glx_lne_fitM,
										func_1D_Gaussian(lambda_glx_lne_fitM,*popt_C),
										color = colors[index]   ,ls='-',lw=3.0,
										label = label_glx + ' '+
										' X$_{0}$: '  + str(np.round(CTRE_G_C,2)) +
										' A: '        + str(np.round(AMPL_G_C,2)) +
										' $\sigma$: ' + str(np.round(SGMA_G_C,2))
										,
										alpha=1.0)
							except UnboundLocalError:
								plt.plot(lambda_glx_lne_fitM,
										func_1D_Gaussian(lambda_glx_lne_fitM,CTRE_G_C,AMPL_G_C,SGMA_G_C),
										color = colors[index]   ,ls='-',lw=1.0,
										label = label_glx + ' '+
										' X$_{0}$: '  + str(np.round(CTRE_G_C,2)) +
										' A: '        + str(np.round(AMPL_G_C,2)) +
										' $\sigma$: ' + str(np.round(SGMA_G_C,2))
										,
										alpha=1.0)
							#CTR#
							#PRE#
							try:
								plt.plot(lambda_glx_lne_fitM,
										func_1D_Gaussian_Emm(lambda_glx_lne_fitM,*popt_C_PRE)-1,
										color = 'blue'   ,ls=':',lw=1.0,
										label = label_glx + ' '+
										' X$_{0}$: '  + str(np.round(CTRE_G_C_PRE,2)) +
										' A: '        + str(np.round(AMPL_G_C_PRE,2)) +
										' $\sigma$: ' + str(np.round(SGMA_G_C_PRE,2))
										,
										alpha=1.0)
							except UnboundLocalError:
								plt.plot(lambda_glx_lne_fitM,
										func_1D_Gaussian_Emm(lambda_glx_lne_fitM,CTRE_G_C_PRE,AMPL_G_C_PRE,SGMA_G_C_PRE),
										color = 'blue'   ,ls=':',lw=1.0,
										label = label_glx + ' '+
										' X$_{0}$: '  + str(np.round(CTRE_G_C_PRE,2)) +
										' A: '        + str(np.round(AMPL_G_C_PRE,2)) +
										' $\sigma$: ' + str(np.round(SGMA_G_C_PRE,2))
										,
										alpha=1.0)			
							#PRE#
							#PST#
							try:
								plt.plot(lambda_glx_lne_fitM,
										func_1D_Gaussian_Emm(lambda_glx_lne_fitM,*popt_C_PST),
										color = 'red'   ,ls='-.',lw=1.0,
										label = label_glx + ' '+
										' X$_{0}$: '  + str(np.round(CTRE_G_C_PST,2)) +
										' A: '        + str(np.round(AMPL_G_C_PST,2)) +
										' $\sigma$: ' + str(np.round(SGMA_G_C_PST,2))
										,
										alpha=1.0)
							except UnboundLocalError:
								plt.plot(lambda_glx_lne_fitM,
										func_1D_Gaussian_Emm(lambda_glx_lne_fitM,CTRE_G_C_PST,AMPL_G_C_PST,SGMA_G_C_PST),
										color = 'red'   ,ls='-.',lw=1.0,
										label = label_glx + ' '+
										' X$_{0}$: '  + str(np.round(CTRE_G_C_PST,2)) +
										' A: '        + str(np.round(AMPL_G_C_PST,2)) +
										' $\sigma$: ' + str(np.round(SGMA_G_C_PST,2))
										,
										alpha=1.0)							
							#PST#
							'''
							#SUM#
							'''
							try:
								plt.plot(lambda_glx_lne_fitM,
										func_1D_Gaussian(lambda_glx_lne_fitM,*popt_C)    +
										(func_1D_Gaussian_Emm(lambda_glx_lne_fitM,*popt_C_PRE))+
										(func_1D_Gaussian_Emm(lambda_glx_lne_fitM,*popt_C_PST)) -
										2,
										color = 'green',
										ls='-',lw=3.0,
										label = label_glx + ' '
										,
										alpha=1.0)
							except UnboundLocalError:
								plt.plot(lambda_glx_lne_fitM,
										func_1D_Gaussian(lambda_glx_lne_fitM,CTRE_G_C,AMPL_G_C,SGMA_G_C)                   +
										(func_1D_Gaussian_Emm(lambda_glx_lne_fitM,CTRE_G_C_PRE,AMPL_G_C_PRE,SGMA_G_C_PRE)) +
										(func_1D_Gaussian_Emm(lambda_glx_lne_fitM,CTRE_G_C_PST,AMPL_G_C_PST,SGMA_G_C_PST)) - 
										2,
										color = 'green',
										ls='-',lw=3.0,
										label = label_glx + ' '
										,
										alpha=1.0)
							'''
							plt.plot(lambda_glx_lne_fitM,
									func_1D_Gaussian(lambda_glx_lne_fitM,CTRE_G_C,AMPL_G_C,SGMA_G_C)                   +
									(func_1D_Gaussian_Emm(lambda_glx_lne_fitM,CTRE_G_C_PRE,AMPL_G_C_PRE,SGMA_G_C_PRE)) +
									(func_1D_Gaussian_Emm(lambda_glx_lne_fitM,CTRE_G_C_PST,AMPL_G_C_PST,SGMA_G_C_PST)) - 
									2-OFST_G_O,
									color = colors[index],
									ls='-',lw=3.0,
									#label = label_glx + ' ',
									alpha=1.0)
							#SUM#
							'''
							#LNR#
							plt.plot(lambda_glx_lne_fitM,
									func_Linear(lambda_glx_lne_fitM,slope_line1,b1),
									color = 'cyan',
									ls='-',lw=3.0,
									label = label_glx + ' '+
									'm: ' + str(np.round(slope_line1,10)) + ', ' +
									'b : ' + str(np.round(b1,2)) +  ', ' 
									,
									alpha=1.0)
							#LNR#
							min_y, max_y = ax110.get_ylim()
							'''

							'''
							#REFERENCE CENTER LINES#
							plt.plot([x_a,x_a],
										[min_y, max_y],
										color='blue', lw=1, alpha=1.0,ls='dashed',
										#label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function
										)
							plt.plot([x_b,x_b],
										[min_y, max_y],
										color='red', lw=1, alpha=1.0,ls='dashed',
										#label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function
										)
							#REFERENCE CENTER LINES#
							#REFERENCE LIMIT LINES#
							plt.plot([(x_a+pre_shf_lim),(x_a+pre_shf_lim)],
										[min_y, max_y],
										color='blue',lw=1,alpha=0.8,ls=':',
										)
							plt.plot([(x_a-pre_shf_lim),(x_a-pre_shf_lim)],
										[min_y, max_y],
										color='blue',lw=1,alpha=0.8,ls=':',
										)
							plt.plot([(x_b-pre_shf_lim),(x_b-pre_shf_lim)],
										[min_y, max_y],
										color='red',lw=1,alpha=0.8,ls=':',
										)
							plt.plot([(x_b+pst_shf_lim),(x_b+pst_shf_lim)],
										[min_y, max_y],
										color='red',lw=1,alpha=0.8,ls=':',
										)
							#REFERENCE LIMIT LINES#
							'''
						else:
							pass					
						plt.step(lambda_glx[mask_pl], inten_glx[mask_pl], 
									colors[index],
									where='mid',lw=1.5,alpha=0.6,linestyle='-')#label=label_glx,
					elif fit_fnct=='gaussM' and LNS_NOT_CTG==False and PLT_REG_DFN == True and ((AMPL_G_O_1 <0) or (AMPL_G_O_2 <0)):
						print '**************'
						print 'Plotting'
						print '4'
						print LINES[3][lines]
						print LNS_NOT_CTG
						print PLT_REG_DFN
						print '**************'
						if pre_off_plt == True and plt_ind_fit == True and AMPL_G_O <0:
							try:
								plt.plot(lambda_glx_lne_fit,
											func_1D_Gaussian(lambda_glx_lne_fit,*popt_0),
											color='gray'  ,ls=':',lw=1.5,
											#label = label_glx + ' g fit Org: ' + 
											#'EW: ' + str(EW_0), 
											alpha=0.5)
								plt.plot(lambda_glx_lne_fit,
											func_1D_Gaussian_O(lambda_glx_lne_fit,*popt_O),
											color='gray'  ,ls='--',lw=1.5,
											#label = label_glx + ' g fit Off: ' + 
											#'EW: ' + str(EW_O) + ', '  
											#'OFS: ' + str(np.round(OFST_G_O,2)), 
											alpha=0.5)
							except UnboundLocalError:
								plt.plot(lambda_glx_lne_fit,
											func_1D_Gaussian(lambda_glx_lne_fit,CTRE_G_0,AMPL_G_0,SGMA_G_0)     ,
											color='gray'  ,ls=':',lw=1.5,
											#label = label_glx + ' g fit Org: ' + 
											#'EW: ' + str(EW_0), 
											alpha=0.5)
								plt.plot(lambda_glx_lne_fit,
											func_1D_Gaussian_O(lambda_glx_lne_fit,CTRE_G_O,AMPL_G_O,SGMA_G_O,OFST_G_O)  ,
											color='gray'  ,ls='--',lw=1.5,
											#label = label_glx + ' g fit Off: ' + 
											#'EW: ' + str(EW_O) + ', '  
											#'OFS: ' + str(np.round(OFST_G_O,2)), 
											alpha=0.5)
						elif pre_off_plt == False:
							pass		
						if plt_ind_fit == True and ((AMPL_G_O_1 <0) or (AMPL_G_O_2 <0)) <0:
							try:
								plt.plot(lambda_glx_lne_fit,func_1D_Gaussian(lambda_glx_lne_fit,*popt_C)    ,
										color=colors[index]   ,ls='-',lw=3.0,
										#label = label_glx + ' '+
										##'g fit C: ' + 
										##'$\lambda_{0}$='+ str(np.round(CTRE_G_C,2)) + ', ' +
										##'$\sigma$=' + str(np.round(SGMA_G_C,2)) + ',' + 
										##'fwhm=' + str(np.round(sigma2fwhm(SGMA_G_C),2)) +
										##'A: '+ str(np.round(AMPL_G_C,2)) + ', ' + 
										#'EW: ' + str(EW_C) + ', ' +
										#'N : ' + str(stk_glx_nmb),# +  ', ' +
										##'SNR (M) : ' + str(np.round(SPC_SNR_BN_2,2)),
										alpha=1.0)# + ', EWE: '+str(EWE))
							except UnboundLocalError:
								plt.plot(lambda_glx_lne_fit,
										func_1D_Gaussian(lambda_glx_lne_fit,CTRE_G_C,AMPL_G_C,SGMA_G_C)    ,
										color=colors[index]   ,ls='-',lw=3.0,
										#label = label_glx + ' '+ 'g fit Crc: ' + 
										#'EW: ' + str(EW_C) + ', ' +
										#"\n" +
										#'N : ' + str(stk_glx_nmb),# +  ', ' +
										##'SNR (M) : ' + str(np.round(SPC_SNR_BN_2,2))+ ', ' ,
										##'$\chi^{2}$: '+str(chisqr_C)+ ', ' +
										##'$\chi^{2}_{r}$:' + str(redchi_C),
										alpha=1.0)
						try:
							OFST_G_O = Header_Get(specfile_glx,str(LINES[5][lines])+'_OFSO')
							if OFST_G_O == 999999.99999:
								OFST_G_O = 0
							else:
								pass
							print
							print colored('Correcting Spectra by Offset Fitted Previously','yellow')
							print colored('Defined by Header: ' + str(LINES[5][lines])+'_OFSO','yellow')
							print
							inten_glx[mask_pl] = inten_glx[mask_pl] - OFST_G_O				 #MENOS OFFSET ACA			
						except:
							pass
						#plt.step(lambda_glx[mask_pl], inten_glx[mask_pl], colors[index],
								#where='mid',
								#lw=1.5,alpha=0.6,linestyle='-')#label=label_glx,

						lambda_glx_lne_fit  = np.arange(lmb_min_lim_line,lmb_max_lim_line,0.1)
						lambda_glx_lne_fitM = np.arange(min(lambda_glx[mask_pl]),max(lambda_glx[mask_pl]),0.1)
						if fit_fnct=='gauss' and (AMPL_G_O_1 <0) or (AMPL_G_O_2 <0):#not 'DblF' in LINES[3][lines]:
							try:
								OFST_G_O_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_OFO1')
								OFST_G_O_2 = Header_Get(specfile_glx,str(LINES[5][lines])+'_OFO2')
								if OFST_G_O_1 == 999999.99999:
									OFST_G_O_1 = 0
								else:
									pass
								if OFST_G_O_2 == 999999.99999:
									OFST_G_O_2 = 0
								else:
									pass
								print
								print colored('Correcting Spectra by Offset Fitted Previously','yellow')
								print colored('Defined by Header: ' + str(LINES[5][lines])+'_OFO1','yellow')
								print colored('Defined by Header: ' + str(LINES[5][lines])+'_OFO2','yellow')
								print
								inten_glx[mask_pl] = inten_glx[mask_pl] - OFST_G_O_1 - OFST_G_O_2				 #MENOS OFFSET			
							except:
								pass
							if pre_off_plt == True:
								try:
									plt.plot(lambda_glx_lne_fit,
												func_1D_Gaussian(lambda_glx_lne_fit,*popt_0),
												color = 'gray'  ,ls=':',lw=3.0,
												#label = label_glx + ' g fit Org: ' + 
												#'EW: ' + str(EW_0), 
												alpha=0.5)
									plt.plot(lambda_glx_lne_fit,
												func_1D_Gaussian_O(lambda_glx_lne_fit,*popt_O)- 1,
												color = 'gray'  ,ls='--',lw=3.0,
												#label = label_glx + ' g fit Off: ' + 
												#'EW: ' + str(EW_O) + ', '  
												#'OFS: ' + str(np.round(OFST_G_O,2)), 
												alpha=0.5)
								except UnboundLocalError:
									plt.plot(lambda_glx_lne_fit,
												func_1D_Gaussian(lambda_glx_lne_fit,CTRE_G_0,AMPL_G_0,SGMA_G_0)     ,
												color = 'gray'  ,ls=':',lw=3.0,
												#label = label_glx + ' g fit Org: ' + 
												#'EW: ' + str(EW_0), 
												alpha=0.5)
									plt.plot(lambda_glx_lne_fit,
												func_1D_Gaussian_O(lambda_glx_lne_fit,CTRE_G_O,AMPL_G_O,SGMA_G_O,OFST_G_O)  - 1,
												color = 'gray'  ,ls='--',lw=3.0,
												#label = label_glx + ' g fit Off: ' + 
												#'EW: ' + str(EW_O) + ', '  
												#'OFS: ' + str(np.round(OFST_G_O,2)), 
												alpha=0.5)
							elif pre_off_plt == False:
								pass
							if plt_ind_fit:
								#CTR#
								'''
								try:
									plt.plot(lambda_glx_lne_fitM,
											func_1D_Gaussian(lambda_glx_lne_fitM,*popt_C),
											color = 'green',#colors[index]   ,
											ls='-',lw=3.0,
											label = label_glx + ' '+
											' X$_{0}$: '  + str(np.round(CTRE_G_C,2)) +
											' A: '        + str(np.round(AMPL_G_C,2)) +
											' $\sigma$: ' + str(np.round(SGMA_G_C,2))
											,
											alpha=1.0)
								except UnboundLocalError:
									plt.plot(lambda_glx_lne_fitM,
											func_1D_Gaussian(lambda_glx_lne_fitM,CTRE_G_C,AMPL_G_C,SGMA_G_C),
											color = 'green',#colors[index]   ,
											ls='-',lw=3.0,
											label = label_glx + ' '+
											' X$_{0}$: '  + str(np.round(CTRE_G_C,2)) +
											' A: '        + str(np.round(AMPL_G_C,2)) +
											' $\sigma$: ' + str(np.round(SGMA_G_C,2))
											,
											alpha=1.0)
								'''
								#CTR#
								#G-1 + PRE-1 + PST-1#
								#try:
									#plt.plot(lambda_glx_lne_fitM,
											#func_1D_Gaussian(lambda_glx_lne_fitM,*popt_C_1),
											#color = 'blue'   ,
											#ls=':',
											#lw=1.0,
											##label = label_glx + ' '+
											##' X$_{0}$: '  + str(np.round(CTRE_G_C_1,2)) +
											##' A: '        + str(np.round(AMPL_G_C_1,2)) +
											##' $\sigma$: ' + str(np.round(SGMA_G_C_1,2))
											##,
											#alpha=1.0)
								#except UnboundLocalError:
									#plt.plot(lambda_glx_lne_fitM,
											#func_1D_Gaussian(lambda_glx_lne_fitM,CTRE_G_C_1,AMPL_G_C_1,SGMA_G_C_1)+
											#(func_1D_Gaussian_Emm(lambda_glx_lne_fitM,CTRE_G_C_PRE_1,AMPL_G_C_PRE_1,SGMA_G_C_PRE_1)) +
											#(func_1D_Gaussian_Emm(lambda_glx_lne_fitM,CTRE_G_C_PST_1,AMPL_G_C_PST_1,SGMA_G_C_PST_1)) - 
											#2,
											#color = 'blue'   ,
											#ls=':',
											#lw=1.0,
											##label = label_glx + ' '+
											##' X$_{0}$: '  + str(np.round(CTRE_G_C_1,2)) +
											##' A: '        + str(np.round(AMPL_G_C_1,2)) +
											##' $\sigma$: ' + str(np.round(SGMA_G_C_1,2))
											##,
											#alpha=1.0)
								#G-1 + PRE-1 + PST-1#
								#G-2 + PRE-2 + PST-2#
								'''
								try:
									plt.plot(lambda_glx_lne_fitM,
											func_1D_Gaussian(lambda_glx_lne_fitM,*popt_C_2),
											color = 'red'   ,ls='-.',lw=1.0,
											#label = label_glx + ' '+
											#' X$_{0}$: '  + str(np.round(CTRE_G_C_2,2)) +
											#' A: '        + str(np.round(AMPL_G_C_2,2)) +
											#' $\sigma$: ' + str(np.round(SGMA_G_C_2,2))
											#,
											alpha=1.0)
								except UnboundLocalError:
									plt.plot(lambda_glx_lne_fitM,
											func_1D_Gaussian(lambda_glx_lne_fitM,CTRE_G_C_2,AMPL_G_C_2,SGMA_G_C_2)+
											(func_1D_Gaussian_Emm(lambda_glx_lne_fitM,CTRE_G_C_PRE_2,AMPL_G_C_PRE_2,SGMA_G_C_PRE_2)) +
											(func_1D_Gaussian_Emm(lambda_glx_lne_fitM,CTRE_G_C_PST_2,AMPL_G_C_PST_2,SGMA_G_C_PST_2)) - 
											2,
											color = 'red'   ,ls='-.',lw=1.0,
											#label = label_glx + ' '+
											#' X$_{0}$: '  + str(np.round(CTRE_G_C_2,2)) +
											#' A: '        + str(np.round(AMPL_G_C_2,2)) +
											#' $\sigma$: ' + str(np.round(SGMA_G_C_2,2))
											#,
											alpha=1.0)
								'''							
								#G-2 + PRE-2 + PST-2#
								##
								#CTR#
								'''
								try:
									plt.plot(lambda_glx_lne_fitM,
											func_1D_Gaussian(lambda_glx_lne_fitM,*popt_C),
											color = colors[index]   ,ls='-',lw=3.0,
											label = label_glx + ' '+
											' X$_{0}$: '  + str(np.round(CTRE_G_C,2)) +
											' A: '        + str(np.round(AMPL_G_C,2)) +
											' $\sigma$: ' + str(np.round(SGMA_G_C,2))
											,
											alpha=1.0)
								except UnboundLocalError:
									plt.plot(lambda_glx_lne_fitM,
											func_1D_Gaussian(lambda_glx_lne_fitM,CTRE_G_C,AMPL_G_C,SGMA_G_C),
											color = colors[index]   ,ls='-',lw=1.0,
											label = label_glx + ' '+
											' X$_{0}$: '  + str(np.round(CTRE_G_C,2)) +
											' A: '        + str(np.round(AMPL_G_C,2)) +
											' $\sigma$: ' + str(np.round(SGMA_G_C,2))
											,
											alpha=1.0)
								'''
								#CTR#
								#PRE#
								'''
								try:
									plt.plot(lambda_glx_lne_fitM,
											func_1D_Gaussian_Emm(lambda_glx_lne_fitM,*popt_C_PRE_1)-1,
											color = 'blue'   ,ls=':',lw=1.0,
											label = label_glx + ' '+
											' X$_{0}$: '  + str(np.round(CTRE_G_C_PRE_1,2)) +
											' A: '        + str(np.round(AMPL_G_C_PRE_1,2)) +
											' $\sigma$: ' + str(np.round(SGMA_G_C_PRE_1,2))
											,
											alpha=1.0)
								except UnboundLocalError:
									plt.plot(lambda_glx_lne_fitM,
											func_1D_Gaussian_Emm(lambda_glx_lne_fitM,CTRE_G_C_PRE_1,AMPL_G_C_PRE_1,SGMA_G_C_PRE_1),
											color = 'blue'   ,ls=':',lw=1.0,
											label = label_glx + ' '+
											' X$_{0}$: '  + str(np.round(CTRE_G_C_PRE_1,2)) +
											' A: '        + str(np.round(AMPL_G_C_PRE_1,2)) +
											' $\sigma$: ' + str(np.round(SGMA_G_C_PRE_1,2))
											,
											alpha=1.0)			
								#PRE#
								#PST#
								try:
									plt.plot(lambda_glx_lne_fitM,
											func_1D_Gaussian_Emm(lambda_glx_lne_fitM,*popt_C_PST_1),
											color = 'red'   ,ls='-.',lw=1.0,
											label = label_glx + ' '+
											' X$_{0}$: '  + str(np.round(CTRE_G_C_PST_1,2)) +
											' A: '        + str(np.round(AMPL_G_C_PST_1,2)) +
											' $\sigma$: ' + str(np.round(SGMA_G_C_PST_1,2))
											,
											alpha=1.0)
								except UnboundLocalError:
									plt.plot(lambda_glx_lne_fitM,
											func_1D_Gaussian_Emm(lambda_glx_lne_fitM,CTRE_G_C_PST_1,AMPL_G_C_PST_1,SGMA_G_C_PST_1),
											color = 'red'   ,ls='-.',lw=1.0,
											label = label_glx + ' '+
											' X$_{0}$: '  + str(np.round(CTRE_G_C_PST,2)) +
											' A: '        + str(np.round(AMPL_G_C_PST,2)) +
											' $\sigma$: ' + str(np.round(SGMA_G_C_PST,2))
											,
											alpha=1.0)							

								#PST#
								plt.plot(lambda_glx_lne_fitM,
										func_1D_Gaussian_Emm(lambda_glx_lne_fitM,CTRE_G_C_PRE_1,AMPL_G_C_PRE_1,SGMA_G_C_PRE_1),
										color = 'blue'   ,ls=':',lw=1.0,
										label = label_glx + ' '+
										' X$_{0}$: '  + str(np.round(CTRE_G_C_PRE_1,2)) +
										' A: '        + str(np.round(AMPL_G_C_PRE_1,2)) +
										' $\sigma$: ' + str(np.round(SGMA_G_C_PRE_1,2))
										,
										alpha=1.0)
								plt.plot(lambda_glx_lne_fitM,
										func_1D_Gaussian_Emm(lambda_glx_lne_fitM,CTRE_G_C_PST_1,AMPL_G_C_PST_1,SGMA_G_C_PST_1),
										color = 'red'   ,ls='-.',lw=1.0,
										label = label_glx + ' '+
										' X$_{0}$: '  + str(np.round(CTRE_G_C_PST,2)) +
										' A: '        + str(np.round(AMPL_G_C_PST,2)) +
										' $\sigma$: ' + str(np.round(SGMA_G_C_PST,2))
										,
										alpha=1.0)
								'''																		
								#SUM#
								'''
								try:
									plt.plot(lambda_glx_lne_fitM,
											func_1D_Gaussian(lambda_glx_lne_fitM,*popt_C)    +
											(func_1D_Gaussian_Emm(lambda_glx_lne_fitM,*popt_C_PRE))+
											(func_1D_Gaussian_Emm(lambda_glx_lne_fitM,*popt_C_PST)) -
											2,
											color = 'green',
											ls='-',lw=3.0,
											label = label_glx + ' '
											,
											alpha=1.0)
								except UnboundLocalError:
									plt.plot(lambda_glx_lne_fitM,
											func_1D_Gaussian(lambda_glx_lne_fitM,CTRE_G_C,AMPL_G_C,SGMA_G_C)                   +
											(func_1D_Gaussian_Emm(lambda_glx_lne_fitM,CTRE_G_C_PRE,AMPL_G_C_PRE,SGMA_G_C_PRE)) +
											(func_1D_Gaussian_Emm(lambda_glx_lne_fitM,CTRE_G_C_PST,AMPL_G_C_PST,SGMA_G_C_PST)) - 
											2,
											color = 'green',
											ls='-',lw=3.0,
											label = label_glx + ' '
											,
											alpha=1.0)
								plt.plot(lambda_glx_lne_fitM,
										func_1D_Gaussian(lambda_glx_lne_fitM,CTRE_G_C,AMPL_G_C,SGMA_G_C)                   +
										(func_1D_Gaussian_Emm(lambda_glx_lne_fitM,CTRE_G_C_PRE,AMPL_G_C_PRE,SGMA_G_C_PRE)) +
										(func_1D_Gaussian_Emm(lambda_glx_lne_fitM,CTRE_G_C_PST,AMPL_G_C_PST,SGMA_G_C_PST)) - 
										2-OFST_G_O,
										color = colors[index],
										ls='-',lw=3.0,
										label = label_glx + ' '
										,
										alpha=1.0)

								'''
								#SUM#
								##

								#SUM:G_1+G_2#
								try:
									plt.plot(lambda_glx_lne_fitM,
											(func_1D_Gaussian(lambda_glx_lne_fitM,*popt_C_1))+
											(func_1D_Gaussian(lambda_glx_lne_fitM,*popt_C_2)) -
											2,
											color = colors[index],#'black',
											ls='-',lw=3.0,
											#label = label_glx + ' '
											#,
											alpha=1.0)
								except UnboundLocalError:
									plt.plot(lambda_glx_lne_fitM,
											(func_1D_Gaussian(lambda_glx_lne_fitM,CTRE_G_C_1,AMPL_G_C_1,SGMA_G_C_1)) +
											(func_1D_Gaussian_Emm(lambda_glx_lne_fitM,CTRE_G_C_PRE_1,AMPL_G_C_PRE_1,SGMA_G_C_PRE_1)) - 1  +
											#(func_1D_Gaussian_Emm(lambda_glx_lne_fitM,CTRE_G_C_PST_1,AMPL_G_C_PST_1,SGMA_G_C_PST_1)) - 1  +
											func_1D_Gaussian(lambda_glx_lne_fitM,CTRE_G_C_2,AMPL_G_C_2,SGMA_G_C_2) - 1 +
											(func_1D_Gaussian_Emm(lambda_glx_lne_fitM,CTRE_G_C_PRE_2,AMPL_G_C_PRE_2,SGMA_G_C_PRE_2)) - 1  +
											(func_1D_Gaussian_Emm(lambda_glx_lne_fitM,CTRE_G_C_PST_2,AMPL_G_C_PST_2,SGMA_G_C_PST_2)) - 1 
											,
											color = colors[index],#'black',
											ls='-',lw=3.0,
											#label = label_glx + ' '
											#,
											alpha=1.0)						
								#SUM:G_1+G_2#
							else:
								pass
							min_y, max_y = ax110.get_ylim()

							plt.step(lambda_glx[mask_pl], inten_glx[mask_pl], 
										colors[index],
										where='mid',lw=1.5,alpha=0.6,linestyle='-')#label=label_glx,	
					else:
						pass
				elif 'Dbl' in LINES[3][lines]:
					lambda_glx_lne_fit  = np.arange(lmb_min_lim_line,lmb_max_lim_line,0.1)
					lambda_glx_lne_fitM = np.arange(min(lambda_glx[mask_pl]),max(lambda_glx[mask_pl]),0.1)
					if (fit_fnct=='gauss' and ((AMPL_G_O_1 <0) or (AMPL_G_O_2 <0))) or (fit_fnct=='gauss' and LNS_NOT_CTG == False):
						print '**************'
						print 'Plotting'
						print '5'
						print LINES[3][lines]
						print '**************'
						lambda_glx_lne_fit  = np.arange(lmb_min_lim_line,lmb_max_lim_line,0.1)
						lambda_glx_lne_fitM = np.arange(min(lambda_glx[mask_pl]),max(lambda_glx[mask_pl]),0.1)
						try:
							OFST_G_O_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_OFO1')
							OFST_G_O_2 = Header_Get(specfile_glx,str(LINES[5][lines])+'_OFO2')
							if OFST_G_O_1 == 999999.99999:
								OFST_G_O_1 = 0
							else:
								pass
							if OFST_G_O_2 == 999999.99999:
								OFST_G_O_2 = 0
							else:
								pass
							print
							print colored('Correcting Spectra by Offset Fitted Previously','yellow')
							print colored('Defined by Header: ' + str(LINES[5][lines])+'_OFO1','yellow')
							print colored('Defined by Header: ' + str(LINES[5][lines])+'_OFO2','yellow')
							print
							inten_glx[mask_pl] = inten_glx[mask_pl] - OFST_G_O_1 - OFST_G_O_2				 #MENOS OFFSET			
						except:
							pass
						if pre_off_plt == True:
							try:
								plt.plot(lambda_glx_lne_fit,
											func_1D_Gaussian(lambda_glx_lne_fit,*popt_0),
											color = 'gray'  ,ls=':',lw=3.0,
											#label = label_glx + ' g fit Org: ' + 
											#'EW: ' + str(EW_0), 
											alpha=0.5)
								plt.plot(lambda_glx_lne_fit,
											func_1D_Gaussian_O(lambda_glx_lne_fit,*popt_O)- 1,
											color = 'gray'  ,ls='--',lw=3.0,
											#label = label_glx + ' g fit Off: ' + 
											#'EW: ' + str(EW_O) + ', '  
											#'OFS: ' + str(np.round(OFST_G_O,2)), 
											alpha=0.5)
							except UnboundLocalError:
								plt.plot(lambda_glx_lne_fit,
											func_1D_Gaussian(lambda_glx_lne_fit,CTRE_G_0,AMPL_G_0,SGMA_G_0)     ,
											color = 'gray'  ,ls=':',lw=3.0,
											#label = label_glx + ' g fit Org: ' + 
											#'EW: ' + str(EW_0), 
											alpha=0.5)
								plt.plot(lambda_glx_lne_fit,
											func_1D_Gaussian_O(lambda_glx_lne_fit,CTRE_G_O,AMPL_G_O,SGMA_G_O,OFST_G_O)  - 1,
											color = 'gray'  ,ls='--',lw=3.0,
											#label = label_glx + ' g fit Off: ' + 
											#'EW: ' + str(EW_O) + ', '  
											#'OFS: ' + str(np.round(OFST_G_O,2)), 
											alpha=0.5)
						elif pre_off_plt == False:
							pass
						min_y, max_y = ax110.get_ylim()				
						plt.step(lambda_glx[mask_pl], inten_glx[mask_pl], 
									colors[index],
									where='mid',lw=1.5,alpha=0.6,linestyle='-')#label=label_glx,				
					elif fit_fnct=='gaussM' and ((AMPL_G_O_1 <0) or (AMPL_G_O_2 <0)):#not 'DblF' in LINES[3][lines]:
						print '**************'
						print 'Plotting'
						print '6'
						print LINES[3][lines]
						print '**************'
						try:
							OFST_G_O_1 = Header_Get(specfile_glx,str(LINES[5][lines])+'_OFO1')
							OFST_G_O_2 = Header_Get(specfile_glx,str(LINES[5][lines])+'_OFO2')
							if OFST_G_O_1 == 999999.99999:
								OFST_G_O_1 = 0
							else:
								pass
							if OFST_G_O_2 == 999999.99999:
								OFST_G_O_2 = 0
							else:
								pass
							print
							print colored('Correcting Spectra by Offset Fitted Previously','yellow')
							print colored('Defined by Header: ' + str(LINES[5][lines])+'_OFO1','yellow')
							print colored('Defined by Header: ' + str(LINES[5][lines])+'_OFO2','yellow')
							print
							#inten_glx[mask_pl] = inten_glx[mask_pl] - OFST_G_O				 #MENOS OFFSET			
						except:
							pass
						if pre_off_plt == True:
							try:
								plt.plot(lambda_glx_lne_fit,
											func_1D_Gaussian(lambda_glx_lne_fit,*popt_0),
											color = 'gray'  ,ls=':',lw=3.0,
											label = label_glx + ' g fit Org: ' + 
											'EW: ' + str(EW_0), 
											alpha=0.5)
								plt.plot(lambda_glx_lne_fit,
											func_1D_Gaussian_O(lambda_glx_lne_fit,*popt_O)- 1,
											color = 'gray'  ,ls='--',lw=3.0,
											label = label_glx + ' g fit Off: ' + 
											'EW: ' + str(EW_O) + ', '  
											'OFS: ' + str(np.round(OFST_G_O,2)), 
											alpha=0.5)
							except UnboundLocalError:
								plt.plot(lambda_glx_lne_fit,
											func_1D_Gaussian(lambda_glx_lne_fit,CTRE_G_0,AMPL_G_0,SGMA_G_0)     ,
											color = 'gray'  ,ls=':',lw=3.0,
											label = label_glx + ' g fit Org: ' + 
											'EW: ' + str(EW_0), 
											alpha=0.5)
								plt.plot(lambda_glx_lne_fit,
											func_1D_Gaussian_O(lambda_glx_lne_fit,CTRE_G_O,AMPL_G_O,SGMA_G_O,OFST_G_O)  - 1,
											color = 'gray'  ,ls='--',lw=3.0,
											label = label_glx + ' g fit Off: ' + 
											'EW: ' + str(EW_O) + ', '  
											'OFS: ' + str(np.round(OFST_G_O,2)), 
											alpha=0.5)
						elif pre_off_plt == False:
							pass
						else:
							pass
						min_y, max_y = ax110.get_ylim()				
						min_y, max_y = ax110.get_ylim()

						if plt_ind_fit == True:
							#SUM#
							############################PREE+CTR-1+CTR-2+PST############################
							try:
								plt.plot(lambda_glx_lne_fitM,
										func_1D_Gaussian(lambda_glx_lne_fitM,*popt_C)    +
										(func_1D_Gaussian_Emm(lambda_glx_lne_fitM,*popt_C_PRE))+
										(func_1D_Gaussian_Emm(lambda_glx_lne_fitM,*popt_C_PST)) -
										2,
										color = colors[index],#'red',
										ls='solid',lw=3.0,
										#label = label_glx + ' ',
										alpha=1.0)
							except UnboundLocalError:
								plt.plot(lambda_glx_lne_fitM,
										#func_1D_Gaussian(lambda_glx_lne_fitM,CTRE_G_C,AMPL_G_C,SGMA_G_C)                   +
										(func_1D_Gaussian(lambda_glx_lne_fitM,CTRE_G_C_1,AMPL_G_C_1,SGMA_G_C_1)) +
										(func_1D_Gaussian(lambda_glx_lne_fitM,CTRE_G_C_2,AMPL_G_C_2,SGMA_G_C_2)) + 

										(func_1D_Gaussian_Emm(lambda_glx_lne_fitM,CTRE_G_C_PRE,AMPL_G_C_PRE,SGMA_G_C_PRE)) +
										(func_1D_Gaussian_Emm(lambda_glx_lne_fitM,CTRE_G_C_PST,AMPL_G_C_PST,SGMA_G_C_PST)) - 
										3,
										color = colors[index],#'red',
										ls='solid',lw=3.0,
										#label = label_glx + ' ',
										alpha=1.0)							
							#SUM#
							############################PREE+CTR-1+CTR-2+PST############################
						else:
							pass
						plt.step(lambda_glx[mask_pl], inten_glx[mask_pl], 
									colors[index],
									where='mid',lw=1.5,alpha=0.6,linestyle='-')#label=label_glx,						
					else:
						pass
				else:
					pass
				min_y_splt_lns.append(bn.nanmin(inten_glx[mask_pl]))
				max_y_splt_lns.append(bn.nanmax(inten_glx[mask_pl]))
			else:
				pass
			########################################################LINE-PLT#######################################################
			if splt_ind_lns == False and autoaxis_SSL == True:
				min_y, max_y = ax110.get_ylim()
				min_y =  min_y_lim_SSL
				max_y =  max_y_lim_SSL

				min_dif = abs(1-bn.nanmin(min_y_ind_spec))
				max_dif = abs(1-bn.nanmax(max_y_ind_spec))
				abs_dif = max(min_dif,max_dif)
				min_y   = 1 - abs_dif - (abs_dif*1)#0.05
				max_y   = 1 + abs_dif + (abs_dif*1)#0.05

				plt.ylim([min_y,max_y])
				ymin, ymax = plt.ylim()
				plt.ylim((ymin,ymax))
			elif splt_ind_lns == False and autoaxis_SSL == False:
				pass
				#min_y, max_y = ax110.get_ylim()
				#min_y =  min_y_lim_SSL
				#max_y =  max_y_lim_SSL
		#######################################################DIF-SEPARATIONS#######################################################

		############################PANELS-PLOT-LIMITS#############################
		if splt_ind_lns == False and autoaxis_SSL == True:
			mlt_pnl_ylim_min = bn.nanmin(min_y_splt_lns) #min_y_ind_spec min_y_splt_lns
			mlt_pnl_ylim_max = bn.nanmin(max_y_splt_lns) #max_y_ind_spec max_y_splt_lns
			print
			print colored('Y-Min-Max per separation','yellow')
			print min_y_splt_lns,mlt_pnl_ylim_min
			print max_y_splt_lns,mlt_pnl_ylim_max
			print
			min_y, max_y = ax110.get_ylim()
			min_y =  min_y_lim_SSL
			max_y =  max_y_lim_SSL

			min_dif = abs(1-mlt_pnl_ylim_min)
			max_dif = abs(1-mlt_pnl_ylim_max)
			abs_dif = max(min_dif,max_dif)
			min_y   = 1 - abs_dif - (abs_dif*1)#0.05
			max_y   = 1 + abs_dif + (abs_dif*1)#0.05

			#plt.ylim([min_y,max_y])
			#ymin, ymax = plt.ylim()
			#plt.ylim((ymin,ymax))
			print '$$$$'
			print min_y,max_y
			print '$$$$'
			for axs_mlt_pnl in axs_splt_lns:
				axs_mlt_pnl.set_ylim(min_y,max_y)
		elif splt_ind_lns == False and autoaxis_SSL == False:
			pass
			#min_y, max_y = ax110.get_ylim()
			#min_y =  min_y_lim_SSL
			#max_y =  max_y_lim_SSL

		if splt_ind_lns == True and autoaxis_SSL == True:
			mlt_pnl_ylim_min = bn.nanmin(min_y_ind_spec) #min_y_ind_spec min_y_splt_lns
			mlt_pnl_ylim_max = bn.nanmin(max_y_ind_spec) #max_y_ind_spec max_y_splt_lns
			print
			print colored('Y-Min-Max per separation','yellow')
			print min_y_ind_spec,mlt_pnl_ylim_min
			print max_y_ind_spec,mlt_pnl_ylim_max
			print

			min_dif = abs(1-mlt_pnl_ylim_min)
			max_dif = abs(1-mlt_pnl_ylim_max)
			abs_dif = max(min_dif,max_dif)
			min_y   = 1 - abs_dif - (abs_dif*1)#0.05
			max_y   = 1 + abs_dif + (abs_dif*1)#0.05

			print '$$$$'
			print min_y,max_y
			print '$$$$'
			for axs_mlt_pnl in axs_splt_lns:
				axs_mlt_pnl.set_ylim(min_y,max_y)		
		elif (splt_ind_lns == True and autoaxis_SSL == False) or (splt_ind_lns == False and autoaxis_SSL == False) or (splt_ind_lns == False and autoaxis_SSL == True):
			pass
			min_y, max_y = ax110.get_ylim()
			min_y =  min_y_lim_SSL
			max_y =  max_y_lim_SSL				
		############################PANELS-PLOT-LIMITS#############################

		############################DOT-LINE-IDENIFIER#############################
		if splt_ind_lns == True and LNS_NOT_CTG == True and not 'Dbl' in LINES[3][lines]:
			print '&&&&&&&&&&&&&&&&&&&&'
			print 'Z-2',LINES[0][lines],LINES[3][lines]
			print '&&&&&&&&&&&&&&&&&&&&'
			#[plt.plot([LINES[0][lines]+LINES[8][lines],LINES[0][lines]+LINES[8][lines]],
			#[min_y, max_y],
			#color='black', lw=1.5, alpha=0.8,ls=':'
			#) for axes_mlt_pnl in axs_splt_lns]
			print LINES[0][lines]+LINES[8][lines],min_y, max_y
			[axes_mlt_pnl.axvline(LINES[0][lines]+LINES[8][lines], 0, 1,color='black', lw=1.5, alpha=0.8,ls=':') for axes_mlt_pnl in axs_splt_lns]
			print LINES[0][lines]+LINES[8][lines],min_y, max_y
			print
			#quit()
		elif splt_ind_lns == True and LNS_NOT_CTG == True and 'Dbl' in LINES[3][lines]:
			print '&&&&&&&&&&&&&&&&&&&&'
			print 'Z-1',LINES[0][lines],LINES[3][lines]
			print '&&&&&&&&&&&&&&&&&&&&'
			#[plt.plot([LINES[0][lines-2]+LINES[8][lines-2],LINES[0][lines-2]+LINES[8][lines-2]],
								#[min_y, max_y],
								#color='black', lw=1.5, alpha=0.8,ls=':'
								##,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function)
								#) for axes_mlt_pnl in axs_splt_lns]
			#[plt.plot([LINES[0][lines-1]+LINES[8][lines-1],LINES[0][lines-1]+LINES[8][lines-1]],
					#[min_y, max_y],
					#color='black', lw=1.5, alpha=0.8,ls=':'
					#) for axes_mlt_pnl in axs_splt_lns]
			[axes_mlt_pnl.axvline(LINES[0][lines-2] + LINES[8][lines-2], 0, 1,color='black', lw=1.5, alpha=0.8,ls=':') for axes_mlt_pnl in axs_splt_lns]
			[axes_mlt_pnl.axvline(LINES[0][lines-1] + LINES[8][lines-1], 0, 1,color='black', lw=1.5, alpha=0.8,ls=':') for axes_mlt_pnl in axs_splt_lns]
		elif splt_ind_lns == True and LNS_NOT_CTG == False and PLT_REG_DFN == True:
			print '&&&&&&&&&&&&&&&&&&&&'
			print 'Y',LINES[0][lines],LINES[3][lines]
			print '&&&&&&&&&&&&&&&&&&&&'
			#[plt.plot([LINES[0][lines]+LINES[8][lines],LINES[0][lines]+LINES[8][lines]],
					#[min_y, max_y],
					#color='black', lw=1.5, alpha=0.8,ls=':'
					#) for axes_mlt_pnl in axs_splt_lns]
			#[plt.plot([LINES[0][lines+1]+LINES[8][lines+1],LINES[0][lines+1]+LINES[8][lines+1]],
					#[min_y, max_y],
					#color='black', lw=1.5, alpha=0.8,ls=':'
					#) for axes_mlt_pnl in axs_splt_lns]
			[axes_mlt_pnl.axvline(LINES[0][lines]   + LINES[8][lines]  , 0, 1,color='black', lw=1.5, alpha=0.8,ls=':')     for axes_mlt_pnl in axs_splt_lns]
			[axes_mlt_pnl.axvline(LINES[0][lines+1] + LINES[8][lines+1], 0, 1,color='black', lw=1.5, alpha=0.8,ls=':') for axes_mlt_pnl in axs_splt_lns]					
		elif splt_ind_lns == True and LNS_NOT_CTG == False and PLT_REG_DFN == False:
			print '&&&&&&&&&&&&&&&&&&&&'
			print 'X',LINES[0][lines],LINES[3][lines]
			print '&&&&&&&&&&&&&&&&&&&&'
			#[plt.plot([LINES[0][lines]+LINES[8][lines],LINES[0][lines]+LINES[8][lines]],
					#[min_y, max_y],
					#color='black', lw=1.5, alpha=0.8,ls=':'
					#) for axes_mlt_pnl in axs_splt_lns]
			[axes_mlt_pnl.axvline(LINES[0][lines] + LINES[8][lines], 0, 1,color='black', lw=1.5, alpha=0.8,ls=':') for axes_mlt_pnl in axs_splt_lns]
		elif splt_ind_lns == False:
			pass
			#xticklabels = ax110.get_xticklabels()
			#yticklabels = ax110.get_yticklabels()
			#plt.setp(xticklabels, visible=False,family='serif')
			#plt.setp(yticklabels, visible=True ,family='serif')
			#minorLocator_x   = plt.MultipleLocator(1)
			#majorLocator_x   = plt.MultipleLocator(5)
			#ax110.xaxis.set_minor_locator(minorLocator_x)
			#ax110.xaxis.set_major_locator(majorLocator_x)
		############################DOT-LINE-IDENIFIER#############################

		################################LINE LABLES################################
		if splt_ind_lns == True:
			if 'Dbl' not in LINES[3][lines] and LNS_NOT_CTG == True and PLT_REG_DFN == True:
				print '*************************************'
				print '*****************1*******************'
				print  LINES[3][lines]
				print '*************************************'
				ax000 = axs_splt_lns[0]
				#ax000.set_title(LINES[9][lines] + ' ' + str(LINES[0][lines]), fontsize=18, family='serif',horizontalalignment='center')
				ax999.set_title(LINES[9][lines] + ' ' + str(LINES[0][lines]), fontsize=18, family='serif',horizontalalignment='center')
			elif 'Dbl' not in LINES[3][lines] and LNS_NOT_CTG == False and PLT_REG_DFN == False:
				print '*************************************'
				print '*****************2*******************'
				print  LINES[3][lines]
				print '*************************************'
				pass
				#ax000.set_title('1', fontsize=18, family='serif',horizontalalignment='center')
				#a9990.set_title('1', fontsize=18, family='serif',horizontalalignment='center')
				#ax000 = axs_splt_lns[0]
				#ax000.set_title(LINES[9][lines] + ' ' + str(LINES[0][lines]), fontsize=18, family='serif',horizontalalignment='center')
				#a9990.set_title(LINES[9][lines] + ' ' + str(LINES[0][lines]), fontsize=18, family='serif',horizontalalignment='center')
			elif 'Dbl' not in LINES[3][lines] and LNS_NOT_CTG == False and PLT_REG_DFN == True and (LINES[9][lines] == LINES[9][lines+1]):
				print '*************************************'
				print '*****************3a******************'
				print  LINES[3][lines]
				print  LINES[3][lines+1]
				print '*************************************'
				ax000 = axs_splt_lns[0]
				#ax000.set_title(LINES[9][lines] + ' ' + str(LINES[0][lines]) + '-' + str(LINES[0][lines+1]), fontsize=18, family='serif',horizontalalignment='center')
				ax999.set_title(LINES[9][lines] + ' ' + str(LINES[0][lines]) + '-' + str(LINES[0][lines+1]), fontsize=18, family='serif',horizontalalignment='center')
				#ax000.set_title('3', fontsize=18, family='serif',horizontalalignment='center')
				#a9990.set_title('3', fontsize=18, family='serif',horizontalalignment='center')
			elif 'Dbl' not in LINES[3][lines] and LNS_NOT_CTG == False and PLT_REG_DFN == True and (LINES[9][lines] != LINES[9][lines+1]):
				print '*************************************'
				print '*****************3b******************'
				print  LINES[3][lines]
				print  LINES[3][lines+1]
				print '*************************************'
				ax000 = axs_splt_lns[0]
				#ax000.set_title(LINES[9][lines] + ' ' + str(LINES[0][lines]) + '-' + LINES[9][lines+1] + ' ' + str(LINES[0][lines+1]), fontsize=18, family='serif',horizontalalignment='left')
				ax999.set_title(LINES[9][lines] + ' ' + str(LINES[0][lines]) + '-' + LINES[9][lines+1] + ' ' + str(LINES[0][lines+1]), fontsize=18, family='serif',horizontalalignment='center')
				#ax000.set_title('3', fontsize=18, family='serif',horizontalalignment='center')
				#a9990.set_title('3', fontsize=18, family='serif',horizontalalignment='center')
			elif 'Dbl' in LINES[3][lines] and LNS_NOT_CTG == False and PLT_REG_DFN == True:
				print '*************************************'
				print '*****************4*******************'
				print  LINES[3][lines]
				print '*************************************'
				#ax000 = axs_splt_lns[0]
				#ax000.set_title(LINES[9][lines] + ' ' + str(LINES[0][lines-2]) + '-' + str(LINES[0][lines-1]), fontsize=18, family='serif',horizontalalignment='center')
				#a9990.set_title(LINES[9][lines] + ' ' + str(LINES[0][lines-2]) + '-' + str(LINES[0][lines-1]), fontsize=18, family='serif',horizontalalignment='center')
				#ax000.set_title('4', fontsize=18, family='serif',horizontalalignment='center')
				ax999.set_title('4', fontsize=18, family='serif',horizontalalignment='center')
			elif 'Dbl' in LINES[3][lines] and LNS_NOT_CTG == False and PLT_REG_DFN == False:
				print '*************************************'
				print '*****************5*******************'
				print  LINES[3][lines]
				print '*************************************'
				#ax000 = axs_splt_lns[0]
				#ax000.set_title(LINES[9][lines] + ' ' + str(LINES[0][lines-2]) + '-' + str(LINES[0][lines-1]), fontsize=18, family='serif',horizontalalignment='center')
				#a9990.set_title(LINES[9][lines] + ' ' + str(LINES[0][lines-2]) + '-' + str(LINES[0][lines-1]), fontsize=18, family='serif',horizontalalignment='center')
				pass
				#ax000.set_title('5', fontsize=18, family='serif',horizontalalignment='center')
				ax999.set_title('5', fontsize=18, family='serif',horizontalalignment='center')
			elif 'Dbl' in LINES[3][lines] and LNS_NOT_CTG == True and PLT_REG_DFN == True:
				print '*************************************'
				print '*****************6*******************'
				print  LINES[3][lines]
				print '*************************************'
				ax000 = axs_splt_lns[0]
				#ax000.set_title(LINES[9][lines] + ' ' + str(LINES[0][lines-2]) + '-' + str(LINES[0][lines-1]), fontsize=18, family='serif',horizontalalignment='center')
				#a9990.set_title(LINES[9][lines] + ' ' + str(LINES[0][lines-2]) + '-' + str(LINES[0][lines-1]), fontsize=18, family='serif',horizontalalignment='center')
				#ax000.set_title('6', fontsize=18, family='serif',horizontalalignment='center')
				#a9990.set_title('6', fontsize=18, family='serif',horizontalalignment='center')
				#ax000.set_title(LINES[9][lines-2] + ' ' + str(LINES[0][lines-2]) + '-' + str(LINES[0][lines-1]), fontsize=18, family='serif',horizontalalignment='center')
				ax999.set_title(LINES[9][lines-2] + ' ' + str(LINES[0][lines-2]) + '-' + str(LINES[0][lines-1]), fontsize=18, family='serif',horizontalalignment='center')
			else:
				print '*************************************'
				print '*****************7*******************'
				print  LINES[3][lines]
				print '*************************************'
				print LNS_NOT_CTG
				print PLT_REG_DFN
				print LINES[3][lines]
				print
				#ax000.set_title('7', fontsize=18, family='serif',horizontalalignment='center')
				pass
				print 'line 24664'
				quit()

			#ax000.text(1215, 1, "ax" , va="center", ha="center")
			yticklabels = ax000.get_yticklabels()
			plt.setp(yticklabels, visible=True,family='serif')
			[subbin.set_ylim((min_y,max_y)) for subbin in axs_splt_lns]
		elif splt_ind_lns == False and LNS_NOT_CTG == True and 'Dbl' not in LINES[3][lines]:
			print
			print '@@@@@@@@@@@@@@@@@@@@@@@@@'
			print 'a)'
			print '@@@@@@@@@@@@@@@@@@@@@@@@@'
			autoaxis_SSL  = kwargs.get('autoaxis_SSL'  , False)
			min_y_lim_SSL = kwargs.get('min_y_lim_SSL' , 0.5)
			max_y_lim_SSL = kwargs.get('max_y_lim_SSL' , 1.5)

			lmb_min_lim   = lmb_min
			lmb_max_lim   = lmb_max
			plt.xlim([lmb_min_lim_line,lmb_max_lim_line])
			xmin, xmax = plt.xlim()
			plt.xlim((xmin,xmax))
			min_y, max_y = ax110.get_ylim()

			# build a rectangle in axes coords
			left, width = 0, 0.95
			bottom, height = 0, 0.95
			right = left + width
			top = bottom + height

			ax110.text(left, top, 
						LINES[4][lines] + ' ' + str(LINES[0][lines])#+ ' $\AA$'
						,
						family='serif',
						horizontalalignment='left',
						verticalalignment='top',
						fontsize = 18,
						transform=ax110.transAxes)

			#####
			'''
			if autoaxis_SSL == True:
				min_y, max_y = ax110.get_ylim()
				min_y =  min_y_lim_SSL
				max_y =  max_y_lim_SSL

				min_dif = abs(1-bn.nanmin(min_y_ind_spec))
				max_dif = abs(1-bn.nanmax(max_y_ind_spec))
				abs_dif = max(min_dif,max_dif)
				min_y   = 1 - abs_dif - (abs_dif*1)#0.05
				max_y   = 1 + abs_dif + (abs_dif*1)#0.05

				plt.ylim([min_y,max_y])
				ymin, ymax = plt.ylim()
				plt.ylim((ymin,ymax))
			elif autoaxis_SSL == False:
				pass
			'''

			'''
			#min_y,max_y = ax110.get_ylim()
			#plt.plot([LINES[0][lines] , LINES[0][lines] ], [min_y, max_y],
						#color='black', lw=1, alpha=0.6,ls=':',
						##label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$'
						#)
			#lg2=plt.legend(loc=3,prop={'size':20})
			#lg2.draw_frame(False)

			#plt.plot([lmb_min_lim_line, lmb_max_lim_line], [1, 1]        ,
						#color='black', lw=1, alpha=0.6)
			#lg1 = plt.legend(loc=1,prop={'size':20})
			#lg1.draw_frame(False)
			'''

			#plt.plot([lmb_min_lim_line, lmb_max_lim_line], [1, 1]        , color='black', lw=1, alpha=0.6)
			#lg1 = plt.legend(loc=0,prop={'size':22})
			#lg1.draw_frame(False)
			#
			#lmb_min_lim_line_ft = (LINES[0][lines]-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
			#lmb_max_lim_line_ft = (LINES[0][lines]+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]

			#plt.plot([LINES[0][lines],LINES[0][lines]],
						#[min_y, max_y],
						#color='black', lw=1, alpha=0.8,ls=':',
						#label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function)
			plt.plot([LINES[0][lines]+LINES[8][lines],LINES[0][lines]+LINES[8][lines]],
						[min_y, max_y],
						color='black', lw=1.5, alpha=0.8,ls='dashed'
						#,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function)
						)
			#plt.plot([lmb_min_lim_line_ft,lmb_min_lim_line_ft], [min_y, max_y], 
						#color='black', lw=1, alpha=0.8,ls=':'
						##,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$')
						#)
			#plt.plot([lmb_max_lim_line_ft,lmb_max_lim_line_ft], [min_y, max_y], 
						#color='black', lw=1, alpha=0.8,ls=':'
						##,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$')
						#)

			lg2=plt.legend(loc=0,prop={'size':22})
			lg2.draw_frame(False)

			'''
			left, width    = lmb_min_lim_line, (lmb_max_lim_line - lmb_min_lim_line)
			bottom, height = min_y, (max_y - min_y)
			right          = lmb_max_lim_line + width
			top            = max_y
			'''
		elif splt_ind_lns == False and (LNS_NOT_CTG == False and PLT_REG_DFN == True):
			print
			print '@@@@@@@@@@@@@@@@@@@@@@@@@'
			print 'b)'
			print '@@@@@@@@@@@@@@@@@@@@@@@@@'
			autoaxis_SSL  = kwargs.get('autoaxis_SSL'  , False)
			min_y_lim_SSL = kwargs.get('min_y_lim_SSL' , 0.5)
			max_y_lim_SSL = kwargs.get('max_y_lim_SSL' , 1.5)

			lmb_min_lim   = lmb_min
			lmb_max_lim   = lmb_max
			plt.xlim([lmb_min_lim_line,lmb_max_lim_line])
			xmin, xmax = plt.xlim()
			plt.xlim((xmin,xmax))
			min_y, max_y = ax110.get_ylim()

			# build a rectangle in axes coords
			left, width = 0, 0.95
			bottom, height = 0, 0.95
			right = left + width
			top = bottom + height

			ax110.text(left, top, 
						LINES[4][lines]   + ' ' + 
						str(LINES[0][lines])
						,
						family='serif',
						horizontalalignment='left',
						verticalalignment='top',
						fontsize = 18,
						transform=ax110.transAxes)
			ax110.text(right-0.35, top, 
						LINES[4][lines+1] + ' ' + 
						str(LINES[0][lines+1])
						,
						family='serif',
						horizontalalignment='left',
						verticalalignment='top',
						fontsize = 18,
						transform=ax110.transAxes)

			#####
			'''
			if autoaxis_SSL == True:
				min_y, max_y = ax110.get_ylim()
				min_y =  min_y_lim_SSL
				max_y =  max_y_lim_SSL

				min_dif = abs(1-bn.nanmin(min_y_ind_spec))
				max_dif = abs(1-bn.nanmax(max_y_ind_spec))
				abs_dif = max(min_dif,max_dif)
				min_y   = 1 - abs_dif - (abs_dif*1)#0.05
				max_y   = 1 + abs_dif + (abs_dif*1)#0.05

				plt.ylim([min_y,max_y])
				ymin, ymax = plt.ylim()
				plt.ylim((ymin,ymax))
			elif autoaxis_SSL == False:
				pass
			'''

			'''
			#min_y,max_y = ax110.get_ylim()
			#plt.plot([LINES[0][lines] , LINES[0][lines] ], [min_y, max_y],
						#color='black', lw=1, alpha=0.6,ls=':',
						##label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$'
						#)
			#lg2=plt.legend(loc=3,prop={'size':20})
			#lg2.draw_frame(False)

			#plt.plot([lmb_min_lim_line, lmb_max_lim_line], [1, 1]        ,
						#color='black', lw=1, alpha=0.6)
			#lg1 = plt.legend(loc=1,prop={'size':20})
			#lg1.draw_frame(False)
			'''

			#plt.plot([lmb_min_lim_line, lmb_max_lim_line], [1, 1]        , color='black', lw=1, alpha=0.6)
			#lg1 = plt.legend(loc=0,prop={'size':22})
			#lg1.draw_frame(False)
			#
			#lmb_min_lim_line_ft = (LINES[0][lines]-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
			#lmb_max_lim_line_ft = (LINES[0][lines]+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]

			#plt.plot([LINES[0][lines],LINES[0][lines]],
						#[min_y, max_y],
						#color='black', lw=1, alpha=0.8,ls=':',
						#label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function)
			plt.plot([LINES[0][lines]+LINES[8][lines],LINES[0][lines]+LINES[8][lines]],
						[min_y, max_y],
						color='black', lw=1.5, alpha=0.8,ls='dashed'
						#,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function)
						)
			plt.plot([LINES[0][lines+1]+LINES[8][lines+1],LINES[0][lines+1]+LINES[8][lines+1]],
						[min_y, max_y],
						color='black', lw=1.5, alpha=0.8,ls='dashed'
						#,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function)
						)

			#plt.plot([lmb_min_lim_line_ft,lmb_min_lim_line_ft], [min_y, max_y], 
						#color='black', lw=1, alpha=0.8,ls=':'
						##,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$')
						#)
			#plt.plot([lmb_max_lim_line_ft,lmb_max_lim_line_ft], [min_y, max_y], 
						#color='black', lw=1, alpha=0.8,ls=':'
						##,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$')
						#)

			lg2=plt.legend(loc=0,prop={'size':22})
			lg2.draw_frame(False)

			'''
			left, width    = lmb_min_lim_line, (lmb_max_lim_line - lmb_min_lim_line)
			bottom, height = min_y, (max_y - min_y)
			right          = lmb_max_lim_line + width
			top            = max_y
			'''
		elif splt_ind_lns == False and (LNS_NOT_CTG == True and PLT_REG_DFN == True and 'Dbl' in LINES[3][lines]):
			print
			print '@@@@@@@@@@@@@@@@@@@@@@@@@'
			print 'c)'
			print '@@@@@@@@@@@@@@@@@@@@@@@@@'
			autoaxis_SSL  = kwargs.get('autoaxis_SSL'  , False)
			min_y_lim_SSL = kwargs.get('min_y_lim_SSL' , 0.5)
			max_y_lim_SSL = kwargs.get('max_y_lim_SSL' , 1.5)

			lmb_min_lim   = lmb_min
			lmb_max_lim   = lmb_max
			plt.xlim([lmb_min_lim_line,lmb_max_lim_line])
			xmin, xmax = plt.xlim()
			plt.xlim((xmin,xmax))
			min_y, max_y = ax110.get_ylim()

			# build a rectangle in axes coords
			left, width = 0, 0.95
			bottom, height = 0, 0.95
			right = left + width
			top = bottom + height

			ax110.text(left, top, 
						LINES[4][lines-2]   + ' ' + 
						str(LINES[0][lines-2])
						,
						family='serif',
						horizontalalignment='left',
						verticalalignment='top',
						fontsize = 18,
						transform=ax110.transAxes)
			ax110.text(right-0.35, top, 
						LINES[4][lines-1] + ' ' + 
						str(LINES[0][lines-1])
						,
						family='serif',
						horizontalalignment='left',
						verticalalignment='top',
						fontsize = 18,
						transform=ax110.transAxes)

			#####
			'''
			if autoaxis_SSL == True:
				min_y, max_y = ax110.get_ylim()
				min_y =  min_y_lim_SSL
				max_y =  max_y_lim_SSL

				min_dif = abs(1-bn.nanmin(min_y_ind_spec))
				max_dif = abs(1-bn.nanmax(max_y_ind_spec))
				abs_dif = max(min_dif,max_dif)
				min_y   = 1 - abs_dif - (abs_dif*1)#0.05
				max_y   = 1 + abs_dif + (abs_dif*1)#0.05

				plt.ylim([min_y,max_y])
				ymin, ymax = plt.ylim()
				plt.ylim((ymin,ymax))
			elif autoaxis_SSL == False:
				pass
			'''

			'''
			#min_y,max_y = ax110.get_ylim()
			#plt.plot([LINES[0][lines] , LINES[0][lines] ], [min_y, max_y],
						#color='black', lw=1, alpha=0.6,ls=':',
						##label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$'
						#)
			#lg2=plt.legend(loc=3,prop={'size':20})
			#lg2.draw_frame(False)

			#plt.plot([lmb_min_lim_line, lmb_max_lim_line], [1, 1]        ,
						#color='black', lw=1, alpha=0.6)
			#lg1 = plt.legend(loc=1,prop={'size':20})
			#lg1.draw_frame(False)
			'''

			#plt.plot([lmb_min_lim_line, lmb_max_lim_line], [1, 1]        , color='black', lw=1, alpha=0.6)
			#lg1 = plt.legend(loc=0,prop={'size':22})
			#lg1.draw_frame(False)
			#
			#lmb_min_lim_line_ft = (LINES[0][lines]-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
			#lmb_max_lim_line_ft = (LINES[0][lines]+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]

			#plt.plot([LINES[0][lines],LINES[0][lines]],
						#[min_y, max_y],
						#color='black', lw=1, alpha=0.8,ls=':',
						#label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function)
			plt.plot([LINES[0][lines-2]+LINES[8][lines-2],LINES[0][lines-2]+LINES[8][lines-2]],
						[min_y, max_y],
						color='black', lw=1.5, alpha=0.8,ls='dashed'
						#,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function)
						)
			plt.plot([LINES[0][lines-1]+LINES[8][lines-1],LINES[0][lines-1]+LINES[8][lines-1]],
						[min_y, max_y],
						color='black', lw=1.5, alpha=0.8,ls='dashed'
						#,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function)
						)

			#plt.plot([lmb_min_lim_line_ft,lmb_min_lim_line_ft], [min_y, max_y], 
						#color='black', lw=1, alpha=0.8,ls=':'
						##,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$')
						#)
			#plt.plot([lmb_max_lim_line_ft,lmb_max_lim_line_ft], [min_y, max_y], 
						#color='black', lw=1, alpha=0.8,ls=':'
						##,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$')
						#)

			lg2=plt.legend(loc=0,prop={'size':22})
			lg2.draw_frame(False)

			'''
			left, width    = lmb_min_lim_line, (lmb_max_lim_line - lmb_min_lim_line)
			bottom, height = min_y, (max_y - min_y)
			right          = lmb_max_lim_line + width
			top            = max_y
			'''
		elif splt_ind_lns == True:
			axs_splt_lns = []			
		################################LINE LABLES################################		
		################################################################SAVE###########################################################
	if dest_dir != None:
		PLOTFILENAME1 = str(dest_dir) + plt_sufix_fnm + '-ALL-' + stk_function + '-' + fit_typ + '-' + str(lmb_min) + '-' + str(lmb_max) + splt_ind_lns_sfx + '.pdf'
		PLOTFILENAME2 = str(dest_dir) + plt_sufix_fnm + '-ALL-' + stk_function + '-' + fit_typ + '-' + str(lmb_min) + '-' + str(lmb_max) + splt_ind_lns_sfx + '.eps'

	elif dest_dir == None:
		PLOTFILENAME1 = fit_plt_res   + plt_sufix_fnm + '-ALL-' + stk_function + '-' + fit_typ + '-' + str(lmb_min) + '-' + str(lmb_max) + splt_ind_lns_sfx + '.pdf'
		PLOTFILENAME2 = fit_plt_res   + plt_sufix_fnm + '-ALL-' + stk_function + '-' + fit_typ + '-' + str(lmb_min) + '-' + str(lmb_max) + splt_ind_lns_sfx + '.eps'

	plt.savefig(PLOTFILENAME1)
	if verbose == True:
		print colored('Generated Plot: ' + str(PLOTFILENAME1),'cyan')
	elif verbose ==False:
		pass
	if epssave == True:
		plt.savefig(PLOTFILENAME2, rasterized=True)
		#os.system('open Spectra.eps')
	elif epssave == False:
		pass
	if showplot == True:
		#os.system('open '+str(PLOTFILENAME))
		pass
	elif showplot == False:
		pass	
	plt.close('all')

def Plot_Slc_Spc_Lne_Mlt(int_typ_spl_1,int_typ_spl_2,n_int_spt_1,n_int_spt_2,*args, **kwargs):
	###########
	autoaxis_SSL  = kwargs.get('autoaxis_SSL'  , True)
	min_y_lim_SSL = kwargs.get('min_y_lim_SSL' , -2.0)
	max_y_lim_SSL = kwargs.get('max_y_lim_SSL' , 1.0)
	aaxs_SSL_ml_y = kwargs.get('aaxs_SSL_ml_y' ,False)
	fit_lne       = kwargs.get('fit_lne',False)
	plt_ind_fit   = kwargs.get('plt_ind_fit',False)
	lbl_col_idv   = kwargs.get('lbl_col_idv',True)
	nmb_cols      = kwargs.get('nmb_cols',2)
	###########

	z_glx_Ps      = kwargs.get('z_glx_Ps'    ,0)
	dest_dir      = kwargs.get('dest_dir'    , None)
	verbose       = kwargs.get('verbose'     , False)
	epssave       = kwargs.get('epssave'     , False)
	showplot      = kwargs.get('showplot'    , False) 

	autoaxis_Idp  = kwargs.get('autoaxis_Idp', False)
	#min_y_lim_Idp = kwargs.get('min_y_lim'   , 0.5)
	#max_y_lim_Idp = kwargs.get('max_y_lim'   , 1.5)

	lmb_min       = kwargs.get('lmb_min',1200)
	lmb_max       = kwargs.get('lmb_max',1700)

	lmb_min_lim   = lmb_min
	lmb_max_lim   = lmb_max

	#upper_shift   = kwargs.get('upper_shift',0)
	#lower_shift   = kwargs.get('lower_shift',0)
	stk_function  = kwargs.get('stk_function','med')

	fit_fnct      = kwargs.get('fit_fnct','gauss')
	fit_type      = kwargs.get('fit_type','lmfit')
	pre_off_plt   = kwargs.get('pre_off_plt',False)
	dest_dir      = kwargs.get('dest_dir',None)

	n_int_spt     = kwargs.get('n_int_spt',0)

	int_typ_spl   = kwargs.get('int_typ_spl','arcsec')

	upper_shift_1   = kwargs.get('upper_shift_1',0)
	lower_shift_1   = kwargs.get('lower_shift_1',0)
	upper_shift_2   = kwargs.get('upper_shift_2',0)
	lower_shift_2   = kwargs.get('lower_shift_2',0)

	#stk_function_m  = kwargs.get('stk_function_m',False)
	#stk_function_a  = kwargs.get('stk_function_a',False)
	#stk_function_b  = kwargs.get('stk_function_b',False)
	mlt_stk_fct     = kwargs.get('mlt_stk_fct','both')

	max_sep         = kwargs.get('max_sep'         ,23)
	#mlt_stk_med     = kwargs.get('mlt_stk_med'   , True)
	#mlt_stk_avg     = kwargs.get('mlt_stk_avg'   , True)
	mlt_stk_fct     = kwargs.get('mlt_stk_fct'   , 'both')

	fpt_background  = kwargs.get('fpt_background' , True)
	fpt_foreground  = kwargs.get('fpt_foreground', False)
	##############
	print
	print colored('Plotting absoprtion profiles dependent on: '+int_typ_spl_1,'yellow')
	print colored('Plotting absoprtion profiles dependent on: '+int_typ_spl_2,'yellow')
	print
	if int_typ_spl_1 == 'kpc'  and n_int_spt_1 == 0:#in specfile_glx_f:
		splt_smpl_sfx_f1= 'kpc_F'
		splt_smpl_sfx_1 = '_kpc' 
		splt_smpl_unt_1 = 'kpc'
		plt_nme_prp_1   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv)				
		slc_int_fg_1    = slc_kpc_int_fg[1]
		slc_int_bg_1    = slc_kpc_int_bg[1]		
		xlabel_1        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_1   = 'SKP'
		xticks_values   = [5,50, 100, 150]
		yticks_values   = np.arange(0,30,.1)#[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'kpc'  and n_int_spt_1 == 1:#in specfile_glx_f:
		splt_smpl_sfx_f1= 'kpc_F'
		splt_smpl_sfx_1 = '_kpc' 
		splt_smpl_unt_1 = 'kpc'
		plt_nme_prp_1   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_1)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_1)				
		slc_int_fg_1    = slc_kpc_int_fg[1]
		slc_int_bg_1    = slc_kpc_int_bg[1]
		xlabel_1        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_1   = 'SKP'
		xticks_values   = [5,50, 100, 150]
		yticks_values   = np.arange(0,30,.1)#[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'kpc'  and n_int_spt_1 == 2:#in specfile_glx_f:
		splt_smpl_sfx_f1= 'kpc_F'
		splt_smpl_sfx_1 = '_kpc' 
		splt_smpl_unt_1 = 'kpc'
		plt_nme_prp_1   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_2)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_2)				
		slc_int_fg_1    = slc_kpc_int_fg[1]
		slc_int_bg_1    = slc_kpc_int_bg[1]
		xlabel_1        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_1   = 'SKP'
		xticks_values   = [5,50, 100, 150]
		yticks_values   = np.arange(0,30,.1)#[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'kpc'  and n_int_spt_1 == 3:#in specfile_glx_f:
		splt_smpl_sfx_f1= 'kpc_F'
		splt_smpl_sfx_1 = '_kpc' 
		splt_smpl_unt_1 = 'kpc'
		plt_nme_prp_1   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_3)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_3)				
		slc_int_fg_1    = slc_kpc_int_fg[1]
		slc_int_bg_1    = slc_kpc_int_bg[1]
		xlabel_1        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_1   = 'SKP'
		xticks_values   = [5,50, 100, 150]
		yticks_values   = np.arange(0,30,.1)#[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'kpc'  and n_int_spt_1 == 4:#in specfile_glx_f:
		splt_smpl_sfx_f1= 'kpc_F'
		splt_smpl_sfx_1 = '_kpc' 
		splt_smpl_unt_1 = 'kpc'
		plt_nme_prp_1   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_4)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_4)				
		slc_int_fg_1    = slc_kpc_int_fg[1]
		slc_int_bg_1    = slc_kpc_int_bg[1]
		xlabel_1        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_1   = 'SKP'
		xticks_values   = [5,50, 100, 150]
		yticks_values   = np.arange(0,30,.1)#[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'mass' and n_int_spt_1 == 0 and max_sep == 23:# in specfile_glx_f:
		splt_smpl_sfx_f1= 'mass_F'
		splt_smpl_sfx_1 = '-mass'
		splt_smpl_unt_1 = 'mass'
		plt_nme_prp_1   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23)				
		slc_int_fg_1    = slc_mss_int_fg[1]
		slc_int_bg_1    = slc_mss_int_bg[1]
		xlabel_1        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_1   = 'MSF'
		xticks_values   = np.arange(1,20,.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values   = np.arange(0,30,.1)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'mass' and n_int_spt_1 == 1 and max_sep == 23:# in specfile_glx_f:
		splt_smpl_sfx_f1= 'mass_F'
		splt_smpl_sfx_1 = '-mass'
		splt_smpl_unt_1 = 'mass'
		plt_nme_prp_1   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_1)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_1)				
		slc_int_fg_1    = slc_mss_int_fg[1]
		slc_int_bg_1    = slc_mss_int_bg[1]
		xlabel_1        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_1   = 'MSF'
		xticks_values   = np.arange(1,20,.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values   = np.arange(0,30,.1)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'mass' and n_int_spt_1 == 2 and max_sep == 23:# in specfile_glx_f:
		splt_smpl_sfx_f1= 'mass_F'
		splt_smpl_sfx_1 = '-mass'
		splt_smpl_unt_1 = 'mass'
		plt_nme_prp_1   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_2)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_2)				
		slc_int_fg_1    = slc_mss_int_fg[1]
		slc_int_bg_1    = slc_mss_int_bg[1]
		xlabel_1        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_1   = 'MSF'
		xticks_values   = np.arange(1,20,.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values   = np.arange(0,30,.01)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'mass' and n_int_spt_1 == 3 and max_sep == 23:# in specfile_glx_f:
		splt_smpl_sfx_f1= 'mass_F'
		splt_smpl_sfx_1 = '-mass'
		splt_smpl_unt_1 = 'mass'
		plt_nme_prp_1   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_3)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_3)				
		slc_int_fg_1    = slc_mss_int_fg[1]
		slc_int_bg_1    = slc_mss_int_bg[1]
		xlabel_1        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_1   = 'MSF'
		xticks_values   = np.arange(1,20,.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values   = np.arange(0,30,.1)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'mass' and n_int_spt_1 == 4 and max_sep == 23:# in specfile_glx_f:
		splt_smpl_sfx_f1= 'mass_F'
		splt_smpl_sfx_1 = '-mass'
		splt_smpl_unt_1 = 'mass'
		plt_nme_prp_1   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_4)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_4)				
		slc_int_fg_1    = slc_mss_int_fg[1]
		slc_int_bg_1    = slc_mss_int_bg[1]
		xlabel_1        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_1   = 'MSF'
		xticks_values   = np.arange(1,20,.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values   = np.arange(0,30,.1)         #[0.1,0.5,1,3]				
	elif int_typ_spl_1 == 'Age'  and n_int_spt_1 == 0:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Age_F'
		splt_smpl_sfx_1  = '-Age' 
		splt_smpl_unt_1  = 'Age'
		plt_nme_prp_1    = 'Age'
		slc_age_int_fg_0 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv)
		slc_age_int_bg_0 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv)
		slc_int_fg_1     = slc_age_int_fg_0[1]
		slc_int_bg_1     = slc_age_int_bg_0[1]
		xlabel_1         = 'Age'
		var_prp_hdr_1    = 'AGF'
		xticks_values    = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Age'  and n_int_spt_1 == 1 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Age_F'
		splt_smpl_sfx_1  = '-Age' 
		splt_smpl_unt_1  = 'Age'
		plt_nme_prp_1    = 'Age'
		slc_age_int_fg_1 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_1)
		slc_age_int_bg_1 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_1)
		slc_int_fg_1     = slc_age_int_fg_1[1]
		slc_int_bg_1     = slc_age_int_bg_1[1]
		xlabel_1         = 'Age'
		var_prp_hdr_1    = 'AGF'
		xticks_values    = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Age'  and n_int_spt_1 == 2 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Age_F'
		splt_smpl_sfx_1  = '-Age' 
		splt_smpl_unt_1  = 'Age'
		plt_nme_prp_1    = 'Age'
		slc_age_int_fg_2 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_2)
		slc_age_int_bg_2 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_2)
		slc_int_fg_1     = slc_age_int_fg_2[1]
		slc_int_bg_1     = slc_age_int_bg_2[1]
		xlabel_1         = 'Age'
		var_prp_hdr_1    = 'AGF'
		xticks_values    = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Age'  and n_int_spt_1 == 3 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Age_F'
		splt_smpl_sfx_1  = '-Age' 
		splt_smpl_unt_1  = 'Age'
		plt_nme_prp_1    = 'Age'
		slc_age_int_fg_3 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_3)
		slc_age_int_bg_3 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_3)
		slc_int_fg_1     = slc_age_int_fg_3[1]
		slc_int_bg_1     = slc_age_int_bg_3[1]
		xlabel_1         = 'Age'
		var_prp_hdr_1    = 'AGF'
		xticks_values    = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Age'  and n_int_spt_1 == 4 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Age_F'
		splt_smpl_sfx_1  = '-Age' 
		splt_smpl_unt_1  = 'Age'
		plt_nme_prp_1    = 'Age'
		slc_age_int_fg_4 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_4)
		slc_age_int_bg_4 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_4)
		slc_int_fg_1     = slc_age_int_fg_4[1]
		slc_int_bg_1     = slc_age_int_bg_4[1]
		xlabel_1         = 'Age'
		var_prp_hdr_1    = 'AGF'
		xticks_values    = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'SFR'  and n_int_spt_1 == 0:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'SFR_F'
		splt_smpl_sfx_1  = '-SFR' 
		splt_smpl_unt_1  = 'SFR' 
		plt_nme_prp_1    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv)
		slc_int_fg_1     = slc_sfr_int_fg[1]
		slc_int_bg_1     = slc_sfr_int_bg[1]
		xlabel_1         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_1    = 'SFF'
		xticks_values    = np.arange(0,3,0.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'SFR'  and n_int_spt_1 == 1 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'SFR_F'
		splt_smpl_sfx_1  = '-SFR' 
		splt_smpl_unt_1  = 'SFR' 
		plt_nme_prp_1    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_1)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_1)
		slc_int_fg_1     = slc_sfr_int_fg[1]
		slc_int_bg_1     = slc_sfr_int_bg[1]
		xlabel_1         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_1    = 'SFF'
		xticks_values    = np.arange(0,3,0.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'SFR'  and n_int_spt_1 == 2 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'SFR_F'
		splt_smpl_sfx_1  = '-SFR' 
		splt_smpl_unt_1  = 'SFR' 
		plt_nme_prp_1    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_2)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_2)
		slc_int_fg_1     = slc_sfr_int_fg[1]
		slc_int_bg_1     = slc_sfr_int_bg[1]
		xlabel_1         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_1    = 'SFF'
		xticks_values    = np.arange(0,3,0.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'SFR'  and n_int_spt_1 == 3 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'SFR_F'
		splt_smpl_sfx_1  = '-SFR' 
		splt_smpl_unt_1  = 'SFR' 
		plt_nme_prp_1    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_3)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_3)
		slc_int_fg_1     = slc_sfr_int_fg[1]
		slc_int_bg_1     = slc_sfr_int_bg[1]
		xlabel_1         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_1    = 'SFF'
		xticks_values    = np.arange(0,3,0.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'SFR'  and n_int_spt_1 == 4 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'SFR_F'
		splt_smpl_sfx_1  = '-SFR' 
		splt_smpl_unt_1  = 'SFR' 
		plt_nme_prp_1    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_4)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_4)
		slc_int_fg_1     = slc_sfr_int_fg[1]
		slc_int_bg_1     = slc_sfr_int_bg[1]
		xlabel_1         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_1    = 'SFF'
		xticks_values    = np.arange(0,3,0.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sSFR' and n_int_spt_1 == 0:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'sSFR_F'
		splt_smpl_sfx_1  = '-sSFR'
		splt_smpl_unt_1  = 'sSFR'
		plt_nme_prp_1    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv)
		slc_int_fg_1     = slc_ssf_int_fg[1]
		slc_int_bg_1     = slc_ssf_int_bg[1]
		xlabel_1         = 'sSFR [Gyr]'
		var_prp_hdr_1    = 'sSF'
		xticks_values    = np.arange(-20,-1,0.1)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sSFR' and n_int_spt_1 == 1 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'sSFR_F'
		splt_smpl_sfx_1  = '-sSFR'
		splt_smpl_unt_1  = 'sSFR'
		plt_nme_prp_1    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_1)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_1)
		slc_int_fg_1     = slc_ssf_int_fg[1]
		slc_int_bg_1     = slc_ssf_int_bg[1]
		xlabel_1         = 'sSFR [Gyr]'
		var_prp_hdr_1    = 'sSF'
		xticks_values    = np.arange(-20,-1,0.1)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sSFR' and n_int_spt_1 == 2 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'sSFR_F'
		splt_smpl_sfx_1  = '-sSFR'
		splt_smpl_unt_1  = 'sSFR'
		plt_nme_prp_1    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_2)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_2)
		slc_int_fg_1     = slc_ssf_int_fg[1]
		slc_int_bg_1     = slc_ssf_int_bg[1]
		xlabel_1         = 'sSFR [Gyr]'
		var_prp_hdr_1    = 'sSF'
		xticks_values    = np.arange(-20,-1,0.1)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sSFR' and n_int_spt_1 == 3 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'sSFR_F'
		splt_smpl_sfx_1  = '-sSFR'
		splt_smpl_unt_1  = 'sSFR'
		plt_nme_prp_1    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_3)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_3)
		slc_int_fg_1     = slc_ssf_int_fg[1]
		slc_int_bg_1     = slc_ssf_int_bg[1]
		xlabel_1         = 'sSFR [Gyr]'
		var_prp_hdr_1    = 'sSF'
		xticks_values    = np.arange(-20,-1,0.1)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sSFR' and n_int_spt_1 == 4 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'sSFR_F'
		splt_smpl_sfx_1  = '-sSFR'
		splt_smpl_unt_1  = 'sSFR'
		plt_nme_prp_1    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_4)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_4)
		slc_int_fg_1     = slc_ssf_int_fg[1]
		slc_int_bg_1     = slc_ssf_int_bg[1]
		xlabel_1         = 'sSFR [Gyr]'
		var_prp_hdr_1    = 'sSF'
		xticks_values    = np.arange(-20,-1,0.25)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.25)   #[0.1,0.5,1,3]						
	elif int_typ_spl_1 == 'Lnuv' and n_int_spt_1 == 0:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Lnuv_F'
		splt_smpl_sfx_1  = '-Lnuv'
		splt_smpl_unt_1  = 'ergs cm$^{-2}$ s$^{-1}$'
		plt_nme_prp_1    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv)
		slc_int_fg_1     = slc_luv_int_fg[1]
		slc_int_bg_1     = slc_luv_int_bg[1]
		xlabel_1         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_1    = 'UVF'
		xticks_values    = np.arange(8,14,.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Lnuv' and n_int_spt_1 == 1 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Lnuv_F'
		splt_smpl_sfx_1  = '-Lnuv'
		splt_smpl_unt_1  = 'ergs cm$^{-2}$ s$^{-1}$'
		plt_nme_prp_1    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_1)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_1)
		slc_int_fg_1     = slc_luv_int_fg[1]
		slc_int_bg_1     = slc_luv_int_bg[1]
		xlabel_1         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_1    = 'UVF'
		xticks_values    = np.arange(8,14,.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Lnuv' and n_int_spt_1 == 2 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Lnuv_F'
		splt_smpl_sfx_1  = '-Lnuv'
		splt_smpl_unt_1  = 'ergs cm$^{-2}$ s$^{-1}$'
		plt_nme_prp_1    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_2)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_2)
		slc_int_fg_1     = slc_luv_int_fg[1]
		slc_int_bg_1     = slc_luv_int_bg[1]
		xlabel_1         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_1    = 'UVF'
		xticks_values    = np.arange(8,14,.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Lnuv' and n_int_spt_1 == 3 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Lnuv_F'
		splt_smpl_sfx_1  = '-Lnuv'
		splt_smpl_unt_1  = 'ergs cm$^{-2}$ s$^{-1}$'
		plt_nme_prp_1    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_3)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_3)
		slc_int_fg_1     = slc_luv_int_fg[1]
		slc_int_bg_1     = slc_luv_int_bg[1]
		xlabel_1         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_1    = 'UVF'
		xticks_values    = np.arange(8,14,.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Lnuv' and n_int_spt_1 == 4 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Lnuv_F'
		splt_smpl_sfx_1  = '-Lnuv'
		splt_smpl_unt_1  = 'ergs cm$^{-2}$ s$^{-1}$'
		plt_nme_prp_1    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_4)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_4)
		slc_int_fg_1     = slc_luv_int_fg[1]
		slc_int_bg_1     = slc_luv_int_bg[1]
		xlabel_1         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_1    = 'UVF'
		xticks_values    = np.arange(8,14,.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 0:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150]
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 1 and max_sep==23:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_1[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_1[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150]
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 2 and max_sep==23:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_2[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_2[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150]
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 3 and max_sep==23:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_3[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_3[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150]
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 4 and max_sep==23:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_4[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_4[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150]
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 5 and max_sep==23:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_5[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_5[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150, 200]
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 6 and max_sep==23:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_6[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_6[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150, 200]
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]			
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 1 and max_sep==25:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_1[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_1[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150]
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 2 and max_sep==25:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_2[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_2[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150]
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 3 and max_sep==25:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_3[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_3[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150]
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 4 and max_sep==25:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_4[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_4[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150]
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 5 and max_sep==25:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_5[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_5[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150, 200]
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 6 and max_sep==25:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_6[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_6[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150, 200]
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]

	elif int_typ_spl_1 == 'magi' and n_int_spt_1 == 0:# in specfile_glx:
		splt_smpl_sfx_f1 = 'magi_F'
		splt_smpl_sfx_1  = '_magi'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv)
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'mag$_{i}$'
		var_prp_hdr_1    = 'magi'#'SAS'
		xticks_values    = np.arange(-100,100,0.25)
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]				
	elif int_typ_spl_1 == 'magi' and n_int_spt_1 == 1:# in specfile_glx:
		splt_smpl_sfx_f1 = 'magi_F'
		splt_smpl_sfx_1  = '_magi'
		splt_smpl_unt_1  = 'mag'
		plt_nme_prp_1    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv)
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'mag$_{i}$'
		var_prp_hdr_1    = 'magi'#'SAS'
		xticks_values    = np.arange(-100,100,0.25)
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]				
	elif int_typ_spl_1 == 'magi' and n_int_spt_1 == 2 and max_sep==23:# in specfile_glx:
		splt_smpl_sfx_f1 = 'magi_F'
		splt_smpl_sfx_1  = '_magi'
		splt_smpl_unt_1  = 'mag'
		plt_nme_prp_1    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_2)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_2)
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'mag$_{i}$'
		var_prp_hdr_1    = 'magi'#'SAS'
		xticks_values    = np.arange(-100,100,0.25)
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]				
	elif int_typ_spl_1 == 'magi' and n_int_spt_1 == 3 and max_sep==23:# in specfile_glx:
		splt_smpl_sfx_f1 = 'magi_F'
		splt_smpl_sfx_1  = '_magi'
		splt_smpl_unt_1  = 'mag'
		plt_nme_prp_1    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_3)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_3)
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'mag$_{i}$'
		var_prp_hdr_1    = 'magi'#'SAS'
		xticks_values    = np.arange(-100,100,0.25)
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]				
	elif int_typ_spl_1 == 'magi' and n_int_spt_1 == 4 and max_sep==23:# in specfile_glx:
		splt_smpl_sfx_f1 = 'magi_F'
		splt_smpl_sfx_1  = '_magi'
		splt_smpl_unt_1  = 'mag'
		plt_nme_prp_1    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_4)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_4)
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'mag$_{i}$'
		var_prp_hdr_1    = 'magi'#'SAS'
		xticks_values    = np.arange(-100,100,0.25)
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]				
	elif int_typ_spl_1 == 'phi' and n_int_spt_1 == 0:# in specfile_glx:
		splt_smpl_sfx_f1 = 'PHI'
		splt_smpl_sfx_1  = '-phi'
		splt_smpl_unt_1  = 'deg'
		plt_nme_prp_1    = 'PHI'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv)
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr_1    = 'PHI'#'SAS'
		xticks_values    = np.arange(-10,100,10) #xticks_values  = [0,100]
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'phi'  and n_int_spt_1 == 2:# in specfile_glx:
		splt_smpl_sfx_f1 = 'PHI'
		splt_smpl_sfx_1  = '-phi'
		splt_smpl_unt_1  = 'deg'
		plt_nme_prp_1    = 'PHI'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv_23_2)			
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr_1    = 'PHI'#'SAS'
		xticks_values    = np.arange(-10,100,10) #xticks_values  = [0,100]
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'phi'  and n_int_spt_1 == 3:# in specfile_glx:
		splt_smpl_sfx_f1 = 'PHI'
		splt_smpl_sfx_1  = '-phi'
		splt_smpl_unt_1  = 'deg'
		plt_nme_prp_1    = 'PHI'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv_23_3)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv_23_3)			
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr_1    = 'PHI'#'SAS'
		xticks_values    = np.arange(-10,100,10) #xticks_values  = [0,100]
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]	
	elif int_typ_spl_1 == 'icl_fg' and n_int_spt_1 == 0:# in specfile_glx:
		splt_smpl_sfx_f1 = 'q_F'
		splt_smpl_sfx_1  = '-icl'
		splt_smpl_unt_1  = 'deg'
		plt_nme_prp_1    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv)
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$q$'
		var_prp_hdr_1    = 'q'#'SAS'
		xticks_values    = np.arange(-1,1,0.1)
		yticks_values    = np.arange(0,30,.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'icl_fg' and n_int_spt_1 == 2:# in specfile_glx:
		splt_smpl_sfx_f1 = 'q_F'
		splt_smpl_sfx_1  = '-icl'
		splt_smpl_unt_1  = 'deg'
		plt_nme_prp_1    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_23_itv_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_23_itv_2)
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$q$'
		var_prp_hdr_1    = 'q'#'SAS'
		xticks_values    = np.arange(-1,1,0.1)
		yticks_values    = np.arange(0,30,.5)  #[0.1,0.5,1,3]	
	elif int_typ_spl_1 == 'icl_fg' and n_int_spt_1 == 3:# in specfile_glx:
		splt_smpl_sfx_f1 = 'q_F'
		splt_smpl_sfx_1  = '-icl'
		splt_smpl_unt_1  = 'deg'
		plt_nme_prp_1    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_23_itv_3)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_23_itv_3)
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$q$'
		var_prp_hdr_1    = 'q'#'SAS'
		xticks_values    = np.arange(-1,1,0.1)
		yticks_values    = np.arange(0,30,.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'icl_fg' and n_int_spt_1 == 4:# in specfile_glx:
		splt_smpl_sfx_f1 = 'q_F'
		splt_smpl_sfx_1  = '-icl'
		splt_smpl_unt_1  = 'deg'
		plt_nme_prp_1    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_23_itv_4)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_23_itv_4)			
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$q$'
		var_prp_hdr_1    = 'q'#'SAS'
		xticks_values    = np.arange(-1,1,0.1)
		yticks_values    = np.arange(0,30,.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'n_sersic_fg' and n_int_spt_1 == 0:# in specfile_glx:
		splt_smpl_sfx_f1 = 'n_F'
		splt_smpl_sfx_1  = '-n_srs'
		splt_smpl_unt_1  = 'n'
		plt_nme_prp_1    = 'n_srs'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,n_srs_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,n_srs_itv)
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = 'n'
		var_prp_hdr_1    = 'nsr'#'SAS'
		xticks_values    = np.arange(-1,3,0.25)
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'n_sersic_fg'  and n_int_spt_1 == 2:# in specfile_glx:
		splt_smpl_sfx_f1 = 'n_F'
		splt_smpl_sfx_1  = '-n_srs'
		splt_smpl_unt_1  = 'n'
		plt_nme_prp_1    = 'n_srs'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,n_srs_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,n_srs_itv_23_2)			
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = 'n'
		var_prp_hdr_1    = 'nsr'#'SAS'
		xticks_values    = np.arange(-1,3,0.25)
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'r_eff_fg' and n_int_spt_1 == 0:# in specfile_glx:
		splt_smpl_sfx_f1 = 're_F'
		splt_smpl_sfx_1  = '-r_eff'
		splt_smpl_unt_1  = 'arcsec'
		plt_nme_prp_1    = 'r_eff'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv)
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]  
		xlabel_1         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr_1    = 'ref'#'SAS'
		xticks_values    = np.arange(-1,50,0.5)
		yticks_values    = np.arange(0,30,.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'r_eff_fg'  and n_int_spt_1 == 2:# in specfile_glx:
		splt_smpl_sfx_f1 = 're_F'
		splt_smpl_sfx_1  = '-r_eff'
		splt_smpl_unt_1  = 'arcsec'
		plt_nme_prp_1    = 'r_eff'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv_23_2)			
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr_1    = 'ref'#'SAS'
		xticks_values    = np.arange(-1,50,0.5)
		yticks_values    = np.arange(0,30,.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'r_eff_fg'  and n_int_spt_1 == 3:# in specfile_glx:
		splt_smpl_sfx_f1 = 're_F'
		splt_smpl_sfx_1  = '-r_eff'
		splt_smpl_unt_1  = 'arcsec'
		plt_nme_prp_1    = 'r_eff'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv_23_3)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv_23_3)			
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr_1    = 'ref'#'SAS'
		xticks_values    = np.arange(-1,50,0.5)
		yticks_values    = np.arange(0,30,.5)  #[0.1,0.5,1,3]						
	else:
		print
		print (colored('Such combination (1st-split) does not exist!','yellow'))
		print (colored('Variable: '+str(int_typ_spl_1)+', # bins: '+str(n_int_spt_1),'yellow'))
		print
		quit()

	####

	if int_typ_spl_2 == 'kpc'  and n_int_spt_2 == 0:#in specfile_glx_f:
		splt_smpl_sfx_f2= 'kpc_F'
		splt_smpl_sfx_2 = '_kpc' 
		splt_smpl_unt_2 = 'kpc'
		plt_nme_prp_2   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv)				
		slc_int_fg_2    = slc_kpc_int_fg[1]
		slc_int_bg_2    = slc_kpc_int_bg[1]		
		xlabel_2        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_2   = 'SKP'
	elif int_typ_spl_2 == 'kpc'  and n_int_spt_2 == 1:#in specfile_glx_f:
		splt_smpl_sfx_f2= 'kpc_F'
		splt_smpl_sfx_2 = '_kpc' 
		splt_smpl_unt_2 = 'kpc'
		plt_nme_prp_2   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_1)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_1)				
		slc_int_fg_2    = slc_kpc_int_fg[1]
		slc_int_bg_2    = slc_kpc_int_bg[1]
		xlabel_2        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_2   = 'SKP'
	elif int_typ_spl_2 == 'kpc'  and n_int_spt_2 == 2:#in specfile_glx_f:
		splt_smpl_sfx_f2= 'kpc_F'
		splt_smpl_sfx_2 = '_kpc' 
		splt_smpl_unt_2 = 'kpc'
		plt_nme_prp_2   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_2)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_2)				
		slc_int_fg_2    = slc_kpc_int_fg[1]
		slc_int_bg_2    = slc_kpc_int_bg[1]
		xlabel_2        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_2   = 'SKP'
	elif int_typ_spl_2 == 'kpc'  and n_int_spt_2 == 3:#in specfile_glx_f:
		splt_smpl_sfx_f2= 'kpc_F'
		splt_smpl_sfx_2 = '_kpc' 
		splt_smpl_unt_2 = 'kpc'
		plt_nme_prp_2   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_3)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_3)				
		slc_int_fg_2    = slc_kpc_int_fg[1]
		slc_int_bg_2    = slc_kpc_int_bg[1]
		xlabel_2        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_2   = 'SKP'
	elif int_typ_spl_2 == 'kpc'  and n_int_spt_2 == 4:#in specfile_glx_f:
		splt_smpl_sfx_f2= 'kpc_F'
		splt_smpl_sfx_2 = '_kpc' 
		splt_smpl_unt_2 = 'kpc'
		plt_nme_prp_2   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_4)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_4)				
		slc_int_fg_2    = slc_kpc_int_fg[1]
		slc_int_bg_2    = slc_kpc_int_bg[1]
		xlabel_2        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_2   = 'SKP'
	elif int_typ_spl_2 == 'mass' and n_int_spt_2 == 0:# in specfile_glx_f:
		splt_smpl_sfx_f2= 'mass_F'
		splt_smpl_sfx_2 = '-mass'
		splt_smpl_unt_2 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_2   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23)				
		slc_int_fg_2    = slc_mss_int_fg[1]
		slc_int_bg_2    = slc_mss_int_bg[1]
		xlabel_2        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_2   = 'MSF'
	elif int_typ_spl_2 == 'mass' and n_int_spt_2 == 1:# in specfile_glx_f:
		splt_smpl_sfx_f2= 'mass_F'
		splt_smpl_sfx_2 = '-mass'
		splt_smpl_unt_2 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_2   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_1)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_1)				
		slc_int_fg_2    = slc_mss_int_fg[1]
		slc_int_bg_2    = slc_mss_int_bg[1]
		xlabel_2        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_2   = 'MSF'
	elif int_typ_spl_2 == 'mass' and n_int_spt_2 == 2:# in specfile_glx_f:
		splt_smpl_sfx_f2= 'mass_F'
		splt_smpl_sfx_2 = '-mass'
		splt_smpl_unt_2 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_2   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_2)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_2)				
		slc_int_fg_2    = slc_mss_int_fg[1]
		slc_int_bg_2    = slc_mss_int_bg[1]
		xlabel_2        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_2   = 'MSF'
	elif int_typ_spl_2 == 'mass' and n_int_spt_2 == 3:# in specfile_glx_f:
		splt_smpl_sfx_f2= 'mass_F'
		splt_smpl_sfx_2 = '-mass'
		splt_smpl_unt_2 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_2   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_3)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_3)				
		slc_int_fg_2    = slc_mss_int_fg[1]
		slc_int_bg_2    = slc_mss_int_bg[1]
		xlabel_2        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_2   = 'MSF'
	elif int_typ_spl_2 == 'mass' and n_int_spt_2 == 4:# in specfile_glx_f:
		splt_smpl_sfx_f2= 'mass_F'
		splt_smpl_sfx_2 = '-mass'
		splt_smpl_unt_2 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_2   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_4)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_4)				
		slc_int_fg_2    = slc_mss_int_fg[1]
		slc_int_bg_2    = slc_mss_int_bg[1]
		xlabel_2        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_2   = 'MSF'
	elif int_typ_spl_2 == 'Age'  and n_int_spt_2 == 0:#in specfile_glx_f:
		splt_smpl_sfx_f2 = '-Age_F'
		splt_smpl_sfx_2  = '-Age' 
		splt_smpl_unt_2  = 'Age'
		plt_nme_prp_2    = 'Age'
		slc_age_int_fg_0 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv)
		slc_age_int_bg_0 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv)
		slc_int_fg_2     = slc_age_int_fg_0[1]
		slc_int_bg_2     = slc_age_int_bg_0[1]
		xlabel_2         = 'Age'
		var_prp_hdr_2    = 'AGF'
	elif int_typ_spl_2 == 'Age'  and n_int_spt_2 == 1:#in specfile_glx_f:
		splt_smpl_sfx_f2 = '-Age_F'
		splt_smpl_sfx_2  = '-Age' 
		splt_smpl_unt_2  = 'Age'
		plt_nme_prp_2    = 'Age'
		slc_age_int_fg_1 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_1)
		slc_age_int_bg_1 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_1)
		slc_int_fg_2     = slc_age_int_fg_1[1]
		slc_int_bg_2     = slc_age_int_bg_1[1]
		xlabel_2         = 'Age'
		var_prp_hdr_2    = 'AGF'
	elif int_typ_spl_2 == 'Age'  and n_int_spt_2 == 2:#in specfile_glx_f:
		splt_smpl_sfx_f2 = '-Age_F'
		splt_smpl_sfx_2  = '-Age' 
		splt_smpl_unt_2  = 'Age'
		plt_nme_prp_2    = 'Age'
		slc_age_int_fg_2 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_2)
		slc_age_int_bg_2 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_2)
		slc_int_fg_2     = slc_age_int_fg_2[1]
		slc_int_bg_2     = slc_age_int_bg_2[1]
		xlabel_2         = 'Age'
		var_prp_hdr_2    = 'AGF'
	elif int_typ_spl_2 == 'Age'  and n_int_spt_2 == 3:#in specfile_glx_f:
		splt_smpl_sfx_f2 = '-Age_F'
		splt_smpl_sfx_2  = '-Age' 
		splt_smpl_unt_2  = 'Age'
		plt_nme_prp_2    = 'Age'
		slc_age_int_fg_3 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_3)
		slc_age_int_bg_3 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_3)
		slc_int_fg_2     = slc_age_int_fg_3[1]
		slc_int_bg_2     = slc_age_int_bg_3[1]
		xlabel_2         = 'Age'
		var_prp_hdr_2    = 'AGF'
	elif int_typ_spl_2 == 'Age'  and n_int_spt_2 == 4:#in specfile_glx_f:
		splt_smpl_sfx_f2 = '-Age_F'
		splt_smpl_sfx_2  = '-Age' 
		splt_smpl_unt_2  = 'Age'
		plt_nme_prp_2    = 'Age'
		slc_age_int_fg_4 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_4)
		slc_age_int_bg_4 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_4)
		slc_int_fg_2     = slc_age_int_fg_4[1]
		slc_int_bg_2     = slc_age_int_bg_4[1]
		xlabel_2         = 'Age'
		var_prp_hdr_2    = 'AGF'
	elif int_typ_spl_2 == 'SFR'  and n_int_spt_2 == 0:#in specfile_glx_f:
		splt_smpl_sfx_f2 = 'SFR_F'
		splt_smpl_sfx_2  = '-SFR' 
		splt_smpl_unt_2  = 'M$_{\odot}$yr$^{-1}$' 
		plt_nme_prp_2    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv)
		slc_int_fg_2     = slc_sfr_int_fg[1]
		slc_int_bg_2     = slc_sfr_int_bg[1]
		xlabel_2         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_2    = 'SFF'
	elif int_typ_spl_2 == 'SFR'  and n_int_spt_2 == 1:#in specfile_glx_f:
		splt_smpl_sfx_f2 = 'SFR_F'
		splt_smpl_sfx_2  = '-SFR' 
		splt_smpl_unt_2  = 'M$_{\odot}$yr$^{-1}$' 
		plt_nme_prp_2    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_1)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_1)
		slc_int_fg_2     = slc_sfr_int_fg[1]
		slc_int_bg_2     = slc_sfr_int_bg[1]
		xlabel_2         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_2    = 'SFF'
	elif int_typ_spl_2 == 'SFR'  and n_int_spt_2 == 2:#in specfile_glx_f:
		splt_smpl_sfx_f2 = 'SFR_F'
		splt_smpl_sfx_2  = '-SFR' 
		splt_smpl_unt_2  = 'M$_{\odot}$yr$^{-1}$' 
		plt_nme_prp_2    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_2)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_2)
		slc_int_fg_2     = slc_sfr_int_fg[1]
		slc_int_bg_2     = slc_sfr_int_bg[1]
		xlabel_2         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_2    = 'SFF'
	elif int_typ_spl_2 == 'SFR'  and n_int_spt_2 == 3:#in specfile_glx_f:
		splt_smpl_sfx_f2 = 'SFR_F'
		splt_smpl_sfx_2  = '-SFR' 
		splt_smpl_unt_2  = 'M$_{\odot}$yr$^{-1}$' 
		plt_nme_prp_2    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_3)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_3)
		slc_int_fg_2     = slc_sfr_int_fg[1]
		slc_int_bg_2     = slc_sfr_int_bg[1]
		xlabel_2         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_2    = 'SFF'
	elif int_typ_spl_2 == 'SFR'  and n_int_spt_2 == 4:#in specfile_glx_f:
		splt_smpl_sfx_f2 = 'SFR_F'
		splt_smpl_sfx_2  = '-SFR' 
		splt_smpl_unt_2  = 'M$_{\odot}$yr$^{-1}$' 
		plt_nme_prp_2    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_4)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_4)
		slc_int_fg_2     = slc_sfr_int_fg[1]
		slc_int_bg_2     = slc_sfr_int_bg[1]
		xlabel_2         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_2    = 'SFF'
	elif int_typ_spl_2 == 'sSFR' and n_int_spt_2 == 0:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'sSFR_F'
		splt_smpl_sfx_2  = '-sSFR'
		splt_smpl_unt_2  = 'sSFR'
		plt_nme_prp_2    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv)
		slc_int_fg_2     = slc_ssf_int_fg[1]
		slc_int_bg_2     = slc_ssf_int_bg[1]
		xlabel_2         = 'sSFR [Gyr]'
		var_prp_hdr_2    = 'sSF'
	elif int_typ_spl_2 == 'sSFR' and n_int_spt_2 == 1:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'sSFR_F'
		splt_smpl_sfx_2  = '-sSFR'
		splt_smpl_unt_2  = 'sSFR'
		plt_nme_prp_2    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_1)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_1)
		slc_int_fg_2     = slc_ssf_int_fg[1]
		slc_int_bg_2     = slc_ssf_int_bg[1]
		xlabel_2         = 'sSFR [Gyr]'
		var_prp_hdr_2    = 'sSF'
	elif int_typ_spl_2 == 'sSFR' and n_int_spt_2 == 2:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'sSFR_F'
		splt_smpl_sfx_2  = '-sSFR'
		splt_smpl_unt_2  = 'sSFR'
		plt_nme_prp_2    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_2)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_2)
		slc_int_fg_2     = slc_ssf_int_fg[1]
		slc_int_bg_2     = slc_ssf_int_bg[1]
		xlabel_2         = 'sSFR [Gyr]'
		var_prp_hdr_2    = 'sSF'
	elif int_typ_spl_2 == 'sSFR' and n_int_spt_2 == 3:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'sSFR_F'
		splt_smpl_sfx_2  = '-sSFR'
		splt_smpl_unt_2  = 'sSFR'
		plt_nme_prp_2    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_3)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_3)
		slc_int_fg_2     = slc_ssf_int_fg[1]
		slc_int_bg_2     = slc_ssf_int_bg[1]
		xlabel_2         = 'sSFR [Gyr]'
		var_prp_hdr_2    = 'sSF'
	elif int_typ_spl_2 == 'sSFR' and n_int_spt_2 == 4:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'sSFR_F'
		splt_smpl_sfx_2  = '-sSFR'
		splt_smpl_unt_2  = 'sSFR'
		plt_nme_prp_2    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_4)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_4)
		slc_int_fg_2     = slc_ssf_int_fg[1]
		slc_int_bg_2     = slc_ssf_int_bg[1]
		xlabel_2         = 'sSFR [Gyr]'
		var_prp_hdr_2    = 'sSF'
	elif int_typ_spl_2 == 'Lnuv' and n_int_spt_2 == 0:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'Lnuv_F'
		splt_smpl_sfx_2  = '-Lnuv'
		splt_smpl_unt_2  = 'ergs cm$^{-2}$ s$^{-1}$'
		plt_nme_prp_2    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv)
		slc_int_fg_2     = slc_luv_int_fg[1]
		slc_int_bg_2     = slc_luv_int_bg[1]
		xlabel_2         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_2    = 'UVF'
	elif int_typ_spl_2 == 'Lnuv' and n_int_spt_2 == 1:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'Lnuv_F'
		splt_smpl_sfx_2  = '-Lnuv'
		splt_smpl_unt_2  = 'ergs cm$^{-2}$ s$^{-1}$'
		plt_nme_prp_2    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_1)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_1)
		slc_int_fg_2     = slc_luv_int_fg[1]
		slc_int_bg_2     = slc_luv_int_bg[1]
		xlabel_2         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_2    = 'UVF'
	elif int_typ_spl_2 == 'Lnuv' and n_int_spt_2 == 2:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'Lnuv_F'
		splt_smpl_sfx_2  = '-Lnuv'
		splt_smpl_unt_2  = 'ergs cm$^{-2}$ s$^{-1}$'
		plt_nme_prp_2    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_2)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_2)
		slc_int_fg_2     = slc_luv_int_fg[1]
		slc_int_bg_2     = slc_luv_int_bg[1]
		xlabel_2         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_2    = 'UVF'
	elif int_typ_spl_2 == 'Lnuv' and n_int_spt_2 == 3:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'Lnuv_F'
		splt_smpl_sfx_2  = '-Lnuv'
		splt_smpl_unt_2  = 'ergs cm$^{-2}$ s$^{-1}$'
		plt_nme_prp_2    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_3)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_3)
		slc_int_fg_2     = slc_luv_int_fg[1]
		slc_int_bg_2     = slc_luv_int_bg[1]
		xlabel_2         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_2    = 'UVF'
	elif int_typ_spl_2 == 'Lnuv' and n_int_spt_2 == 4:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'Lnuv_F'
		splt_smpl_sfx_2  = '-Lnuv'
		splt_smpl_unt_2  = 'ergs cm$^{-2}$ s$^{-1}$'
		plt_nme_prp_2    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_4)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_4)
		slc_int_fg_2     = slc_luv_int_fg[1]
		slc_int_bg_2     = slc_luv_int_bg[1]
		xlabel_2         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_2    = 'UVF'
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 0:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = 'arcsec'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 1:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = 'arcsec'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_1[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_1[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 2:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = 'arcsec'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_2[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_2[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 3:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = 'arcsec'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_3[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_3[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 4:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = 'arcsec'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_4[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_4[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 5:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = 'arcsec'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_5[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_5[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 6:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = 'arcsec'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_6[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_6[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
	elif int_typ_spl_2 == 'magi' and n_int_spt_2 == 0:# in specfile_glx:
		splt_smpl_sfx_f2 = 'magi_F'
		splt_smpl_sfx_2  = '_magi'
		splt_smpl_unt_2  = 'arcsec'
		plt_nme_prp_2    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv)
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'mag$_{i}$'
		var_prp_hdr_2    = 'magi'#'SAS'
	elif int_typ_spl_2 == 'magi' and n_int_spt_2 == 1:# in specfile_glx:
		splt_smpl_sfx_f2 = 'magi_F'
		splt_smpl_sfx_2  = '_magi'
		splt_smpl_unt_2  = 'mag'
		plt_nme_prp_2    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv)
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'mag$_{i}$'
		var_prp_hdr_2    = 'magi'#'SAS'
	elif int_typ_spl_2 == 'magi' and n_int_spt_2 == 2:# in specfile_glx:
		splt_smpl_sfx_f2 = 'magi_F'
		splt_smpl_sfx_2  = '_magi'
		splt_smpl_unt_2  = 'mag'
		plt_nme_prp_2    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_2)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_2)
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'mag$_{i}$'
		var_prp_hdr_2    = 'magi'#'SAS'
	elif int_typ_spl_2 == 'magi' and n_int_spt_2 == 3:# in specfile_glx:
		splt_smpl_sfx_f2 = 'magi_F'
		splt_smpl_sfx_2  = '_magi'
		splt_smpl_unt_2  = 'mag'
		plt_nme_prp_2    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_3)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_3)
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'mag$_{i}$'
		var_prp_hdr_2    = 'magi'#'SAS'
	elif int_typ_spl_2 == 'magi' and n_int_spt_2 == 4:# in specfile_glx:
		splt_smpl_sfx_f2 = 'magi_F'
		splt_smpl_sfx_2  = '_magi'
		splt_smpl_unt_2  = 'mag'
		plt_nme_prp_2    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_4)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_4)
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'mag$_{i}$'
		var_prp_hdr_2    = 'magi'#'SAS'
	elif int_typ_spl_2 == 'phi' and n_int_spt_2 == 0:# in specfile_glx:
		splt_smpl_sfx_f2 = 'PHI'
		splt_smpl_sfx_2  = '-phi'
		splt_smpl_unt_2  = 'deg'
		plt_nme_prp_2    = 'PHI'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv)
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr_2    = 'PHI'#'SAS'
	elif int_typ_spl_2 == 'phi'  and n_int_spt_2 == 2:# in specfile_glx:
		splt_smpl_sfx_f2 = 'PHI'
		splt_smpl_sfx_2  = '-phi'
		splt_smpl_unt_2  = 'deg'
		plt_nme_prp_2    = 'PHI'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv_23_2)			
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr_2    = 'PHI'#'SAS'
	elif int_typ_spl_2 == 'phi'  and n_int_spt_2 == 3:# in specfile_glx:
		splt_smpl_sfx_f2 = 'PHI'
		splt_smpl_sfx_2  = '-phi'
		splt_smpl_unt_2  = 'deg'
		plt_nme_prp_2    = 'PHI'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv_23_3)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv_23_3)			
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr_2    = 'PHI'#'SAS'
	elif int_typ_spl_2 == 'icl_fg' and n_int_spt_2 == 0:# in specfile_glx:
		splt_smpl_sfx_f2 = 'q_F'
		splt_smpl_sfx_2  = '-icl'
		splt_smpl_unt_2  = 'deg'
		plt_nme_prp_2    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv)
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$q$'
		var_prp_hdr_2    = 'q'#'SAS'
	elif int_typ_spl_2 == 'icl_fg' and n_int_spt_2 == 2:# in specfile_glx:
		splt_smpl_sfx_f2 = 'q_F'
		splt_smpl_sfx_2  = '-icl'
		splt_smpl_unt_2  = 'deg'
		plt_nme_prp_2    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv_23_2)
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$q$'
		var_prp_hdr_2    = 'q'#'SAS'
	elif int_typ_spl_2 == 'icl_fg' and n_int_spt_2 == 3:# in specfile_glx:
		splt_smpl_sfx_f2 = 'q_F'
		splt_smpl_sfx_2  = '-icl'
		splt_smpl_unt_2  = 'deg'
		plt_nme_prp_2    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv_23_3)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv_23_3)
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$q$'
		var_prp_hdr_2    = 'q'#'SAS'
	elif int_typ_spl_2 == 'icl_fg' and n_int_spt_2 == 4:# in specfile_glx:
		splt_smpl_sfx_f2 = 'q_F'
		splt_smpl_sfx_2  = '-icl'
		splt_smpl_unt_2  = 'deg'
		plt_nme_prp_2    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv_23_4)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv_23_4)			
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$q$'
		var_prp_hdr_2    = 'q'#'SAS'
	elif int_typ_spl_2 == 'n_sersic_fg' and n_int_spt_2 == 0:# in specfile_glx:
		splt_smpl_sfx_f2 = 'n_F'
		splt_smpl_sfx_2  = '-n_srs'
		splt_smpl_unt_2  = 'n'
		plt_nme_prp_2    = 'n_srs'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,n_srs_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,n_srs_itv)
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = 'n'
		var_prp_hdr_2    = 'nsr'#'SAS'
	elif int_typ_spl_2 == 'n_sersic_fg'  and n_int_spt_2 == 2:# in specfile_glx:
		splt_smpl_sfx_f2 = 'n_F'
		splt_smpl_sfx_2  = '-n_srs'
		splt_smpl_unt_2  = 'n'
		plt_nme_prp_2    = 'n_srs'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,n_srs_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,n_srs_itv_23_2)			
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = 'n'
		var_prp_hdr_2    = 'nsr'#'SAS'
	elif int_typ_spl_2 == 'r_eff_fg' and n_int_spt_2 == 0:# in specfile_glx:
		splt_smpl_sfx_f2 = 're_F'
		splt_smpl_sfx_2  = '-r_eff'
		splt_smpl_unt_2  = 'arcsec'
		plt_nme_prp_2    = 'r_eff'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv)
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]  
		xlabel_2         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr_2    = 'ref'#'SAS'
	elif int_typ_spl_2 == 'r_eff_fg'  and n_int_spt_2 == 2:# in specfile_glx:
		splt_smpl_sfx_f2 = 're_F'
		splt_smpl_sfx_2  = '-r_eff'
		splt_smpl_unt_2  = 'arcsec'
		plt_nme_prp_2    = 'r_eff'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv_23_2)			
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr_2    = 'ref'#'SAS'
	elif int_typ_spl_2 == 'r_eff_fg'  and n_int_spt_2 == 3:# in specfile_glx:
		splt_smpl_sfx_f2 = 're_F'
		splt_smpl_sfx_2  = '-r_eff'
		splt_smpl_unt_2  = 'arcsec'
		plt_nme_prp_2    = 'r_eff'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv_23_3)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv_23_3)			
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr_2    = 'ref'#'SAS'
	else:
		print
		print (colored('Such combination (2nd-split) does not exist!','yellow'))
		print (colored('Variable: '+str(int_typ_spl_2)+', # bins: '+str(n_int_spt_2),'yellow'))
		print
		quit()

	####
	print
	print slc_int_fg_1
	print slc_int_fg_2
	print lower_shift_1, upper_shift_1
	print lower_shift_2, upper_shift_2
	print
	FILES_M_BG =[]
	FILES_A_BG =[]
	FILES_M_FG =[]
	FILES_A_FG =[]

	'''
	if frg_ref_plt == True:
		for element,a in  enumerate(itertools.product(range(len(slc_int_fg_1)-1,len(slc_int_fg_1)),range(lower_shift_2,len(slc_int_fg_2)-upper_shift_2))):	
			index_int_1 = a[0]
			index_int_2 = a[1]
			print element,slc_int_fg_1[index_int_1],slc_int_fg_2[index_int_2]
			ini_fg_spc_m  = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-' + splt_smpl_sfx_f1 +'-'+str(slc_int_fg_1[index_int_1]) +'-ss-' + splt_smpl_sfx_f2 +'-'+str(slc_int_fg_2[index_int_2]) + '-stk-med'+str(stk_function)+'.fits'
			ini_fg_spc_a  = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-' + splt_smpl_sfx_f1 +'-'+str(slc_int_fg_1[index_int_1]) +'-ss-' + splt_smpl_sfx_f2 +'-'+str(slc_int_fg_2[index_int_2]) + '-stk-avg'+str(stk_function)+'.fits'
			print
			print ini_fg_spc_m
			print ini_fg_spc_a
			print

			#FILES_M_BG.append(ini_fg_spc_m)
			#FILES_A_BG.append(ini_fg_spc_a)
			#FILES_A_BG.append(ini_fg_spc_a)
	elif frg_ref_plt == False:
		pass
	print 'zfsdfsd'
	print
	'''

	splt_smpl_sfx_f1_plt=[]
	splt_smpl_sfx_f2_plt=[]	
	splt_smpl_sfx_f1_plt_fnc_m = []
	splt_smpl_sfx_f1_plt_fnc_a = []
	for element,a in  enumerate(itertools.product(range(lower_shift_1,len(slc_int_fg_1)-upper_shift_1),range(lower_shift_2,len(slc_int_fg_2)-upper_shift_2))):
		#print element,a
		index_int_1 = a[0]
		index_int_2 = a[1]
		print element,slc_int_fg_1[index_int_1],slc_int_fg_2[index_int_2]
		ini_fg_spc_m  = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-' + splt_smpl_sfx_f1 +'-'+str(slc_int_fg_1[index_int_1]) +'-ss-' + splt_smpl_sfx_f2 +'-'+str(slc_int_fg_2[index_int_2]) + '-stk-med'+str(stk_function)+'.fits'
		ini_fg_spc_a  = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-' + splt_smpl_sfx_f1 +'-'+str(slc_int_fg_1[index_int_1]) +'-ss-' + splt_smpl_sfx_f2 +'-'+str(slc_int_fg_2[index_int_2]) + '-stk-avg'+str(stk_function)+'.fits'
		ini_bg_spc_m  = res_stk_res + 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-' + splt_smpl_sfx_f1 +'-'+str(slc_int_fg_1[index_int_1]) +'-ss-' + splt_smpl_sfx_f2 +'-'+str(slc_int_fg_2[index_int_2]) + '-stk-med'+str(stk_function)+'.fits'
		ini_bg_spc_a  = res_stk_res + 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-' + splt_smpl_sfx_f1 +'-'+str(slc_int_fg_1[index_int_1]) +'-ss-' + splt_smpl_sfx_f2 +'-'+str(slc_int_fg_2[index_int_2]) + '-stk-avg'+str(stk_function)+'.fits'


		print
		print ini_fg_spc_m
		print ini_fg_spc_a
		print
		print ini_bg_spc_m
		print ini_bg_spc_a
		FILES_M_BG.append(ini_bg_spc_m)
		FILES_A_BG.append(ini_bg_spc_a)
		FILES_M_FG.append(ini_fg_spc_m)
		FILES_A_FG.append(ini_fg_spc_a)

		splt_smpl_sfx_f1_plt.append(splt_smpl_sfx_f1 +'-'+str(slc_int_fg_1[index_int_1]))
		splt_smpl_sfx_f2_plt.append(splt_smpl_sfx_f2 +'-'+str(slc_int_fg_2[index_int_2]))
		splt_smpl_sfx_f1_plt_fnc_m.append((ini_fg_spc_m.split('-stk',1)[1]).split('.fits',1)[0])
		splt_smpl_sfx_f1_plt_fnc_a.append((ini_fg_spc_a.split('-stk',1)[1]).split('.fits',1)[0])

	print
	print colored('Intervals to be plotted: ','yellow')
	print colored('Indices : '+str(range(lower_shift_1,len(slc_int_bg_1)-upper_shift_1)),'yellow')
	print colored('Indices : '+str(range(lower_shift_2,len(slc_int_bg_2)-upper_shift_2)),'yellow')
	print
	#for interval_range in range(lower_shift,len(slc_int_bg)-upper_shift):
		#print colored('Interval: ' + str(interval_range) + ': ' + str(slc_int_fg[interval_range]),'yellow')
		#cur_spc_1 = res_stk_res + specfile_glx_b + str(slc_int_fg[interval_range]) + '-stk-med'+str(stk_function)+'.fits'
		#cur_spc_2 = res_stk_res + specfile_glx_b + str(slc_int_fg[interval_range]) + '-stk-avg'+str(stk_function)+'.fits'
		#FILES_M_BG.append(cur_spc_1)
		#FILES_A_BG.append(cur_spc_2)
		#FILES_A_BG.append(cur_spc_2)
		#
	#if 'Fg' in specfile_glx_b[2]:
		#glx_type = 'Fg'
		#clr_plt  = 'red'
	#elif 'Bg' in specfile_glx_b[2]:
		#glx_type = 'Bg'
		#clr_plt  = 'blue'
		#
	if mlt_stk_fct == 'med':#stk_function_m == True:
		stk_function_file = 'med-c'
		
	elif mlt_stk_fct == 'avg':#stk_function_a == True:
		stk_function_file = 'avg-c'
		
	elif mlt_stk_fct == 'both':#stk_function_b == True:
		stk_function_file = 'med-avg'

	print
	print colored('EW from spectra files: ','yellow')
	print
	print colored("\n".join([FILE for FILE in FILES_M_BG]),'blue')
	print colored("\n".join([FILE for FILE in FILES_M_FG]),'blue')
	print
	print colored("\n".join([FILE for FILE in FILES_A_BG]),'red')
	print colored("\n".join([FILE for FILE in FILES_A_FG]),'red')
	print
	print
	print colored('Reshaping filename array.','yellow')
	print colored('Split by: ' + int_typ_spl_1 + ' in # bins: ' +str(n_int_spt_1) ,'yellow')
	print colored("\n".join([str(FILE) for FILE in slc_int_fg_1]),'yellow')
	print
	print colored('Split by: ' + int_typ_spl_2 + ' in # bins: ' +str(n_int_spt_2) ,'yellow')
	print colored("\n".join([str(FILE) for FILE in slc_int_fg_2]),'yellow')

	splt_smpl_sfx_f1_plt_aux         = np.reshape(splt_smpl_sfx_f1_plt      , (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))
	#(abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2)))
	###################################
	#############ORGINAL###############
	###################################
	#FILES_A_BG_AUX = np.reshape(FILES_A_BG, (n_int_spt_1,n_int_spt_2))
	#FILES_A_FG_AUX = np.reshape(FILES_A_FG, (n_int_spt_1,n_int_spt_2))
	#FILES_M_BG_AUX = np.reshape(FILES_M_BG, (n_int_spt_1,n_int_spt_2))
	#FILES_M_FG_AUX = np.reshape(FILES_M_FG, (n_int_spt_1,n_int_spt_2))
	###################################
	#############ORGINAL###############
	###################################	

	FILES_A_BG_AUX = np.reshape(FILES_A_BG, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))
	FILES_A_FG_AUX = np.reshape(FILES_A_FG, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))
	FILES_M_BG_AUX = np.reshape(FILES_M_BG, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))
	FILES_M_FG_AUX = np.reshape(FILES_M_FG, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))


	###################################
	#############ORGINAL###############
	###################################
	#splt_smpl_sfx_f1_plt_aux        = np.reshape(splt_smpl_sfx_f1_plt      , (n_int_spt_1,n_int_spt_2))
	#splt_smpl_sfx_f2_plt_aux        = np.reshape(splt_smpl_sfx_f2_plt      , (n_int_spt_1,n_int_spt_2))
	#splt_smpl_sfx_f1_plt_fnc_m_aux  = np.reshape(splt_smpl_sfx_f1_plt_fnc_m, (n_int_spt_1,n_int_spt_2))
	#splt_smpl_sfx_f1_plt_fnc_a_aux  = np.reshape(splt_smpl_sfx_f1_plt_fnc_a, (n_int_spt_1,n_int_spt_2))
	###################################
	#############ORGINAL###############
	###################################

	splt_smpl_sfx_f1_plt_aux        = np.reshape(splt_smpl_sfx_f1_plt      , (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))
	splt_smpl_sfx_f2_plt_aux        = np.reshape(splt_smpl_sfx_f2_plt      , (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))
	splt_smpl_sfx_f1_plt_fnc_m_aux  = np.reshape(splt_smpl_sfx_f1_plt_fnc_m, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))
	splt_smpl_sfx_f1_plt_fnc_a_aux  = np.reshape(splt_smpl_sfx_f1_plt_fnc_a, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))

	print
	print colored('EW from spectra files: ','yellow')
	print
	print colored("\n".join([str(FILE) for FILE in FILES_M_BG]),'blue')
	print colored("\n".join([str(FILE) for FILE in FILES_M_FG]),'blue')
	print
	print colored("\n".join([str(FILE) for FILE in FILES_A_BG]),'red')
	print colored("\n".join([str(FILE) for FILE in FILES_A_FG]),'red')
	print

	#print
	#print colored('EW from spectra files: ','yellow')
	#print
	#print colored("\n".join([str(FILE) for FILE in FILES_M_BG_AUX]),'blue')
	#print colored("\n".join([str(FILE) for FILE in FILES_M_FG_AUX]),'blue')
	#print
	#print colored("\n".join([str(FILE) for FILE in FILES_A_BG_AUX]),'red')
	#print colored("\n".join([str(FILE) for FILE in FILES_A_FG_AUX]),'red')
	#print	
	##########
	#############
	#plt_sufix_fnm = specfile_glx  + slc_int_fg[lower_shift]  + '-' + slc_int_fg[len(slc_int_bg)-upper_shift-1]

	B_FLAG = (FILES_M_BG_AUX[0][0].split('ss-zf_B-')[1]).rsplit('-ss-zf_F-')[0]
	F_FLAG = (FILES_M_BG_AUX[0][0].split('ss-zf_F-')[1]).rsplit('-ss-'+int_typ_spl_1+'-')[0]


	try:
		plt_sufix_fnm = ((FILES_M_BG_AUX[0][0].split('/')[-1])).rsplit(int_typ_spl_1)[0] + int_typ_spl_1 + '-' + str((n_int_spt_1)) + '-' +int_typ_spl_2 +'-' + str((n_int_spt_2)) #slc_int_fg_1[lower_shift_1] +'-' +slc_int_fg_1[len(slc_int_bg_2[0])-upper_shift_2-1]
		PLOT_TITLE    = 'z_Bg: ' + B_FLAG + ', z_Fg:' + F_FLAG + ', bins: ' +  int_typ_spl_1 + ': ' + str((n_int_spt_1)) + ', ' +int_typ_spl_2 +': ' + str((n_int_spt_2))#+ '-' + str(slc_int_fg_1[1][len(slc_int_bg_2[0])-upper_shift_2-1]) 
	except IndexError:
		plt_sufix_fnm = ((FILES_M_BG_AUX[0][0].split('/')[-1])).rsplit(int_typ_spl_1)[0] + int_typ_spl_1 + '-' + str((n_int_spt_1)) + '-' +int_typ_spl_2 +'-' + str((n_int_spt_2)) #slc_int_fg_1[lower_shift_1] +'-' +slc_int_fg_1[len(slc_int_bg_2)-upper_shift_2-1]
		PLOT_TITLE    = 'z_Bg: ' + B_FLAG + ', z_Fg:' + F_FLAG + ', bins: ' +  int_typ_spl_1 + ': ' + str((n_int_spt_1)) + ', ' +int_typ_spl_2 +': ' + str((n_int_spt_2))#+ '-' + str(slc_int_fg_1[1][len(slc_int_bg_2)-upper_shift_2-1]) 

	if (mlt_stk_fct == 'med' or mlt_stk_fct == 'both') and fpt_background == True:
		print
		print plt_sufix_fnm
		print PLOT_TITLE
		print
		print len(FILES_M_BG_AUX)
		print
		print colored("\n".join([str(FILE) for FILE in FILES_M_BG_AUX]),'blue')
		print colored("\n".join([str(FILE) for FILE in splt_smpl_sfx_f1_plt_fnc_m_aux]),'blue')
		[Plot_Slc_Spc_Lne_Mlt_Plt(FILE[0],plt_sufix_fnm=plt_sufix_fnm,splt_smpl_sfx_f1_plt=FILE[1],stk_function_sfx_f1_plt=FILE[2],splt_smpl_sfx_f2_plt=FILE[3],slc_int_fg_1=slc_int_fg_1,slc_int_bg_1=slc_int_bg_1,slc_int_fg_2=slc_int_fg_2,slc_int_bg_2=slc_int_bg_2,int_typ_spl_1 = int_typ_spl_1,int_typ_spl_2=int_typ_spl_2,n_int_spt_1=n_int_spt_1,n_int_spt_2=n_int_spt_2,*args,**kwargs)for FILE in zip(FILES_M_BG_AUX,splt_smpl_sfx_f1_plt_aux,splt_smpl_sfx_f1_plt_fnc_m_aux,splt_smpl_sfx_f2_plt_aux)]
	else:
		pass
	if (mlt_stk_fct == 'both' or mlt_stk_fct == 'avg') and fpt_background == True:
		print
		print plt_sufix_fnm
		print PLOT_TITLE
		print
		print len(FILES_A_BG_AUX)
		print		
		print colored("\n".join([str(FILE) for FILE in FILES_A_BG_AUX]),'red')
		print colored("\n".join([str(FILE) for FILE in splt_smpl_sfx_f1_plt_fnc_a_aux]),'red')
		[Plot_Slc_Spc_Lne_Mlt_Plt(FILE[0],plt_sufix_fnm=plt_sufix_fnm,splt_smpl_sfx_f1_plt=FILE[1],stk_function_sfx_f1_plt=FILE[2],splt_smpl_sfx_f2_plt=FILE[3],slc_int_fg_1=slc_int_fg_1,slc_int_bg_1=slc_int_bg_1,slc_int_fg_2=slc_int_fg_2,slc_int_bg_2=slc_int_bg_2,int_typ_spl_1 = int_typ_spl_1,int_typ_spl_2=int_typ_spl_2,n_int_spt_1=n_int_spt_1,n_int_spt_2=n_int_spt_2,*args,**kwargs)for FILE in zip(FILES_A_BG_AUX,splt_smpl_sfx_f1_plt_aux,splt_smpl_sfx_f1_plt_fnc_a_aux,splt_smpl_sfx_f2_plt_aux)]
	else:
		pass
	if (mlt_stk_fct == 'med' or mlt_stk_fct == 'both') and fpt_foreground == True:
		print
		print plt_sufix_fnm
		print PLOT_TITLE
		print
		print len(FILES_M_FG_AUX)
		print
		print colored("\n".join([str(FILE) for FILE in FILES_M_FG_AUX]),'blue')
		print colored("\n".join([str(FILE) for FILE in splt_smpl_sfx_f1_plt_fnc_m_aux]),'blue')
		[Plot_Slc_Spc_Lne_Mlt_Plt(FILE[0],plt_sufix_fnm=plt_sufix_fnm,splt_smpl_sfx_f1_plt=FILE[1],stk_function_sfx_f1_plt=FILE[2],splt_smpl_sfx_f2_plt=FILE[3],slc_int_fg_1=slc_int_fg_1,slc_int_bg_1=slc_int_bg_1,slc_int_fg_2=slc_int_fg_2,slc_int_bg_2=slc_int_bg_2,int_typ_spl_1 = int_typ_spl_1,int_typ_spl_2=int_typ_spl_2,n_int_spt_1=n_int_spt_1,n_int_spt_2=n_int_spt_2,*args,**kwargs)for FILE in zip(FILES_M_FG_AUX,splt_smpl_sfx_f1_plt_aux,splt_smpl_sfx_f1_plt_fnc_m_aux,splt_smpl_sfx_f2_plt_aux)]
	else:
		pass
	if (mlt_stk_fct == 'both' or mlt_stk_fct == 'avg') and fpt_foreground == True:
		print
		print plt_sufix_fnm
		print PLOT_TITLE
		print
		print len(FILES_A_FG_AUX)
		print		
		print colored("\n".join([str(FILE) for FILE in FILES_A_FG_AUX]),'red')
		print colored("\n".join([str(FILE) for FILE in splt_smpl_sfx_f1_plt_fnc_a_aux]),'red')
		[Plot_Slc_Spc_Lne_Mlt_Plt(FILE[0],plt_sufix_fnm=plt_sufix_fnm,splt_smpl_sfx_f1_plt=FILE[1],stk_function_sfx_f1_plt=FILE[2],splt_smpl_sfx_f2_plt=FILE[3],slc_int_fg_1=slc_int_fg_1,slc_int_bg_1=slc_int_bg_1,slc_int_fg_2=slc_int_fg_2,slc_int_bg_2=slc_int_bg_2,int_typ_spl_1 = int_typ_spl_1,int_typ_spl_2=int_typ_spl_2,n_int_spt_1=n_int_spt_1,n_int_spt_2=n_int_spt_2,*args,**kwargs)for FILE in zip(FILES_A_FG_AUX,splt_smpl_sfx_f1_plt_aux,splt_smpl_sfx_f1_plt_fnc_a_aux,splt_smpl_sfx_f2_plt_aux)]
	else:
		pass
	#[Plot_Slc_Spc_Lne_Mlt_Plt(FILE[0],plt_sufix_fnm=plt_sufix_fnm,splt_smpl_sfx_f1_plt=FILE[1],stk_function_sfx_f1_plt=FILE[2],splt_smpl_sfx_f2_plt=FILE[3],slc_int_fg_1=slc_int_fg_1,slc_int_bg_1=slc_int_bg_1,slc_int_fg_2=slc_int_fg_2,slc_int_bg_2=slc_int_bg_2,int_typ_spl_1 = int_typ_spl_1,int_typ_spl_2=int_typ_spl_2,n_int_spt_1=n_int_spt_1,n_int_spt_2=n_int_spt_2,*args,**kwargs)for FILE in zip(FILES_M_FG_AUX,splt_smpl_sfx_f1_plt_aux,splt_smpl_sfx_f1_plt_fnc_m_aux,splt_smpl_sfx_f2_plt_aux)]
	#[Plot_Slc_Spc_Lne_Mlt_Plt(FILE[0],plt_sufix_fnm=plt_sufix_fnm,splt_smpl_sfx_f1_plt=FILE[1],stk_function_sfx_f1_plt=FILE[2],splt_smpl_sfx_f2_plt=FILE[3],slc_int_fg_1=slc_int_fg_1,slc_int_bg_1=slc_int_bg_1,slc_int_fg_2=slc_int_fg_2,slc_int_bg_2=slc_int_bg_2,int_typ_spl_1 = int_typ_spl_1,int_typ_spl_2=int_typ_spl_2,n_int_spt_1=n_int_spt_1,n_int_spt_2=n_int_spt_2,*args,**kwargs)for FILE in zip(FILES_A_FG_AUX,splt_smpl_sfx_f1_plt_aux,splt_smpl_sfx_f1_plt_fnc_a_aux,splt_smpl_sfx_f2_plt_aux)]

def Plot_Slc_Spc_Lne_Mlt_Plt(Mltp_Spec_Files_2b_Plot,*args, **kwargs):
	###########
	autoaxis_SSL      = kwargs.get('autoaxis_SSL'  , True)
	min_y_lim_SSL     = kwargs.get('min_y_lim_SSL' , -2.0)
	max_y_lim_SSL     = kwargs.get('max_y_lim_SSL' , 1.0)
	aaxs_SSL_ml_y     = kwargs.get('aaxs_SSL_ml_y' ,False)
	fit_lne           = kwargs.get('fit_lne',False)
	plt_ind_fit       = kwargs.get('plt_ind_fit',False)
	lbl_col_idv       = kwargs.get('lbl_col_idv',True)
	###########
	z_glx_Ps          = kwargs.get('z_glx_Ps'    ,0)
	dest_dir          = kwargs.get('dest_dir'    , None)
	verbose           = kwargs.get('verbose'     , False)
	epssave           = kwargs.get('epssave'     , False)
	showplot          = kwargs.get('showplot'    , False) 

	autoaxis_Idp      = kwargs.get('autoaxis_Idp', False)
	#min_y_lim_Idp     = kwargs.get('min_y_lim'   , 0.5)
	#max_y_lim_Idp     = kwargs.get('max_y_lim'   , 1.5)

	lmb_min           = kwargs.get('lmb_min',1200)
	lmb_max           = kwargs.get('lmb_max',1700)

	lmb_min_lim       = lmb_min
	lmb_max_lim       = lmb_max

	fit_fnct          = kwargs.get('fit_fnct','gauss')
	fit_type          = kwargs.get('fit_type','lmfit')
	pre_off_plt       = kwargs.get('pre_off_plt',False)
	dest_dir          = kwargs.get('dest_dir',None)

	n_int_spt         = kwargs.get('n_int_spt',0)

	int_typ_spl       = kwargs.get('int_typ_spl','arcsec')

	upper_shift_1     = kwargs.get('upper_shift_1',0)
	lower_shift_1     = kwargs.get('lower_shift_1',0)
	upper_shift_2     = kwargs.get('upper_shift_2',0)
	lower_shift_2     = kwargs.get('lower_shift_2',0)
	mlt_stk_fct       = kwargs.get('mlt_stk_fct','both')
	plt_sufix_fnm     = kwargs.get('plt_sufix_fnm',None)
	MSK_NTMS=2.5

	splt_smpl_sfx_f1_plt    = kwargs.get('splt_smpl_sfx_f1_plt',None)
	splt_smpl_sfx_f2_plt    = kwargs.get('splt_smpl_sfx_f2_plt',None)
	stk_function_sfx_f1_plt = kwargs.get('stk_function_sfx_f1_plt','med')

	stk_function      = stk_function_sfx_f1_plt[0]
	max_sep           = kwargs.get('max_sep'         ,23)

	slc_int_fg_1      = kwargs.get('slc_int_fg_1',0)
	slc_int_bg_1      = kwargs.get('slc_int_bg_1',0)
	slc_int_fg_2      = kwargs.get('slc_int_fg_2',0)
	slc_int_bg_2      = kwargs.get('slc_int_bg_2',0)

	int_typ_spl_1     = kwargs.get('int_typ_spl_1',None)
	int_typ_spl_2     = kwargs.get('int_typ_spl_2',None)
	n_int_spt_1       = kwargs.get('n_int_spt_1',None)
	n_int_spt_2       = kwargs.get('n_int_spt_2',None)

	empty_plots       = kwargs.get('empty_plots',1)
	landscape_plt     = kwargs.get('landscape_plt',True)

	fit_vls_hdr       = kwargs.get('fit_vls_hdr',True)
	uft_lne_vls       = kwargs.get('uft_lne_vls',False)

	print
	print colored(Mltp_Spec_Files_2b_Plot,'green')
	print colored(splt_smpl_sfx_f1_plt,'magenta')
	print colored(splt_smpl_sfx_f2_plt,'magenta')
	print
	##########
	if int_typ_spl_1 == 'kpc'  and n_int_spt_1 == 0:#in specfile_glx_f:
		splt_smpl_sfx_f1= 'kpc_F'
		splt_smpl_sfx_1 = '_kpc' 
		splt_smpl_unt_1 = 'kpc'
		splt_smpl_unl_1 = 'kpc'
		plt_nme_prp_1   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv)				
		slc_int_fg_1    = slc_kpc_int_fg[1]
		slc_int_bg_1    = slc_kpc_int_bg[1]		
		xlabel_1        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_1   = 'SKP'
		xticks_values   = [5,50, 100, 150]
		yticks_values   = np.arange(0,30,.1)#[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'kpc'  and n_int_spt_1 == 1:#in specfile_glx_f:
		splt_smpl_sfx_f1= 'kpc_F'
		splt_smpl_sfx_1 = '_kpc' 
		splt_smpl_unt_1 = 'kpc'
		splt_smpl_unl_1 = 'kpc'
		plt_nme_prp_1   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_1)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_1)				
		slc_int_fg_1    = slc_kpc_int_fg[1]
		slc_int_bg_1    = slc_kpc_int_bg[1]
		xlabel_1        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_1   = 'SKP'
		xticks_values   = [5,50, 100, 150]
		yticks_values   = np.arange(0,30,.1)#[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'kpc'  and n_int_spt_1 == 2:#in specfile_glx_f:
		splt_smpl_sfx_f1= 'kpc_F'
		splt_smpl_sfx_1 = '_kpc' 
		splt_smpl_unt_1 = 'kpc'
		splt_smpl_unl_1 = 'kpc'
		plt_nme_prp_1   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_2)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_2)				
		slc_int_fg_1    = slc_kpc_int_fg[1]
		slc_int_bg_1    = slc_kpc_int_bg[1]
		xlabel_1        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_1   = 'SKP'
		xticks_values   = [5,50, 100, 150]
		yticks_values   = np.arange(0,30,.1)#[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'kpc'  and n_int_spt_1 == 3:#in specfile_glx_f:
		splt_smpl_sfx_f1= 'kpc_F'
		splt_smpl_sfx_1 = '_kpc' 
		splt_smpl_unt_1 = 'kpc'
		splt_smpl_unl_1 = 'kpc'
		plt_nme_prp_1   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_3)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_3)				
		slc_int_fg_1    = slc_kpc_int_fg[1]
		slc_int_bg_1    = slc_kpc_int_bg[1]
		xlabel_1        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_1   = 'SKP'
		xticks_values   = [5,50, 100, 150]
		yticks_values   = np.arange(0,30,.1)#[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'kpc'  and n_int_spt_1 == 4:#in specfile_glx_f:
		splt_smpl_sfx_f1= 'kpc_F'
		splt_smpl_sfx_1 = '_kpc' 
		splt_smpl_unt_1 = 'kpc'
		splt_smpl_unl_1 = 'kpc'
		plt_nme_prp_1   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_4)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_4)				
		slc_int_fg_1    = slc_kpc_int_fg[1]
		slc_int_bg_1    = slc_kpc_int_bg[1]
		xlabel_1        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_1   = 'SKP'
		xticks_values   = [5,50, 100, 150]
		yticks_values   = np.arange(0,30,.1)#[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'mass' and n_int_spt_1 == 0 and max_sep == 23:# in specfile_glx_f:
		splt_smpl_sfx_f1= 'mass_F'
		splt_smpl_sfx_1 = '-mass'
		splt_smpl_unt_1 = 'mass'
		splt_smpl_unl_1 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_1   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23)				
		slc_int_fg_1    = slc_mss_int_fg[1]
		slc_int_bg_1    = slc_mss_int_bg[1]
		xlabel_1        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_1   = 'MSF'
		xticks_values   = np.arange(1,20,.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values   = np.arange(0,30,.1)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'mass' and n_int_spt_1 == 1 and max_sep == 23:# in specfile_glx_f:
		splt_smpl_sfx_f1= 'mass_F'
		splt_smpl_sfx_1 = '-mass'
		splt_smpl_unt_1 = 'mass'
		splt_smpl_unl_1 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_1   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_1)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_1)				
		slc_int_fg_1    = slc_mss_int_fg[1]
		slc_int_bg_1    = slc_mss_int_bg[1]
		xlabel_1        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_1   = 'MSF'
		xticks_values   = np.arange(1,20,.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values   = np.arange(0,30,.1)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'mass' and n_int_spt_1 == 2 and max_sep == 23:# in specfile_glx_f:
		splt_smpl_sfx_f1= 'mass_F'
		splt_smpl_sfx_1 = '-mass'
		splt_smpl_unt_1 = 'mass'
		splt_smpl_unl_1 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_1   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_2)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_2)				
		slc_int_fg_1    = slc_mss_int_fg[1]
		slc_int_bg_1    = slc_mss_int_bg[1]
		xlabel_1        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_1   = 'MSF'
		xticks_values   = np.arange(1,20,.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values   = np.arange(0,30,.01)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'mass' and n_int_spt_1 == 3 and max_sep == 23:# in specfile_glx_f:
		splt_smpl_sfx_f1= 'mass_F'
		splt_smpl_sfx_1 = '-mass'
		splt_smpl_unt_1 = 'mass'
		splt_smpl_unl_1 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_1   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_3)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_3)				
		slc_int_fg_1    = slc_mss_int_fg[1]
		slc_int_bg_1    = slc_mss_int_bg[1]
		xlabel_1        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_1   = 'MSF'
		xticks_values   = np.arange(1,20,.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values   = np.arange(0,30,.1)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'mass' and n_int_spt_1 == 4 and max_sep == 23:# in specfile_glx_f:
		splt_smpl_sfx_f1= 'mass_F'
		splt_smpl_sfx_1 = '-mass'
		splt_smpl_unt_1 = 'mass'
		splt_smpl_unl_1 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_1   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_4)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_4)				
		slc_int_fg_1    = slc_mss_int_fg[1]
		slc_int_bg_1    = slc_mss_int_bg[1]
		xlabel_1        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_1   = 'MSF'
		xticks_values   = np.arange(1,20,.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values   = np.arange(0,30,.1)         #[0.1,0.5,1,3]				
	elif int_typ_spl_1 == 'Age'  and n_int_spt_1 == 0:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Age_F'
		splt_smpl_sfx_1  = '-Age' 
		splt_smpl_unt_1  = 'Age'
		splt_smpl_unl_1  = 'Age'
		plt_nme_prp_1    = 'Age'
		slc_age_int_fg_0 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv)
		slc_age_int_bg_0 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv)
		slc_int_fg_1     = slc_age_int_fg_0[1]
		slc_int_bg_1     = slc_age_int_bg_0[1]
		xlabel_1         = 'Age'
		var_prp_hdr_1    = 'AGF'
		xticks_values    = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Age'  and n_int_spt_1 == 1 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Age_F'
		splt_smpl_sfx_1  = '-Age' 
		splt_smpl_unt_1  = 'Age'
		splt_smpl_unl_1  = 'Age'
		plt_nme_prp_1    = 'Age'
		slc_age_int_fg_1 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_1)
		slc_age_int_bg_1 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_1)
		slc_int_fg_1     = slc_age_int_fg_1[1]
		slc_int_bg_1     = slc_age_int_bg_1[1]
		xlabel_1         = 'Age'
		var_prp_hdr_1    = 'AGF'
		xticks_values    = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Age'  and n_int_spt_1 == 2 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Age_F'
		splt_smpl_sfx_1  = '-Age' 
		splt_smpl_unt_1  = 'Age'
		splt_smpl_unl_1  = 'Age'
		plt_nme_prp_1    = 'Age'
		slc_age_int_fg_2 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_2)
		slc_age_int_bg_2 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_2)
		slc_int_fg_1     = slc_age_int_fg_2[1]
		slc_int_bg_1     = slc_age_int_bg_2[1]
		xlabel_1         = 'Age'
		var_prp_hdr_1    = 'AGF'
		xticks_values    = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Age'  and n_int_spt_1 == 3 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Age_F'
		splt_smpl_sfx_1  = '-Age' 
		splt_smpl_unt_1  = 'Age'
		splt_smpl_unl_1  = 'Age'
		plt_nme_prp_1    = 'Age'
		slc_age_int_fg_3 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_3)
		slc_age_int_bg_3 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_3)
		slc_int_fg_1     = slc_age_int_fg_3[1]
		slc_int_bg_1     = slc_age_int_bg_3[1]
		xlabel_1         = 'Age'
		var_prp_hdr_1    = 'AGF'
		xticks_values    = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Age'  and n_int_spt_1 == 4 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Age_F'
		splt_smpl_sfx_1  = '-Age' 
		splt_smpl_unt_1  = 'Age'
		splt_smpl_unl_1  = 'Age'
		plt_nme_prp_1    = 'Age'
		slc_age_int_fg_4 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_4)
		slc_age_int_bg_4 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_4)
		slc_int_fg_1     = slc_age_int_fg_4[1]
		slc_int_bg_1     = slc_age_int_bg_4[1]
		xlabel_1         = 'Age'
		var_prp_hdr_1    = 'AGF'
		xticks_values    = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'SFR'  and n_int_spt_1 == 0:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'SFR_F'
		splt_smpl_sfx_1  = '-SFR' 
		splt_smpl_unt_1  = 'SFR' 
		splt_smpl_unl_1  = 'SFR' 
		plt_nme_prp_1    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv)
		slc_int_fg_1     = slc_sfr_int_fg[1]
		slc_int_bg_1     = slc_sfr_int_bg[1]
		xlabel_1         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_1    = 'SFF'
		xticks_values    = np.arange(0,3,0.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'SFR'  and n_int_spt_1 == 1 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'SFR_F'
		splt_smpl_sfx_1  = '-SFR' 
		splt_smpl_unt_1  = 'SFR' 
		splt_smpl_unl_1  = 'SFR' 
		plt_nme_prp_1    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_1)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_1)
		slc_int_fg_1     = slc_sfr_int_fg[1]
		slc_int_bg_1     = slc_sfr_int_bg[1]
		xlabel_1         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_1    = 'SFF'
		xticks_values    = np.arange(0,3,0.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'SFR'  and n_int_spt_1 == 2 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'SFR_F'
		splt_smpl_sfx_1  = '-SFR' 
		splt_smpl_unt_1  = 'SFR' 
		splt_smpl_unl_1  = 'SFR' 
		plt_nme_prp_1    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_2)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_2)
		slc_int_fg_1     = slc_sfr_int_fg[1]
		slc_int_bg_1     = slc_sfr_int_bg[1]
		xlabel_1         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_1    = 'SFF'
		xticks_values    = np.arange(0,3,0.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'SFR'  and n_int_spt_1 == 3 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'SFR_F'
		splt_smpl_sfx_1  = '-SFR' 
		splt_smpl_unt_1  = 'SFR' 
		splt_smpl_unl_1  = 'SFR' 
		plt_nme_prp_1    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_3)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_3)
		slc_int_fg_1     = slc_sfr_int_fg[1]
		slc_int_bg_1     = slc_sfr_int_bg[1]
		xlabel_1         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_1    = 'SFF'
		xticks_values    = np.arange(0,3,0.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'SFR'  and n_int_spt_1 == 4 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'SFR_F'
		splt_smpl_sfx_1  = '-SFR' 
		splt_smpl_unt_1  = 'SFR' 
		splt_smpl_unl_1  = 'SFR' 
		plt_nme_prp_1    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_4)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_4)
		slc_int_fg_1     = slc_sfr_int_fg[1]
		slc_int_bg_1     = slc_sfr_int_bg[1]
		xlabel_1         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_1    = 'SFF'
		xticks_values    = np.arange(0,3,0.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sSFR' and n_int_spt_1 == 0:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'sSFR_F'
		splt_smpl_sfx_1  = '-sSFR'
		splt_smpl_unt_1  = 'sSFR'
		splt_smpl_unl_1  = 'sSFR'
		plt_nme_prp_1    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv)
		slc_int_fg_1     = slc_ssf_int_fg[1]
		slc_int_bg_1     = slc_ssf_int_bg[1]
		xlabel_1         = 'sSFR [Gyr]'
		var_prp_hdr_1    = 'sSF'
		xticks_values    = np.arange(-20,-1,0.1)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sSFR' and n_int_spt_1 == 1 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'sSFR_F'
		splt_smpl_sfx_1  = '-sSFR'
		splt_smpl_unt_1  = 'sSFR'
		splt_smpl_unl_1  = 'sSFR'
		plt_nme_prp_1    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_1)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_1)
		slc_int_fg_1     = slc_ssf_int_fg[1]
		slc_int_bg_1     = slc_ssf_int_bg[1]
		xlabel_1         = 'sSFR [Gyr]'
		var_prp_hdr_1    = 'sSF'
		xticks_values    = np.arange(-20,-1,0.1)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sSFR' and n_int_spt_1 == 2 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'sSFR_F'
		splt_smpl_sfx_1  = '-sSFR'
		splt_smpl_unt_1  = 'sSFR'
		splt_smpl_unl_1  = 'sSFR'
		plt_nme_prp_1    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_2)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_2)
		slc_int_fg_1     = slc_ssf_int_fg[1]
		slc_int_bg_1     = slc_ssf_int_bg[1]
		xlabel_1         = 'sSFR [Gyr]'
		var_prp_hdr_1    = 'sSF'
		xticks_values    = np.arange(-20,-1,0.1)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sSFR' and n_int_spt_1 == 3 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'sSFR_F'
		splt_smpl_sfx_1  = '-sSFR'
		splt_smpl_unt_1  = 'sSFR'
		splt_smpl_unl_1  = 'sSFR'
		plt_nme_prp_1    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_3)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_3)
		slc_int_fg_1     = slc_ssf_int_fg[1]
		slc_int_bg_1     = slc_ssf_int_bg[1]
		xlabel_1         = 'sSFR [Gyr]'
		var_prp_hdr_1    = 'sSF'
		xticks_values    = np.arange(-20,-1,0.1)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sSFR' and n_int_spt_1 == 4 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'sSFR_F'
		splt_smpl_sfx_1  = '-sSFR'
		splt_smpl_unt_1  = 'sSFR'
		splt_smpl_unl_1  = 'sSFR'
		plt_nme_prp_1    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_4)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_4)
		slc_int_fg_1     = slc_ssf_int_fg[1]
		slc_int_bg_1     = slc_ssf_int_bg[1]
		xlabel_1         = 'sSFR [Gyr]'
		var_prp_hdr_1    = 'sSF'
		xticks_values    = np.arange(-20,-1,0.25)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.25)   #[0.1,0.5,1,3]						
	elif int_typ_spl_1 == 'Lnuv' and n_int_spt_1 == 0:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Lnuv_F'
		splt_smpl_sfx_1  = '-Lnuv'
		splt_smpl_unt_1  = 'ergs cm$^{-2}$ s$^{-1}$'
		splt_smpl_unl_1  = 'Lnuv'
		plt_nme_prp_1    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv)
		slc_int_fg_1     = slc_luv_int_fg[1]
		slc_int_bg_1     = slc_luv_int_bg[1]
		xlabel_1         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_1    = 'UVF'
		xticks_values    = np.arange(8,14,.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Lnuv' and n_int_spt_1 == 1 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Lnuv_F'
		splt_smpl_sfx_1  = '-Lnuv'
		splt_smpl_unt_1  = 'ergs cm$^{-2}$ s$^{-1}$'
		splt_smpl_unl_1  = 'Lnuv'
		plt_nme_prp_1    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_1)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_1)
		slc_int_fg_1     = slc_luv_int_fg[1]
		slc_int_bg_1     = slc_luv_int_bg[1]
		xlabel_1         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_1    = 'UVF'
		xticks_values    = np.arange(8,14,.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Lnuv' and n_int_spt_1 == 2 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Lnuv_F'
		splt_smpl_sfx_1  = '-Lnuv'
		splt_smpl_unt_1  = 'ergs cm$^{-2}$ s$^{-1}$'
		splt_smpl_unl_1  = 'Lnuv'
		plt_nme_prp_1    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_2)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_2)
		slc_int_fg_1     = slc_luv_int_fg[1]
		slc_int_bg_1     = slc_luv_int_bg[1]
		xlabel_1         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_1    = 'UVF'
		xticks_values    = np.arange(8,14,.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Lnuv' and n_int_spt_1 == 3 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Lnuv_F'
		splt_smpl_sfx_1  = '-Lnuv'
		splt_smpl_unt_1  = 'ergs cm$^{-2}$ s$^{-1}$'
		splt_smpl_unl_1  = 'Lnuv'
		plt_nme_prp_1    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_3)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_3)
		slc_int_fg_1     = slc_luv_int_fg[1]
		slc_int_bg_1     = slc_luv_int_bg[1]
		xlabel_1         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_1    = 'UVF'
		xticks_values    = np.arange(8,14,.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Lnuv' and n_int_spt_1 == 4 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Lnuv_F'
		splt_smpl_sfx_1  = '-Lnuv'
		splt_smpl_unt_1  = 'ergs cm$^{-2}$ s$^{-1}$'
		splt_smpl_unl_1  = 'Lnuv'
		plt_nme_prp_1    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_4)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_4)
		slc_int_fg_1     = slc_luv_int_fg[1]
		slc_int_bg_1     = slc_luv_int_bg[1]
		xlabel_1         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_1    = 'UVF'
		xticks_values    = np.arange(8,14,.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values    = np.arange(0,30,.1)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 0:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150]
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 1 and max_sep==23:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_1[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_1[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150]
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 2 and max_sep==23:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_2[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_2[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150]
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 3 and max_sep==23:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_3[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_3[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150]
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 4 and max_sep==23:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_4[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_4[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150]
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 5 and max_sep==23:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_5[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_5[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150, 200]
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 6 and max_sep==23:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_6[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_6[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150, 200]
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]			
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 1 and max_sep==25:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_1[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_1[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150]
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 2 and max_sep==25:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_2[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_2[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150]
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 3 and max_sep==25:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_3[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_3[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150]
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 4 and max_sep==25:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_4[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_4[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150]
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 5 and max_sep==25:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_5[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_5[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150, 200]
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 6 and max_sep==25:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_6[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_6[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values    = [5,50, 100, 150, 200]
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]

	elif int_typ_spl_1 == 'magi' and n_int_spt_1 == 0:# in specfile_glx:
		splt_smpl_sfx_f1 = 'magi_F'
		splt_smpl_sfx_1  = '_magi'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv)
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'mag$_{i}$'
		var_prp_hdr_1    = 'magi'#'SAS'
		xticks_values    = np.arange(-100,100,0.25)
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]				
	elif int_typ_spl_1 == 'magi' and n_int_spt_1 == 1:# in specfile_glx:
		splt_smpl_sfx_f1 = 'magi_F'
		splt_smpl_sfx_1  = '_magi'
		splt_smpl_unt_1  = 'mag'
		splt_smpl_unl_1  = 'mag'
		plt_nme_prp_1    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv)
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'mag$_{i}$'
		var_prp_hdr_1    = 'magi'#'SAS'
		xticks_values    = np.arange(-100,100,0.25)
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]				
	elif int_typ_spl_1 == 'magi' and n_int_spt_1 == 2 and max_sep==23:# in specfile_glx:
		splt_smpl_sfx_f1 = 'magi_F'
		splt_smpl_sfx_1  = '_magi'
		splt_smpl_unt_1  = 'mag'
		splt_smpl_unl_1  = 'mag'
		plt_nme_prp_1    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_2)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_2)
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'mag$_{i}$'
		var_prp_hdr_1    = 'magi'#'SAS'
		xticks_values    = np.arange(-100,100,0.25)
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]				
	elif int_typ_spl_1 == 'magi' and n_int_spt_1 == 3 and max_sep==23:# in specfile_glx:
		splt_smpl_sfx_f1 = 'magi_F'
		splt_smpl_sfx_1  = '_magi'
		splt_smpl_unt_1  = 'mag'
		splt_smpl_unl_1  = 'mag'
		plt_nme_prp_1    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_3)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_3)
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'mag$_{i}$'
		var_prp_hdr_1    = 'magi'#'SAS'
		xticks_values    = np.arange(-100,100,0.25)
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]				
	elif int_typ_spl_1 == 'magi' and n_int_spt_1 == 4 and max_sep==23:# in specfile_glx:
		splt_smpl_sfx_f1 = 'magi_F'
		splt_smpl_sfx_1  = '_magi'
		splt_smpl_unt_1  = 'mag'
		splt_smpl_unl_1  = 'mag'
		plt_nme_prp_1    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_4)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_4)
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'mag$_{i}$'
		var_prp_hdr_1    = 'magi'#'SAS'
		xticks_values    = np.arange(-100,100,0.25)
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]				
	elif int_typ_spl_1 == 'phi' and n_int_spt_1 == 0:# in specfile_glx:
		splt_smpl_sfx_f1 = 'PHI'
		splt_smpl_sfx_1  = '-phi'
		splt_smpl_unt_1  = 'deg'
		splt_smpl_unl_1  = 'deg'
		plt_nme_prp_1    = 'PHI'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv)
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr_1    = 'PHI'#'SAS'
		xticks_values    = np.arange(-10,100,10) #xticks_values  = [0,100]
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'phi'  and n_int_spt_1 == 2:# in specfile_glx:
		splt_smpl_sfx_f1 = 'PHI'
		splt_smpl_sfx_1  = '-phi'
		splt_smpl_unt_1  = 'deg'
		splt_smpl_unl_1  = 'deg'
		plt_nme_prp_1    = 'PHI'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv_23_2)			
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr_1    = 'PHI'#'SAS'
		xticks_values    = np.arange(-10,100,10) #xticks_values  = [0,100]
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'phi'  and n_int_spt_1 == 3:# in specfile_glx:
		splt_smpl_sfx_f1 = 'PHI'
		splt_smpl_sfx_1  = '-phi'
		splt_smpl_unt_1  = 'deg'
		splt_smpl_unl_1  = 'deg'
		plt_nme_prp_1    = 'PHI'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv_23_3)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv_23_3)			
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr_1    = 'PHI'#'SAS'
		xticks_values    = np.arange(-10,100,10) #xticks_values  = [0,100]
		yticks_values    = np.arange(0,30,.1)  #[0.1,0.5,1,3]	
	elif int_typ_spl_1 == 'icl_fg' and n_int_spt_1 == 0:# in specfile_glx:
		splt_smpl_sfx_f1 = 'q_F'
		splt_smpl_sfx_1  = '-icl'
		splt_smpl_unt_1  = 'deg'
		splt_smpl_unl_1  = 'deg'
		plt_nme_prp_1    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv)
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$q$'
		var_prp_hdr_1    = 'q'#'SAS'
		xticks_values    = np.arange(-1,1,0.1)
		yticks_values    = np.arange(0,30,.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'icl_fg' and n_int_spt_1 == 2:# in specfile_glx:
		splt_smpl_sfx_f1 = 'q_F'
		splt_smpl_sfx_1  = '-icl'
		splt_smpl_unt_1  = 'deg'
		splt_smpl_unl_1  = 'deg'
		plt_nme_prp_1    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_23_itv_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_23_itv_2)
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$q$'
		var_prp_hdr_1    = 'q'#'SAS'
		xticks_values    = np.arange(-1,1,0.1)
		yticks_values    = np.arange(0,30,.5)  #[0.1,0.5,1,3]	
	elif int_typ_spl_1 == 'icl_fg' and n_int_spt_1 == 3:# in specfile_glx:
		splt_smpl_sfx_f1 = 'q_F'
		splt_smpl_sfx_1  = '-icl'
		splt_smpl_unt_1  = 'deg'
		splt_smpl_unl_1  = 'deg'
		plt_nme_prp_1    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_23_itv_3)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_23_itv_3)
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$q$'
		var_prp_hdr_1    = 'q'#'SAS'
		xticks_values    = np.arange(-1,1,0.1)
		yticks_values    = np.arange(0,30,.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'icl_fg' and n_int_spt_1 == 4:# in specfile_glx:
		splt_smpl_sfx_f1 = 'q_F'
		splt_smpl_sfx_1  = '-icl'
		splt_smpl_unt_1  = 'deg'
		splt_smpl_unl_1  = 'deg'
		plt_nme_prp_1    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_23_itv_4)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_23_itv_4)			
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$q$'
		var_prp_hdr_1    = 'q'#'SAS'
		xticks_values    = np.arange(-1,1,0.1)
		yticks_values    = np.arange(0,30,.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'n_sersic_fg' and n_int_spt_1 == 0:# in specfile_glx:
		splt_smpl_sfx_f1 = 'n_F'
		splt_smpl_sfx_1  = '-n_srs'
		splt_smpl_unt_1  = 'n'
		splt_smpl_unl_1  = 'n'
		plt_nme_prp_1    = 'n_srs'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,n_srs_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,n_srs_itv)
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = 'n'
		var_prp_hdr_1    = 'nsr'#'SAS'
		xticks_values    = np.arange(-1,3,0.25)
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'n_sersic_fg'  and n_int_spt_1 == 2:# in specfile_glx:
		splt_smpl_sfx_f1 = 'n_F'
		splt_smpl_sfx_1  = '-n_srs'
		splt_smpl_unt_1  = 'n'
		splt_smpl_unl_1  = 'n'
		plt_nme_prp_1    = 'n_srs'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,n_srs_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,n_srs_itv_23_2)			
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = 'n'
		var_prp_hdr_1    = 'nsr'#'SAS'
		xticks_values    = np.arange(-1,3,0.25)
		yticks_values    = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'r_eff_fg' and n_int_spt_1 == 0:# in specfile_glx:
		splt_smpl_sfx_f1 = 're_F'
		splt_smpl_sfx_1  = '-r_eff'
		splt_smpl_unt_1  = 'arcsec'
		splt_smpl_unl_1  = 'arcsec'
		plt_nme_prp_1    = 'r_eff'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv)
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]  
		xlabel_1         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr_1    = 'ref'#'SAS'
		xticks_values    = np.arange(-1,50,0.5)
		yticks_values    = np.arange(0,30,.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'r_eff_fg'  and n_int_spt_1 == 2:# in specfile_glx:
		splt_smpl_sfx_f1 = 're_F'
		splt_smpl_sfx_1  = '-r_eff'
		splt_smpl_unt_1  = 'arcsec'
		splt_smpl_unl_1  = 'arcsec'
		plt_nme_prp_1    = 'r_eff'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv_23_2)			
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr_1    = 'ref'#'SAS'
		xticks_values    = np.arange(-1,50,0.5)
		yticks_values    = np.arange(0,30,.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'r_eff_fg'  and n_int_spt_1 == 3:# in specfile_glx:
		splt_smpl_sfx_f1 = 're_F'
		splt_smpl_sfx_1  = '-r_eff'
		splt_smpl_unt_1  = 'arcsec'
		splt_smpl_unl_1  = 'arcsec'
		plt_nme_prp_1    = 'r_eff'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv_23_3)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv_23_3)			
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr_1    = 'ref'#'SAS'
		xticks_values    = np.arange(-1,50,0.5)
		yticks_values    = np.arange(0,30,.5)  #[0.1,0.5,1,3]						
	else:
		print
		print (colored('Such combination (1st-split) does not exist!','yellow'))
		print (colored('Variable: '+str(int_typ_spl_1)+', # bins: '+str(n_int_spt_1),'yellow'))
		print
		quit()

	####

	if int_typ_spl_2 == 'kpc'  and n_int_spt_2 == 0:#in specfile_glx_f:
		splt_smpl_sfx_f2= 'kpc_F'
		splt_smpl_sfx_2 = '_kpc' 
		splt_smpl_unt_2 = 'kpc'
		splt_smpl_unl_2 = 'kpc'
		plt_nme_prp_2   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv)				
		slc_int_fg_2    = slc_kpc_int_fg[1]
		slc_int_bg_2    = slc_kpc_int_bg[1]		
		xlabel_2        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_2   = 'SKP'
	elif int_typ_spl_2 == 'kpc'  and n_int_spt_2 == 1:#in specfile_glx_f:
		splt_smpl_sfx_f2= 'kpc_F'
		splt_smpl_sfx_2 = '_kpc' 
		splt_smpl_unt_2 = 'kpc'
		splt_smpl_unl_2 = 'kpc'
		plt_nme_prp_2   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_1)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_1)				
		slc_int_fg_2    = slc_kpc_int_fg[1]
		slc_int_bg_2    = slc_kpc_int_bg[1]
		xlabel_2        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_2   = 'SKP'
	elif int_typ_spl_2 == 'kpc'  and n_int_spt_2 == 2:#in specfile_glx_f:
		splt_smpl_sfx_f2= 'kpc_F'
		splt_smpl_sfx_2 = '_kpc' 
		splt_smpl_unt_2 = 'kpc'
		splt_smpl_unl_2 = 'kpc'
		plt_nme_prp_2   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_2)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_2)				
		slc_int_fg_2    = slc_kpc_int_fg[1]
		slc_int_bg_2    = slc_kpc_int_bg[1]
		xlabel_2        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_2   = 'SKP'
	elif int_typ_spl_2 == 'kpc'  and n_int_spt_2 == 3:#in specfile_glx_f:
		splt_smpl_sfx_f2= 'kpc_F'
		splt_smpl_sfx_2 = '_kpc' 
		splt_smpl_unt_2 = 'kpc'
		splt_smpl_unl_2 = 'kpc'
		plt_nme_prp_2   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_3)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_3)				
		slc_int_fg_2    = slc_kpc_int_fg[1]
		slc_int_bg_2    = slc_kpc_int_bg[1]
		xlabel_2        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_2   = 'SKP'
	elif int_typ_spl_2 == 'kpc'  and n_int_spt_2 == 4:#in specfile_glx_f:
		splt_smpl_sfx_f2= 'kpc_F'
		splt_smpl_sfx_2 = '_kpc' 
		splt_smpl_unt_2 = 'kpc'
		splt_smpl_unl_2 = 'kpc'
		plt_nme_prp_2   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_4)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_4)				
		slc_int_fg_2    = slc_kpc_int_fg[1]
		slc_int_bg_2    = slc_kpc_int_bg[1]
		xlabel_2        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_2   = 'SKP'
	elif int_typ_spl_2 == 'mass' and n_int_spt_2 == 0:# in specfile_glx_f:
		splt_smpl_sfx_f2= 'mass_F'
		splt_smpl_sfx_2 = '-mass'
		splt_smpl_unt_2 = 'log[M/M$_{\odot}$]'
		splt_smpl_unl_2 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_2   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23)				
		slc_int_fg_2    = slc_mss_int_fg[1]
		slc_int_bg_2    = slc_mss_int_bg[1]
		xlabel_2        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_2   = 'MSF'
	elif int_typ_spl_2 == 'mass' and n_int_spt_2 == 1:# in specfile_glx_f:
		splt_smpl_sfx_f2= 'mass_F'
		splt_smpl_sfx_2 = '-mass'
		splt_smpl_unt_2 = 'log[M/M$_{\odot}$]'
		splt_smpl_unl_2 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_2   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_1)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_1)				
		slc_int_fg_2    = slc_mss_int_fg[1]
		slc_int_bg_2    = slc_mss_int_bg[1]
		xlabel_2        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_2   = 'MSF'
	elif int_typ_spl_2 == 'mass' and n_int_spt_2 == 2:# in specfile_glx_f:
		splt_smpl_sfx_f2= 'mass_F'
		splt_smpl_sfx_2 = '-mass'
		splt_smpl_unt_2 = 'log[M/M$_{\odot}$]'
		splt_smpl_unl_2 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_2   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_2)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_2)				
		slc_int_fg_2    = slc_mss_int_fg[1]
		slc_int_bg_2    = slc_mss_int_bg[1]
		xlabel_2        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_2   = 'MSF'
	elif int_typ_spl_2 == 'mass' and n_int_spt_2 == 3:# in specfile_glx_f:
		splt_smpl_sfx_f2= 'mass_F'
		splt_smpl_sfx_2 = '-mass'
		splt_smpl_unt_2 = 'log[M/M$_{\odot}$]'
		splt_smpl_unl_2 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_2   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_3)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_3)				
		slc_int_fg_2    = slc_mss_int_fg[1]
		slc_int_bg_2    = slc_mss_int_bg[1]
		xlabel_2        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_2   = 'MSF'
	elif int_typ_spl_2 == 'mass' and n_int_spt_2 == 4:# in specfile_glx_f:
		splt_smpl_sfx_f2= 'mass_F'
		splt_smpl_sfx_2 = '-mass'
		splt_smpl_unt_2 = 'log[M/M$_{\odot}$]'
		splt_smpl_unl_2 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_2   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_4)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_4)				
		slc_int_fg_2    = slc_mss_int_fg[1]
		slc_int_bg_2    = slc_mss_int_bg[1]
		xlabel_2        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_2   = 'MSF'
	elif int_typ_spl_2 == 'Age'  and n_int_spt_2 == 0:#in specfile_glx_f:
		splt_smpl_sfx_f2 = '-Age_F'
		splt_smpl_sfx_2  = '-Age' 
		splt_smpl_unt_2  = 'Age'
		splt_smpl_unl_2  = 'Age'
		plt_nme_prp_2    = 'Age'
		slc_age_int_fg_0 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv)
		slc_age_int_bg_0 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv)
		slc_int_fg_2     = slc_age_int_fg_0[1]
		slc_int_bg_2     = slc_age_int_bg_0[1]
		xlabel_2         = 'Age'
		var_prp_hdr_2    = 'AGF'
	elif int_typ_spl_2 == 'Age'  and n_int_spt_2 == 1:#in specfile_glx_f:
		splt_smpl_sfx_f2 = '-Age_F'
		splt_smpl_sfx_2  = '-Age' 
		splt_smpl_unt_2  = 'Age'
		splt_smpl_unl_2  = 'Age'
		plt_nme_prp_2    = 'Age'
		slc_age_int_fg_1 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_1)
		slc_age_int_bg_1 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_1)
		slc_int_fg_2     = slc_age_int_fg_1[1]
		slc_int_bg_2     = slc_age_int_bg_1[1]
		xlabel_2         = 'Age'
		var_prp_hdr_2    = 'AGF'
	elif int_typ_spl_2 == 'Age'  and n_int_spt_2 == 2:#in specfile_glx_f:
		splt_smpl_sfx_f2 = '-Age_F'
		splt_smpl_sfx_2  = '-Age' 
		splt_smpl_unt_2  = 'Age'
		splt_smpl_unl_2  = 'Age'
		plt_nme_prp_2    = 'Age'
		slc_age_int_fg_2 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_2)
		slc_age_int_bg_2 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_2)
		slc_int_fg_2     = slc_age_int_fg_2[1]
		slc_int_bg_2     = slc_age_int_bg_2[1]
		xlabel_2         = 'Age'
		var_prp_hdr_2    = 'AGF'
	elif int_typ_spl_2 == 'Age'  and n_int_spt_2 == 3:#in specfile_glx_f:
		splt_smpl_sfx_f2 = '-Age_F'
		splt_smpl_sfx_2  = '-Age' 
		splt_smpl_unt_2  = 'Age'
		splt_smpl_unl_2  = 'Age'
		plt_nme_prp_2    = 'Age'
		slc_age_int_fg_3 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_3)
		slc_age_int_bg_3 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_3)
		slc_int_fg_2     = slc_age_int_fg_3[1]
		slc_int_bg_2     = slc_age_int_bg_3[1]
		xlabel_2         = 'Age'
		var_prp_hdr_2    = 'AGF'
	elif int_typ_spl_2 == 'Age'  and n_int_spt_2 == 4:#in specfile_glx_f:
		splt_smpl_sfx_f2 = '-Age_F'
		splt_smpl_sfx_2  = '-Age' 
		splt_smpl_unt_2  = 'Age'
		splt_smpl_unl_2  = 'Age'
		plt_nme_prp_2    = 'Age'
		slc_age_int_fg_4 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_4)
		slc_age_int_bg_4 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_4)
		slc_int_fg_2     = slc_age_int_fg_4[1]
		slc_int_bg_2     = slc_age_int_bg_4[1]
		xlabel_2         = 'Age'
		var_prp_hdr_2    = 'AGF'
	elif int_typ_spl_2 == 'SFR'  and n_int_spt_2 == 0:#in specfile_glx_f:
		splt_smpl_sfx_f2 = 'SFR_F'
		splt_smpl_sfx_2  = '-SFR' 
		splt_smpl_unt_2  = 'M$_{\odot}$yr$^{-1}$' 
		splt_smpl_unl_2  = 'SFR' 
		plt_nme_prp_2    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv)
		slc_int_fg_2     = slc_sfr_int_fg[1]
		slc_int_bg_2     = slc_sfr_int_bg[1]
		xlabel_2         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_2    = 'SFF'
	elif int_typ_spl_2 == 'SFR'  and n_int_spt_2 == 1:#in specfile_glx_f:
		splt_smpl_sfx_f2 = 'SFR_F'
		splt_smpl_sfx_2  = '-SFR' 
		splt_smpl_unt_2  = 'M$_{\odot}$yr$^{-1}$' 
		splt_smpl_unl_2  = 'SFR' 
		plt_nme_prp_2    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_1)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_1)
		slc_int_fg_2     = slc_sfr_int_fg[1]
		slc_int_bg_2     = slc_sfr_int_bg[1]
		xlabel_2         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_2    = 'SFF'
	elif int_typ_spl_2 == 'SFR'  and n_int_spt_2 == 2:#in specfile_glx_f:
		splt_smpl_sfx_f2 = 'SFR_F'
		splt_smpl_sfx_2  = '-SFR' 
		splt_smpl_unt_2  = 'M$_{\odot}$yr$^{-1}$' 
		splt_smpl_unl_2  = 'SFR' 
		plt_nme_prp_2    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_2)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_2)
		slc_int_fg_2     = slc_sfr_int_fg[1]
		slc_int_bg_2     = slc_sfr_int_bg[1]
		xlabel_2         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_2    = 'SFF'
	elif int_typ_spl_2 == 'SFR'  and n_int_spt_2 == 3:#in specfile_glx_f:
		splt_smpl_sfx_f2 = 'SFR_F'
		splt_smpl_sfx_2  = '-SFR' 
		splt_smpl_unt_2  = 'M$_{\odot}$yr$^{-1}$' 
		splt_smpl_unl_2  = 'SFR' 
		plt_nme_prp_2    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_3)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_3)
		slc_int_fg_2     = slc_sfr_int_fg[1]
		slc_int_bg_2     = slc_sfr_int_bg[1]
		xlabel_2         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_2    = 'SFF'
	elif int_typ_spl_2 == 'SFR'  and n_int_spt_2 == 4:#in specfile_glx_f:
		splt_smpl_sfx_f2 = 'SFR_F'
		splt_smpl_sfx_2  = '-SFR' 
		splt_smpl_unt_2  = 'M$_{\odot}$yr$^{-1}$' 
		splt_smpl_unl_2  = 'SFR' 
		plt_nme_prp_2    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_4)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_4)
		slc_int_fg_2     = slc_sfr_int_fg[1]
		slc_int_bg_2     = slc_sfr_int_bg[1]
		xlabel_2         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_2    = 'SFF'
	elif int_typ_spl_2 == 'sSFR' and n_int_spt_2 == 0:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'sSFR_F'
		splt_smpl_sfx_2  = '-sSFR'
		splt_smpl_unt_2  = 'sSFR'
		splt_smpl_unl_2  = 'sSFR'
		plt_nme_prp_2    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv)
		slc_int_fg_2     = slc_ssf_int_fg[1]
		slc_int_bg_2     = slc_ssf_int_bg[1]
		xlabel_2         = 'sSFR [Gyr]'
		var_prp_hdr_2    = 'sSF'
	elif int_typ_spl_2 == 'sSFR' and n_int_spt_2 == 1:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'sSFR_F'
		splt_smpl_sfx_2  = '-sSFR'
		splt_smpl_unt_2  = 'sSFR'
		splt_smpl_unl_2  = 'sSFR'
		plt_nme_prp_2    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_1)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_1)
		slc_int_fg_2     = slc_ssf_int_fg[1]
		slc_int_bg_2     = slc_ssf_int_bg[1]
		xlabel_2         = 'sSFR [Gyr]'
		var_prp_hdr_2    = 'sSF'
	elif int_typ_spl_2 == 'sSFR' and n_int_spt_2 == 2:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'sSFR_F'
		splt_smpl_sfx_2  = '-sSFR'
		splt_smpl_unt_2  = 'sSFR'
		splt_smpl_unl_2  = 'sSFR'
		plt_nme_prp_2    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_2)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_2)
		slc_int_fg_2     = slc_ssf_int_fg[1]
		slc_int_bg_2     = slc_ssf_int_bg[1]
		xlabel_2         = 'sSFR [Gyr]'
		var_prp_hdr_2    = 'sSF'
	elif int_typ_spl_2 == 'sSFR' and n_int_spt_2 == 3:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'sSFR_F'
		splt_smpl_sfx_2  = '-sSFR'
		splt_smpl_unt_2  = 'sSFR'
		splt_smpl_unl_2  = 'sSFR'
		plt_nme_prp_2    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_3)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_3)
		slc_int_fg_2     = slc_ssf_int_fg[1]
		slc_int_bg_2     = slc_ssf_int_bg[1]
		xlabel_2         = 'sSFR [Gyr]'
		var_prp_hdr_2    = 'sSF'
	elif int_typ_spl_2 == 'sSFR' and n_int_spt_2 == 4:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'sSFR_F'
		splt_smpl_sfx_2  = '-sSFR'
		splt_smpl_unt_2  = 'sSFR'
		splt_smpl_unl_2  = 'sSFR'
		plt_nme_prp_2    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_4)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_4)
		slc_int_fg_2     = slc_ssf_int_fg[1]
		slc_int_bg_2     = slc_ssf_int_bg[1]
		xlabel_2         = 'sSFR [Gyr]'
		var_prp_hdr_2    = 'sSF'
	elif int_typ_spl_2 == 'Lnuv' and n_int_spt_2 == 0:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'Lnuv_F'
		splt_smpl_sfx_2  = '-Lnuv'
		splt_smpl_unt_2  = 'ergs cm$^{-2}$ s$^{-1}$'
		splt_smpl_unl_2  = 'Lnuv'
		plt_nme_prp_2    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv)
		slc_int_fg_2     = slc_luv_int_fg[1]
		slc_int_bg_2     = slc_luv_int_bg[1]
		xlabel_2         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_2    = 'UVF'
	elif int_typ_spl_2 == 'Lnuv' and n_int_spt_2 == 1:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'Lnuv_F'
		splt_smpl_sfx_2  = '-Lnuv'
		splt_smpl_unt_2  = 'ergs cm$^{-2}$ s$^{-1}$'
		splt_smpl_unl_2  = 'Lnuv'
		plt_nme_prp_2    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_1)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_1)
		slc_int_fg_2     = slc_luv_int_fg[1]
		slc_int_bg_2     = slc_luv_int_bg[1]
		xlabel_2         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_2    = 'UVF'
	elif int_typ_spl_2 == 'Lnuv' and n_int_spt_2 == 2:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'Lnuv_F'
		splt_smpl_sfx_2  = '-Lnuv'
		splt_smpl_unt_2  = 'ergs cm$^{-2}$ s$^{-1}$'
		splt_smpl_unl_2  = 'Lnuv'
		plt_nme_prp_2    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_2)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_2)
		slc_int_fg_2     = slc_luv_int_fg[1]
		slc_int_bg_2     = slc_luv_int_bg[1]
		xlabel_2         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_2    = 'UVF'
	elif int_typ_spl_2 == 'Lnuv' and n_int_spt_2 == 3:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'Lnuv_F'
		splt_smpl_sfx_2  = '-Lnuv'
		splt_smpl_unt_2  = 'ergs cm$^{-2}$ s$^{-1}$'
		splt_smpl_unl_2  = 'Lnuv'
		plt_nme_prp_2    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_3)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_3)
		slc_int_fg_2     = slc_luv_int_fg[1]
		slc_int_bg_2     = slc_luv_int_bg[1]
		xlabel_2         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_2    = 'UVF'
	elif int_typ_spl_2 == 'Lnuv' and n_int_spt_2 == 4:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'Lnuv_F'
		splt_smpl_sfx_2  = '-Lnuv'
		splt_smpl_unt_2  = 'ergs cm$^{-2}$ s$^{-1}$'
		splt_smpl_unl_2  = 'Lnuv'
		plt_nme_prp_2    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_4)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_4)
		slc_int_fg_2     = slc_luv_int_fg[1]
		slc_int_bg_2     = slc_luv_int_bg[1]
		xlabel_2         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_2    = 'UVF'
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 0:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = 'arcsec'
		splt_smpl_unl_2  = 'arcsec'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 1:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = 'arcsec'
		splt_smpl_unl_2  = 'arcsec'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_1[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_1[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 2:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = 'arcsec'
		splt_smpl_unl_2  = 'arcsec'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_2[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_2[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 3:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = 'arcsec'
		splt_smpl_unl_2  = 'arcsec'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_3[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_3[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 4:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = 'arcsec'
		splt_smpl_unl_2  = 'arcsec'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_4[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_4[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 5:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = 'arcsec'
		splt_smpl_unl_2  = 'arcsec'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_5[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_5[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 6:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = 'arcsec'
		splt_smpl_unl_2  = 'arcsec'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_6[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_6[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
	elif int_typ_spl_2 == 'magi' and n_int_spt_2 == 0:# in specfile_glx:
		splt_smpl_sfx_f2 = 'magi_F'
		splt_smpl_sfx_2  = '_magi'
		splt_smpl_unt_2  = 'arcsec'
		splt_smpl_unl_2  = 'arcsec'
		plt_nme_prp_2    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv)
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'mag$_{i}$'
		var_prp_hdr_2    = 'magi'#'SAS'
	elif int_typ_spl_2 == 'magi' and n_int_spt_2 == 1:# in specfile_glx:
		splt_smpl_sfx_f2 = 'magi_F'
		splt_smpl_sfx_2  = '_magi'
		splt_smpl_unt_2  = 'mag'
		splt_smpl_unl_2  = 'mag'
		plt_nme_prp_2    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv)
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'mag$_{i}$'
		var_prp_hdr_2    = 'magi'#'SAS'
	elif int_typ_spl_2 == 'magi' and n_int_spt_2 == 2:# in specfile_glx:
		splt_smpl_sfx_f2 = 'magi_F'
		splt_smpl_sfx_2  = '_magi'
		splt_smpl_unt_2  = 'mag'
		splt_smpl_unl_2  = 'mag'
		plt_nme_prp_2    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_2)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_2)
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'mag$_{i}$'
		var_prp_hdr_2    = 'magi'#'SAS'
	elif int_typ_spl_2 == 'magi' and n_int_spt_2 == 3:# in specfile_glx:
		splt_smpl_sfx_f2 = 'magi_F'
		splt_smpl_sfx_2  = '_magi'
		splt_smpl_unt_2  = 'mag'
		splt_smpl_unl_2  = 'mag'
		plt_nme_prp_2    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_3)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_3)
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'mag$_{i}$'
		var_prp_hdr_2    = 'magi'#'SAS'
	elif int_typ_spl_2 == 'magi' and n_int_spt_2 == 4:# in specfile_glx:
		splt_smpl_sfx_f2 = 'magi_F'
		splt_smpl_sfx_2  = '_magi'
		splt_smpl_unt_2  = 'mag'
		splt_smpl_unl_2  = 'mag'
		plt_nme_prp_2    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_4)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_4)
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'mag$_{i}$'
		var_prp_hdr_2    = 'magi'#'SAS'
	elif int_typ_spl_2 == 'phi' and n_int_spt_2 == 0:# in specfile_glx:
		splt_smpl_sfx_f2 = 'PHI'
		splt_smpl_sfx_2  = '-phi'
		splt_smpl_unt_2  = 'deg'
		splt_smpl_unl_2  = 'deg'
		plt_nme_prp_2    = 'PHI'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv)
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr_2    = 'PHI'#'SAS'
	elif int_typ_spl_2 == 'phi'  and n_int_spt_2 == 2:# in specfile_glx:
		splt_smpl_sfx_f2 = 'PHI'
		splt_smpl_sfx_2  = '-phi'
		splt_smpl_unt_2  = 'deg'
		splt_smpl_unl_2  = 'deg'
		plt_nme_prp_2    = 'PHI'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv_23_2)			
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr_2    = 'PHI'#'SAS'
	elif int_typ_spl_2 == 'phi'  and n_int_spt_2 == 3:# in specfile_glx:
		splt_smpl_sfx_f2 = 'PHI'
		splt_smpl_sfx_2  = '-phi'
		splt_smpl_unt_2  = 'deg'
		splt_smpl_unl_2  = 'deg'
		plt_nme_prp_2    = 'PHI'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv_23_3)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv_23_3)			
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr_2    = 'PHI'#'SAS'
	elif int_typ_spl_2 == 'icl_fg' and n_int_spt_2 == 0:# in specfile_glx:
		splt_smpl_sfx_f2 = 'q_F'
		splt_smpl_sfx_2  = '-icl'
		splt_smpl_unt_2  = 'deg'
		splt_smpl_unl_2  = 'deg'
		plt_nme_prp_2    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv)
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$q$'
		var_prp_hdr_2    = 'q'#'SAS'
	elif int_typ_spl_2 == 'icl_fg' and n_int_spt_2 == 2:# in specfile_glx:
		splt_smpl_sfx_f2 = 'q_F'
		splt_smpl_sfx_2  = '-icl'
		splt_smpl_unt_2  = 'deg'
		splt_smpl_unl_2  = 'deg'
		plt_nme_prp_2    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv_23_2)
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$q$'
		var_prp_hdr_2    = 'q'#'SAS'
	elif int_typ_spl_2 == 'icl_fg' and n_int_spt_2 == 3:# in specfile_glx:
		splt_smpl_sfx_f2 = 'q_F'
		splt_smpl_sfx_2  = '-icl'
		splt_smpl_unt_2  = 'deg'
		splt_smpl_unl_2  = 'deg'
		plt_nme_prp_2    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv_23_3)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv_23_3)
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$q$'
		var_prp_hdr_2    = 'q'#'SAS'
	elif int_typ_spl_2 == 'icl_fg' and n_int_spt_2 == 4:# in specfile_glx:
		splt_smpl_sfx_f2 = 'q_F'
		splt_smpl_sfx_2  = '-icl'
		splt_smpl_unt_2  = 'deg'
		splt_smpl_unl_2  = 'deg'
		plt_nme_prp_2    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv_23_4)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv_23_4)			
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$q$'
		var_prp_hdr_2    = 'q'#'SAS'
	elif int_typ_spl_2 == 'n_sersic_fg' and n_int_spt_2 == 0:# in specfile_glx:
		splt_smpl_sfx_f2 = 'n_F'
		splt_smpl_sfx_2  = '-n_srs'
		splt_smpl_unt_2  = 'n'
		splt_smpl_unl_2  = 'n'
		plt_nme_prp_2    = 'n_srs'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,n_srs_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,n_srs_itv)
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = 'n'
		var_prp_hdr_2    = 'nsr'#'SAS'
	elif int_typ_spl_2 == 'n_sersic_fg'  and n_int_spt_2 == 2:# in specfile_glx:
		splt_smpl_sfx_f2 = 'n_F'
		splt_smpl_sfx_2  = '-n_srs'
		splt_smpl_unt_2  = 'n'
		splt_smpl_unl_2  = 'n'
		plt_nme_prp_2    = 'n_srs'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,n_srs_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,n_srs_itv_23_2)			
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = 'n'
		var_prp_hdr_2    = 'nsr'#'SAS'
	elif int_typ_spl_2 == 'r_eff_fg' and n_int_spt_2 == 0:# in specfile_glx:
		splt_smpl_sfx_f2 = 're_F'
		splt_smpl_sfx_2  = '-r_eff'
		splt_smpl_unt_2  = 'arcsec'
		splt_smpl_unl_2  = 'arcsec'
		plt_nme_prp_2    = 'r_eff'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv)
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]  
		xlabel_2         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr_2    = 'ref'#'SAS'
	elif int_typ_spl_2 == 'r_eff_fg'  and n_int_spt_2 == 2:# in specfile_glx:
		splt_smpl_sfx_f2 = 're_F'
		splt_smpl_sfx_2  = '-r_eff'
		splt_smpl_unt_2  = 'arcsec'
		splt_smpl_unl_2  = 'arcsec'
		plt_nme_prp_2    = 'r_eff'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv_23_2)			
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr_2    = 'ref'#'SAS'
	elif int_typ_spl_2 == 'r_eff_fg'  and n_int_spt_2 == 3:# in specfile_glx:
		splt_smpl_sfx_f2 = 're_F'
		splt_smpl_sfx_2  = '-r_eff'
		splt_smpl_unt_2  = 'arcsec'
		splt_smpl_unl_2  = 'arcsec'
		plt_nme_prp_2    = 'r_eff'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv_23_3)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv_23_3)			
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr_2    = 'ref'#'SAS'
	else:
		print
		print (colored('Such combination (2nd-split) does not exist!','yellow'))
		print (colored('Variable: '+str(int_typ_spl_2)+', # bins: '+str(n_int_spt_2),'yellow'))
		print
		quit()
	##########


	############################################
	############################################
	############################################

	int_typ_spl_1 = kwargs.get('int_typ_spl_1',None)
	int_typ_spl_2 = kwargs.get('int_typ_spl_2',None)
	n_int_spt_1   = kwargs.get('n_int_spt_1',None)
	n_int_spt_2   = kwargs.get('n_int_spt_2',None)

	specfile_glx = (Mltp_Spec_Files_2b_Plot[0].rsplit('/',1)[1]).split(int_typ_spl_2,1)[0] + splt_smpl_sfx_f2 + '-'#int_typ_spl_2
	print specfile_glx
	print
	print Mltp_Spec_Files_2b_Plot[0]
	print
	print Mltp_Spec_Files_2b_Plot
	print
	FILES =[]
	for interval_range in range(lower_shift_2,len(slc_int_bg_2)-upper_shift_2):
		FILES.append(res_stk_res + specfile_glx + str(slc_int_fg_2[interval_range]) + '-stk'+stk_function+'.fits')
	print '***'
	print FILES
	print '***'

	if 'Fg' in specfile_glx:
		glx_type = 'Fg'
		clr_plt  = 'red'
	elif 'Bg' in specfile_glx:
		glx_type = 'Bg'
		clr_plt  = 'blue'

	LINES_NEW = np.asarray(LINES[0][:]*(1+z_glx_Ps))
	INDXS_NEW = np.where(np.logical_and(LINES_NEW>=lmb_min, LINES_NEW<=lmb_max))
	LENIN_NEW  =len(INDXS_NEW[0])

	if LENIN_NEW == 1:
		#LENIN_NEW = 2
		nmb_cols  = 2
		empty_plots = 1
	else:
		pass
		print
		print len(INDXS_NEW[0]),LENIN_NEW,empty_plots
		print len(INDXS_NEW[0]) / 1,empty_plots
		print len(INDXS_NEW[0]) / 1==empty_plots
		print len(INDXS_NEW[0]) / 1!=empty_plots
		print
		if lbl_col_idv == True:
			i=1
			while (LENIN_NEW / i) != empty_plots:
				print 'while',i, (len(INDXS_NEW[0]) / i )
				i +=1
			nmb_cols = i
		elif lbl_col_idv == False:
			nmb_cols = 4
			nmb_cols   = kwargs.get('nmb_cols',4)	
		print
		print 'end-while',i, (len(INDXS_NEW[0]) / i )
		print

	nmb_rows = LENIN_NEW/nmb_cols
	nmb_rows = int(np.ceil(float(LENIN_NEW)/float(nmb_cols)))
	print
	print colored('Number of cols & rows : ' + str(nmb_cols)+','+str(nmb_rows),'yellow')
	print colored('Total number of panels: ' + str(nmb_cols*nmb_rows),'yellow')
	print colored('Total number of lines : ' + str(len(INDXS_NEW[0])),'yellow')
	print colored('Total empty panels    : ' + str(abs(len(INDXS_NEW[0])-nmb_cols*nmb_rows)),'yellow')
	print colored('Total empty plots     : ' + str(empty_plots),'yellow')
	print	

	if landscape_plt == True:
		fxsize=11*1.5            #16 *nmb_cols
		fysize=8#*nmb_rows       #16 *nmb_rows
	else:
		fysize=11*1.5            #16 *nmb_cols
		fxsize=8#*nmb_rows       #16 *nmb_rows
	
	f = plt.figure(num=None, figsize=(fxsize, fysize), dpi=180, facecolor='w',
		edgecolor='k')
	plt.subplots_adjust(
		left 	= (34/25.4)/fxsize,     #22-def --> 26 bigger
		bottom 	= (26/25.4)/fysize,     #19-def --> 20 bigger
		right 	= 1 - (8/25.4)/fxsize,  # 2-def --> 6  bigger
		top 	= 1 - (4/25.4)/fysize)  # 4-def --> 8  bigger
	plt.subplots_adjust(hspace=0.18,wspace=0.30)

	f.add_subplot(111, frameon=False)
	#plt.frameon=False
	plt.tick_params(labelcolor='none', top=False, bottom=False, left=False, right=False)
	plt.xlabel('$\lambda$'  ,labelpad=25,fontsize=38, family = 'serif', ha='center')
	plt.ylabel('F$_\lambda$',labelpad=50,fontsize=38, family = 'serif', va='center', rotation='vertical')

	gs0 = gridspec.GridSpec(nmb_rows,nmb_cols)
	MSK_NTMS     = 2.5
	MSK_NTMS_PLT = 1.5


	#f.text(0.50, 0.04, '$\lambda$'  ,fontsize=48, ha='center')
	#f.text(0.04, 0.50, 'F$_\lambda$',fontsize=48, va='center', rotation='vertical')
	if 'Bg' in specfile_glx:
		colors = "bgrcmykw"
	elif 'Fg' in specfile_glx:
		colors = "rgbcmykw"

	print [slc_int_fg_2[interval_range] for interval_range in range(lower_shift_2,len(slc_int_bg_2)-upper_shift_2)]

	if lbl_col_idv == True or (lbl_col_idv == False and nmb_cols==2):
		pass
		ax110 = plt.Subplot(f, gs0[-empty_plots])
		f.add_subplot(ax110)
		ax110.axis('off')
		#ax110.set_frame_on(False)
		#xticklabels = ax110.get_xticklabels()
		#yticklabels = ax110.get_yticklabels()		
		#plt.setp(xticklabels, visible=False,family='serif')
		#plt.setp(yticklabels, visible=False,family='serif')
		print [ax110.annotate('['+str(slc_int_fg_2[interval_range] + '] ' + splt_smpl_unl_2), (0.20, 0.8 - (subsmpl*0.15)),xytext=((0.3, 0.8 - (subsmpl*0.15))),arrowprops=dict(arrowstyle = '-',fc=colors[subsmpl],ec=colors[subsmpl],relpos=(0.5, 0.5),lw=2.5),xycoords='axes fraction', family='serif', fontsize=18, va='center') for subsmpl,interval_range in enumerate(range(lower_shift_2,len(slc_int_bg_2)-upper_shift_2))]
		#print [f.text(0.60+(subsmpl*0.1), 0.02, '   - ' + '['+str(slc_int_fg [interval_range] + '] $^{\\prime\\prime}$')  ,fontsize=24, ha='left',color=colors[subsmpl]) for subsmpl,interval_range in enumerate(range(lower_shift,len(slc_int_bg)-upper_shift))]
	elif (lbl_col_idv == False and nmb_cols>2):
		print [f.text(0.60+(subsmpl*0.1), 0.02, '   - ' + '['+str(slc_int_fg_2[interval_range] + '] '+ splt_smpl_unl_2)  ,fontsize=24, ha='left',color=colors[subsmpl]) for subsmpl,interval_range in enumerate(range(lower_shift_2,len(slc_int_bg_2)-upper_shift_2))]
	#quit()
	
	for j,lines in enumerate(INDXS_NEW[0]):
		min_y_ind_spec = []
		max_y_ind_spec = []		
		print
		print colored('Line: ','yellow')
		print colored(LINES[4][lines]+' '+str(LINES[0][lines]),'yellow')
		print
		lmb_min_lim_line_ft = LINES[0][lines] - MSK_NTMS*LINES[1][lines]
		lmb_max_lim_line_ft = LINES[0][lines] + MSK_NTMS*LINES[1][lines]

		lmb_min_lim_line = LINES[0][lines]*(1+z_glx_Ps) - MSK_NTMS_PLT*LINES[2][lines]
		lmb_max_lim_line = LINES[0][lines]*(1+z_glx_Ps) + MSK_NTMS_PLT*LINES[2][lines]

		#gs11 = gridspec.GridSpecFromSubplotSpec(4, 1, subplot_spec=gs0[0])
		
		ax110 = plt.Subplot(f, gs0[j])
		f.add_subplot(ax110)

		ax110.set_rasterization_zorder(1)
		plt.autoscale(enable=True, axis='both', tight=False)
		plt.autoscale(enable=True, axis='y', tight=True)
		#ax110.set_title(PLOT_TITLE)
		xticklabels = ax110.get_xticklabels()
		plt.setp(xticklabels, visible=True,family='serif')
		yticklabels = ax110.get_yticklabels()
		plt.setp(yticklabels, visible=True,family='serif')
		ax110.yaxis.set_tick_params(which='both',labelsize=18,direction='in',color='black',bottom=True,top=True,left=True,right=True)
		ax110.xaxis.set_tick_params(which='both',labelsize=18,direction='in',color='black',bottom=True,top=True,left=True,right=True)

		#minorLocator_x   = plt.MultipleLocator(5)
		#majorLocator_x   = plt.MultipleLocator(10)
		###minorLocator_y   = plt.MultipleLocator(0.1)
		###majorLocator_y   = plt.MultipleLocator(0.5)
		#ax110.xaxis.set_minor_locator(minorLocator_x)
		#ax110.xaxis.set_major_locator(majorLocator_x)
		##ax110.yaxis.set_minor_locator(minorLocator_y)
		##ax110.yaxis.set_major_locator(majorLocator_y)
		plt.tick_params(which='both', width=0.7)
		plt.tick_params(which='major', length=5)
		plt.tick_params(which='minor', length=2)
		ax110.minorticks_on()

		ax110.yaxis.set_major_formatter(mticker.FormatStrFormatter('%.2f'))

		#plt.xlabel('$\lambda$',fontsize=28, family = 'serif')
		#plt.ylabel('F$_\lambda$ (ergs/sec/cm$^{2}/\AA$)',fontsize=28, family = 'serif')
		#plt.ylabel('F$_\lambda$',fontsize=28, family = 'serif')

		#######################################################DIF-SEPARATIONS#######################################################
		if 'Bg' in specfile_glx:
			colors = "bgrcmykw"
		elif 'Fg' in specfile_glx:
			colors = "rgbcmykw"
		for index,specfile_glx in enumerate(FILES):
			print
			print specfile_glx
			print
			glx = Spectra_x_y(specfile_glx)
			lambda_glx,inten_glx,crval_glx,cdel1_glx,cd1_glx = glx[0], glx[1], glx[2], glx[3], glx[4]
			stk_glx_nmb = Header_Get(specfile_glx,'STK_NUM')
			########################################################LINE-FIT#######################################################
			if 'DblF' in LINES[3][lines] and fit_fnct=='gauss' and fit_lne == True:
				fit_typ = 'G'
				#GAUSSIAN FIT
				MSK_NTMS=2.5
				print 
				print colored('Double Line Fit (Ind)','yellow')
				print LINES[3][lines-1], LINES[0][lines-1] , LINES[1][lines-1]
				print LINES[3][lines]  , LINES[0][lines]   , LINES[1][lines]
				print LINES[3][lines-2], LINES[0][lines-2] , LINES[1][lines-2]

				# Now to fit the data create a new superposition with initial
				# guesses for the parameters:
				lmb_min_lim_line_ft_1 = LINES[0][lines-1] - MSK_NTMS*LINES[1][lines-1]
				lmb_max_lim_line_ft_1 = LINES[0][lines-1] + MSK_NTMS*LINES[1][lines-1]

				lmb_min_lim_line_ft_2 = LINES[0][lines-2] - MSK_NTMS*LINES[1][lines-2]
				lmb_max_lim_line_ft_2 = LINES[0][lines-2] + MSK_NTMS*LINES[1][lines-2]

				lmb_min_lim_line_ft_D = LINES[0][lines] - MSK_NTMS*LINES[1][lines]
				lmb_max_lim_line_ft_D = LINES[0][lines] + MSK_NTMS*LINES[1][lines]

				lmb_min_lim_line_1    = LINES[0][lines-1]*(1+z_glx_Ps) - LINES[2][lines-1]#- 20#LINES[2][lines] - 10
				lmb_max_lim_line_1    = LINES[0][lines-1]*(1+z_glx_Ps) + LINES[2][lines-1]#+ 20#LINES[2][lines] + 10

				lmb_min_lim_line_2    = LINES[0][lines-2]*(1+z_glx_Ps) - LINES[2][lines-2]#- 20#LINES[2][lines] - 10
				lmb_max_lim_line_2    = LINES[0][lines-2]*(1+z_glx_Ps) + LINES[2][lines-2]#+ 20#LINES[2][lines] + 10

				lmb_min_lim_line_D    = LINES[0][lines]*(1+z_glx_Ps) - LINES[2][lines]#- 20#LINES[2][lines] - 10
				lmb_max_lim_line_D    = LINES[0][lines]*(1+z_glx_Ps) + LINES[2][lines]#+ 20#LINES[2][lines] + 10

				lmb_min_lim_line_ft   = lmb_min_lim_line_ft_D
				lmb_max_lim_line_ft   = lmb_max_lim_line_ft_D

				mask_pl_1             = (lambda_glx >= lmb_min_lim_line_1)    & (lambda_glx <= lmb_max_lim_line_1)
				mask_ft_1             = (lambda_glx >= lmb_min_lim_line_ft_1) & (lambda_glx <= lmb_max_lim_line_ft_1)

				mask_pl_2             = (lambda_glx >= lmb_min_lim_line_2)    & (lambda_glx <= lmb_max_lim_line_2)
				mask_ft_2             = (lambda_glx >= lmb_min_lim_line_ft_2) & (lambda_glx <= lmb_max_lim_line_ft_2)

				mask_pl_D             = (lambda_glx >= lmb_min_lim_line_D)    & (lambda_glx <= lmb_max_lim_line_D)
				mask_ft_D             = (lambda_glx >= lmb_min_lim_line_ft_D) & (lambda_glx <= lmb_max_lim_line_ft_D)

				X0_f2DG_1             = LINES[0][lines-1]
				SIGMA_f2DG_1          = LINES[1][lines-1]
				A_f2DG_1              = -(1-(min(inten_glx[mask_ft_1])))

				X0_f2DG_2             = LINES[0][lines-2]
				SIGMA_f2DG_2          = LINES[1][lines-2]
				A_f2DG_2              = -(1-(min(inten_glx[mask_ft_2])))

				initial_guess_O_D     = (X0_f2DG_1,A_f2DG_1,SIGMA_f2DG_1,
										X0_f2DG_2,A_f2DG_2,SIGMA_f2DG_2,max(inten_glx[mask_ft_D])-1)
				initial_guess_0_D     = (X0_f2DG_1,A_f2DG_1,SIGMA_f2DG_1,
										X0_f2DG_2,A_f2DG_2,SIGMA_f2DG_2)
				try:
					popt_0_D, pcov_0_D  = opt.curve_fit(func_2_1D_Gaussian, lambda_glx[mask_ft_D],inten_glx[mask_ft_D], 
											p0=initial_guess_0_D,
											bounds=([
														X0_f2DG_1-(X0_f2DG_1*LINES[7][lines]),A_f2DG_1-0.001,-np.inf,
														X0_f2DG_2-(X0_f2DG_2*LINES[7][lines]),A_f2DG_2-0.001,-np.inf
													], #[lmb_min_lim_line,A_f2DG-0.001,-np.inf],
													[
														X0_f2DG_1+(X0_f2DG_1*LINES[7][lines]),A_f2DG_1      , np.inf,
														X0_f2DG_2+(X0_f2DG_2*LINES[7][lines]),A_f2DG_2      , np.inf
													]))#[lmb_max_lim_line,A_f2DG      ,np.inf]))
					data_fitted_0_D = func_2_1D_Gaussian((lambda_glx[mask_ft_D]), *popt_0_D)

					CTRE_G_0_D_1    = popt_0_D[0]
					AMPL_G_0_D_1    = popt_0_D[1]
					SGMA_G_0_D_1    = popt_0_D[2]

					CTRE_G_0_D_2    = popt_0_D[3]
					AMPL_G_0_D_2    = popt_0_D[4]
					SGMA_G_0_D_2    = popt_0_D[5]
					FWHM_G_0_D_1    = lw_sgma2fwhm(popt_0_D[2])
					FWHM_G_0_D_2    = lw_sgma2fwhm(popt_0_D[5])
					W_0_D           = 99#integrate.quad(lambda x: popt_0_D[1]*np.exp(-((x)**2)/(2*popt_0_D[2]**2)), -np.inf, np.inf)
					EW_0_D          = 99#np.round(abs(np.asarray(W_0_D[0])),3)
					EWE_0_D         = 99#np.round(abs(np.asarray(W_0_D[1])),10)
					#logger.error("Gaussian fit OK         : "+str(LINES[4][lines] + ' ' + str(LINES[3][lines]) ))
				except (RuntimeError,ValueError):
					#print RuntimeError
					popt_0_D            = [
											999999.99999,999999.99999,999999.99999,
											999999.99999,999999.99999,999999.99999]
					pcov_0_D            = [						
											999999.99999,999999.99999,999999.99999,
											999999.99999,999999.99999,999999.99999]
					perr_0_D            = [
											999999.99999,999999.99999,999999.99999,
											999999.99999,999999.99999,999999.99999]
					CTRE_G_0_D_1        = 999999.99999
					AMPL_G_0_D_1        = 999999.99999
					SGMA_G_0_D_1        = 999999.99999
					CTRE_G_0_D_2        = 999999.99999
					AMPL_G_0_D_2        = 999999.99999
					SGMA_G_0_D_2        = 999999.99999

					FWHM_G_0_D_1        = 999999.99999
					FWHM_G_0_D_2        = 999999.99999
					EW_0_D              = 999999.99999
					EWE_0_D             = 999999.99999
					#logger.error("Error in Gaussian fit   : "+str(LINES[4][lines] + ' ' + str(LINES[3][lines]) ))
				#Header_Add(specfile_glx,str(LINES[5][lines])+'_CGF0',float(CTRE_G_0_D) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct')
				#Header_Add(specfile_glx,str(LINES[5][lines])+'_AGF0',float(AMPL_G_0_D) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct')
				#Header_Add(specfile_glx,str(LINES[5][lines])+'_FGF0',float(FWHM_G_0_D) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct')
				#Header_Add(specfile_glx,str(LINES[5][lines])+'_WGF0',float(EW_0_D)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct')
				#Header_Add(specfile_glx,str(LINES[5][lines])+'_EGF0',float(EWE_0_D)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct')

				try:
					popt_O_D, pcov_O_D  = opt.curve_fit(func_2_1D_Gaussian_O, lambda_glx[mask_ft_D],inten_glx[mask_ft_D], 
											p0=initial_guess_O_D,
											bounds=([
														X0_f2DG_1-(X0_f2DG_1*LINES[7][lines]),A_f2DG_1-0.001,-np.inf,-np.inf,
														X0_f2DG_2-(X0_f2DG_2*LINES[7][lines]),A_f2DG_2-0.001,-np.inf,-np.inf
													], #[lmb_min_lim_line,A_f2DG-0.001,-np.inf],
													[
														X0_f2DG_1+(X0_f2DG_1*LINES[7][lines]),A_f2DG_1      , np.inf, np.inf,
														X0_f2DG_2+(X0_f2DG_2*LINES[7][lines]),A_f2DG_2      , np.inf, np.inf
															]))#[lmb_max_lim_line,A_f2DG      ,np.inf]))

					perr_O_D        = np.sqrt(np.diag(pcov_O_D))		
					data_fitted_O_D = func_2_1D_Gaussian_O((lambda_glx[mask_ft_D]), *popt_O_D)

					CTRE_G_O_D_1    = popt_O_D[0]
					AMPL_G_O_D_1    = popt_O_D[1]
					SGMA_G_O_D_1    = popt_O_D[2]
					CTRE_G_O_D_2    = popt_O_D[3]
					AMPL_G_O_D_2    = popt_O_D[4]
					SGMA_G_O_D_2    = popt_O_D[5]
					OFST_G_O_D      = popt_O_D[6]
					FWHM_G_O_D_1    = lw_sgma2fwhm(popt_O_D[2])
					FWHM_G_O_D_2    = lw_sgma2fwhm(popt_O_D[5])
					W_O_D           = 99#integrate.quad(lambda x: popt_O_D[1]*np.exp(-((x)**2)/(2*popt_O_D[2]**2)), -np.inf, np.inf)
					EW_O_D          = 99#np.round(abs(np.asarray(W_O_D[0])),3)
					EWE_O_D         = 99#np.round(abs(np.asarray(W_O_D[1])),10)

					#inten_glx[mask_ft] = inten_glx[mask_ft] - popt_O[3]
					inten_glx[mask_ft_D] = inten_glx[mask_ft_D] - popt_O_D[3]
					A_f2DG_1             = -(1-(min(inten_glx[mask_ft_D])))
					initial_guess_C_D    = (X0_f2DG_1,A_f2DG_1,SIGMA_f2DG_1)#,max(inten_glx[mask_ft_D])-1)
					popt_C_D, pcov_C_D   = opt.curve_fit(func_2_1D_Gaussian, lambda_glx[mask_ft_D],inten_glx[mask_ft_D], 
											p0=initial_guess_C_D,
											bounds=([
														X0_f2DG_1-(X0_f2DG_1*LINES[7][lines]),A_f2DG_1-0.001,-np.inf,
														X0_f2DG_2-(X0_f2DG_2*LINES[7][lines]),A_f2DG_2-0.001,-np.inf
														], #[lmb_min_lim_line,A_f2DG-0.001,-np.inf],
													[
														X0_f2DG_1+(X0_f2DG_1*LINES[7][lines]),A_f2DG_1      , np.inf,
														X0_f2DG_2+(X0_f2DG_2*LINES[7][lines]),A_f2DG_2      , np.inf
													]))#[lmb_max_lim_line,A_f2DG      ,np.inf]))
					data_fitted_C_D      = func_2_1D_Gaussian((lambda_glx[mask_ft_D]), *popt_C_D)

					CTRE_G_C_D_1    = popt_C_D[0]
					AMPL_G_C_D_1    = popt_C_D[1]
					SGMA_G_C_D_1    = popt_C_D[2]
					CTRE_G_C_D_2    = popt_C_D[3]
					AMPL_G_C_D_2    = popt_C_D[4]
					SGMA_G_C_D_2    = popt_C_D[5]
					FWHM_G_C_D      = 99#lw_sgma2fwhm(popt_C_D[2])
					W_C_D           = 99#integrate.quad(lambda x: popt_C_D[1]*np.exp(-((x)**2)/(2*popt_C_D[2]**2)), -np.inf, np.inf)
					EW_C_D          = 99#np.round(abs(np.asarray(W_C_D[0])),3)
					EWE_C_D         = 99#np.round(abs(np.asarray(W_C_D[1])),10)

					print
					print 'Initial 1 (0,O,C):'
					print colored(initial_guess_0_D,'green')
					print colored(initial_guess_O_D,'green')
					print colored(initial_guess_C_D,'green')
					#logger.error("Gaussian fit OK         : "+str(LINES[4][lines] + ' ' + str(LINES[3][lines]) ))
				except (RuntimeError,ValueError):
					#print RuntimeError
					popt_C_D            =  [
											999999.99999,999999.99999,999999.99999,
											999999.99999,999999.99999,999999.99999
											]
					pcov_C_D            =  [
											999999.99999,999999.99999,999999.99999,
											999999.99999,999999.99999,999999.99999
											]
					perr_C_D           =  [
											999999.99999,999999.99999,999999.99999,
											999999.99999,999999.99999,999999.99999
											]
					CTRE_G_C_D_1       = 999999.99999
					AMPL_G_C_D_1       = 999999.99999
					SGMA_G_C_D_1       = 999999.99999
					CTRE_G_C_D_2       = 999999.99999
					AMPL_G_C_D_2       = 999999.99999
					SGMA_G_C_D_2       = 999999.99999

					FWHM_G_C_D         = 999999.99999
					EW_C_D             = 999999.99999
					EWE_C_D            = 999999.99999
					popt_O_D           = [
											999999.99999,999999.99999,999999.99999,999999.99999,
											999999.99999,999999.99999,999999.99999,999999.99999
											]
					pcov_O_D           = [
											999999.99999,999999.99999,999999.99999,999999.99999,
											999999.99999,999999.99999,999999.99999,999999.99999
											]
					perr_O_D           = [
											999999.99999,999999.99999,999999.99999,999999.99999,
											999999.99999,999999.99999,999999.99999,999999.99999
											]
					CTRE_G_O_D_1       = 999999.99999
					AMPL_G_O_D_1       = 999999.99999
					SGMA_G_O_D_1       = 999999.99999
					CTRE_G_O_D_2       = 999999.99999
					AMPL_G_O_D_2       = 999999.99999
					SGMA_G_O_D_2       = 999999.99999
					FWHM_G_O_D         = 999999.99999
					EW_O_D             = 999999.99999
					EWE_O_D            = 999999.99999
					#logger.error("Error in Gaussian fit   : "+str(LINES[4][lines] + ' ' + str(LINES[3][lines]) ))
				print
				print 'Fit 1 (O,C):'
				print colored(popt_0_D,'magenta')
				print colored(popt_O_D,'magenta')
				print colored(popt_C_D,'magenta')

				#Header_Add(specfile_glx,str(LINES[5][lines])+'_CGFO',float(CTRE_G_O_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Offst')
				#Header_Add(specfile_glx,str(LINES[5][lines])+'_AGFO',float(AMPL_G_O_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Offst')
				#Header_Add(specfile_glx,str(LINES[5][lines])+'_FGFO',float(FWHM_G_O_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Offst')
				#Header_Add(specfile_glx,str(LINES[5][lines])+'_WGFO',float(EW_O_1)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Offst')
				#Header_Add(specfile_glx,str(LINES[5][lines])+'_EGFO',float(EWE_O_1)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Offst')

				#Header_Add(specfile_glx,str(LINES[5][lines])+'_CGFC',float(CTRE_G_C_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct')
				#Header_Add(specfile_glx,str(LINES[5][lines])+'_AGFC',float(AMPL_G_C_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct')
				#Header_Add(specfile_glx,str(LINES[5][lines])+'_FGFC',float(FWHM_G_C_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct')
				#Header_Add(specfile_glx,str(LINES[5][lines])+'_WGFC',float(EW_C_1)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct')
				#Header_Add(specfile_glx,str(LINES[5][lines])+'_EGFC',float(EWE_C_1)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct')

				#print colored(specfile_glx,'green')
			elif 'DblF' not in LINES[3][lines] and fit_fnct=='gauss'   and fit_type == 'scipy' and fit_lne == True:
				fit_typ = 'G'
				#GAUSSIAN FIT
				MSK_NTMS=2.5
				print
				print colored('1D Gaussian Fit Mode Choosen: scipy (Offset)','cyan')
				print

				lmb_min_lim_line_ft = (LINES[0][lines]-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line_ft = (LINES[0][lines]+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]

				###################################
				#############ORGINAL###############
				###################################
				#lmb_min_lim_line    = (LINES[0][lines]-LINES[8][lines])*(1+z_glx_Ps) - LINES[2][lines]#- 20#LINES[2][lines] - 10
				#lmb_max_lim_line    = (LINES[0][lines]+LINES[8][lines])*(1+z_glx_Ps) + LINES[2][lines]#+ 20#LINES[2][lines] + 10
				###################################
				#############ORGINAL###############
				###################################

				lmb_min_lim_line    = (LINES[0][lines]-LINES[8][lines])*(1+z_glx_Ps) - MSK_NTMS*LINES[2][lines]#- 20#LINES[2][lines] - 10
				lmb_max_lim_line    = (LINES[0][lines]+LINES[8][lines])*(1+z_glx_Ps) + MSK_NTMS*LINES[2][lines]#+ 20#LINES[2][lines] + 10

				mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
				mask_ft    = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
				label_glx  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] + ' ' + stk_function

				X0_f2DG    = (LINES[0][lines]+LINES[8][lines])
				SIGMA_f2DG = LINES[1][lines]
				A_f2DG     = -(1-(min(inten_glx[mask_ft])))

				max_val    = -(1-min(inten_glx[mask_ft]))
				lambda_max = (lambda_glx[np.where(inten_glx==min(inten_glx[mask_ft]))[0]][0])

				#plt.step(lambda_glx[mask_pl], inten_glx[mask_pl],
						#colors[index],
						#where='mid',lw=1.0,alpha=0.5,linestyle=':',color='gray',
						#label='Original Spectrum')

				initial_guess_O   = (X0_f2DG,A_f2DG,SIGMA_f2DG,max(inten_glx[mask_ft])-1)
				initial_guess_0   = (X0_f2DG,A_f2DG,SIGMA_f2DG)
				try:
					popt_0, pcov_0    = opt.curve_fit(func_1D_Gaussian, lambda_glx[mask_ft],inten_glx[mask_ft], 
												p0=initial_guess_0,
												#bounds=([X0_f2DG-(X0_f2DG*LINES[7][lines]),A_f2DG-0.001,-np.inf], #[lmb_min_lim_line,A_f2DG-0.001,-np.inf],
														#[X0_f2DG+(X0_f2DG*LINES[7][lines]),A_f2DG      , np.inf]))#[lmb_max_lim_line,A_f2DG      ,np.inf]))
												bounds=([X0_f2DG-(X0_f2DG*LINES[7][lines]),A_f2DG  - (A_f2DG*LINES[10][lines]),-np.inf], #[lmb_min_lim_line,A_f2DG-0.001,-np.inf],
														[X0_f2DG+(X0_f2DG*LINES[7][lines]),A_f2DG  + (A_f2DG*LINES[10][lines]), np.inf]))#[lmb_max_lim_line,A_f2DG      ,np.inf]))

					perr_0             = np.sqrt(np.diag(pcov_0))
					data_fitted_0      = func_1D_Gaussian((lambda_glx[mask_ft]), *popt_0)
					CTRE_G_0           = popt_0[0]
					AMPL_G_0           = popt_0[1]
					SGMA_G_0           = popt_0[2]
					FWHM_G_0           = lw_sgma2fwhm(popt_0[2])
					CTRE_G_0_E         = perr_0[0]
					AMPL_G_0_E         = perr_0[1]
					SGMA_G_0_E         = perr_0[2]
					W_0                = integrate.quad(lambda x: popt_0[1]*np.exp(-((x)**2)/(2*popt_0[2]**2)), -np.inf, np.inf)
					EW_0               = np.round(abs(np.asarray(W_0[0])),3)
					EWE_0              = np.round(abs(np.asarray(W_0[1])),10)
					#print colored('OK 0 fit','cyan')
				except (RuntimeError,ValueError):
					popt_0, pcov_0     = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
					perr_0             = [999999.99999,999999.99999,999999.99999]
					CTRE_G_0           = 999999.99999
					AMPL_G_0           = 999999.99999
					SGMA_G_0           = 999999.99999
					FWHM_G_0           = 999999.99999
					CTRE_G_0_E         = perr_0[0]
					AMPL_G_0_E         = perr_0[1]
					SGMA_G_0_E         = perr_0[2]
					EW_0               = 999999.99999
					EWE_0              = 999999.99999

				Header_Add(specfile_glx,str(LINES[5][lines])+'_CGF0',float(CTRE_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct')
				Header_Add(specfile_glx,str(LINES[5][lines])+'_AGF0',float(AMPL_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct')
				Header_Add(specfile_glx,str(LINES[5][lines])+'_FGF0',float(FWHM_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct')
				Header_Add(specfile_glx,str(LINES[5][lines])+'_WGF0',float(EW_0)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct')
				Header_Add(specfile_glx,str(LINES[5][lines])+'_EGF0',float(EWE_0)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct')

				try:
					popt_O, pcov_O     = opt.curve_fit(func_1D_Gaussian_O, lambda_glx[mask_ft],inten_glx[mask_ft],
											p0=initial_guess_O,
											#bounds=([X0_f2DG-(X0_f2DG*LINES[7][lines]),A_f2DG-0.001,-np.inf,-np.inf], #[lmb_min_lim_line,A_f2DG-0.001,-np.inf],
													#[X0_f2DG+(X0_f2DG*LINES[7][lines]),A_f2DG      , np.inf, np.inf]))#[lmb_max_lim_line,A_f2DG      ,np.inf]))
											bounds=([X0_f2DG-(X0_f2DG*LINES[7][lines]),A_f2DG  - (A_f2DG*LINES[10][lines]),-np.inf], #[lmb_min_lim_line,A_f2DG-0.001,-np.inf],
													[X0_f2DG+(X0_f2DG*LINES[7][lines]),A_f2DG  + (A_f2DG*LINES[10][lines]), np.inf]))#[lmb_max_lim_line,A_f2DG      ,np.inf]))

					perr_O             = np.sqrt(np.diag(pcov_O))
					data_fitted_O      = func_1D_Gaussian_O((lambda_glx[mask_ft]), *popt_O)

					CTRE_G_O           = popt_O[0]
					AMPL_G_O           = popt_O[1]
					SGMA_G_O           = popt_O[2]
					OFST_G_O           = popt_O[3]
					FWHM_G_O           = lw_sgma2fwhm(popt_O[2])
					CTRE_G_O_E         = perr_O[0]
					AMPL_G_O_E         = perr_O[1]
					SGMA_G_O_E         = perr_O[2]
					OFST_G_O_E         = perr_O[3]
					W_O                = integrate.quad(lambda x: popt_O[1]*np.exp(-((x)**2)/(2*popt_O[2]**2)), -np.inf, np.inf)
					EW_O               = np.round(abs(np.asarray(W_O[0])),3)
					EWE_O              = np.round(abs(np.asarray(W_O[1])),10)

					inten_glx[mask_ft] = inten_glx[mask_ft] - popt_O[3]
					A_f2DG             = -(1-(min(inten_glx[mask_ft])))
					initial_guess_C    = (X0_f2DG,A_f2DG,SIGMA_f2DG)#,max(inten_glx[mask_ft])-1)
					popt_C, pcov_C     = opt.curve_fit(func_1D_Gaussian, lambda_glx[mask_ft],inten_glx[mask_ft], p0=initial_guess_C,
														#bounds=([X0_f2DG-(X0_f2DG*LINES[7][lines]),A_f2DG-0.001,-np.inf], #[lmb_min_lim_line,A_f2DG-0.001,-np.inf],
																#[X0_f2DG+(X0_f2DG*LINES[7][lines]),A_f2DG      , np.inf]))#[lmb_max_lim_line,A_f2DG      ,np.inf]))
														bounds=([X0_f2DG-(X0_f2DG*LINES[7][lines]),A_f2DG  - (A_f2DG*LINES[10][lines]),-np.inf], #[lmb_min_lim_line,A_f2DG-0.001,-np.inf],
																[X0_f2DG+(X0_f2DG*LINES[7][lines]),A_f2DG  + (A_f2DG*LINES[10][lines]), np.inf]))#[lmb_max_lim_line,A_f2DG      ,np.inf]))

					perr_C             = np.sqrt(np.diag(pcov_C))		
					data_fitted_C      = func_1D_Gaussian((lambda_glx[mask_ft]), *popt_C)
					CTRE_G_C           = popt_C[0]
					AMPL_G_C           = popt_C[1]
					SGMA_G_C           = abs(popt_C[2])
					FWHM_G_C           = lw_sgma2fwhm(popt_C[2])
					CTRE_G_C_E         = perr_C[0]
					AMPL_G_C_E         = perr_C[1]
					SGMA_G_C_E         = perr_C[2]
					W_C                = integrate.quad(lambda x: popt_C[1]*np.exp(-((x)**2)/(2*popt_C[2]**2)), -np.inf, np.inf)
					EW_C               = np.round(abs(np.asarray(W_C[0])),3)
					EWE_C              = np.round(abs(np.asarray(W_C[1])),10)
					
					AMPL_SNR           = AMPL_G_C
					CTRE_SNR           = CTRE_G_C
					SGMA_SNR           = abs(SGMA_G_C)
					#print colored('OK O C fit','cyan')
				except (RuntimeError,ValueError):
					print colored('RuntimeError','cyan')
					popt_C, pcov_C     = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
					perr_C             = [999999.99999,999999.99999,999999.99999]
					CTRE_G_C           = 999999.99999
					AMPL_G_C           = 999999.99999
					SGMA_G_C           = 999999.99999
					FWHM_G_C           = 999999.99999
					CTRE_G_C_E         = 999999.99999
					AMPL_G_C_E         = 999999.99999
					SGMA_G_C_E         = 999999.99999
					EW_C               = 999999.99999
					EWE_C              = 999999.99999

					popt_O, pcov_O     = [999999.99999,999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999,999999.99999]
					perr_O             = [999999.99999,999999.99999,999999.99999,999999.99999]
					CTRE_G_O           = 999999.99999
					AMPL_G_O           = 999999.99999
					SGMA_G_O           = 999999.99999
					OFST_G_O           = 999999.99999
					FWHM_G_O           = 999999.99999
					CTRE_G_O_E         = 999999.99999
					AMPL_G_O_E         = 999999.99999
					SGMA_G_O_E         = 999999.99999
					OFST_G_O_E         = 999999.99999
					EW_O               = 999999.99999
					EWE_O              = 999999.99999

					AMPL_SNR           = 999999.99999
					CTRE_SNR           = 999999.99999
					SGMA_SNR           = 999999.99999				
					#logger.error("Error in Gaussian fit   : "+str(LINES[4][lines] + ' ' + str(LINES[3][lines]) ))
				######################CHI-2######################
				data_fitted_C    = func_1D_Gaussian((lambda_glx[mask_pl]), *popt_C)
				g_exp_mxr        = data_fitted_C
				g_obs_mxr        = (lambda_glx[mask_pl])

				if Cube2bPlot_1D_Err == None:
					FLX_ERR_STD   = np.std(inten_glx[mask_pl])
					chisqr_C      = sum((g_obs_mxr-g_exp_mxr)**2/(FLX_ERR_STD**2))#*(1/float(len(XAXIS)-1))
					redchi_C      = chisqr_C/float(len(g_exp_mxr)-1)
				elif Cube2bPlot_1D_Err != None:
					chisqr_C      = sum((g_obs_mxr-g_exp_mxr)**2/(FLX_ERR_STD**2))#*(1/float(len(XAXIS)-1))
					redchi_C      = chisqr_C/float(len(g_exp_mxr)-1)
				######################CHI-2######################
				Header_Add(specfile_glx,'BSF_FCT',str(fit_fnct)                       ,header_comment = 'Fit function')
				Header_Add(specfile_glx,'BSF_MTH',str(fit_type)                       ,header_comment = 'Fit method')
				Header_Add(specfile_glx,str(LINES[5][lines])+'_CGAO',float(CTRE_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Offst' + str(fit_type))
				Header_Add(specfile_glx,str(LINES[5][lines])+'_AGAO',float(AMPL_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Offst' + str(fit_type))
				Header_Add(specfile_glx,str(LINES[5][lines])+'_FGAO',float(FWHM_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Offst' + str(fit_type))
				Header_Add(specfile_glx,str(LINES[5][lines])+'_WGAO',float(EW_O)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Offst' + str(fit_type))
				Header_Add(specfile_glx,str(LINES[5][lines])+'_EGAO',float(EWE_O)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Offst' + str(fit_type))

				Header_Add(specfile_glx,str(LINES[5][lines])+'_CGAC',float(CTRE_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct' + str(fit_type))
				Header_Add(specfile_glx,str(LINES[5][lines])+'_AGAC',float(AMPL_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct' + str(fit_type))
				Header_Add(specfile_glx,str(LINES[5][lines])+'_SGAC',float(SGMA_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Sigm 1GF Crct' + str(fit_type))
				Header_Add(specfile_glx,str(LINES[5][lines])+'_FGAC',float(FWHM_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct' + str(fit_type))
				Header_Add(specfile_glx,str(LINES[5][lines])+'_WGAC',float(EW_C)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct' + str(fit_type))
				Header_Add(specfile_glx,str(LINES[5][lines])+'_EGAC',float(EWE_C)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct' + str(fit_type))

				Header_Add(specfile_glx,str(LINES[5][lines])+'_CAEC',float(CTRE_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  err 1GF Crct' + str(fit_type))
				Header_Add(specfile_glx,str(LINES[5][lines])+'_AAEC',float(AMPL_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  err 1GF Crct' + str(fit_type))
				Header_Add(specfile_glx,str(LINES[5][lines])+'_SAEC',float(SGMA_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Sigm err 1GF Crct' + str(fit_type))

				Header_Add(specfile_glx,str(LINES[5][lines])+'_CHGA',float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Chi2 1GF' + str(fit_type))
				Header_Add(specfile_glx,str(LINES[5][lines])+'_CRGA',float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Chi2 Reduced 1GF' + str(fit_type))
			elif 'DblF' not in LINES[3][lines] and fit_fnct=='gauss'   and fit_type == 'lmfit' and fit_lne == True:
				fit_typ = 'G'
				#GAUSSIAN FIT
				MSK_NTMS=2.5
				print
				print colored('1D Gaussian Fit Mode Choosen: Lmfit (Offset)','cyan')
				print
				from lmfit import Model

				lmb_min_lim_line_ft = (LINES[0][lines]-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line_ft = (LINES[0][lines]+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]

				###################################
				#############ORGINAL###############
				###################################
				#lmb_min_lim_line    = (LINES[0][lines]-LINES[8][lines])*(1+z_glx_Ps) - LINES[2][lines]#- 20#LINES[2][lines] - 10
				#lmb_max_lim_line    = (LINES[0][lines]+LINES[8][lines])*(1+z_glx_Ps) + LINES[2][lines]#+ 20#LINES[2][lines] + 10
				###################################
				#############ORGINAL###############
				###################################

				lmb_min_lim_line    = (LINES[0][lines]-LINES[8][lines])*(1+z_glx_Ps) - MSK_NTMS*LINES[2][lines]#- 20#LINES[2][lines] - 10
				lmb_max_lim_line    = (LINES[0][lines]+LINES[8][lines])*(1+z_glx_Ps) + MSK_NTMS*LINES[2][lines]#+ 20#LINES[2][lines] + 10

				mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
				mask_ft    = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
				label_glx  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] + ' ' + stk_function

				X0_f2DG    = (LINES[0][lines]+LINES[8][lines])
				SIGMA_f2DG = LINES[1][lines]
				A_f2DG     = -(1-(min(inten_glx[mask_ft])))

				max_val    = -(1-min(inten_glx[mask_ft]))
				lambda_max = (lambda_glx[np.where(inten_glx==min(inten_glx[mask_ft]))[0]][0])					

				if pre_off_plt == True:
					plt.step(lambda_glx[mask_pl], inten_glx[mask_pl],
							where='mid',lw=1.0,alpha=0.5,linestyle=':',color='gray',
							label='Original Spectrum')
				elif pre_off_plt == False:
					pass

				initial_guess_O   = (X0_f2DG,A_f2DG,SIGMA_f2DG,max(inten_glx[mask_ft])-1)
				initial_guess_0   = (X0_f2DG,A_f2DG,SIGMA_f2DG)
				try:
					gmodel_0           = Model(func_1D_Gaussian)
					gmodel_0.set_param_hint('X_0'  , value=X0_f2DG   , min=X0_f2DG-(X0_f2DG*LINES[7][lines]), max=X0_f2DG+(X0_f2DG*LINES[7][lines]))
					#gmodel_0.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
					gmodel_0.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG  - (A_f2DG*LINES[10][lines]) , max=A_f2DG  + (A_f2DG*LINES[10][lines]))#min=A_f2DG-0.001, max=A_f2DG)
					gmodel_0.set_param_hint('SIGMA', value=SIGMA_f2DG)
					pars_0             = gmodel_0.make_params()							
					result_0           = gmodel_0.fit(inten_glx[mask_ft],pars_0,
											X=lambda_glx[mask_ft],
											X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,
											nan_policy = 'omit')
					CTRE_G_0           = result_0.params['X_0'].value
					AMPL_G_0           = result_0.params['A'].value
					SGMA_G_0           = abs(result_0.params['SIGMA'].value)
					FWHM_G_0           = lw_sgma2fwhm(SGMA_G_0)
					W_0                = integrate.quad(lambda x: AMPL_G_0*np.exp(-((x)**2)/(2*SGMA_G_0**2)), -np.inf, np.inf)
					EW_0               = np.round(abs(np.asarray(W_0[0])),3)
					EWE_0              = np.round(abs(np.asarray(W_0[1])),10)
					data_fitted_0      = func_1D_Gaussian((lambda_glx[mask_ft]), CTRE_G_0,AMPL_G_0,SGMA_G_0)

					CTRE_G_0_E         = result_0.params['X_0'].stderr
					AMPL_G_0_E         = result_0.params['A'].stderr
					SGMA_G_0_E         = result_0.params['SIGMA'].stderr

					CTRE_G_0_cor       = result_0.params['X_0'].correl
					AMPL_G_0_cor       = result_0.params['A'].correl
					SGMA_G_0_cor       = result_0.params['SIGMA'].correl

					chisqr_0           = result_0.chisqr
					redchi_0           = result_0.redchi

				except (RuntimeError,ValueError):
					popt_0, pcov_0     = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
					perr_0             = [999999.99999,999999.99999,999999.99999]
					CTRE_G_0           = 999999.99999
					AMPL_G_0           = 999999.99999
					SGMA_G_0           = 999999.99999
					FWHM_G_0           = 999999.99999
					EW_0               = 999999.99999
					EWE_0              = 999999.99999

					CTRE_G_0_E         = 999999.99999
					AMPL_G_0_E         = 999999.99999
					SGMA_G_0_E         = 999999.99999

					CTRE_G_0_cor       = 999999.99999
					AMPL_G_0_cor       = 999999.99999
					SGMA_G_0_cor       = 999999.99999

					chisqr_0           = 999999.99999
					redchi_0           = 999999.99999

				Header_Add(specfile_glx,str(LINES[5][lines])+'_CGF0',float(CTRE_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct')
				Header_Add(specfile_glx,str(LINES[5][lines])+'_AGF0',float(AMPL_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct')
				Header_Add(specfile_glx,str(LINES[5][lines])+'_FGF0',float(FWHM_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct')
				Header_Add(specfile_glx,str(LINES[5][lines])+'_WGF0',float(EW_0)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct')
				Header_Add(specfile_glx,str(LINES[5][lines])+'_EGF0',float(EWE_0)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct')
				try:
					gmodel_O           = Model(func_1D_Gaussian_O)
					gmodel_O.set_param_hint('X_0'   , value=X0_f2DG   , min=X0_f2DG-(X0_f2DG*LINES[7][lines]), max=X0_f2DG+(X0_f2DG*LINES[7][lines]))
					#gmodel_O.set_param_hint('A'     , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
					gmodel_O.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG  - (A_f2DG*LINES[10][lines]) , max=A_f2DG  + (A_f2DG*LINES[10][lines]))#min=A_f2DG-0.001, max=A_f2DG)
					gmodel_O.set_param_hint('SIGMA' , value=SIGMA_f2DG)
					gmodel_O.set_param_hint('OFFSET', value=max(inten_glx[mask_ft])-1)
					pars_O             = gmodel_O.make_params()

					result_O           = gmodel_O.fit(inten_glx[mask_ft],pars_O,
											X=lambda_glx[mask_ft],X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,OFFSET=max(inten_glx[mask_ft])-1,
											nan_policy = 'omit')
					CTRE_G_O           = result_O.params['X_0'].value
					AMPL_G_O           = result_O.params['A'].value
					SGMA_G_O           = abs(result_O.params['SIGMA'].value)
					OFST_G_O           = abs(result_O.params['OFFSET'].value)
					FWHM_G_O           = lw_sgma2fwhm(SGMA_G_O)
					W_O                = integrate.quad(lambda x: AMPL_G_O*np.exp(-((x)**2)/(2*SGMA_G_O**2)), -np.inf, np.inf)
					EW_O               = np.round(abs(np.asarray(W_O[0])),3)
					EWE_O              = np.round(abs(np.asarray(W_O[1])),10)
					data_fitted_O      = func_1D_Gaussian_O((lambda_glx[mask_ft]),CTRE_G_O,AMPL_G_O,SGMA_G_O,OFST_G_O)

					CTRE_G_O_E         = result_O.params['X_0'].stderr
					AMPL_G_O_E         = result_O.params['A'].stderr
					SGMA_G_O_E         = result_O.params['SIGMA'].stderr

					CTRE_G_O_cor       = result_O.params['X_0'].correl
					AMPL_G_O_cor       = result_O.params['A'].correl
					SGMA_G_O_cor       = result_O.params['SIGMA'].correl

					chisqr_O           = result_O.chisqr
					redchi_O           = result_O.redchi


					inten_glx[mask_ft] = inten_glx[mask_ft] - OFST_G_O #MENOS OFFSET
					A_f2DG             = -(1-(min(inten_glx[mask_ft])))
					initial_guess_C    = (X0_f2DG,A_f2DG,SIGMA_f2DG)#,max(inten_glx[mask_ft])-1)

					gmodel_C           = Model(func_1D_Gaussian)
					gmodel_C.set_param_hint('X_0'  , value=X0_f2DG   , min=X0_f2DG-(X0_f2DG*LINES[7][lines]), max=X0_f2DG+(X0_f2DG*LINES[7][lines]))
					#gmodel_C.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG-0.001, max=A_f2DG)
					gmodel_C.set_param_hint('A'    , value=A_f2DG    , min=A_f2DG  - (A_f2DG*LINES[10][lines]) , max=A_f2DG  + (A_f2DG*LINES[10][lines]))#min=A_f2DG-0.001, max=A_f2DG)
					gmodel_C.set_param_hint('SIGMA', value=SIGMA_f2DG)
					pars_C             = gmodel_C.make_params()
					result_C           = gmodel_C.fit(inten_glx[mask_ft],pars_C,
											X=lambda_glx[mask_ft],X_0=X0_f2DG,A=A_f2DG,SIGMA=SIGMA_f2DG,
											nan_policy = 'omit')
					CTRE_G_C           = result_C.params['X_0'].value
					AMPL_G_C           = result_C.params['A'].value
					SGMA_G_C           = abs(result_C.params['SIGMA'].value)
					FWHM_G_C           = lw_sgma2fwhm(SGMA_G_C)
					W_C                = integrate.quad(lambda x: AMPL_G_0*np.exp(-((x)**2)/(2*SGMA_G_0**2)), -np.inf, np.inf)
					EW_C               = np.round(abs(np.asarray(W_C[0])),3)
					EWE_C              = np.round(abs(np.asarray(W_C[1])),10)
					data_fitted_C      = func_1D_Gaussian((lambda_glx[mask_ft]), CTRE_G_C,AMPL_G_C,SGMA_G_C)

					CTRE_G_C_E         = result_C.params['X_0'].stderr
					AMPL_G_C_E         = result_C.params['A'].stderr
					SGMA_G_C_E         = result_C.params['SIGMA'].stderr

					CTRE_G_C_cor       = result_C.params['X_0'].correl
					AMPL_G_C_cor       = result_C.params['A'].correl
					SGMA_G_C_cor       = result_C.params['SIGMA'].correl

					AMPL_SNR           = AMPL_G_C
					CTRE_SNR           = CTRE_G_C
					SGMA_SNR           = abs(SGMA_G_C)

					if CTRE_G_C_E == None:
						CTRE_G_C_E = 999999.99999
					else:
						pass
					if AMPL_G_C_E == None:
						AMPL_G_C_E = 999999.99999
					else:
						pass
					if SGMA_G_C_E == None:
						SGMA_G_C_E = 999999.99999
					else:
						pass
					if CTRE_G_C_cor == None:
						CTRE_G_C_cor = 999999.99999
					else:
						pass
					if AMPL_G_C_cor == None:
						AMPL_G_C_cor = 999999.99999
					else:
						pass
					if SGMA_G_C_cor == None:
						SGMA_G_C_cor = 999999.99999
					else:
						pass
					chisqr_C           = result_C.chisqr
					redchi_C           = result_C.redchi
				except (RuntimeError,ValueError):
					print colored('RuntimeError','cyan')
					popt_C, pcov_C  = [999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999]
					perr_C          = [999999.99999,999999.99999,999999.99999]
					CTRE_G_C        = 999999.99999
					AMPL_G_C        = 999999.99999
					SGMA_G_C        = 999999.99999
					FWHM_G_C        = 999999.99999
					EW_C            = 999999.99999
					EWE_C           = 999999.99999

					CTRE_G_C_E      = 999999.99999
					AMPL_G_C_E      = 999999.99999
					SGMA_G_C_E      = 999999.99999
					CTRE_G_C_cor    = 999999.99999
					AMPL_G_C_cor    = 999999.99999
					SGMA_G_C_cor    = 999999.99999
					chisqr_C        = 999999.99999
					redchi_C        = 999999.99999

					popt_O, pcov_O  = [999999.99999,999999.99999,999999.99999,999999.99999],[999999.99999,999999.99999,999999.99999,999999.99999]
					perr_O          = [999999.99999,999999.99999,999999.99999,999999.99999]
					CTRE_G_O        = 999999.99999
					AMPL_G_O        = 999999.99999
					SGMA_G_O        = 999999.99999
					OFST_G_O        = 999999.99999
					FWHM_G_O        = 999999.99999
					EW_O            = 999999.99999
					EWE_O           = 999999.99999

					CTRE_G_O_E      = 999999.99999
					AMPL_G_O_E      = 999999.99999
					SGMA_G_O_E      = 999999.99999
					CTRE_G_O_cor    = 999999.99999
					AMPL_G_O_cor    = 999999.99999
					SGMA_G_O_cor    = 999999.99999
					OFST_G_O_cor    = 999999.99999
					chisqr_O        = 999999.99999
					redchi_O        = 999999.99999

					AMPL_SNR        = 999999.99999
					CTRE_SNR        = 999999.99999
					SGMA_SNR        = 999999.99999

				Header_Add(specfile_glx,'BSF_FCT',str(fit_fnct)                       ,header_comment = 'Fit function')
				Header_Add(specfile_glx,'BSF_MTH',str(fit_type)                       ,header_comment = 'Fit method')
				Header_Add(specfile_glx,str(LINES[5][lines])+'_CGLO',float(CTRE_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Offst' + str(fit_type))
				Header_Add(specfile_glx,str(LINES[5][lines])+'_AGLO',float(AMPL_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Offst' + str(fit_type))
				Header_Add(specfile_glx,str(LINES[5][lines])+'_FGLO',float(FWHM_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Offst' + str(fit_type))
				Header_Add(specfile_glx,str(LINES[5][lines])+'_WGLO',float(EW_O)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Offst' + str(fit_type))
				Header_Add(specfile_glx,str(LINES[5][lines])+'_EGLO',float(EWE_O)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Offst' + str(fit_type))

				Header_Add(specfile_glx,str(LINES[5][lines])+'_CGLC',float(CTRE_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct' + str(fit_type))
				Header_Add(specfile_glx,str(LINES[5][lines])+'_AGLC',float(AMPL_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct' + str(fit_type))
				Header_Add(specfile_glx,str(LINES[5][lines])+'_SGLC',float(SGMA_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Sigm 1GF Crct' + str(fit_type))
				Header_Add(specfile_glx,str(LINES[5][lines])+'_FGLC',float(FWHM_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct' + str(fit_type))
				Header_Add(specfile_glx,str(LINES[5][lines])+'_WGLC',float(EW_C)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct' + str(fit_type))
				Header_Add(specfile_glx,str(LINES[5][lines])+'_EGLC',float(EWE_C)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct' + str(fit_type))

				Header_Add(specfile_glx,str(LINES[5][lines])+'_CLEC',float(CTRE_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  err 1GF Crct' + str(fit_type))
				Header_Add(specfile_glx,str(LINES[5][lines])+'_ALEC',float(AMPL_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  err 1GF Crct' + str(fit_type))
				Header_Add(specfile_glx,str(LINES[5][lines])+'_SLEC',float(SGMA_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Sigm err 1GF Crct' + str(fit_type))

				Header_Add(specfile_glx,str(LINES[5][lines])+'_CHGL',float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Chi2 1GF' + str(fit_type))
				Header_Add(specfile_glx,str(LINES[5][lines])+'_CRGL',float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Chi2 Reduced 1GF' + str(fit_type))
			elif 'DblF' not in LINES[3][lines] and fit_fnct=='lorentz' and fit_type == 'scipy' and fit_lne == True:
				##LORENTZIAN FIT
				MSK_NTMS=2.5
				fit_typ = 'L'
				print
				print colored('1D Lorentz Fit Mode Choosen: scipy (Offset)','cyan')
				print

				lmb_min_lim_line_ft = (LINES[0][lines]-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line_ft = (LINES[0][lines]+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]

				###################################
				#############ORGINAL###############
				###################################
				#lmb_min_lim_line    = (LINES[0][lines]-LINES[8][lines])*(1+z_glx_Ps) - LINES[2][lines]#- 20#LINES[2][lines] - 10
				#lmb_max_lim_line    = (LINES[0][lines]+LINES[8][lines])*(1+z_glx_Ps) + LINES[2][lines]#+ 20#LINES[2][lines] + 10
				###################################
				#############ORGINAL###############
				###################################

				lmb_min_lim_line    = (LINES[0][lines]-LINES[8][lines])*(1+z_glx_Ps) - MSK_NTMS*LINES[2][lines]#- 20#LINES[2][lines] - 10
				lmb_max_lim_line    = (LINES[0][lines]+LINES[8][lines])*(1+z_glx_Ps) + MSK_NTMS*LINES[2][lines]#+ 20#LINES[2][lines] + 10

				mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
				mask_ft    = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
				label_glx  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] + ' ' + stk_function

				X0_f2DG    = (LINES[0][lines]+LINES[8][lines])
				SIGMA_f2DG = LINES[1][lines]
				A_f2DG     = -(1-(min(inten_glx[mask_ft])))

				max_val    = -(1-min(inten_glx[mask_ft]))
				lambda_max = (lambda_glx[np.where(inten_glx==min(inten_glx[mask_ft]))[0]][0])

				plt.step(lambda_glx[mask_pl], inten_glx[mask_pl],
						colors[index],
						where='mid',lw=1.0,alpha=0.5,linestyle=':',color='gray',
						label='Original Spectrum')

				initial_guess_O   = (X0_f2DG,A_f2DG,SIGMA_f2DG,max(inten_glx[mask_ft])-1)
				initial_guess_0   = (X0_f2DG,A_f2DG,SIGMA_f2DG)
				initial_guess_0   = (X0_f2DG,1.0,SIGMA_f2DG*0.5)

				initial_guess   = initial_guess_0
				try:
					popt_0, pcov_0  = opt.curve_fit(func_Lorentzian,
											lambda_glx[mask_ft],inten_glx[mask_ft],
											p0=initial_guess_0)#,bounds=([0.8,-np.inf,-np.inf],[1.0,np.inf,np.inf]))
					perr_0        = np.sqrt(np.diag(pcov_0))
					data_fitted_0 = func_Lorentzian((lambda_glx[mask_ft]), *popt_0)
					CTRE_L_0      = popt_0[0]
					FWHM_L_0      = 2*(popt_0[1])
					W_0           = integrate.quad(lambda x: (1 / popt_0[1]*np.pi) * ((popt_0[1]**2) / ((x-popt_0[0])**2 + popt_0[1] **2)), -np.inf, np.inf)
					EW_0          = np.round(abs(np.asarray(W[0])),3)
					EWE_0         = np.round(abs(np.asarray(W[1])),10)
					CTRE_L_0_E    = perr_0[0]
					FWHM_L_0_E    = 2*(perr_0[1])
				except RuntimeError:
					print RuntimeError
					popt_0, pcov_0 = [0,0],[0,0]
					perr_0         = [0,0]

					CTRE_L_0       = 999999.99999
					FWHM_L_0       = 999999.99999
					EW_0           = 999999.99999
					EWE_0          = 999999.99999



				popt_hdr = [str(LINES[3][lines])+'_LFL',str(LINES[3][lines])+'_GFL']
				#pcv1_hdr = [str(LINES[3][lines])+'_AAC',str(LINES[3][lines])+'_ALC']
				#pcv2_hdr = [str(LINES[3][lines])+'_SAC',str(LINES[3][lines])+'_SLC']
				perr_hdr = [str(LINES[3][lines])+'_LEL',str(LINES[3][lines])+'_GEL']

				#[Header_Add(specfile,str(name),float(val)) for name,val in zip(popt_hdr,popt)]
				#[Header_Add(specfile,str(name),float(val)) for name,val in zip(perr_hdr,perr)]
				
				#Header_Add(specfile,str(LINES[3][lines])+'_FWG',float(FWHM_G))
				#Header_Add(specfile,str(LINES[3][lines])+'_EWG',float(EW))
				#Header_Add(specfile,str(LINES[3][lines])+'_WEG',float(EWE))
			elif 'DblF' not in LINES[3][lines] and fit_fnct=='voigt'   and fit_type == 'scipy' and fit_lne == True:
				#VOIGT FIT
				MSK_NTMS=4
				fit_typ = 'V'
				print
				print colored('1D Voigt Fit Mode Choosen: scipy (Offset)','cyan')
				print

				lmb_min_lim_line_ft = (LINES[0][lines]-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line_ft = (LINES[0][lines]+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]

				###################################
				#############ORGINAL###############
				###################################
				#lmb_min_lim_line    = (LINES[0][lines]-LINES[8][lines])*(1+z_glx_Ps) - LINES[2][lines]#- 20#LINES[2][lines] - 10
				#lmb_max_lim_line    = (LINES[0][lines]+LINES[8][lines])*(1+z_glx_Ps) + LINES[2][lines]#+ 20#LINES[2][lines] + 10
				###################################
				#############ORGINAL###############
				###################################

				lmb_min_lim_line    = (LINES[0][lines]-LINES[8][lines])*(1+z_glx_Ps) - MSK_NTMS*LINES[2][lines]#- 20#LINES[2][lines] - 10
				lmb_max_lim_line    = (LINES[0][lines]+LINES[8][lines])*(1+z_glx_Ps) + MSK_NTMS*LINES[2][lines]#+ 20#LINES[2][lines] + 10

				mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
				mask_ft    = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
				label_glx  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] + ' ' + stk_function

				X0_f2DG    = (LINES[0][lines]+LINES[8][lines])
				SIGMA_f2DG = LINES[1][lines]
				A_f2DG     = -(1-(min(inten_glx[mask_ft])))

				max_val    = -(1-min(inten_glx[mask_ft]))
				lambda_max = (lambda_glx[np.where(inten_glx==min(inten_glx[mask_ft]))[0]][0])

				plt.step(lambda_glx[mask_pl], inten_glx[mask_pl],
						colors[index],
						where='mid',lw=1.0,alpha=0.5,linestyle=':',color='gray',
						label='Original Spectrum')

				initial_guess_O   = (X0_f2DG,1.0,SIGMA_f2DG*0.5,max(inten_glx[mask_ft])-1)
				initial_guess_0   = (X0_f2DG,SIGMA_f2DG*np.sqrt(2 * np.log(2)),0.5)
				initial_guess     = initial_guess_0

				try:
					popt_0, pcov_0  = opt.curve_fit(func_Voigt,
													lambda_glx[mask_ft],inten_glx[mask_ft], 
													p0=initial_guess_0,
													#bounds=([lmb_min_lim_line,-np.inf,-np.inf],
															#[lmb_max_lim_line,np.inf,np.inf]),
													#bounds=([X0_f2DG-(X0_f2DG*LINES[7][lines]),-np.inf,-np.inf],
															#[X0_f2DG+(X0_f2DG*LINES[7][lines]), np.inf, np.inf]))
													bounds=([X0_f2DG-(X0_f2DG*LINES[7][lines]),A_f2DG  - (A_f2DG*LINES[10][lines]),-np.inf], #[lmb_min_lim_line,A_f2DG-0.001,-np.inf],
															[X0_f2DG+(X0_f2DG*LINES[7][lines]),A_f2DG  + (A_f2DG*LINES[10][lines]), np.inf]))#[lmb_max_lim_line,A_f2DG      ,np.inf]))


					perr_0          = np.sqrt(np.diag(pcov_0))
					data_fitted_0   = func_Voigt((lambda_glx[mask_ft]), *popt_0)

					CTRE_V_0        = popt_0[0]
					ALPH_V_0        = popt_0[1]
					GAMA_V_0        = popt_0[2]
					FWHM_G_V_0      = 2 * popt_0[1]
					FWHM_L_V_0      = 2 * popt_0[2]
					FWHM_V_0        = 0.5346 * FWHM_L_V_0 + np.sqrt((0.2166*FWHM_G_V_0)**2 + FWHM_L_V_0**2)
					
					W_V_0           = integrate.quad(lambda x: popt_0[1]*np.exp(-((x)**2)/(2*popt_0[2]**2)), -np.inf, np.inf)
					EW_V_0          = np.asarray(W_V_0[0])
					EWE_V_0         = np.asarray(W_V_0[1])

					AMPL_SNR        = max(data_fitted_0)
					CTRE_SNR        = CTRE_V_0
					SGMA_SNR        = abs(ALPH_V_0/np.sqrt(2 * np.log(2)))

					#logger.error("Voigt fit OK            : "+str(LINES[4][lines] + ' ' + str(LINES[3][lines]) ))
				except RuntimeError:
					#print RuntimeError
					popt_0, pcov_0  = [0,0,0],[0,0,0]
					perr_0          = [0,0,0]

					SIGMA_V_0       = 999999.99999
					CTRE_V_0        = 999999.99999
					FWHM_G_V_0      = 999999.99999
					FWHM_L_V_0      = 999999.99999					
					FWHM_V_0        = 999999.99999

					EW_V_0          = 999999.99999
					EWE_V_0         = 999999.99999

				Header_Add(specfile_glx,'BSF_FCT',str(fit_fnct)                      ,header_comment = 'Fit function')
				Header_Add(specfile_glx,'BSF_MTH',str(fit_type)                      ,header_comment = 'Fit method')
				Header_Add(specfile_glx,str(LINES[5][lines])+'_CVF0',float(CTRE_V_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1VF Crct')
				Header_Add(specfile_glx,str(LINES[5][lines])+'_AVF0',float(ALPH_V_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Alph 1VF Crct')
				Header_Add(specfile_glx,str(LINES[5][lines])+'_GVF0',float(GAMA_V_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Gama 1VF Crct')
				Header_Add(specfile_glx,str(LINES[5][lines])+'_FVF0',float(FWHM_V_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1VF Crct')
				Header_Add(specfile_glx,str(LINES[5][lines])+'_WVF0',float(EW_V_0)   ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1VF Crct')
				Header_Add(specfile_glx,str(LINES[5][lines])+'_EVF0',float(EWE_V_0)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1VF Crct')
				

				######################CHI-2######################
				data_fitted_C    = data_fitted_0#func_1D_Gaussian((lambda_glx[mask_pl]), *popt_C)
				g_exp_mxr        = data_fitted_C
				g_obs_mxr        = (lambda_glx[mask_pl])
				
				if Cube2bPlot_1D_Err == None:
					FLX_ERR_STD   = np.std(inten_glx[mask_pl])
					chisqr_V_0    = 9999#sum((g_obs_mxr-g_exp_mxr)**2/(FLX_ERR_STD**2))#*(1/float(len(XAXIS)-1))
					redchi_V_0    = 9999#chisqr_V_0#chisqr_V_0/float(len(g_exp_mxr)-1)
				elif Cube2bPlot_1D_Err != None:
					chisqr_V_0    = sum((g_obs_mxr-g_exp_mxr)**2/(FLX_ERR_STD**2))#*(1/float(len(XAXIS)-1))
					redchi_V_0    = chisqr_V_0#chisqr_V_0/float(len(g_exp_mxr)-1)
				######################CHI-2######################
				Header_Add(specfile_glx,str(LINES[5][lines])+'_CHI2',float(chisqr_V_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Chi2')
				Header_Add(specfile_glx,str(LINES[5][lines])+'_CH2R',float(redchi_V_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Chi2 Reduced')
				##
			elif 'DblF' not in LINES[3][lines] and fit_fnct=='voigt'   and fit_type == 'lmfit' and fit_lne == True:
				#VOIGT FIT
				MSK_NTMS=4
				fit_typ = 'V'
				print
				print colored('1D Voigt Fit Mode Choosen: lmfit ','cyan')
				print
				from lmfit import Model
				lmb_min_lim_line_ft = (LINES[0][lines]-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line_ft = (LINES[0][lines]+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]

				###################################
				#############ORGINAL###############
				###################################
				#lmb_min_lim_line    = (LINES[0][lines]-LINES[8][lines])*(1+z_glx_Ps) - LINES[2][lines]#- 20#LINES[2][lines] - 10
				#lmb_max_lim_line    = (LINES[0][lines]+LINES[8][lines])*(1+z_glx_Ps) + LINES[2][lines]#+ 20#LINES[2][lines] + 10
				###################################
				#############ORGINAL###############
				###################################

				lmb_min_lim_line    = (LINES[0][lines]-LINES[8][lines])*(1+z_glx_Ps) - MSK_NTMS*LINES[2][lines]#- 20#LINES[2][lines] - 10
				lmb_max_lim_line    = (LINES[0][lines]+LINES[8][lines])*(1+z_glx_Ps) + MSK_NTMS*LINES[2][lines]#+ 20#LINES[2][lines] + 10

				mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
				mask_ft    = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
				label_glx  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] + ' ' + stk_function

				X0_f2DG    = (LINES[0][lines]+LINES[8][lines])
				SIGMA_f2DG = LINES[1][lines]
				A_f2DG     = -(1-(min(inten_glx[mask_ft])))

				max_val    = -(1-min(inten_glx[mask_ft]))
				lambda_max = (lambda_glx[np.where(inten_glx==min(inten_glx[mask_ft]))[0]][0])

				plt.step(lambda_glx[mask_pl], inten_glx[mask_pl],
						colors[index],
						where='mid',lw=1.0,alpha=0.5,linestyle=':',color='gray',
						label='Original Spectrum')

				initial_guess_O   = (X0_f2DG,1.0,SIGMA_f2DG*0.5,max(inten_glx[mask_ft])-1)
				initial_guess_0   = (X0_f2DG,SIGMA_f2DG*np.sqrt(2 * np.log(2)),0.5)
				initial_guess     = initial_guess_0

				try:
					gmodel_0        = Model(func_Voigt)
					result_0        = gmodel_0.fit(inten_glx[mask_ft],
											X=lambda_glx[mask_ft],X_0=X0_f2DG,ALPHA=SIGMA_f2DG*np.sqrt(2 * np.log(2)),GAMMA=0.5,
											nan_policy = 'omit')	
					CTRE_V_0        = result_0.params['X_0'].value
					ALPH_V_0        = result_0.params['ALPHA'].value
					GAMA_V_0        = abs(result_0.params['GAMMA'].value)
					data_fitted_0   = func_Voigt((lambda_glx[mask_ft]),X_0=CTRE_V_0,ALPHA=ALPH_V_0,GAMMA=GAMA_V_0)

					FWHM_G_V_0      = 2 * ALPH_V_0#popt_0[1]
					FWHM_L_V_0      = 2 * GAMA_V_0#popt_0[2]
					FWHM_V_0        = 0.5346 * FWHM_L_V_0 + np.sqrt((0.2166*FWHM_G_V_0)**2 + FWHM_L_V_0**2)
					
					W_V_0           = integrate.quad(lambda x:FWHM_G_V_0*np.exp(-((x)**2)/(2*FWHM_L_V_0**2)), -np.inf, np.inf)
					EW_V_0          = np.asarray(W_V_0[0])
					EWE_V_0         = np.asarray(W_V_0[1])

					CTRE_V_0_E      = result_0.params['X_0'].stderr
					ALPH_V_0_E      = result_0.params['ALPHA'].stderr
					GAMA_V_0_E      = result_0.params['GAMMA'].stderr

					CTRE_V_0_cor    = result_0.params['X_0'].correl
					ALPH_V_0_cor    = result_0.params['ALPHA'].correl
					GAMA_V_0_cor    = result_0.params['GAMMA'].correl

					chisqr_V_0      = result_0.chisqr
					redchi_V_0      = result_0.redchi

					AMPL_SNR        = max(data_fitted_0)
					CTRE_SNR        = CTRE_V_0
					SGMA_SNR        = abs(ALPH_V_0/np.sqrt(2 * np.log(2)))
					
				except RuntimeError:
					print RuntimeError
					popt_0, pcov_0  = [0,0,0],[0,0,0]
					perr_0          = [0,0,0]

					SIGMA_V_0       = 999999.99999
					CTRE_V_0        = 999999.99999
					FWHM_G_V_0      = 999999.99999
					FWHM_L_V_0      = 999999.99999					
					FWHM_V_0        = 999999.99999

					EW_V_0          = 999999.99999
					EWE_V_0         = 999999.99999

				Header_Add(specfile_glx,'BSF_FCT',str(fit_fnct)                      ,header_comment = 'Fit function')
				Header_Add(specfile_glx,'BSF_MTH',str(fit_type)                      ,header_comment = 'Fit method')
				Header_Add(specfile_glx,str(LINES[5][lines])+'_CVF0',float(CTRE_V_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1VF Crct')
				Header_Add(specfile_glx,str(LINES[5][lines])+'_AVF0',float(ALPH_V_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Alph 1VF Crct')
				Header_Add(specfile_glx,str(LINES[5][lines])+'_GVF0',float(GAMA_V_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Gama 1VF Crct')
				Header_Add(specfile_glx,str(LINES[5][lines])+'_FVF0',float(FWHM_V_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1VF Crct')
				Header_Add(specfile_glx,str(LINES[5][lines])+'_WVF0',float(EW_V_0)   ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1VF Crct')
				Header_Add(specfile_glx,str(LINES[5][lines])+'_EVF0',float(EWE_V_0)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1VF Crct')

				Header_Add(specfile_glx,str(LINES[5][lines])+'_CH2V',float(chisqr_V_0),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Chi2 1VF')
				Header_Add(specfile_glx,str(LINES[5][lines])+'_CHRV',float(redchi_V_0),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Chi2 Reduced 1VF')
			elif 'DblF' not in LINES[3][lines] and fit_fnct=='gauss'   and fit_type == 'scipy' and fit_lne == False:
				fit_typ = 'G'
				#GAUSSIAN FIT
				MSK_NTMS=2.5
				print
				print colored('1D Gaussian Fit Mode Choosen: scipy (Offset)','cyan')
				print

				lmb_min_lim_line_ft = (LINES[0][lines]-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line_ft = (LINES[0][lines]+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]

				lmb_min_lim_line    = (LINES[0][lines]-LINES[8][lines])*(1+z_glx_Ps) - MSK_NTMS_PLT*LINES[2][lines]#- 20#LINES[2][lines] - 10 #IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line    = (LINES[0][lines]+LINES[8][lines])*(1+z_glx_Ps) + MSK_NTMS_PLT*LINES[2][lines]#+ 20#LINES[2][lines] + 10

				mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
				mask_ft    = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
				label_glx  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function

				CTRE_G_0  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGF0')#,float(CTRE_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct')
				AMPL_G_0  = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGF0')#,float(AMPL_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct')
				FWHM_G_0  = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGF0')#,float(FWHM_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct')
				EW_0      = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGF0')#,float(EW_0)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct')
				EWE_0     = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGF0')#,float(EWE_0)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct')

				CTRE_G_O   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGAO')#,float(CTRE_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Offst' + str(fit_type))
				AMPL_G_O   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGAO')#,float(AMPL_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Offst' + str(fit_type))
				FWHM_G_O   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGAO')#,float(FWHM_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Offst' + str(fit_type))
				EW_O       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGAO')#,float(EW_O)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Offst' + str(fit_type))
				EWE_O      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGAO')#,float(EWE_O)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Offst' + str(fit_type))

				CTRE_G_C   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGAC')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct' + str(fit_type))
				AMPL_G_C   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGAC')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct' + str(fit_type))
				SGMA_G_C   = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGAC')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Sigm 1GF Crct' + str(fit_type))
				FWHM_G_C   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGAC')#,float(FWHM_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct' + str(fit_type))
				EW_C       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGAC')#,float(EW_C)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct' + str(fit_type))
				EWE_C      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGAC')#,float(EWE_C)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct' + str(fit_type))

				CTRE_G_C_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_CAEC')#,float(CTRE_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  err 1GF Crct' + str(fit_type))
				AMPL_G_C_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_AAEC')#,float(AMPL_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  err 1GF Crct' + str(fit_type))
				SGMA_G_C_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_SAEC')#,float(SGMA_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Sigm err 1GF Crct' + str(fit_type))

				chisqr_C   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CHGA')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Chi2 1GF' + str(fit_type))
				redchi_C   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CRGA')#,float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Chi2 Reduced 1GF' + str(fit_type))
			elif 'DblF' not in LINES[3][lines] and fit_fnct=='gauss'   and fit_type == 'lmfit' and fit_lne == False:
				fit_typ = 'G'
				#GAUSSIAN FIT
				#WORKING ON
				MSK_NTMS=2.5 #1.0
				print
				print colored('1D Gaussian Fit Mode Choosen: Lmfit (Offset)','cyan')
				print
				from lmfit import Model

				lmb_min_lim_line_ft = (LINES[0][lines]-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line_ft = (LINES[0][lines]+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]
				lmb_min_lim_line    = (LINES[0][lines]-LINES[8][lines])*(1+z_glx_Ps) - MSK_NTMS_PLT*LINES[2][lines]#- 20#LINES[2][lines] - 10 #IT WAS LINE CTR - LINE OFFSET
				lmb_max_lim_line    = (LINES[0][lines]+LINES[8][lines])*(1+z_glx_Ps) + MSK_NTMS_PLT*LINES[2][lines]#+ 20#LINES[2][lines] + 10

				mask_pl    = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
				mask_ft    = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
				label_glx  = (specfile_glx.split('sep_as-',1)[1]).split('-stk',1)[0] #+ ' ' + stk_function

				CTRE_G_0  = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGF0')#,float(CTRE_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct')
				AMPL_G_0  = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGF0')#,float(AMPL_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct')
				FWHM_G_0  = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGF0')#,float(FWHM_G_0) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct')
				EW_0      = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGF0')#,float(EW_0)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct')
				EWE_0     = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGF0')#,float(EWE_0)    ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct')

				#Header_Add(specfile_glx,'BSF_FCT',str(fit_fnct)                       ,header_comment = 'Fit function')
				#Header_Add(specfile_glx,'BSF_MTH',str(fit_type)                       ,header_comment = 'Fit method')
				CTRE_G_O   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGLO')#,float(CTRE_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Offst' + str(fit_type))
				AMPL_G_O   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGLO')#,float(AMPL_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Offst' + str(fit_type))
				FWHM_G_O   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGLO')#,float(FWHM_G_O)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Offst' + str(fit_type))
				EW_O       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGLO')#,float(EW_O)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Offst' + str(fit_type))
				EWE_O      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGLO')#,float(EWE_O)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Offst' + str(fit_type))

				CTRE_G_C   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGLC')#,float(CTRE_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  1GF Crct' + str(fit_type))
				AMPL_G_C   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGLC')#,float(AMPL_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  1GF Crct' + str(fit_type))
				SGMA_G_C   = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGLC')#,float(SGMA_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Sigm 1GF Crct' + str(fit_type))
				FWHM_G_C   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGLC')#,float(FWHM_G_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'FWHM 1GF Crct' + str(fit_type))
				EW_C       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGLC')#,float(EW_C)      ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EW   1GF Crct' + str(fit_type))
				EWE_C      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGLC')#,float(EWE_C)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'EWE  1GF Crct' + str(fit_type))

				CTRE_G_C_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_CLEC')#,float(CTRE_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Ctr  err 1GF Crct' + str(fit_type))
				AMPL_G_C_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_ALEC')#,float(AMPL_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Amp  err 1GF Crct' + str(fit_type))
				SGMA_G_C_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_SLEC')#,float(SGMA_G_C_E),header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Sigm err 1GF Crct' + str(fit_type))

				chisqr_C   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CHGL')#,float(chisqr_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Chi2 1GF' + str(fit_type))
				redchi_C   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CRGL')#,float(redchi_C)  ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + 'Chi2 Reduced 1GF' + str(fit_type))

				print
				print colored('Fit Values from Fits Header!','yellow')
				print colored('Lines: '+LINES[4][lines]+' '+str(LINES[0][lines]),'yellow')
				print str(LINES[5][lines])+'_CGLC:' + str(CTRE_G_C)
				print str(LINES[5][lines])+'_AGLC:' + str(AMPL_G_C)
				print str(LINES[5][lines])+'_SGLC:' + str(SGMA_G_C)
				print str(LINES[5][lines])+'_FGLC:' + str(FWHM_G_C)
				print str(LINES[5][lines])+'_WGLC:' + str(EW_C)
				print str(LINES[5][lines])+'_EGLC:' + str(EWE_C)
				print
			else:
				pass

			SPC_SNR_FUNC_UB_1_2 = Header_Get(specfile_glx,str(LINES[5][lines])+'_NSU1')#,float(SPC_SNR_FUNC_UB_1[2]) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE UBIN SPC REG ALL')
			SPC_SNR_FUNC_UB_2_2 = Header_Get(specfile_glx,str(LINES[5][lines])+'_NSU2')#,float(SPC_SNR_FUNC_UB_2[2]) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE UBIN SPC REG CNT')
			SPC_SNR_FUNC_UB_3_2 = Header_Get(specfile_glx,str(LINES[5][lines])+'_NSU3')#,float(SPC_SNR_FUNC_UB_3[2]) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE UBIN SPC REG FIT')
			SPC_SNR_FUNC_UB_4_2 = Header_Get(specfile_glx,str(LINES[5][lines])+'_NSU4')#,float(SPC_SNR_FUNC_UB_4[2]) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE UBIN SPC REG PLT')

			SPC_SNR_UB_1        = Header_Get(specfile_glx,str(LINES[5][lines])+'_SNU1')#,float(SPC_SNR_UB_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR UBIN SPC REG ALL')
			SPC_SNR_UB_2        = Header_Get(specfile_glx,str(LINES[5][lines])+'_SNU2')#,float(SPC_SNR_UB_2) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR UBIN SPC REG CNT')
			SPC_SNR_UB_3        = Header_Get(specfile_glx,str(LINES[5][lines])+'_SNU3')#,float(SPC_SNR_UB_3) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR UBIN SPC REG FIT')
			SPC_SNR_UB_4        = Header_Get(specfile_glx,str(LINES[5][lines])+'_SNU4')#,float(SPC_SNR_UB_4) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR UBIN SPC REG PLT')

			bin_size            = Header_Get(specfile_glx,str(LINES[5][lines])+'_SNBS')#,float(bin_size)     ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR BINNED Size')
			bin_number          = Header_Get(specfile_glx,str(LINES[5][lines])+'_SNBN')#,float(bin_number)   ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR BINNED # Bins')

			SPC_NSE_BN_1        = Header_Get(specfile_glx,str(LINES[5][lines])+'_NSB1')#,float(SPC_NSE_BN_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE BINNED AVG')
			SPC_NSE_BN_2        = Header_Get(specfile_glx,str(LINES[5][lines])+'_NSB2')#,float(SPC_NSE_BN_2) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE BINNED MED')
			SPC_NSE_BN_3        = Header_Get(specfile_glx,str(LINES[5][lines])+'_NSB3')#,float(SPC_NSE_BN_3) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' NSE BINNED SUM')				

			SPC_SNR_BN_1        = Header_Get(specfile_glx,str(LINES[5][lines])+'_SNB1')#,float(SPC_SNR_BN_1) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR BINNED AVG')
			SPC_SNR_BN_2        = Header_Get(specfile_glx,str(LINES[5][lines])+'_SNB2')#,float(SPC_SNR_BN_2) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR BINNED MED')
			SPC_SNR_BN_3        = Header_Get(specfile_glx,str(LINES[5][lines])+'_SNB3')#,float(SPC_SNR_BN_3) ,header_comment = str(LINES[3][lines]) + str(LINES[0][lines]) + ' SNR BINNED SUM')				

			########################################################LINE-SNR#######################################################

			if fit_fnct is not None:
				if AMPL_G_O <0: #popt_O[1]
					lambda_glx_lne_fit = np.arange(lmb_min_lim_line,lmb_max_lim_line,0.1)
					if fit_fnct=='gauss' and not 'DblF' in LINES[3][lines]:
						#print 'Not Dbl Gaussian Function'
						if pre_off_plt == True and plt_ind_fit == True:
							try:
								plt.plot(lambda_glx_lne_fit,
											func_1D_Gaussian(lambda_glx_lne_fit,*popt_0),
											color='gray'  ,ls=':',lw=1.5,
											#label = label_glx + ' g fit Org: ' + 
											#'EW: ' + str(EW_0), 
											alpha=0.5)
								plt.plot(lambda_glx_lne_fit,
											func_1D_Gaussian_O(lambda_glx_lne_fit,*popt_O),
											color='gray'  ,ls='--',lw=1.5,
											#label = label_glx + ' g fit Off: ' + 
											#'EW: ' + str(EW_O) + ', '  
											#'OFS: ' + str(np.round(OFST_G_O,2)), 
											alpha=0.5)
							except UnboundLocalError:
								plt.plot(lambda_glx_lne_fit,
											func_1D_Gaussian(lambda_glx_lne_fit,CTRE_G_0,AMPL_G_0,SGMA_G_0)     ,
											color='gray'  ,ls=':',lw=1.5,
											#label = label_glx + ' g fit Org: ' + 
											#'EW: ' + str(EW_0), 
											alpha=0.5)
								plt.plot(lambda_glx_lne_fit,
											func_1D_Gaussian_O(lambda_glx_lne_fit,CTRE_G_O,AMPL_G_O,SGMA_G_O,OFST_G_O)  ,
											color='gray'  ,ls='--',lw=1.5,
											#label = label_glx + ' g fit Off: ' + 
											#'EW: ' + str(EW_O) + ', '  
											#'OFS: ' + str(np.round(OFST_G_O,2)), 
											alpha=0.5)
						elif pre_off_plt == False:
							pass		
						if plt_ind_fit == True:
							try:
								plt.plot(lambda_glx_lne_fit,func_1D_Gaussian(lambda_glx_lne_fit,*popt_C)    ,
										color=colors[index]   ,ls='-',lw=1.5,
										#label = label_glx + ' '+
										##'g fit C: ' + 
										##'$\lambda_{0}$='+ str(np.round(CTRE_G_C,2)) + ', ' +
										##'$\sigma$=' + str(np.round(SGMA_G_C,2)) + ',' + 
										##'fwhm=' + str(np.round(sigma2fwhm(SGMA_G_C),2)) +
										##'A: '+ str(np.round(AMPL_G_C,2)) + ', ' + 
										#'EW: ' + str(EW_C) + ', ' +
										#'N : ' + str(stk_glx_nmb),# +  ', ' +
										##'SNR (M) : ' + str(np.round(SPC_SNR_BN_2,2)),
										alpha=1.0)# + ', EWE: '+str(EWE))
							except UnboundLocalError:
								plt.plot(lambda_glx_lne_fit,
										func_1D_Gaussian(lambda_glx_lne_fit,CTRE_G_C,AMPL_G_C,SGMA_G_C)    ,
										color=colors[index]   ,ls='-',lw=1.5,
										#label = label_glx + ' '+ 'g fit Crc: ' + 
										#'EW: ' + str(EW_C) + ', ' +
										#"\n" +
										#'N : ' + str(stk_glx_nmb),# +  ', ' +
										##'SNR (M) : ' + str(np.round(SPC_SNR_BN_2,2))+ ', ' ,
										##'$\chi^{2}$: '+str(chisqr_C)+ ', ' +
										##'$\chi^{2}_{r}$:' + str(redchi_C),
										alpha=1.0)
						try:
							OFST_G_O = Header_Get(specfile_glx,str(LINES[5][lines])+'_OFSO')
							print
							print colored('Correcting Spectra by Offset Fitted Previously','yellow')
							print colored('Defined by Header: ' + str(LINES[5][lines])+'_OFSO','yellow')
							print
							inten_glx[mask_pl] = inten_glx[mask_pl] - OFST_G_O #MENOS OFFSET
						except:
							pass

						plt.step(lambda_glx[mask_pl], inten_glx[mask_pl], colors[index],
								where='mid',
								lw=2.0,alpha=0.6,linestyle='-')#label=label_glx,
						min_y_ind_spec.append(bn.nanmin(inten_glx[mask_pl]))
						max_y_ind_spec.append(bn.nanmax(inten_glx[mask_pl]))
					elif fit_fnct=='lorentz' and not 'DblF' in LINES[3][lines]:
						plt.plot(lambda_glx_lne_fit,func_Lorentzian(lambda_glx_lne_fit,*popt)   ,color=colors[index]  ,
								ls='--',lw=1.5, 
								label = label_glx + ' l fit ' + 
								#'$\lambda_{0}$='+ str(np.round(CTRE_L,2))+',' + 
								'EW: ' + str(EW))# + ', EWE: '+str(EWE))
					elif fit_fnct=='voigt'   and not 'DblF' in LINES[3][lines]:
						plt.plot(lambda_glx_lne_fit,func_Voigt(lambda_glx_lne_fit,*popt)        ,color=colors[index]  ,
								ls='--',lw=1.5, 
								label = label_glx + ' v fit $\lambda_{0}$='+ str(np.round(CTRE_V,2))+',' + 
								'EW: ' + str(EW))# + ', EWE: '+str(EWE))
					elif fit_fnct=='gauss'   and 'DblF' in LINES[3][lines]:
						lambda_glx_lne_fit_1 = np.arange(lmb_min_lim_line_1,lmb_max_lim_line_1,0.1)
						lambda_glx_lne_fit_2 = np.arange(lmb_min_lim_line_2,lmb_max_lim_line_2,0.1)
						lambda_glx_lne_fit_D = np.arange(lmb_min_lim_line_1,lmb_max_lim_line_2,0.1)
						print
						print 'Dbl Gaussian Function'

						#plt.plot(lambda_glx_lne_fit_D,func_2_1D_Gaussian(lambda_glx_lne_fit_D,*popt_0_D)     ,
									#color=colors[index]  ,ls=':' ,lw=2.5 ,alpha=0.3,
									#label = '')#label_glx + ' g fit 0: $\lambda_{0}$='+ str(np.round(CTRE_G_0,2))+ ', $\sigma$=' + str(np.round(SGMA_G_0,2))+', EW: ' + str(EW_0), 
									##alpha=0.3)# + ', EWE: '+str(EWE))
						###plt.plot(lambda_glx_lne_fit_1,func_2_1D_Gaussian_O(lambda_glx_lne_fit_1,*popt_O_D)   ,
									#color='white'        ,ls='--',lw=2.5 ,alpha=0.1,
									###label = '')#label_glx + ' g fit O: $\lambda_{0}$='+ str(np.round(CTRE_G_O,2))+ ', $\sigma$=' + str(np.round(SGMA_G_O,2))+', EW: ' + str(EW_O) + ', OFS: ' + str(np.round(OFST_G_O,2)), 
									####alpha=0.1)# + ', EWE: '+str(EWE))
						##plt.plot(lambda_glx_lne_fit_1,func_2_1D_Gaussian(lambda_glx_lne_fit_1,*popt_C_D)    ,
									#color=colors[index]   ,ls='-' ,lw=2.5 ,alpha=1.0,
									##label = label_glx + ' EW: ' + str(EW_C_D), )#' g fit C: $\lambda_{0}$='+ str(np.round(CTRE_G_C,2))+ ', $\sigma$=' + str(np.round(SGMA_G_C,2))+', EW: ' + str(EW_C), 
									###alpha=1.0)# + ', EWE: '+str(EWE)


						#plt.plot(lambda_glx_lne_fit_2,func_1D_Gaussian(lambda_glx_lne_fit_2,*popt_0_2)     ,
									#color=colors[index]  ,ls=':' ,lw=2.5 ,alpha=0.3,
									#label = '')#label_glx + ' g fit 0: $\lambda_{0}$='+ str(np.round(CTRE_G_0,2))+ ', $\sigma$=' + str(np.round(SGMA_G_0,2))+', EW: ' + str(EW_0), 
									##alpha=0.3)# + ', EWE: '+str(EWE))
						#plt.plot(lambda_glx_lne_fit_2,func_1D_Gaussian_O(lambda_glx_lne_fit_2,*popt_O_2)   ,
									#color='white'        ,ls='--',lw=2.5 ,alpha=0.1,
									#label = '')#label_glx + ' g fit O: $\lambda_{0}$='+ str(np.round(CTRE_G_O,2))+ ', $\sigma$=' + str(np.round(SGMA_G_O,2))+', EW: ' + str(EW_O) + ', OFS: ' + str(np.round(OFST_G_O,2)), 
									##alpha=0.1)# + ', EWE: '+str(EWE))
						#plt.plot(lambda_glx_lne_fit_2,func_1D_Gaussian(lambda_glx_lne_fit_2,*popt_C_2)    ,
									#color=colors[index]   ,ls='-' ,lw=2.5 ,alpha=1.0,
									#label = label_glx + ' EW: ' + str(EW_C_2), )#' g fit C: $\lambda_{0}$='+ str(np.round(CTRE_G_C,2))+ ', $\sigma$=' + str(np.round(SGMA_G_C,2))+', EW: ' + str(EW_C), 
									##alpha=1.0)# + ', EWE: '+str(EWE)

						plt.step(lambda_glx[mask_pl_D], inten_glx[mask_pl_D], colors[index],
									where='mid',lw=2.5,alpha=0.6,linestyle='-')#label=label_glx,
						plt.step(lambda_glx[mask_pl_D], inten_glx[mask_pl_D], colors[index],
									where='mid',lw=2.5,alpha=0.6,linestyle='-')#label=label_glx,
					elif fit_fnct=='lorentz' and 'DblF' in LINES[3][lines]:
						plt.plot(lambda_glx_lne_fit,func_Lorentzian(lambda_glx_lne_fit,*popt)   ,
									color=colors[index]  ,ls='--',lw=1.5, 
									label = label_glx + ' l fit $\lambda_{0}$='+ str(CTRE_G) +',EW: ' + str(EW))# + ', EWE: '+str(EWE))
					elif fit_fnct=='voigt'   and 'DblF' in LINES[3][lines]:
						plt.plot(lambda_glx_lne_fit,func_Voigt(lambda_glx_lne_fit,*popt)        ,
									color=colors[index]  ,ls='--',lw=1.5, 
									label = label_glx + ' v fit $\lambda_{0}$='+ str(CTRE_G) +',EW: ' + str(EW))# + ', EWE: '+str(EWE))
						pass
				else:
					pass
			else:
				pass
			########################################################LINE-FIT#######################################################
		#######################################################DIF-SEPARATIONS#######################################################


		autoaxis_SSL  = kwargs.get('autoaxis_SSL'  , False)
		min_y_lim_SSL = kwargs.get('min_y_lim_SSL' , 0.5)
		max_y_lim_SSL = kwargs.get('max_y_lim_SSL' , 1.5)

		lmb_min_lim   = lmb_min
		lmb_max_lim   = lmb_max
		plt.xlim([lmb_min_lim_line,lmb_max_lim_line])
		xmin, xmax = plt.xlim()
		plt.xlim((xmin,xmax))

		# build a rectangle in axes coords
		left, width = 0, 0.95
		bottom, height = 0, 0.95
		right = left + width
		top = bottom + height

		ax110.text(left, top, 
					LINES[4][lines] + ' ' + str(LINES[0][lines])#+ ' $\AA$'
					#LINES[3][lines] + ' ' + str(LINES[0][lines]) + ' $\AA$'
					,
					horizontalalignment='left',
					verticalalignment='top',
					fontsize = 20,
					transform=ax110.transAxes)

		#####

		if autoaxis_SSL == True:
			min_y, max_y = ax110.get_ylim()
			min_y =  min_y_lim_SSL
			max_y =  max_y_lim_SSL

			min_dif = abs(1-bn.nanmin(min_y_ind_spec))
			max_dif = abs(1-bn.nanmax(max_y_ind_spec))
			abs_dif = max(min_dif,max_dif)
			min_y   = 1 - abs_dif - (abs_dif*1)#0.05
			max_y   = 1 + abs_dif + (abs_dif*1)#0.05

			plt.ylim([min_y,max_y])
			ymin, ymax = plt.ylim()
			plt.ylim((ymin,ymax))
		elif autoaxis_SSL == False:
			pass

		'''
		#min_y,max_y = ax110.get_ylim()
		#plt.plot([LINES[0][lines] , LINES[0][lines] ], [min_y, max_y],
					#color='black', lw=1, alpha=0.6,ls=':',
					##label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$'
					#)
		#lg2=plt.legend(loc=3,prop={'size':20})
		#lg2.draw_frame(False)

		#plt.plot([lmb_min_lim_line, lmb_max_lim_line], [1, 1]        ,
					#color='black', lw=1, alpha=0.6)
		#lg1 = plt.legend(loc=1,prop={'size':20})
		#lg1.draw_frame(False)
		'''

		#plt.plot([lmb_min_lim_line, lmb_max_lim_line], [1, 1]        , color='black', lw=1, alpha=0.6)
		#lg1 = plt.legend(loc=0,prop={'size':22})
		#lg1.draw_frame(False)
		#
		#lmb_min_lim_line_ft = (LINES[0][lines]-LINES[8][lines]) - MSK_NTMS*LINES[1][lines] #IT WAS LINE CTR - LINE OFFSET
		#lmb_max_lim_line_ft = (LINES[0][lines]+LINES[8][lines]) + MSK_NTMS*LINES[1][lines]

		#plt.plot([LINES[0][lines],LINES[0][lines]],
					#[min_y, max_y],
					#color='black', lw=1, alpha=0.8,ls=':',
					#label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function)

		plt.plot([LINES[0][lines]+LINES[8][lines],LINES[0][lines]+LINES[8][lines]],
					[min_y, max_y],
					color='black', lw=1.5, alpha=0.8,ls='dashed'
					#,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$ '+stk_function)
					)
		#plt.plot([lmb_min_lim_line_ft,lmb_min_lim_line_ft], [min_y, max_y], 
					#color='black', lw=1, alpha=0.8,ls=':'
					##,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$')
					#)
		#plt.plot([lmb_max_lim_line_ft,lmb_max_lim_line_ft], [min_y, max_y], 
					#color='black', lw=1, alpha=0.8,ls=':'
					##,label=LINES[4][lines]+' ' + str(LINES[0][lines])+' $\AA$')
					#)

		lg2=plt.legend(loc=0,prop={'size':22})
		lg2.draw_frame(False)

		'''
		left, width    = lmb_min_lim_line, (lmb_max_lim_line - lmb_min_lim_line)
		bottom, height = min_y, (max_y - min_y)
		right          = lmb_max_lim_line + width
		top            = max_y
		'''
		################################################################SAVE###########################################################
	if dest_dir != None:
		PLOTFILENAME1 = str(dest_dir) + plt_sufix_fnm + '-' + str(splt_smpl_sfx_f1_plt[0]) +'-'+str(splt_smpl_sfx_f2_plt[0])+'-'+ stk_function + '-' + fit_typ + '-' + str(lmb_min) + '-' + str(lmb_max) + 'MltBin.pdf'
		PLOTFILENAME2 = str(dest_dir) + plt_sufix_fnm + '-' + str(splt_smpl_sfx_f1_plt[0]) +'-'+str(splt_smpl_sfx_f2_plt[0])+'-'+ stk_function + '-' + fit_typ + '-' + str(lmb_min) + '-' + str(lmb_max) + 'MltBin.eps'

	elif dest_dir == None:
		PLOTFILENAME1 = fit_plt_res   + plt_sufix_fnm + '-' + str(splt_smpl_sfx_f1_plt[0]) +'-'+str(splt_smpl_sfx_f2_plt[0])+'-'+ stk_function + '-' + fit_typ + '-' + str(lmb_min) + '-' + str(lmb_max) + 'MltBin.pdf'
		PLOTFILENAME2 = fit_plt_res   + plt_sufix_fnm + '-' + str(splt_smpl_sfx_f1_plt[0]) +'-'+str(splt_smpl_sfx_f2_plt[0])+'-'+ stk_function + '-' + fit_typ + '-' + str(lmb_min) + '-' + str(lmb_max) + 'MltBin.eps'

	
	'''
	if dest_dir != None:
		PLOTFILENAME1 = str(dest_dir) + plt_sufix_fnm + '-' + str(splt_smpl_sfx_f1_plt[0]) +'-'+str(int(LINES[0][lines]))+'-'+str(LINES[4][lines])+ '-' + stk_function +'-' + fit_type + '-'+fit_typ +'.pdf'
		PLOTFILENAME2 = str(dest_dir) + plt_sufix_fnm + '-' + str(splt_smpl_sfx_f1_plt[0]) +'-'+str(int(LINES[0][lines]))+'-'+str(LINES[4][lines])+ '-' + stk_function +'-' + fit_type + '-'+fit_typ +'.eps'

	elif dest_dir == None:
		PLOTFILENAME1 = fit_plt_res   + plt_sufix_fnm + '-' + str(splt_smpl_sfx_f1_plt[0]) +'-'+str(int(LINES[0][lines]))+'-'+str(LINES[4][lines])+ '-' + stk_function +'-' + fit_type + '-' + fit_typ +'.pdf'
		PLOTFILENAME2 = fit_plt_res   + plt_sufix_fnm + '-' + str(splt_smpl_sfx_f1_plt[0]) +'-'+str(int(LINES[0][lines]))+'-'+str(LINES[4][lines])+ '-' + stk_function +'-' + fit_type + '-' + fit_typ +'.eps'
	'''
	plt.savefig(PLOTFILENAME1)
	if verbose == True:
		print colored('Generated Plot: ' + str(PLOTFILENAME1),'cyan')
	elif verbose ==False:
		pass
	if epssave == True:
		plt.savefig(PLOTFILENAME2, rasterized=True)
		#os.system('open Spectra.eps')
	elif epssave == False:
		pass
	if showplot == True:
		#os.system('open '+str(PLOTFILENAME))
		pass
	elif showplot == False:
		pass	
	plt.close('all')


	############################################
	############################################
	############################################

def Plot_Idp_EW_Lne(specfile_glx_f,specfile_glx_b,*args, **kwargs):
	z_glx_Ps        = kwargs.get('z_glx_Ps'    ,0)
	dest_dir        = kwargs.get('dest_dir'    , None)
	verbose         = kwargs.get('verbose'     , False)
	epssave         = kwargs.get('epssave'     , False)
	showplot        = kwargs.get('showplot'    , False) 

	autoaxis_Idp    = kwargs.get('autoaxis_Idp', False)
	#min_y_lim_Idp   = kwargs.get('min_y_lim'   , 0.5)
	#max_y_lim_Idp   = kwargs.get('max_y_lim'   , 1.5)

	lmb_min         = kwargs.get('lmb_min',1200)
	lmb_max         = kwargs.get('lmb_max',1700)

	lmb_min_lim     = lmb_min
	lmb_max_lim     = lmb_max

	upper_shift     = kwargs.get('upper_shift',0)
	lower_shift     = kwargs.get('lower_shift',0)
	#stk_function_m  = kwargs.get('stk_function_m',False)
	#stk_function_a  = kwargs.get('stk_function_a',False)
	#stk_function_b  = kwargs.get('stk_function_b',False)
	mlt_stk_fct     = kwargs.get('mlt_stk_fct','both')

	#stk_function   = kwargs.get('stk_function','med')

	fit_fnct        = kwargs.get('fit_fnct','gauss')
	dest_dir        = kwargs.get('dest_dir',None)

	stk_function    = kwargs.get('stk_function',' ')

	int_typ_spl     = kwargs.get('int_typ_spl','arcsec')
	#frg_ref_plt     = kwargs.get('frg_ref_plt',True)

	bst_err_plt     = kwargs.get('bst_err_plt',False)
	bst_itr_nmb     = kwargs.get('bst_itr_nmb',None)
	bst_err_plt_sym = kwargs.get('bst_err_plt_sym',True)

	fit_type_m      = kwargs.get('fit_type_m','scipy')
	fit_type_e      = kwargs.get('fit_type_e','scipy')
	fit_type_e      = kwargs.get('fit_type_e','lmfit')

	plt_lit_res     = kwargs.get('plt_lit_res',False)
	plt_log_axs     = kwargs.get('plt_log_axs',None)

	plt_inv_xax     = kwargs.get('plt_inv_xax',False)
	skip_fg_ref_ew  = kwargs.get('skip_fg_ref_ew',False)

	n_int_spt       = kwargs.get('n_int_spt',False)

	max_sep         = kwargs.get('max_sep'         ,23)

	rmv_uft_spc     = kwargs.get('rmv_uft_spc',False)

	if fit_type_m == 'scipy':
		ft_m_sfx = 'A'
	elif fit_type_m == 'lmfit':
		ft_m_sfx = 'L'
	else:
		pass


	print
	print colored('Plotting EW absoprtions dependent on: '+int_typ_spl,'yellow')
	print
	if int_typ_spl == 'kpc'  and n_int_spt == 0:#in specfile_glx_f:
		splt_smpl_sfx  = '_kpc' 
		splt_smpl_unt  = 'kpc'
		plt_nme_prp    = 'kpc'
		slc_kpc_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv)
		slc_kpc_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv)				
		slc_int_fg     = slc_kpc_int_fg[1]
		slc_int_bg     = slc_kpc_int_bg[1]		
		xlabel         = 'Impact Parameter b (kpc)'
		var_prp_hdr    = 'SKP'
		xticks_values  = [5,50, 100, 1500]
		yticks_values  = np.arange(0,30,0.5)#[0.1,0.5,1,3]
	elif int_typ_spl == 'kpc'  and n_int_spt == 1:#in specfile_glx_f:
		splt_smpl_sfx  = '_kpc' 
		splt_smpl_unt  = 'kpc'
		plt_nme_prp    = 'kpc'
		slc_kpc_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_1)
		slc_kpc_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_1)				
		slc_int_fg     = slc_kpc_int_fg[1]
		slc_int_bg     = slc_kpc_int_bg[1]
		xlabel         = 'Impact Parameter b (kpc)'
		var_prp_hdr    = 'SKP'
		xticks_values = [5,50, 100, 150]
		yticks_values = np.arange(0,30,.1)#[0.1,0.5,1,3]
	elif int_typ_spl == 'kpc'  and n_int_spt == 2:#in specfile_glx_f:
		splt_smpl_sfx  = '_kpc' 
		splt_smpl_unt  = 'kpc'
		plt_nme_prp    = 'kpc'
		slc_kpc_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_2)
		slc_kpc_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_2)				
		slc_int_fg     = slc_kpc_int_fg[1]
		slc_int_bg     = slc_kpc_int_bg[1]
		xlabel         = 'Impact Parameter b (kpc)'
		var_prp_hdr    = 'SKP'
		xticks_values  = [5,50, 100, 1500]
		yticks_values  = np.arange(0,30,0.5)#[0.1,0.5,1,3]
	elif int_typ_spl == 'kpc'  and n_int_spt == 3:#in specfile_glx_f:
		splt_smpl_sfx  = '_kpc' 
		splt_smpl_unt  = 'kpc'
		plt_nme_prp    = 'kpc'
		slc_kpc_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_3)
		slc_kpc_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_3)				
		slc_int_fg     = slc_kpc_int_fg[1]
		slc_int_bg     = slc_kpc_int_bg[1]
		xlabel         = 'Impact Parameter b (kpc)'
		var_prp_hdr    = 'SKP'
		xticks_values  = [5,50, 100, 1500]
		yticks_values  = np.arange(0,30,0.5)#[0.1,0.5,1,3]
	elif int_typ_spl == 'kpc'  and n_int_spt == 4:#in specfile_glx_f:
		splt_smpl_sfx  = '_kpc' 
		splt_smpl_unt  = 'kpc'
		plt_nme_prp    = 'kpc'
		slc_kpc_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_4)
		slc_kpc_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_4)				
		slc_int_fg     = slc_kpc_int_fg[1]
		slc_int_bg     = slc_kpc_int_bg[1]
		xlabel         = 'Impact Parameter b (kpc)'
		var_prp_hdr    = 'SKP'
		xticks_values  = [5,50, 100, 1500]
		yticks_values  = np.arange(0,30,0.5)#[0.1,0.5,1,3]
	elif int_typ_spl == 'mass' and n_int_spt == 0 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx  = '-mass'
		splt_smpl_unt  = 'mass'
		plt_nme_prp    = 'Mass'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23)				
		slc_int_fg     = slc_mss_int_fg[1]
		slc_int_bg     = slc_mss_int_bg[1]
		xlabel         = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr    = 'MSF'
		xticks_values  = np.arange(1,20,0.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl == 'mass' and n_int_spt == 1 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx  = '-mass'
		splt_smpl_unt  = 'mass'
		plt_nme_prp    = 'Mass'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_1)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_1)				
		slc_int_fg     = slc_mss_int_fg[1]
		slc_int_bg     = slc_mss_int_bg[1]
		xlabel         = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr    = 'MSF'
		xticks_values  = np.arange(1,20,0.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl == 'mass' and n_int_spt == 2 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx  = '-mass'
		splt_smpl_unt  = 'mass'
		plt_nme_prp    = 'Mass'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_2)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_2)				
		slc_int_fg     = slc_mss_int_fg[1]
		slc_int_bg     = slc_mss_int_bg[1]
		xlabel         = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr    = 'MSF'
		xticks_values  = np.arange(1,20,.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,.5)         #[0.1,0.5,1,3]
	elif int_typ_spl == 'mass' and n_int_spt == 3 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx  = '-mass'
		splt_smpl_unt  = 'mass'
		plt_nme_prp    = 'Mass'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_3)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_3)				
		slc_int_fg     = slc_mss_int_fg[1]
		slc_int_bg     = slc_mss_int_bg[1]
		xlabel         = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr    = 'MSF'
		xticks_values  = np.arange(1,20,0.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl == 'mass' and n_int_spt == 4 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx  = '-mass'
		splt_smpl_unt  = 'mass'
		plt_nme_prp    = 'Mass'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_4)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_4)				
		slc_int_fg     = slc_mss_int_fg[1]
		slc_int_bg     = slc_mss_int_bg[1]
		xlabel         = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr    = 'MSF'
		xticks_values  = np.arange(1,20,0.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)         #[0.1,0.5,1,3]				
	elif int_typ_spl == 'Age'  and n_int_spt == 0:#in specfile_glx_f:
		splt_smpl_sfx  = '-Age_F'
		splt_smpl_unt  = 'Age'
		plt_nme_prp    = 'Age'
		slc_age_int_fg_0 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv)
		slc_age_int_bg_0 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv)
		slc_int_fg     = slc_age_int_fg_0[1]
		slc_int_bg     = slc_age_int_bg_0[1]
		xlabel         = 'Age'
		var_prp_hdr    = 'AGF'
		xticks_values = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]  #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values = np.arange(0,30,.1)         #[0.1,0.5,1,3]
	elif int_typ_spl == 'Age'  and n_int_spt == 1 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx  = '-Age_F'
		splt_smpl_unt  = 'Age'
		plt_nme_prp    = 'Age'
		slc_age_int_fg_1 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_1)
		slc_age_int_bg_1 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_1)
		slc_int_fg     = slc_age_int_fg_1[1]
		slc_int_bg     = slc_age_int_bg_1[1]
		xlabel         = 'Age'
		var_prp_hdr    = 'AGF'
		xticks_values  = np.arange(1e8,20.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl == 'Age'  and n_int_spt == 2 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx  = '-Age_F'
		splt_smpl_unt  = 'Age'
		plt_nme_prp    = 'Age'
		slc_age_int_fg_2 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_2)
		slc_age_int_bg_2 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_2)
		slc_int_fg     = slc_age_int_fg_2[1]
		slc_int_bg     = slc_age_int_bg_2[1]
		xlabel         = 'Age'
		var_prp_hdr    = 'AGF'
		xticks_values  = np.arange(1e8,20.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl == 'Age'  and n_int_spt == 3 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx  = '-Age_F'
		splt_smpl_unt  = 'Age'
		plt_nme_prp    = 'Age'
		slc_age_int_fg_3 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_3)
		slc_age_int_bg_3 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_3)
		slc_int_fg     = slc_age_int_fg_3[1]
		slc_int_bg     = slc_age_int_bg_3[1]
		xlabel         = 'Age'
		var_prp_hdr    = 'AGF'
		xticks_values  = np.arange(1e8,20.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl == 'Age'  and n_int_spt == 4 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx  = '-Age_F'
		splt_smpl_unt  = 'Age'
		plt_nme_prp    = 'Age'
		slc_age_int_fg_4 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_4)
		slc_age_int_bg_4 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_4)
		slc_int_fg     = slc_age_int_fg_4[1]
		slc_int_bg     = slc_age_int_bg_4[1]
		xlabel         = 'Age'
		var_prp_hdr    = 'AGF'
		xticks_values  = np.arange(1e8,20.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl == 'SFR'  and n_int_spt == 0:#in specfile_glx_f:
		splt_smpl_sfx  = '-SFR' 
		splt_smpl_unt  = 'SFR' 
		plt_nme_prp    = 'SFR'
		slc_sfr_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv)
		slc_sfr_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv)
		slc_int_fg     = slc_sfr_int_fg[1]
		slc_int_bg     = slc_sfr_int_bg[1]
		xlabel         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr    = 'SFF'
		xticks_values  = np.arange(0,3,00.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl == 'SFR'  and n_int_spt == 1 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx  = '-SFR' 
		splt_smpl_unt  = 'SFR' 
		plt_nme_prp    = 'SFR'
		slc_sfr_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_1)
		slc_sfr_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_1)
		slc_int_fg     = slc_sfr_int_fg[1]
		slc_int_bg     = slc_sfr_int_bg[1]
		xlabel         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr    = 'SFF'
		xticks_values  = np.arange(0,3,00.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl == 'SFR'  and n_int_spt == 2 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx  = '-SFR' 
		splt_smpl_unt  = 'SFR' 
		plt_nme_prp    = 'SFR'
		slc_sfr_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_2)
		slc_sfr_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_2)
		slc_int_fg     = slc_sfr_int_fg[1]
		slc_int_bg     = slc_sfr_int_bg[1]
		xlabel         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr    = 'SFF'
		xticks_values  = np.arange(0,3,00.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl == 'SFR'  and n_int_spt == 3 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx  = '-SFR' 
		splt_smpl_unt  = 'SFR' 
		plt_nme_prp    = 'SFR'
		slc_sfr_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_3)
		slc_sfr_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_3)
		slc_int_fg     = slc_sfr_int_fg[1]
		slc_int_bg     = slc_sfr_int_bg[1]
		xlabel         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr    = 'SFF'
		xticks_values  = np.arange(0,3,00.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl == 'SFR'  and n_int_spt == 4 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx  = '-SFR' 
		splt_smpl_unt  = 'SFR' 
		plt_nme_prp    = 'SFR'
		slc_sfr_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_4)
		slc_sfr_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_4)
		slc_int_fg     = slc_sfr_int_fg[1]
		slc_int_bg     = slc_sfr_int_bg[1]
		xlabel         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr    = 'SFF'
		xticks_values  = np.arange(0,3,00.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl == 'sSFR' and n_int_spt == 0:# in specfile_glx_f:
		splt_smpl_sfx  = '-sSFR'
		splt_smpl_unt  = 'sSFR'
		plt_nme_prp    = 'sSFR'
		slc_ssf_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv)
		slc_ssf_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv)
		slc_int_fg     = slc_ssf_int_fg[1]
		slc_int_bg     = slc_ssf_int_bg[1]
		xlabel         = 'sSFR [Gyr]'
		var_prp_hdr    = 'sSF'
		xticks_values  = np.arange(-20,-01,0.1)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl == 'sSFR' and n_int_spt == 1 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx  = '-sSFR'
		splt_smpl_unt  = 'sSFR'
		plt_nme_prp    = 'sSFR'
		slc_ssf_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_1)
		slc_ssf_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_1)
		slc_int_fg     = slc_ssf_int_fg[1]
		slc_int_bg     = slc_ssf_int_bg[1]
		xlabel         = 'sSFR [Gyr]'
		var_prp_hdr    = 'sSF'
		xticks_values  = np.arange(-20,-01,0.1)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl == 'sSFR' and n_int_spt == 2 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx  = '-sSFR'
		splt_smpl_unt  = 'sSFR'
		plt_nme_prp    = 'sSFR'
		slc_ssf_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_2)
		slc_ssf_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_2)
		slc_int_fg     = slc_ssf_int_fg[1]
		slc_int_bg     = slc_ssf_int_bg[1]
		xlabel         = 'sSFR [Gyr]'
		var_prp_hdr    = 'sSF'
		xticks_values  = np.arange(-20,-01,0.1)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl == 'sSFR' and n_int_spt == 3 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx  = '-sSFR'
		splt_smpl_unt  = 'sSFR'
		plt_nme_prp    = 'sSFR'
		slc_ssf_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_3)
		slc_ssf_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_3)
		slc_int_fg     = slc_ssf_int_fg[1]
		slc_int_bg     = slc_ssf_int_bg[1]
		xlabel         = 'sSFR [Gyr]'
		var_prp_hdr    = 'sSF'
		xticks_values  = np.arange(-20,-01,0.1)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl == 'sSFR' and n_int_spt == 4 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx  = '-sSFR'
		splt_smpl_unt  = 'sSFR'
		plt_nme_prp    = 'sSFR'
		slc_ssf_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_4)
		slc_ssf_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_4)
		slc_int_fg     = slc_ssf_int_fg[1]
		slc_int_bg     = slc_ssf_int_bg[1]
		xlabel         = 'sSFR [Gyr]'
		var_prp_hdr    = 'sSF'
		xticks_values  = np.arange(-20,-1,0.25)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,.25)   #[0.1,0.5,1,3]						
	elif int_typ_spl == 'Lnuv' and n_int_spt == 0:# in specfile_glx_f:
		splt_smpl_sfx  = '-Lnuv'
		splt_smpl_unt  = 'ergs cm$^{-2}$ s$^{-1}$'
		plt_nme_prp    = 'Lnuv'
		slc_luv_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv)
		slc_luv_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv)
		slc_int_fg     = slc_luv_int_fg[1]
		slc_int_bg     = slc_luv_int_bg[1]
		xlabel         = 'L$_{\mathrm{NUV}}$ [ergs cm$^{-2}$ s$^{-1}$]'
		var_prp_hdr    = 'UVF'
		xticks_values  = np.arange(8,14,0.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl == 'Lnuv' and n_int_spt == 1 and max_sep==23:# in specfile_glx_f:
		splt_smpl_sfx  = '-Lnuv'
		splt_smpl_unt  = 'ergs cm$^{-2}$ s$^{-1}$'
		plt_nme_prp    = 'Lnuv'
		slc_luv_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_1)
		slc_luv_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_1)
		slc_int_fg     = slc_luv_int_fg[1]
		slc_int_bg     = slc_luv_int_bg[1]
		xlabel         = 'L$_{\mathrm{NUV}}$ [ergs cm$^{-2}$ s$^{-1}$]'
		var_prp_hdr    = 'UVF'
		xticks_values  = np.arange(8,14,0.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl == 'Lnuv' and n_int_spt == 2 and max_sep==23:# in specfile_glx_f:
		splt_smpl_sfx  = '-Lnuv'
		splt_smpl_unt  = 'ergs cm$^{-2}$ s$^{-1}$'
		plt_nme_prp    = 'Lnuv'
		slc_luv_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_2)
		slc_luv_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_2)
		slc_int_fg     = slc_luv_int_fg[1]
		slc_int_bg     = slc_luv_int_bg[1]
		xlabel         = 'L$_{\mathrm{NUV}}$ [ergs cm$^{-2}$ s$^{-1}$]'
		var_prp_hdr    = 'UVF'
		xticks_values  = np.arange(8,14,0.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl == 'Lnuv' and n_int_spt == 3 and max_sep==23:# in specfile_glx_f:
		splt_smpl_sfx  = '-Lnuv'
		splt_smpl_unt  = 'ergs cm$^{-2}$ s$^{-1}$'
		plt_nme_prp    = 'Lnuv'
		slc_luv_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_3)
		slc_luv_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_3)
		slc_int_fg     = slc_luv_int_fg[1]
		slc_int_bg     = slc_luv_int_bg[1]
		xlabel         = 'L$_{\mathrm{NUV}}$ [ergs cm$^{-2}$ s$^{-1}$]'
		var_prp_hdr    = 'UVF'
		xticks_values  = np.arange(8,14,0.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl == 'Lnuv' and n_int_spt == 4 and max_sep==23:# in specfile_glx_f:
		splt_smpl_sfx  = '-Lnuv'
		splt_smpl_unt  = 'ergs cm$^{-2}$ s$^{-1}$'
		plt_nme_prp    = 'Lnuv'
		slc_luv_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_4)
		slc_luv_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_4)
		slc_int_fg     = slc_luv_int_fg[1]
		slc_int_bg     = slc_luv_int_bg[1]
		xlabel         = 'L$_{\mathrm{NUV}}$ [ergs cm$^{-2}$ s$^{-1}$]'
		var_prp_hdr    = 'UVF'
		xticks_values  = np.arange(8,14,0.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl == 'sep_as' and n_int_spt == 0 and max_sep==23:
		splt_smpl_sfx  = '_as'
		splt_smpl_unt  = 'arcsec'
		plt_nme_prp    = 'Radial'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep[1])
		slc_int_fg     = slc_sep_int_fg[1]
		slc_int_bg     = slc_sep_int_bg[1]
		xlabel         = 'Impact Parameter b (kpc)'
		var_prp_hdr    = 'SKP'#'SAS'
		xticks_values  = [5,50, 100, 150]
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl == 'sep_as' and n_int_spt == 1 and max_sep==23:
		splt_smpl_sfx  = '_as'
		splt_smpl_unt  = 'arcsec'
		plt_nme_prp    = 'Radial'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_1[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_1[1])
		slc_int_fg     = slc_sep_int_fg[1]
		slc_int_bg     = slc_sep_int_bg[1]
		xlabel         = 'Impact Parameter b (kpc)'
		var_prp_hdr    = 'SKP'#'SAS'
		xticks_values  = [5,50, 100, 150]
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl == 'sep_as' and n_int_spt == 2 and max_sep==23:
		splt_smpl_sfx  = '_as'
		splt_smpl_unt  = 'arcsec'
		plt_nme_prp    = 'Radial'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_2[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_2[1])
		slc_int_fg     = slc_sep_int_fg[1]
		slc_int_bg     = slc_sep_int_bg[1]
		xlabel         = 'Impact Parameter b (kpc)'
		var_prp_hdr    = 'SKP'#'SAS'
		xticks_values  = [5,50, 100, 150]
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl == 'sep_as' and n_int_spt == 3 and max_sep==23:
		splt_smpl_sfx  = '_as'
		splt_smpl_unt  = 'arcsec'
		plt_nme_prp    = 'Radial'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_3[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_3[1])
		slc_int_fg     = slc_sep_int_fg[1]
		slc_int_bg     = slc_sep_int_bg[1]
		xlabel         = 'Impact Parameter b (kpc)'
		var_prp_hdr    = 'SKP'#'SAS'
		xticks_values  = [5,50, 100, 150]
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl == 'sep_as' and n_int_spt == 4 and max_sep==23:
		splt_smpl_sfx  = '_as'
		splt_smpl_unt  = 'arcsec'
		plt_nme_prp    = 'Radial'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_4[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_4[1])
		slc_int_fg     = slc_sep_int_fg[1]
		slc_int_bg     = slc_sep_int_bg[1]
		xlabel         = 'Impact Parameter b (kpc)'
		var_prp_hdr    = 'SKP'#'SAS'
		xticks_values  = [5,50, 100, 150]
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl == 'sep_as' and n_int_spt == 5 and max_sep==23:
		splt_smpl_sfx  = '_as'
		splt_smpl_unt  = 'arcsec'
		plt_nme_prp    = 'Radial'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_5[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_5[1])
		slc_int_fg     = slc_sep_int_fg[1]
		slc_int_bg     = slc_sep_int_bg[1]
		xlabel         = 'Impact Parameter b (kpc)'
		var_prp_hdr    = 'SKP'#'SAS'
		xticks_values  = [5,50, 100, 150, 200]
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl == 'sep_as' and n_int_spt == 6 and max_sep==23:
		splt_smpl_sfx  = '_as'
		splt_smpl_unt  = 'arcsec'
		plt_nme_prp    = 'Radial'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_6[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_6[1])
		slc_int_fg     = slc_sep_int_fg[1]
		slc_int_bg     = slc_sep_int_bg[1]
		xlabel         = 'Impact Parameter b (kpc)'
		var_prp_hdr    = 'SKP'#'SAS'
		xticks_values  = [5,50, 100, 150, 200]
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl == 'sep_as' and n_int_spt == 0 and max_sep==25:
		splt_smpl_sfx  = '_as'
		splt_smpl_unt  = 'arcsec'
		plt_nme_prp    = 'Radial'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep[1])
		slc_int_fg     = slc_sep_int_fg[1]
		slc_int_bg     = slc_sep_int_bg[1]
		xlabel         = 'Impact Parameter b (kpc)'
		var_prp_hdr    = 'SKP'#'SAS'
		xticks_values  = [5,50, 100, 150]
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl == 'sep_as' and n_int_spt == 1 and max_sep==25:
		splt_smpl_sfx  = '_as'
		splt_smpl_unt  = 'arcsec'
		plt_nme_prp    = 'Radial'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_1[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_1[1])
		slc_int_fg     = slc_sep_int_fg[1]
		slc_int_bg     = slc_sep_int_bg[1]
		xlabel         = 'Impact Parameter b (kpc)'
		var_prp_hdr    = 'SKP'#'SAS'
		xticks_values  = [5,50, 100, 150]
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl == 'sep_as' and n_int_spt == 2 and max_sep==25:
		splt_smpl_sfx  = '_as'
		splt_smpl_unt  = 'arcsec'
		plt_nme_prp    = 'Radial'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_2[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_2[1])
		slc_int_fg     = slc_sep_int_fg[1]
		slc_int_bg     = slc_sep_int_bg[1]
		xlabel         = 'Impact Parameter b (kpc)'
		var_prp_hdr    = 'SKP'#'SAS'
		xticks_values  = [5,50, 100, 150]
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl == 'sep_as' and n_int_spt == 3 and max_sep==25:
		splt_smpl_sfx  = '_as'
		splt_smpl_unt  = 'arcsec'
		plt_nme_prp    = 'Radial'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_3[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_3[1])
		slc_int_fg     = slc_sep_int_fg[1]
		slc_int_bg     = slc_sep_int_bg[1]
		xlabel         = 'Impact Parameter b (kpc)'
		var_prp_hdr    = 'SKP'#'SAS'
		xticks_values  = [5,50, 100, 150]
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl == 'sep_as' and n_int_spt == 4 and max_sep==25:
		splt_smpl_sfx  = '_as'
		splt_smpl_unt  = 'arcsec'
		plt_nme_prp    = 'Radial'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_4[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_4[1])
		slc_int_fg     = slc_sep_int_fg[1]
		slc_int_bg     = slc_sep_int_bg[1]
		xlabel         = 'Impact Parameter b (kpc)'
		var_prp_hdr    = 'SKP'#'SAS'
		xticks_values  = [5,50, 100, 150]
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl == 'sep_as' and n_int_spt == 5 and max_sep==25:
		splt_smpl_sfx  = '_as'
		splt_smpl_unt  = 'arcsec'
		plt_nme_prp    = 'Radial'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_5[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_5[1])
		slc_int_fg     = slc_sep_int_fg[1]
		slc_int_bg     = slc_sep_int_bg[1]
		xlabel         = 'Impact Parameter b (kpc)'
		var_prp_hdr    = 'SKP'#'SAS'
		xticks_values  = [5,50, 100, 150, 200]
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl == 'sep_as' and n_int_spt == 6 and max_sep==25:
		splt_smpl_sfx  = '_as'
		splt_smpl_unt  = 'arcsec'
		plt_nme_prp    = 'Radial'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_6[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_6[1])
		slc_int_fg     = slc_sep_int_fg[1]
		slc_int_bg     = slc_sep_int_bg[1]
		xlabel         = 'Impact Parameter b (kpc)'
		var_prp_hdr    = 'SKP'#'SAS'
		xticks_values  = [5,50, 100, 150, 200]
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl == 'magi' and n_int_spt == 0:# in specfile_glx:
		splt_smpl_sfx  = '_magi'
		splt_smpl_unt  = 'arcsec'
		plt_nme_prp    = 'magi'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv)
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv)
		slc_int_fg     = slc_sep_int_fg[1]
		slc_int_bg     = slc_sep_int_bg[1]
		xlabel         = 'mag$_{i}$'
		var_prp_hdr    = 'magi'#'SAS'
		xticks_values  = np.arange(-100,100,0.25)
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]				
	elif int_typ_spl == 'magi' and n_int_spt == 1:# in specfile_glx:
		splt_smpl_sfx  = '_magi'
		splt_smpl_unt  = 'mag'
		plt_nme_prp    = 'magi'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv)
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv)
		slc_int_fg     = slc_sep_int_fg[1]
		slc_int_bg     = slc_sep_int_bg[1]
		xlabel         = 'mag$_{i}$'
		var_prp_hdr    = 'magi'#'SAS'
		xticks_values  = np.arange(-100,100,0.25)
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]				
	elif int_typ_spl == 'magi' and n_int_spt == 2 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx  = '_magi'
		splt_smpl_unt  = 'mag'
		plt_nme_prp    = 'magi'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_2)
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_2)
		slc_int_fg     = slc_sep_int_fg[1]
		slc_int_bg     = slc_sep_int_bg[1]
		xlabel         = 'mag$_{i}$'
		var_prp_hdr    = 'magi'#'SAS'
		xticks_values  = np.arange(-100,100,0.25)
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]				
	elif int_typ_spl == 'magi' and n_int_spt == 3 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx  = '_magi'
		splt_smpl_unt  = 'mag'
		plt_nme_prp    = 'magi'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_3)
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_3)
		slc_int_fg     = slc_sep_int_fg[1]
		slc_int_bg     = slc_sep_int_bg[1]
		xlabel         = 'mag$_{i}$'
		var_prp_hdr    = 'magi'#'SAS'
		xticks_values  = np.arange(-100,100,0.25)
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]				
	elif int_typ_spl == 'magi' and n_int_spt == 4 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx  = '_magi'
		splt_smpl_unt  = 'mag'
		plt_nme_prp    = 'magi'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_4)
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_4)
		slc_int_fg     = slc_sep_int_fg[1]
		slc_int_bg     = slc_sep_int_bg[1]
		xlabel         = 'mag$_{i}$'
		var_prp_hdr    = 'magi'#'SAS'
		xticks_values  = np.arange(-100,100,0.25)
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]				
	elif int_typ_spl == 'phi' and n_int_spt == 0:# in specfile_glx:
		splt_smpl_sfx  = '-phi'
		splt_smpl_unt  = 'deg'
		plt_nme_prp    = 'PHI'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv)
		slc_int_fg     = slc_mss_int_fg[1]
		slc_int_bg     = slc_mss_int_bg[1]
		xlabel         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr    = 'PHI'#'SAS'
		xticks_values  = np.arange(-10,100,10) #xticks_values  = [0,100]
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl == 'phi'  and n_int_spt == 2:# in specfile_glx:
		splt_smpl_sfx  = '-phi'
		splt_smpl_unt  = 'deg'
		plt_nme_prp    = 'PHI'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv_23_2)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv_23_2)			
		slc_int_fg     = slc_mss_int_fg[1]
		slc_int_bg     = slc_mss_int_bg[1]
		xlabel         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr    = 'PHI'#'SAS'
		xticks_values  = np.arange(-10,100,10) #xticks_values  = [0,100]
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl == 'phi'  and n_int_spt == 3:# in specfile_glx:
		splt_smpl_sfx  = '-phi'
		splt_smpl_unt  = 'deg'
		plt_nme_prp    = 'PHI'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv_23_3)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv_23_3)			
		slc_int_fg     = slc_mss_int_fg[1]
		slc_int_bg     = slc_mss_int_bg[1]
		xlabel         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr    = 'PHI'#'SAS'
		xticks_values  = np.arange(-10,100,10) #xticks_values  = [0,100]
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]	
	elif int_typ_spl == 'icl_fg' and n_int_spt == 0:# in specfile_glx:
		splt_smpl_sfx  = '-icl'
		splt_smpl_unt  = 'deg'
		plt_nme_prp    = 'q'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv)
		slc_int_fg     = slc_mss_int_fg[1]
		slc_int_bg     = slc_mss_int_bg[1]
		xlabel         = '$q$'
		var_prp_hdr    = 'q'#'SAS'
		xticks_values  = np.arange(-1,1,0.1)
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl == 'icl_fg' and n_int_spt == 2:# in specfile_glx:
		splt_smpl_sfx  = '-icl'
		splt_smpl_unt  = 'deg'
		plt_nme_prp    = 'q'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv_23_2)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv_23_2)
		slc_int_fg     = slc_mss_int_fg[1]
		slc_int_bg     = slc_mss_int_bg[1]
		xlabel         = '$q$'
		var_prp_hdr    = 'q'#'SAS'
		xticks_values  = np.arange(-1,1,0.1)
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]	
	elif int_typ_spl == 'icl_fg' and n_int_spt == 3:# in specfile_glx:
		splt_smpl_sfx  = '-icl'
		splt_smpl_unt  = 'deg'
		plt_nme_prp    = 'q'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv_23_3)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv_23_3)
		slc_int_fg     = slc_mss_int_fg[1]
		slc_int_bg     = slc_mss_int_bg[1]
		xlabel         = '$q$'
		var_prp_hdr    = 'q'#'SAS'
		xticks_values  = np.arange(-1,1,0.1)
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl == 'icl_fg' and n_int_spt == 4:# in specfile_glx:
		splt_smpl_sfx  = '-icl'
		splt_smpl_unt  = 'deg'
		plt_nme_prp    = 'q'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv_23_4)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv_23_4)			
		slc_int_fg     = slc_mss_int_fg[1]
		slc_int_bg     = slc_mss_int_bg[1]
		xlabel         = '$q$'
		var_prp_hdr    = 'q'#'SAS'
		xticks_values  = np.arange(-1,1,0.1)
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl == 'n_sersic_fg' and n_int_spt == 0:# in specfile_glx:
		splt_smpl_sfx  = '-n_F'
		splt_smpl_unt  = 'n'
		plt_nme_prp    = 'n_srs'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,n_srs_itv)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,n_srs_itv)
		slc_int_fg     = slc_mss_int_fg[1]
		slc_int_bg     = slc_mss_int_bg[1]
		xlabel         = 'n'
		var_prp_hdr    = 'nsr'#'SAS'
		xticks_values  = np.arange(-1,3,0.25)
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl == 'n_sersic_fg'  and n_int_spt == 2:# in specfile_glx:
		splt_smpl_sfx  = '-n_srs'
		splt_smpl_unt  = 'n'
		plt_nme_prp    = 'n_srs'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,n_srs_itv_23_2)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,n_srs_itv_23_2)			
		slc_int_fg     = slc_mss_int_fg[1]
		slc_int_bg     = slc_mss_int_bg[1]
		xlabel         = 'n'
		var_prp_hdr    = 'nsr'#'SAS'
		xticks_values  = np.arange(-1,3,0.25)
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl == 'r_eff_fg' and n_int_spt == 0:# in specfile_glx:
		splt_smpl_sfx  = '-r_eff'
		splt_smpl_unt  = 'arcsec'
		plt_nme_prp    = 'r_eff'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv)
		slc_int_fg     = slc_mss_int_fg[1]
		slc_int_bg     = slc_mss_int_bg[1]  
		xlabel         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr    = 'ref'#'SAS'
		xticks_values  = np.arange(-1,50,0.5)
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl == 'r_eff_fg'  and n_int_spt == 2:# in specfile_glx:
		splt_smpl_sfx  = '-r_eff'
		splt_smpl_unt  = 'arcsec'
		plt_nme_prp    = 'r_eff'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv_23_2)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv_23_2)			
		slc_int_fg = slc_mss_int_fg[1]
		slc_int_bg = slc_mss_int_bg[1]
		xlabel         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr    = 'ref'#'SAS'
		xticks_values  = np.arange(-1,50,0.5)
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl == 'r_eff_fg'  and n_int_spt == 3:# in specfile_glx:
		splt_smpl_sfx  = '-r_eff'
		splt_smpl_unt  = 'arcsec'
		plt_nme_prp    = 'r_eff'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv_23_3)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv_23_3)			
		slc_int_fg     = slc_mss_int_fg[1]
		slc_int_bg     = slc_mss_int_bg[1]
		xlabel         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr    = 'ref'#'SAS'
		xticks_values  = np.arange(-1,50,0.5)
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
			
	print
	print colored('Spectra  : '+str(specfile_glx_f),'yellow')
	print colored('Spectra  : '+str(specfile_glx_b),'yellow')
	print colored('Intervals: '+str(slc_int_fg)	,'yellow')
	print
	print colored('Lower shift: '+str(lower_shift),'yellow')
	print colored('Lower shift: '+str(slc_int_fg[lower_shift]),'yellow')
	print colored('Upper shift: '+str(upper_shift)+','+str(upper_shift-1),'yellow')
	print colored('Upper shift: '+str(slc_int_fg[len(slc_int_bg)-upper_shift-1]),'yellow')
	print

	B_FLAG = (specfile_glx_b.split('ss-zf_B-')[1]).rsplit('-ss-zf_F-')[0]
	F_FLAG = (specfile_glx_b.split('ss-zf_F-')[1]).rsplit('-ss-sep_as-')[0]

	print
	print colored('Background Redshift Flag: '+str(B_FLAG),'yellow')
	print colored('Foreground Redshift Flag: '+str(F_FLAG),'yellow')
	print

	ini_fg_spc_m  = res_stk_res    + specfile_glx_f + str(slc_int_fg[-1]) + '-stk-med'+str(stk_function)+'.fits'
	ini_fg_spc_a  = res_stk_res    + specfile_glx_f + str(slc_int_fg[-1]) + '-stk-avg'+str(stk_function)+'.fits'
	#plt_sufix_fnm = specfile_glx_b + slc_int_fg[lower_shift] +'-' +slc_int_fg[len(slc_int_bg[0])-upper_shift-1]
	#PLOT_TITLE    = 'z_Bg: ' + B_FLAG + ', z_Fg:' + F_FLAG + ' ' + str(slc_int_fg[1][lower_shift]) + '-' + str(slc_int_fg[1][len(slc_int_bg[0])-upper_shift-1]) 

	try:
		plt_sufix_fnm = specfile_glx_b + slc_int_fg[lower_shift] +'-' +slc_int_fg[len(slc_int_bg[0])-upper_shift-1]
		PLOT_TITLE    = 'z_Bg: ' + B_FLAG + ', z_Fg:' + F_FLAG + ' ' + str(slc_int_fg[1][lower_shift]) + '-' + str(slc_int_fg[1][len(slc_int_bg[0])-upper_shift-1]) 
	except IndexError:
		plt_sufix_fnm = specfile_glx_b + slc_int_fg[lower_shift] +'-' +slc_int_fg[len(slc_int_bg)-upper_shift-1]
		PLOT_TITLE    = 'z_Bg: ' + B_FLAG + ', z_Fg:' + F_FLAG + ' ' + str(slc_int_fg[1][lower_shift]) + '-' + str(slc_int_fg[1][len(slc_int_bg)-upper_shift-1]) 


	FILES_M =[]
	FILES_A =[]
	if skip_fg_ref_ew == False:		
		FILES_M.append(ini_fg_spc_m)
		FILES_A.append(ini_fg_spc_a)
	elif skip_fg_ref_ew == True:
		pass
	print colored('Intervals to be plotted: ','yellow')
	print colored('Indices : '+str(range(lower_shift,len(slc_int_bg)-upper_shift)),'yellow')
	print
	for interval_range in range(lower_shift,len(slc_int_bg)-upper_shift):
		print colored('Interval: ' + str(interval_range) + ': ' + str(slc_int_fg[interval_range]),'yellow')
		cur_spc_1 = res_stk_res + specfile_glx_b + str(slc_int_fg[interval_range]) + '-stk-med'+str(stk_function)+'.fits'
		cur_spc_2 = res_stk_res + specfile_glx_b + str(slc_int_fg[interval_range]) + '-stk-avg'+str(stk_function)+'.fits'
		FILES_M.append(cur_spc_1)
		FILES_A.append(cur_spc_2)

	if 'Fg' in specfile_glx_b[2]:
		glx_type = 'Fg'
		clr_plt  = 'red'
	elif 'Bg' in specfile_glx_b[2]:
		glx_type = 'Bg'
		clr_plt  = 'blue'

	if mlt_stk_fct == 'med':#stk_function_m == True:
		stk_function_file = 'med-c'

	elif mlt_stk_fct == 'avg':#stk_function_a == True:
		stk_function_file = 'avg-c'

	elif mlt_stk_fct == 'both':#stk_function_b == True:
		stk_function_file = 'med-avg'

	print
	print colored('EW from spectra files: ','yellow')
	print
	print colored("\n".join([FILE for FILE in FILES_M]),'blue')
	print
	print colored("\n".join([FILE for FILE in FILES_A]),'red')
	print

	###
	colors = dict(mcolors.BASE_COLORS, **mcolors.CSS4_COLORS)

	# Sort colors by hue, saturation, value and name.
	by_hsv = sorted((tuple(mcolors.rgb_to_hsv(mcolors.to_rgba(color)[:3])), name)
	                for name, color in colors.items())
	sorted_names = [name for hsv, name in by_hsv]

	#print "\n".join([color_new for color_new in sorted_names])
	sorted_names = np.asarray(sorted_names)

	colors = [
			'white','w','snow','whitesmoke',
			'floralwhite','ivory','aliceblue',
			'ghostwhite','lightgoldenrodyellow',
			'moccasin','bisque','cornslik',
			'wheat','navajowhite','beige',
			'lemonchiffon','blanchedalmond','honeydew',
			'palegoldenrod',
			#'papayawhip',
			'cornsilk',
			'lightyellow','mintcream',
			'lightcyan']
	for colour in colors:
		sorted_names = Delete_Element_Array(sorted_names,colour)

	n = len(sorted_names)
	ncols = 4
	nrows = n // ncols #+ 1

	array_new_colors = np.empty([ncols,nrows],dtype = 'S20')
	for element,a in  enumerate(itertools.product(range(nrows),range(ncols))):
	    array_new_colors[a[1],a[0]]=sorted_names[element]

	MSK_NTMS=2.5
	index_line_color = -1
	pts_line_ALL_A = []
	pts_line_ALL_M = []
	lbl_line_ALL_A = []
	lbl_line_ALL_M = []

	mrk_line_ALL = []
	clr_line_ALL = []
	
	print
	print colored('Getting Median Values for Subsamples split by: ' + int_typ_spl + '_MED','cyan')
	print colored('From Stacked spectra Header: ' + var_prp_hdr+'_MED','cyan')
	print

	#SPEC_SEP_VAR = [Header_Get(spec_res_file,var_prp_hdr+'_MED') for spec_res_file in FILES_A[1:]]
	SPEC_SEP_VAR = [Header_Get(spec_res_file,var_prp_hdr+'_MED') for spec_res_file in FILES_A]
	#if skip_fg_ref_ew == False:
		#SPEC_SEP_VAR = np.insert(SPEC_SEP_VAR,[0],int(1))
	#elif skip_fg_ref_ew == True:
		#pass
	SPEC_SEP_VAR = np.asarray(SPEC_SEP_VAR)
	SPEC_SEP_VAR_BU = SPEC_SEP_VAR

	LNS_PLT = []
	for index_line,lines in enumerate(range(len(LINES[0]))):		
		if lmb_min < LINES[0][lines]*(1+z_glx_Ps) < lmb_max:
			LNS_PLT.append(LINES[4][lines])
			print
			print colored('Plotting EW Radial Profile for line: '+str(LINES[4][lines]) + ' '+ str(LINES[5][lines]) +  ' '+ str(LINES[3][lines]),'yellow')
			print
			print 
			print colored("\n".join([FILE for FILE in FILES_M]),'yellow')
			print
			if mlt_stk_fct == 'med':#stk_function_m == True :
				try: 
					SPEC_POINTS_M_1  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_M]
					SPEC_POINTS_M_2  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_M]
					SPEC_POINTS_M_3  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_M]
					SPEC_POINTS_M_4  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_M]
					SPEC_POINTS_M_5  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_M]
					SPEC_POINTS_M_6  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_M]
					SPEC_POINTS_M_7  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_M]
					SPEC_POINTS_M_8  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_M]
					SPEC_POINTS_M_9  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_M]
					SPEC_POINTS_M_10 = [Header_Get(spec_res_file,str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_M]				

					SPEC_POINTS_NMB    = [Header_Get(spec_res_file,'STK_NUM') for spec_res_file in FILES_M]					

					SPEC_POINTS_M_SNR  = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU1'),0) for spec_res_file in FILES_M]
					SPEC_POINTS_M_SNR2 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU2'),0) for spec_res_file in FILES_M]
					SPEC_POINTS_M_SNR3 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU3'),0) for spec_res_file in FILES_M]
					SPEC_POINTS_M_SNR4 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU4'),0) for spec_res_file in FILES_M]
					SPEC_POINTS_M_SNR5 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNB2'),0) for spec_res_file in FILES_M]

					SPEC_POINTS_NMB2    = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NHT') for spec_res_file in FILES_M]					
					SPEC_POINTS_NMB3    = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NHW') for spec_res_file in FILES_M]					

					indx_msk_med       = (np.where(np.asarray(SPEC_POINTS_M_9)==999999.99999)[0])
					indx_msk_med       = np.asarray(indx_msk_med)			
					SPEC_POINTS_M_9    = np.asarray(SPEC_POINTS_M_9)					
										
					SPEC_POINTS_M_9[indx_msk_med] = np.nan
					
				except KeyError:
					print
					print colored('Header Error! - L23907','yellow')
					print str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'O'
					print str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'O'
					print str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'O'
					print str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'O'
					print str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'O'
					print str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'C'
					print str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'C'
					print str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'C'
					print str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'C'
					print str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'C'
					print
					print 	'STK_NUM'
					print
					print str(LINES[5][lines])+'_SNU1'
					print str(LINES[5][lines])+'_SNU2'
					print str(LINES[5][lines])+'_SNU4'
					print str(LINES[5][lines])+'_SNB2'
					print
					print str(LINES[5][lines])+'_NHT'
					print str(LINES[5][lines])+'_NHW'									
					print 
					print colored("\n".join([FILE for FILE in FILES_M]),'yellow')
					print
					SPEC_POINTS_M_1  = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_2  = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_3  = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_4  = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_5  = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_6  = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_7  = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_8  = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_9  = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_10 = np.zeros([len(FILES_M)])

					SPEC_POINTS_NMB    = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_SNR  = np.zeros([len(FILES_M)])

					SPEC_POINTS_M_SNR2  = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_SNR3  = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_SNR4  = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_SNR5  = np.zeros([len(FILES_M)])

					SPEC_POINTS_NMB2    = np.zeros([len(FILES_M)])
					SPEC_POINTS_NMB3    = np.zeros([len(FILES_M)])
			elif mlt_stk_fct == 'avg':#stk_function_a == True :
				try: 
					SPEC_POINTS_A_1  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_A]
					SPEC_POINTS_A_2  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_A]
					SPEC_POINTS_A_3  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_A]
					SPEC_POINTS_A_4  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_A]
					SPEC_POINTS_A_5  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_A]
					SPEC_POINTS_A_6  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_A]
					SPEC_POINTS_A_7  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_A]
					SPEC_POINTS_A_8  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_A]
					SPEC_POINTS_A_9  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_A]
					SPEC_POINTS_A_10 = [Header_Get(spec_res_file,str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_A]
					
					SPEC_POINTS_NMB    = [Header_Get(spec_res_file,'STK_NUM') for spec_res_file in FILES_A]

					SPEC_POINTS_A_SNR  = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU1'),0) for spec_res_file in FILES_A]
					SPEC_POINTS_A_SNR2 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU2'),0) for spec_res_file in FILES_A]
					SPEC_POINTS_A_SNR3 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU3'),0) for spec_res_file in FILES_A]
					SPEC_POINTS_A_SNR4 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU4'),0) for spec_res_file in FILES_A]
					SPEC_POINTS_A_SNR5 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNB2'),0) for spec_res_file in FILES_A]

					SPEC_POINTS_NMB2   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NHT') for spec_res_file in FILES_M]					
					SPEC_POINTS_NMB3   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NHW') for spec_res_file in FILES_M]					

					indx_msk_avg       = (np.where(np.asarray(SPEC_POINTS_A_9)==999999.99999)[0])
					indx_msk_avg       = np.asarray(indx_msk_avg)
					SPEC_POINTS_A_9    = np.asarray(SPEC_POINTS_A_9)
										
					SPEC_POINTS_A_9[indx_msk_avg] = np.nan
				except KeyError:
					print
					print colored('Header Error! - L23983','yellow')
					print str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'O'
					print str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'O'
					print str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'O'
					print str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'O'
					print str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'O'
					print str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'C'
					print str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'C'
					print str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'C'
					print str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'C'
					print str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'C'
					print
					print 	'STK_NUM'
					print
					print str(LINES[5][lines])+'_SNU1'
					print str(LINES[5][lines])+'_SNU2'
					print str(LINES[5][lines])+'_SNU4'
					print str(LINES[5][lines])+'_SNB2'
					print
					print str(LINES[5][lines])+'_NHT'
					print str(LINES[5][lines])+'_NHW'					
					print
					print colored("\n".join([FILE for FILE in FILES_A]),'yellow')
					print
					SPEC_POINTS_A_1  = np.zeros([len(FILES_A)])
					SPEC_POINTS_A_2  = np.zeros([len(FILES_A)])
					SPEC_POINTS_A_3  = np.zeros([len(FILES_A)])
					SPEC_POINTS_A_4  = np.zeros([len(FILES_A)])
					SPEC_POINTS_A_5  = np.zeros([len(FILES_A)])
					SPEC_POINTS_A_6  = np.zeros([len(FILES_A)])
					SPEC_POINTS_A_7  = np.zeros([len(FILES_A)])
					SPEC_POINTS_A_8  = np.zeros([len(FILES_A)])
					SPEC_POINTS_A_9  = np.zeros([len(FILES_A)])
					SPEC_POINTS_A_10 = np.zeros([len(FILES_A)])

					SPEC_POINTS_NMB    = np.zeros([len(FILES_A)])
					SPEC_POINTS_A_SNR  = np.zeros([len(FILES_A)])

					SPEC_POINTS_A_SNR2 = np.zeros([len(FILES_A)])
					SPEC_POINTS_A_SNR3 = np.zeros([len(FILES_A)])
					SPEC_POINTS_A_SNR4 = np.zeros([len(FILES_A)])
					SPEC_POINTS_A_SNR5 = np.zeros([len(FILES_A)])

					SPEC_POINTS_NMB2   = np.zeros([len(FILES_M)])
					SPEC_POINTS_NMB3   = np.zeros([len(FILES_M)])
			elif mlt_stk_fct == 'both':#stk_function_b	== True:
				try: 
					SPEC_POINTS_M_1  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_M]
					SPEC_POINTS_M_2  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_M]
					SPEC_POINTS_M_3  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_M]
					SPEC_POINTS_M_4  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_M]
					SPEC_POINTS_M_5  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_M]
					SPEC_POINTS_M_6  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_M]
					SPEC_POINTS_M_7  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_M]
					SPEC_POINTS_M_8  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_M]
					SPEC_POINTS_M_9  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_M]
					SPEC_POINTS_M_10 = [Header_Get(spec_res_file,str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_M]				

					SPEC_POINTS_A_1  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_A]
					SPEC_POINTS_A_2  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_A]
					SPEC_POINTS_A_3  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_A]
					SPEC_POINTS_A_4  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_A]
					SPEC_POINTS_A_5  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_A]
					SPEC_POINTS_A_6  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_A]
					SPEC_POINTS_A_7  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_A]
					SPEC_POINTS_A_8  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_A]
					SPEC_POINTS_A_9  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_A]
					SPEC_POINTS_A_10 = [Header_Get(spec_res_file,str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_A]

					SPEC_POINTS_NMB    = [Header_Get(spec_res_file,'STK_NUM') for spec_res_file in FILES_A]
					SPEC_POINTS_A_SNR  = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU1'),0) for spec_res_file in FILES_A]
					SPEC_POINTS_M_SNR  = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU1'),0) for spec_res_file in FILES_M]

					SPEC_POINTS_A_SNR2 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU2'),0) for spec_res_file in FILES_A]
					SPEC_POINTS_M_SNR2 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU2'),0) for spec_res_file in FILES_M]

					SPEC_POINTS_A_SNR3 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU3'),0) for spec_res_file in FILES_A]
					SPEC_POINTS_M_SNR3 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU3'),0) for spec_res_file in FILES_M]

					SPEC_POINTS_A_SNR4 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU4'),0) for spec_res_file in FILES_A]
					SPEC_POINTS_M_SNR4 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU4'),0) for spec_res_file in FILES_M]

					SPEC_POINTS_A_SNR5 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNB2'),0) for spec_res_file in FILES_A]
					SPEC_POINTS_M_SNR5 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNB2'),0) for spec_res_file in FILES_M]

					SPEC_POINTS_NMB2   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NHT') for spec_res_file in FILES_M]
					SPEC_POINTS_NMB3   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NHW') for spec_res_file in FILES_M]

					indx_msk_med       = (np.where(np.asarray(SPEC_POINTS_M_9)==999999.99999)[0])
					indx_msk_avg       = (np.where(np.asarray(SPEC_POINTS_A_9)==999999.99999)[0])
					indx_msk_med       = np.asarray(indx_msk_med)			
					indx_msk_avg       = np.asarray(indx_msk_avg)
					SPEC_POINTS_M_9    = np.asarray(SPEC_POINTS_M_9)					
					SPEC_POINTS_A_9    = np.asarray(SPEC_POINTS_A_9)

					SPEC_POINTS_M_9[indx_msk_med] = np.nan
					SPEC_POINTS_A_9[indx_msk_avg] = np.nan

				except KeyError:
					print
					print colored('Header Error! - L24083','yellow')
					print str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'O'
					print str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'O'
					print str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'O'
					print str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'O'
					print str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'O'
					print str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'C'
					print str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'C'
					print str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'C'
					print str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'C'
					print str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'C'
					print
					print 	'STK_NUM'
					print
					print str(LINES[5][lines])+'_SNU1'
					print str(LINES[5][lines])+'_SNU2'
					print str(LINES[5][lines])+'_SNU4'
					print str(LINES[5][lines])+'_SNB2'
					print
					print str(LINES[5][lines])+'_NHT'
					print str(LINES[5][lines])+'_NHW'
					print
					print colored("\n".join([FILE for FILE in FILES_M]),'yellow')
					print
					print colored("\n".join([FILE for FILE in FILES_A]),'yellow')
					print
					SPEC_POINTS_M_1  = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_2  = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_3  = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_4  = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_5  = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_6  = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_7  = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_8  = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_9  = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_10 = np.zeros([len(FILES_M)])

					SPEC_POINTS_A_1  = np.zeros([len(FILES_M)])
					SPEC_POINTS_A_2  = np.zeros([len(FILES_M)])
					SPEC_POINTS_A_3  = np.zeros([len(FILES_M)])
					SPEC_POINTS_A_4  = np.zeros([len(FILES_M)])
					SPEC_POINTS_A_5  = np.zeros([len(FILES_M)])
					SPEC_POINTS_A_6  = np.zeros([len(FILES_M)])
					SPEC_POINTS_A_7  = np.zeros([len(FILES_M)])
					SPEC_POINTS_A_8  = np.zeros([len(FILES_M)])
					SPEC_POINTS_A_9  = np.zeros([len(FILES_M)])
					SPEC_POINTS_A_10 = np.zeros([len(FILES_M)])

					SPEC_POINTS_NMB    = np.zeros([len(FILES_M)])
					SPEC_POINTS_A_SNR  = np.zeros([len(FILES_A)])
					SPEC_POINTS_M_SNR  = np.zeros([len(FILES_M)])

					SPEC_POINTS_A_SNR2 = np.zeros([len(FILES_A)])
					SPEC_POINTS_M_SNR2 = np.zeros([len(FILES_M)])

					SPEC_POINTS_A_SNR3 = np.zeros([len(FILES_A)])
					SPEC_POINTS_M_SNR3 = np.zeros([len(FILES_M)])

					SPEC_POINTS_A_SNR4 = np.zeros([len(FILES_A)])
					SPEC_POINTS_M_SNR4 = np.zeros([len(FILES_M)])

					SPEC_POINTS_A_SNR5 = np.zeros([len(FILES_A)])
					SPEC_POINTS_M_SNR5 = np.zeros([len(FILES_M)])

					SPEC_POINTS_NMB2   = np.zeros([len(FILES_M)])
					SPEC_POINTS_NMB3   = np.zeros([len(FILES_M)])

			lmb_min_lim_line_ft = LINES[0][lines] - MSK_NTMS*LINES[1][lines]
			lmb_max_lim_line_ft = LINES[0][lines] + MSK_NTMS*LINES[1][lines]
			lmb_min_lim_line    = LINES[0][lines]*(1+z_glx_Ps) - LINES[2][lines]#- 20#LINES[2][lines] - 10
			lmb_max_lim_line    = LINES[0][lines]*(1+z_glx_Ps) + LINES[2][lines]#+ 20#LINES[2][lines] + 10

			###############################################TABLE ERRORS FROM BOOTSTRAP####################################################
			if bst_err_plt == True and mlt_stk_fct == 'both':#stk_function_b == True:
				TBL_BS_STT_M =[]
				TBL_BS_STT_A =[]

				ini_fg_tbl_m  = stt_bst_tbl    + specfile_glx_f + str(slc_int_fg[-1]) +'-BS-'+ str(bst_itr_nmb) + '-stk-med'+str(stk_function)+'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gauss.csv'
				ini_fg_tbl_a  = stt_bst_tbl    + specfile_glx_f + str(slc_int_fg[-1]) +'-BS-'+ str(bst_itr_nmb) + '-stk-avg'+str(stk_function)+'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gauss.csv'
				#plt_sufix_fnm = specfile_glx_b + slc_int_fg[lower_shift] +'-' +slc_int_fg[len(slc_int_bg[0])-upper_shift-1]

				if skip_fg_ref_ew == False:		
					TBL_BS_STT_M.append(ini_fg_tbl_m)
					TBL_BS_STT_A.append(ini_fg_tbl_a)
				elif skip_fg_ref_ew == True:
					print
					print colored('Omitting FG EW value in the PLOT!','yellow')
					print					
					pass

				for interval_range in range(lower_shift,len(slc_int_bg)-upper_shift):
					cur_tbl_bs_stt_1 = stt_bst_tbl + specfile_glx_b + str(slc_int_fg[interval_range]) +'-BS-'+ str(bst_itr_nmb) + '-stk-med' +stk_function +'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gauss.csv'
					cur_tbl_bs_stt_2 = stt_bst_tbl + specfile_glx_b + str(slc_int_fg[interval_range]) +'-BS-'+ str(bst_itr_nmb) + '-stk-avg' +stk_function +'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gauss.csv'
					TBL_BS_STT_M.append(cur_tbl_bs_stt_1)
					TBL_BS_STT_A.append(cur_tbl_bs_stt_2)
				print 
				print colored('BS Errors from tables:','yellow')
				print
				print colored("\n".join([TABLE for TABLE in TBL_BS_STT_M]),'blue')
				print
				print colored("\n".join([TABLE for TABLE in TBL_BS_STT_A]),'red')
				print

				SPEC_POINTS_M_9_ERR=[]
				SPEC_POINTS_A_9_ERR=[]
				SPEC_POINTS_M_9_ERR.append((([Confident_Intervals(tbl_cdf_file,tbl_format_ipt,cdf2bobt_lne=str(LINES[3][lines]),cdf_2b_rtrn='1sgm',rmv_uft_spc=rmv_uft_spc) for tbl_cdf_file in TBL_BS_STT_M])))
				SPEC_POINTS_A_9_ERR.append((([Confident_Intervals(tbl_cdf_file,tbl_format_ipt,cdf2bobt_lne=str(LINES[3][lines]),cdf_2b_rtrn='1sgm',rmv_uft_spc=rmv_uft_spc) for tbl_cdf_file in TBL_BS_STT_A])))

				SPEC_POINTS_M_9_ERR = np.asarray(SPEC_POINTS_M_9_ERR).flatten().reshape(abs(lower_shift-(len(slc_int_fg)-upper_shift)),2)
				SPEC_POINTS_A_9_ERR = np.asarray(SPEC_POINTS_A_9_ERR).flatten().reshape(abs(lower_shift-(len(slc_int_fg)-upper_shift)),2)

				SPEC_POINTS_M_9_ERR_LOW = SPEC_POINTS_M_9_ERR[:,0]
				SPEC_POINTS_M_9_ERR_HGH = SPEC_POINTS_M_9_ERR[:,1]
				SPEC_POINTS_A_9_ERR_LOW = SPEC_POINTS_A_9_ERR[:,0]
				SPEC_POINTS_A_9_ERR_HGH = SPEC_POINTS_A_9_ERR[:,1]
			elif bst_err_plt == True and mlt_stk_fct == 'med':#stk_function_m == True:
				TBL_BS_STT_M =[]
				TBL_BS_STT_A =[]

				ini_fg_tbl_m  = stt_bst_tbl    + specfile_glx_f + str(slc_int_fg[-1]) +'-BS-'+ str(bst_itr_nmb) + '-stk-med'+str(stk_function)+'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gauss.csv'
				#ini_fg_tbl_a  = stt_bst_tbl    + specfile_glx_f + str(slc_int_fg[-1]) +'-BS-'+ str(bst_itr_nmb) + '-stk-avg'+str(stk_function)+'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gauss.csv'
				#plt_sufix_fnm = specfile_glx_b + slc_int_fg[lower_shift] +'-' +slc_int_fg[len(slc_int_bg[0])-upper_shift-1]

				if skip_fg_ref_ew == False:		
					TBL_BS_STT_M.append(ini_fg_tbl_m)
					#TBL_BS_STT_A.append(ini_fg_tbl_a)
				elif skip_fg_ref_ew == True:
					print
					print colored('Omitting FG EW value in the PLOT!','yellow')
					print					
					pass

				for interval_range in range(lower_shift,len(slc_int_bg)-upper_shift):
					cur_tbl_bs_stt_1 = stt_bst_tbl + specfile_glx_b + str(slc_int_fg[interval_range]) +'-BS-'+ str(bst_itr_nmb) + '-stk-med' +stk_function +'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gauss.csv'
					#cur_tbl_bs_stt_2 = stt_bst_tbl + specfile_glx_b + str(slc_int_fg[interval_range]) +'-BS-'+ str(bst_itr_nmb) + '-stk-avg' +stk_function +'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gauss.csv'
					TBL_BS_STT_M.append(cur_tbl_bs_stt_1)
					#TBL_BS_STT_A.append(cur_tbl_bs_stt_2)
				print 
				print colored('BS Errors from tables:','yellow')
				print
				print colored("\n".join([TABLE for TABLE in TBL_BS_STT_M]),'blue')
				print
				#print colored("\n".join([TABLE for TABLE in TBL_BS_STT_A]),'red')
				#print

				SPEC_POINTS_M_9_ERR=[]
				#SPEC_POINTS_A_9_ERR=[]
				SPEC_POINTS_M_9_ERR.append((([Confident_Intervals(tbl_cdf_file,tbl_format_ipt,cdf2bobt_lne=str(LINES[3][lines]),cdf_2b_rtrn='1sgm',rmv_uft_spc=rmv_uft_spc) for tbl_cdf_file in TBL_BS_STT_M])))
				#SPEC_POINTS_A_9_ERR.append((([Confident_Intervals(tbl_cdf_file,tbl_format_ipt,cdf2bobt_lne=str(LINES[3][lines]),cdf_2b_rtrn='1sgm',rmv_uft_spc=rmv_uft_spc) for tbl_cdf_file in TBL_BS_STT_A])))

				SPEC_POINTS_M_9_ERR = np.asarray(SPEC_POINTS_M_9_ERR).flatten().reshape(abs(lower_shift-(len(slc_int_fg)-upper_shift)),2)
				#SPEC_POINTS_A_9_ERR = np.asarray(SPEC_POINTS_A_9_ERR).flatten().reshape(abs(lower_shift-(len(slc_int_fg)-upper_shift)),2)

				SPEC_POINTS_M_9_ERR_LOW = SPEC_POINTS_M_9_ERR[:,0]
				SPEC_POINTS_M_9_ERR_HGH = SPEC_POINTS_M_9_ERR[:,1]
				#SPEC_POINTS_A_9_ERR_LOW = SPEC_POINTS_A_9_ERR[:,0]
				#SPEC_POINTS_A_9_ERR_HGH = SPEC_POINTS_A_9_ERR[:,1]
			elif bst_err_plt == True and mlt_stk_fct == 'avg':#stk_function_a == True:
				#TBL_BS_STT_M =[]
				TBL_BS_STT_A =[]

				#ini_fg_tbl_m  = stt_bst_tbl    + specfile_glx_f + str(slc_int_fg[-1]) +'-BS-'+ str(bst_itr_nmb) + '-stk-med'+str(stk_function)+'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gauss.csv'
				ini_fg_tbl_a  = stt_bst_tbl    + specfile_glx_f + str(slc_int_fg[-1]) +'-BS-'+ str(bst_itr_nmb) + '-stk-avg'+str(stk_function)+'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gauss.csv'
				#plt_sufix_fnm = specfile_glx_b + slc_int_fg[lower_shift] +'-' +slc_int_fg[len(slc_int_bg[0])-upper_shift-1]

				if skip_fg_ref_ew == False:		
					#TBL_BS_STT_M.append(ini_fg_tbl_m)
					TBL_BS_STT_A.append(ini_fg_tbl_a)
				elif skip_fg_ref_ew == True:
					print
					print colored('Omitting FG EW value in the PLOT!','yellow')
					print					
					pass

				for interval_range in range(lower_shift,len(slc_int_bg)-upper_shift):
					#cur_tbl_bs_stt_1 = stt_bst_tbl + specfile_glx_b + str(slc_int_fg[interval_range]) +'-BS-'+ str(bst_itr_nmb) + '-stk-med' +stk_function +'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gauss.csv'
					cur_tbl_bs_stt_2 = stt_bst_tbl + specfile_glx_b + str(slc_int_fg[interval_range]) +'-BS-'+ str(bst_itr_nmb) + '-stk-avg' +stk_function +'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gauss.csv'
					#TBL_BS_STT_M.append(cur_tbl_bs_stt_1)
					TBL_BS_STT_A.append(cur_tbl_bs_stt_2)
				print 
				print colored('BS Errors from tables:','yellow')
				print
				#print colored("\n".join([TABLE for TABLE in TBL_BS_STT_M]),'blue')
				#print
				print colored("\n".join([TABLE for TABLE in TBL_BS_STT_A]),'red')
				print

				#SPEC_POINTS_M_9_ERR=[]
				SPEC_POINTS_A_9_ERR=[]
				#SPEC_POINTS_M_9_ERR.append((([Confident_Intervals(tbl_cdf_file,tbl_format_ipt,cdf2bobt_lne=str(LINES[3][lines]),cdf_2b_rtrn='1sgm',rmv_uft_spc=rmv_uft_spc) for tbl_cdf_file in TBL_BS_STT_M])))
				SPEC_POINTS_A_9_ERR.append((([Confident_Intervals(tbl_cdf_file,tbl_format_ipt,cdf2bobt_lne=str(LINES[3][lines]),cdf_2b_rtrn='1sgm',rmv_uft_spc=rmv_uft_spc) for tbl_cdf_file in TBL_BS_STT_A])))

				#SPEC_POINTS_M_9_ERR = np.asarray(SPEC_POINTS_M_9_ERR).flatten().reshape(abs(lower_shift-(len(slc_int_fg)-upper_shift)),2)
				SPEC_POINTS_A_9_ERR = np.asarray(SPEC_POINTS_A_9_ERR).flatten().reshape(abs(lower_shift-(len(slc_int_fg)-upper_shift)),2)

				#SPEC_POINTS_M_9_ERR_LOW = SPEC_POINTS_M_9_ERR[:,0]
				#SPEC_POINTS_M_9_ERR_HGH = SPEC_POINTS_M_9_ERR[:,1]
				SPEC_POINTS_A_9_ERR_LOW = SPEC_POINTS_A_9_ERR[:,0]
				SPEC_POINTS_A_9_ERR_HGH = SPEC_POINTS_A_9_ERR[:,1]
			elif bst_err_plt == False:
				pass
			###############################################TABLE ERRORS FROM BOOTSTRAP###################################################

			###############################PLOT PER LINE###############################
			fxsize=11
			fysize=8
			f = plt.figure(num=None, figsize=(fxsize, fysize), dpi=180, facecolor='w',
				edgecolor='k')
			plt.subplots_adjust(
				left 	= (30/25.4)/fxsize,            #-26 bigger  22-def
				bottom 	= (24/25.4)/fysize,            #-20 bigger  19-def
				right 	= 1 - (8/25.4)/fxsize,         #-4  bigger  2-def
				top 	= 1 - (4/25.4)/fysize)         #            4-def
			plt.subplots_adjust(hspace=0)#,wspace=0)
			#f.suptitle('An overall title', size=20)
			gs0 = gridspec.GridSpec(1, 1)
			##########################################SPEC-1###################################

			gs11 = gridspec.GridSpecFromSubplotSpec(1, 1, subplot_spec=gs0[0])
				
			ax110 = plt.Subplot(f, gs11[0,0])
			f.add_subplot(ax110)

			ax110.set_rasterization_zorder(1)
			plt.autoscale(enable=True , axis='y', tight=False)
			plt.autoscale(enable=True , axis='x', tight=False)
			ax110.xaxis.set_tick_params(labelsize=26)
			ax110.yaxis.set_tick_params(labelsize=26)
			#ax110.set_title(PLOT_TITLE)
			xticklabels = ax110.get_xticklabels()
			plt.setp(xticklabels, visible=True,family='serif')
			yticklabels = ax110.get_yticklabels()
			plt.setp(yticklabels, visible=True,family='serif')

			ax110.yaxis.set_tick_params(which='both',labelsize=26,direction='in',color='black',bottom=True,top=True,left=True,right=True)
			ax110.xaxis.set_tick_params(which='both',labelsize=26,direction='in',color='black',bottom=True,top=True,left=True,right=True)

			##minorLocator_x   = plt.MultipleLocator(10)
			##majorLocator_x   = plt.MultipleLocator(100)
			#minorLocator_y   = plt.MultipleLocator(0.5)
			#majorLocator_y   = plt.MultipleLocator(1.0)
			##ax110.xaxis.set_minor_locator(minorLocator_x)
			##ax110.xaxis.set_major_locator(majorLocator_x)
			#ax110.yaxis.set_minor_locator(minorLocator_y)
			#ax110.yaxis.set_major_locator(majorLocator_y)
			#
			#plt.tick_params(which='both' , width=0.7)
			#plt.tick_params(which='major', length=5)
			#plt.tick_params(which='minor', length=2)
			#ax110.minorticks_on()

			if plt_log_axs == 'both':
				print
				print colored('Logarithmic scale on axis: '+ str(plt_log_axs),'green')
				print
				plt.yscale('log', nonposy='clip')
				plt.xscale('log', nonposx='clip')
			elif plt_log_axs == 'y':
				print
				print colored('Logarithmic scale on axis: '+ str(plt_log_axs),'green')
				print
				plt.yscale('log', nonposy='clip')
			elif plt_log_axs == 'x':
				print
				print colored('Logarithmic scale on axis: '+ str(plt_log_axs),'green')
				print
				plt.xscale('log', nonposx='clip')
			elif plt_log_axs == None:
				print
				print colored('Logarithmic scale on axis: '+ str(plt_log_axs),'green')
				print
				pass
			else:
				pass

			ax110.set_xticks(xticks_values)
			ax110.get_xaxis().set_major_formatter(mpl.ticker.ScalarFormatter())
			ax110.set_yticks(yticks_values)
			ax110.get_yaxis().set_major_formatter(mpl.ticker.ScalarFormatter())
			#plt.grid(True, which='both')
			plt.xlabel(xlabel,fontsize=28, family = 'serif')
			plt.ylabel('Rest Equivalent Width W$_0$ ($\AA$)',fontsize=28, family = 'serif')

			x_s = [1.003,31,63,103]

			'''
			if skip_fg_ref_ew == True and stk_function_m==True and bst_err_plt == False:
				print
				print colored('Omitting FG EW value in the PLOT!','yellow')
				print
				SPEC_POINTS_M_9    = SPEC_POINTS_M_9[1:]
				SPEC_SEP_VAR       = SPEC_SEP_VAR_BU[1:]
				SPEC_POINTS_M_SNR  = SPEC_POINTS_M_SNR[1:]
				SPEC_POINTS_NMB    = SPEC_POINTS_NMB[1:]

				SPEC_POINTS_M_SNR2 = SPEC_POINTS_M_SNR2[1:]
				SPEC_POINTS_M_SNR3 = SPEC_POINTS_M_SNR3[1:]
				SPEC_POINTS_M_SNR4 = SPEC_POINTS_M_SNR4[1:]

				SPEC_POINTS_NMB2   = SPEC_POINTS_NMB2[1:]
				SPEC_POINTS_NMB3   = SPEC_POINTS_NMB3[1:]
			elif skip_fg_ref_ew == True and stk_function_a==True and bst_err_plt == False:
				print
				print colored('Omitting FG EW value in the PLOT!','yellow')
				print
				SPEC_POINTS_A_9    = SPEC_POINTS_A_9[1:]
				SPEC_SEP_VAR       = SPEC_SEP_VAR_BU[1:]
				SPEC_POINTS_A_SNR  = SPEC_POINTS_A_SNR[1:]
				SPEC_POINTS_NMB    = SPEC_POINTS_NMB[1:]

				SPEC_POINTS_A_SNR2 = SPEC_POINTS_A_SNR2[1:]
				SPEC_POINTS_A_SNR3 = SPEC_POINTS_A_SNR3[1:]
				SPEC_POINTS_A_SNR4 = SPEC_POINTS_A_SNR4[1:]

				SPEC_POINTS_NMB2   = SPEC_POINTS_NMB2[1:]
				SPEC_POINTS_NMB3   = SPEC_POINTS_NMB3[1:]

			elif skip_fg_ref_ew == True and stk_function_b==True and bst_err_plt == False:
				print
				print colored('Omitting FG EW value in the PLOT!','yellow')
				print
				SPEC_POINTS_M_9    = SPEC_POINTS_M_9[1:]
				SPEC_POINTS_A_9    = SPEC_POINTS_A_9[1:]
				SPEC_SEP_VAR       = SPEC_SEP_VAR_BU[1:]
				SPEC_POINTS_A_SNR  = SPEC_POINTS_A_SNR[1:]
				SPEC_POINTS_M_SNR  = SPEC_POINTS_M_SNR[1:]
				SPEC_POINTS_NMB    = SPEC_POINTS_NMB[1:]

				SPEC_POINTS_A_SNR2 = SPEC_POINTS_A_SNR2[1:]
				SPEC_POINTS_M_SNR2 = SPEC_POINTS_M_SNR2[1:]

				SPEC_POINTS_A_SNR3 = SPEC_POINTS_A_SNR3[1:]
				SPEC_POINTS_M_SNR3 = SPEC_POINTS_M_SNR3[1:]

				SPEC_POINTS_A_SNR4 = SPEC_POINTS_A_SNR4[1:]
				SPEC_POINTS_M_SNR4 = SPEC_POINTS_M_SNR4[1:]

				SPEC_POINTS_NMB2   = SPEC_POINTS_NMB2[1:]
				SPEC_POINTS_NMB3   = SPEC_POINTS_NMB3[1:]

			elif skip_fg_ref_ew == True and stk_function_m==True and bst_err_plt == True:
				print
				print colored('Omitting FG EW & EW_Error value in the PLOT!','yellow')
				print
				SPEC_POINTS_M_9         = SPEC_POINTS_M_9[1:]
				SPEC_POINTS_M_9_ERR_LOW = SPEC_POINTS_M_9_ERR_LOW[1:]
				SPEC_POINTS_M_9_ERR_HGH = SPEC_POINTS_M_9_ERR_HGH[1:]
				SPEC_POINTS_NMB         = SPEC_POINTS_NMB[1:]
				SPEC_SEP_VAR            = SPEC_SEP_VAR_BU[1:]
				SPEC_POINTS_M_SNR       = SPEC_POINTS_M_SNR[1:]
				SPEC_POINTS_NMB         = SPEC_POINTS_NMB[1:]

				SPEC_POINTS_M_SNR2      = SPEC_POINTS_M_SNR2[1:]
				SPEC_POINTS_M_SNR3      = SPEC_POINTS_M_SNR3[1:]
				SPEC_POINTS_M_SNR4      = SPEC_POINTS_M_SNR4[1:]

				SPEC_POINTS_NMB2        = SPEC_POINTS_NMB2[1:]
				SPEC_POINTS_NMB3        = SPEC_POINTS_NMB3[1:]
			elif skip_fg_ref_ew == True and stk_function_a==True and bst_err_plt == True:
				print
				print colored('Omitting FG EW & EW_Error value in the PLOT!','yellow')
				print
				SPEC_POINTS_A_9         = SPEC_POINTS_A_9[1:]
				SPEC_POINTS_A_9_ERR_LOW = SPEC_POINTS_A_9_ERR_LOW[1:]
				SPEC_POINTS_A_9_ERR_HGH = SPEC_POINTS_A_9_ERR_HGH[1:]
				SPEC_POINTS_NMB         = SPEC_POINTS_NMB[1:]
				SPEC_SEP_VAR            = SPEC_SEP_VAR_BU[1:]
				SPEC_POINTS_A_SNR       = SPEC_POINTS_A_SNR[1:]
				SPEC_POINTS_NMB         = SPEC_POINTS_NMB[1:]

				SPEC_POINTS_A_SNR2      = SPEC_POINTS_A_SNR2[1:]
				SPEC_POINTS_A_SNR3      = SPEC_POINTS_A_SNR3[1:]
				SPEC_POINTS_A_SNR4      = SPEC_POINTS_A_SNR4[1:]

				SPEC_POINTS_NMB2        = SPEC_POINTS_NMB2[1:]
				SPEC_POINTS_NMB3        = SPEC_POINTS_NMB3[1:]

			elif skip_fg_ref_ew == True and stk_function_b==True and bst_err_plt == True:
				print
				print colored('Omitting FG EW & EW_Error value in the PLOT!','yellow')
				print
				SPEC_POINTS_M_9         = SPEC_POINTS_M_9[1:]
				SPEC_POINTS_A_9         = SPEC_POINTS_A_9[1:]
				SPEC_POINTS_A_9_ERR_LOW = SPEC_POINTS_A_9_ERR_LOW[1:]
				SPEC_POINTS_A_9_ERR_HGH = SPEC_POINTS_A_9_ERR_HGH[1:]
				SPEC_POINTS_M_9_ERR_LOW = SPEC_POINTS_M_9_ERR_LOW[1:]
				SPEC_POINTS_M_9_ERR_HGH = SPEC_POINTS_M_9_ERR_HGH[1:]
				SPEC_POINTS_NMB         = SPEC_POINTS_NMB[1:]
				SPEC_SEP_VAR            = SPEC_SEP_VAR_BU[1:]
				SPEC_POINTS_A_SNR       = SPEC_POINTS_A_SNR[1:]
				SPEC_POINTS_M_SNR       = SPEC_POINTS_M_SNR[1:]
				SPEC_POINTS_NMB         = SPEC_POINTS_NMB[1:]

				SPEC_POINTS_A_SNR2      = SPEC_POINTS_A_SNR2[1:]
				SPEC_POINTS_M_SNR2      = SPEC_POINTS_M_SNR2[1:]

				SPEC_POINTS_A_SNR3      = SPEC_POINTS_A_SNR3[1:]
				SPEC_POINTS_M_SNR3      = SPEC_POINTS_M_SNR3[1:]

				SPEC_POINTS_A_SNR4      = SPEC_POINTS_A_SNR4[1:]
				SPEC_POINTS_M_SNR4      = SPEC_POINTS_M_SNR4[1:]

				SPEC_POINTS_NMB2        = SPEC_POINTS_NMB2[1:]
				SPEC_POINTS_NMB3        = SPEC_POINTS_NMB3[1:]

			else:
				pass
			'''

			index_line_color = index_line_color +1 
			color2bused = array_new_colors[0][index_line_color]
			xplotlimit = max(SPEC_SEP_VAR)+(.10*max(SPEC_SEP_VAR))

			if mlt_stk_fct == 'med' and bst_err_plt == False:#stk_function_m == True
				pts_line_M = SPEC_POINTS_M_9
				pts_line_M = pts_line_M#np.log10(pts_line_M)
				color2bused = 'blue'
				print
				print colored('Plot values (SEP-BIN):','yellow')
				print SPEC_SEP_VAR
				print colored('Plot values (EW-MED):','yellow')
				print pts_line_M
				print
				print colored('Number of galaxies per bin:','yellow') 
				print SPEC_POINTS_NMB
				print SPEC_POINTS_NMB2
				print colored('Number of galaxies per bin (SQR):','yellow') 
				print np.sqrt(SPEC_POINTS_NMB)
				print np.sqrt(SPEC_POINTS_NMB2)
				print
				print colored('SNR Individual Line (Median): ','yellow')
				print SPEC_POINTS_M_SNR
				print SPEC_POINTS_M_SNR2
				print SPEC_POINTS_M_SNR3
				print SPEC_POINTS_M_SNR4
				print SPEC_POINTS_M_SNR5
				print
				plt.plot(SPEC_SEP_VAR,pts_line_M,
							marker = LINES[6][lines],color=color2bused,markersize=20,
							label  = LINES[4][lines]  + 
							' ('+ str(LINES[0][lines])+
							 r'$\AA$' + ') '+'med '   +
							 "\n"  + 'SNR-A   : '   + str(SPEC_POINTS_M_SNR)  +
							 "\n"  + 'SNR-C   : '   + str(SPEC_POINTS_M_SNR2) +
							 #"\n"  + 'SNR-P   : '   + str(SPEC_POINTS_M_SNR3) +
							 #"\n"  + 'SNR-BM: '  + str(SPEC_POINTS_M_SNR4) +
							 "\n"  + 'N: '    + str(SPEC_POINTS_NMB)    +
							 #"\n"  + 'N: '    + str(SPEC_POINTS_NMB2)   +
							 "\n"  + 'N: '    + str(SPEC_POINTS_NMB3),
							 ls='-')
				pts_line_ALL_M.append(pts_line_M)
				lbl_line_ALL_M.append(LINES[4][lines]+ ' ('+ str(LINES[0][lines])+ r'$\AA$' + ') ' + 'med ' + color2bused)
				mrk_line_ALL.append(LINES[6][lines])
				clr_line_ALL.append(color2bused)
			elif mlt_stk_fct == 'med' and bst_err_plt == True:#stk_function_m == True
				pts_line_M = SPEC_POINTS_M_9
				pts_line_M = pts_line_M#np.log10(pts_line_M)
				color2bused = 'blue'
				print
				print colored('Plot values (SEP-BIN):','yellow')
				print SPEC_SEP_VAR
				print colored('Plot values (EW-MED):','yellow')
				print pts_line_M
				print
				print colored('Number of galaxies per bin:','yellow') 
				print SPEC_POINTS_NMB
				print SPEC_POINTS_NMB2
				print colored('Number of galaxies per bin (SQR):','yellow') 
				print np.sqrt(SPEC_POINTS_NMB)
				print np.sqrt(SPEC_POINTS_NMB2)
				print
				print colored('SNR Individual Line (Median): ','yellow')
				print SPEC_POINTS_M_SNR
				print SPEC_POINTS_M_SNR2
				print SPEC_POINTS_M_SNR3
				print SPEC_POINTS_M_SNR4
				print SPEC_POINTS_M_SNR5
				print				
				plt.plot(SPEC_SEP_VAR,pts_line_M,
							marker = LINES[6][lines],color=color2bused,markersize=20,
							label  = LINES[4][lines]  +
							' ('+ str(LINES[0][lines])+
							r'$\AA$'+') '+'med '      +
							 "\n"  + 'SNR-A   : '  + str(SPEC_POINTS_M_SNR)  +
							 "\n"  + 'SNR-C   : '  + str(SPEC_POINTS_M_SNR2) +
							 #"\n"  + 'SNR-P   : '  + str(SPEC_POINTS_M_SNR3) +
							 #"\n"  + 'SNR-BM: '  + str(SPEC_POINTS_M_SNR4) +
							 "\n"  + 'N: '    + str(SPEC_POINTS_NMB)    +
							 #"\n"  + 'N: '    + str(SPEC_POINTS_NMB2)   +
							 "\n"  + 'N: '    + str(SPEC_POINTS_NMB3),
							ls='-')
				pts_line_ALL_M.append(pts_line_M)
				lbl_line_ALL_M.append(LINES[4][lines]+' ('+ str(LINES[0][lines])+r'$\AA$'+') '+'med '+color2bused)
				mrk_line_ALL.append(LINES[6][lines])
				clr_line_ALL.append(color2bused)								
				plt.errorbar(SPEC_SEP_VAR, pts_line_M, 
					yerr = [abs(pts_line_M-SPEC_POINTS_M_9_ERR_LOW)/np.sqrt(SPEC_POINTS_NMB),abs(SPEC_POINTS_M_9_ERR_HGH-pts_line_M)/np.sqrt(SPEC_POINTS_NMB)], #yerr = [E_V1[j][0:],E_V2[j][0:]],
					fmt=LINES[6][lines],color=color2bused,elinewidth = 1.5, capsize = 5.5,
					markeredgecolor=color2bused, markerfacecolor = None,markeredgewidth=0.5,ms=20)
			elif mlt_stk_fct == 'avg' and bst_err_plt == False:#stk_function_a == True
				pts_line_A = SPEC_POINTS_A_9
				pts_line_A = pts_line_A
				color2bused = 'red'
				print
				print colored('Plot values (SEP-BIN):','yellow')
				print SPEC_SEP_VAR
				print colored('Plot values (EW-AVG):','yellow')
				print pts_line_A
				print
				print colored('Number of galaxies per bin:','yellow') 
				print SPEC_POINTS_NMB
				print SPEC_POINTS_NMB2
				print
				print colored('Number of galaxies per bin (SQR):','yellow') 
				print np.sqrt(SPEC_POINTS_NMB)
				print np.sqrt(SPEC_POINTS_NMB2)
				print
				print colored('SNR Individual Line (AVG): ','yellow')
				print SPEC_POINTS_A_SNR
				print SPEC_POINTS_A_SNR2
				print SPEC_POINTS_A_SNR3
				print SPEC_POINTS_A_SNR4
				print SPEC_POINTS_A_SNR5
				print				
				plt.plot(SPEC_SEP_VAR,pts_line_A,
							marker = LINES[6][lines],color=color2bused,markersize=20,
							label  = LINES[4][lines] +
							' ('+ str(LINES[0][lines])+
							r'$\AA$'+') '+'avg '+
							 "\n"  + 'SNR-A   : '  + str(SPEC_POINTS_A_SNR)  +
							 "\n"  + 'SNR-C   : '  + str(SPEC_POINTS_A_SNR2) +
							 #"\n"  + 'SNR-P   : '  + str(SPEC_POINTS_A_SNR3) +
							 #"\n"  + 'SNR-BM: '  + str(SPEC_POINTS_A_SNR4) +
							 "\n"  + 'N: '    + str(SPEC_POINTS_NMB)    +
							 #"\n"  + 'N: '    + str(SPEC_POINTS_NMB2)   +
							 "\n"  + 'N: '    + str(SPEC_POINTS_NMB3),
							ls='-.')			
				pts_line_ALL_A.append(pts_line_A)
				lbl_line_ALL_A.append(LINES[4][lines]+' ('+ str(LINES[0][lines])+r'$\AA$'+') '+'avg '+color2bused)
				mrk_line_ALL.append(LINES[6][lines])
				clr_line_ALL.append(color2bused)
			elif mlt_stk_fct == 'avg' and bst_err_plt == True:#stk_function_a == True
				pts_line_A = SPEC_POINTS_A_9
				pts_line_A = pts_line_A
				color2bused = 'red'
				print
				print colored('Plot values (SEP-BIN):','yellow')
				print SPEC_SEP_VAR
				print colored('Plot values (EW-AVG):','yellow')
				print pts_line_A
				print
				print colored('Number of galaxies per bin:','yellow') 
				print SPEC_POINTS_NMB
				print SPEC_POINTS_NMB2
				print
				print colored('Number of galaxies per bin (SQR):','yellow') 
				print np.sqrt(SPEC_POINTS_NMB)
				print np.sqrt(SPEC_POINTS_NMB2)
				print
				print colored('SNR Individual Line (Average): ','yellow')
				print SPEC_POINTS_A_SNR
				print SPEC_POINTS_A_SNR2
				print SPEC_POINTS_A_SNR3
				print SPEC_POINTS_A_SNR4
				print SPEC_POINTS_A_SNR5
				print
				plt.plot(SPEC_SEP_VAR,pts_line_A,
							marker = LINES[6][lines],color=color2bused,markersize=20,
							label  = LINES[4][lines]  +
							' ('+ str(LINES[0][lines])+ 
							r'$\AA$'+') '+'avg '      +
							 "\n"  + 'SNR-A   : '  + str(SPEC_POINTS_A_SNR)  +
							 "\n"  + 'SNR-C   : '  + str(SPEC_POINTS_A_SNR2) +
							 #"\n"  + 'SNR-P   : '  + str(SPEC_POINTS_A_SNR3) +
							 #"\n"  + 'SNR-BM: '  + str(SPEC_POINTS_A_SNR4) +
							 "\n"  + 'N: '    + str(SPEC_POINTS_NMB)    +
							 #"\n"  + 'N: '    + str(SPEC_POINTS_NMB2)   +
							 "\n"  + 'N: '    + str(SPEC_POINTS_NMB3),
							ls='-.')			
				pts_line_ALL_A.append(pts_line_A)
				lbl_line_ALL_A.append(LINES[4][lines]+' ('+ str(LINES[0][lines])+ r'$\AA$'+') '+'avg '+color2bused)
				mrk_line_ALL.append(LINES[6][lines])
				clr_line_ALL.append(color2bused)
				plt.errorbar(SPEC_SEP_VAR, pts_line_A, 
					yerr = [abs(pts_line_A-SPEC_POINTS_A_9_ERR_LOW)/np.sqrt(SPEC_POINTS_NMB),abs(SPEC_POINTS_A_9_ERR_HGH-pts_line_A)/SPEC_POINTS_NMB], #yerr = [E_V1[j][0:],E_V2[j][0:]],
					fmt=LINES[6][lines],color=color2bused,elinewidth = 1.5, capsize = 5.5,
					markeredgecolor=color2bused, markerfacecolor = None,markeredgewidth=0.5,ms=20)
			elif mlt_stk_fct == 'both'and bst_err_plt == False:#stk_function_b== True 
				pts_line_M = SPEC_POINTS_M_9
				pts_line_M = pts_line_M
				pts_line_A = SPEC_POINTS_A_9
				pts_line_A = pts_line_A
				color2bused1 = 'blue'
				color2bused2 = 'red'
				print
				print colored('Plot values (SEP-BIN):','yellow')
				print SPEC_SEP_VAR
				print colored('Plot values (EW-MED):','yellow')
				print pts_line_M
				print colored('Plot values (EW-AVG):','yellow')
				print pts_line_A
				print
				print colored('Number of galaxies per bin:','yellow') 
				print SPEC_POINTS_NMB
				print colored('Number of galaxies per bin (SQR):','yellow') 
				print np.sqrt(SPEC_POINTS_NMB)
				print
				print colored('SNR Individual Line (Median): ','yellow')
				print SPEC_POINTS_M_SNR
				print
				print colored('SNR Individual Line (Average): ','yellow')
				print SPEC_POINTS_A_SNR
				print
				SPEC_SEP_VAR = np.flipud(SPEC_SEP_VAR)
				pts_line_M   = np.flipud(pts_line_M)
				pts_line_A   = np.flipud(pts_line_A)
				print
				print colored('Plot values (SEP-BIN):','yellow')
				print SPEC_SEP_VAR
				print colored('Plot values (EW-MED):','yellow')
				print pts_line_M
				print colored('Plot values (EW-AVG):','yellow')
				print pts_line_A
				print
				print colored('Number of galaxies per bin:','yellow') 
				print SPEC_POINTS_NMB
				print SPEC_POINTS_NMB2				
				print colored('Number of galaxies per bin (SQR):','yellow') 
				print np.sqrt(SPEC_POINTS_NMB)
				print np.sqrt(SPEC_POINTS_NMB2)				
				print	
				print colored('SNR Individual Line (Median): ','yellow')
				print SPEC_POINTS_M_SNR
				print SPEC_POINTS_M_SNR2
				print SPEC_POINTS_M_SNR3
				print SPEC_POINTS_M_SNR4
				print SPEC_POINTS_M_SNR5												
				print
				print colored('SNR Individual Line (Average): ','yellow')
				print SPEC_POINTS_A_SNR
				print SPEC_POINTS_A_SNR2
				print SPEC_POINTS_A_SNR3
				print SPEC_POINTS_A_SNR4
				print SPEC_POINTS_A_SNR5												
				print											
				plt.plot(SPEC_SEP_VAR,pts_line_M,
							marker = LINES[6][lines],color=color2bused1,markersize=20,
							label  = LINES[4][lines]  +
							' ('+ str(LINES[0][lines])+
							r'$\AA$'+') '+'med '      +
							 "\n"  + 'SNR-A   : '  + str(SPEC_POINTS_M_SNR)  +
							 "\n"  + 'SNR-C   : '  + str(SPEC_POINTS_M_SNR2) +
							 #"\n"  + 'SNR-P   : '  + str(SPEC_POINTS_M_SNR3) +
							 #"\n"  + 'SNR-BM: '  + str(SPEC_POINTS_M_SNR4) +
							 "\n"  + 'N: '    + str(SPEC_POINTS_NMB)    +
							 #"\n"  + 'N: '    + str(SPEC_POINTS_NMB2)   +
							 "\n"  + 'N: '    + str(SPEC_POINTS_NMB3),
							ls='-')
				plt.plot(SPEC_SEP_VAR,pts_line_A,
							marker = LINES[6][lines],color=color2bused2,markersize=20,
							label  = LINES[4][lines]  +
							' ('+ str(LINES[0][lines])+
							r'$\AA$'+') '+'avg '      +
							 "\n"  + 'SNR-A   : '  + str(SPEC_POINTS_A_SNR)  +
							 "\n"  + 'SNR-C   : '  + str(SPEC_POINTS_A_SNR2) +
							 #"\n"  + 'SNR-P   : '  + str(SPEC_POINTS_A_SNR3) +
							 #"\n"  + 'SNR-BM: '  + str(SPEC_POINTS_A_SNR4) +
							 "\n"  + 'N: '    + str(SPEC_POINTS_NMB)    +
							 #"\n"  + 'N: '    + str(SPEC_POINTS_NMB2)   +
							 "\n"  + 'N: '    + str(SPEC_POINTS_NMB3),
							ls='-.')			
				pts_line_ALL_A.append(pts_line_A)
				pts_line_ALL_M.append(pts_line_M)
				lbl_line_ALL_A.append(LINES[4][lines]+' ('+ str(LINES[0][lines])+ r'$\AA$' +') '+'avg '+color2bused)
				lbl_line_ALL_M.append(LINES[4][lines]+' ('+ str(LINES[0][lines])+ r'$\AA$' +') '+'med '+color2bused)
				mrk_line_ALL.append(LINES[6][lines])
				clr_line_ALL.append(color2bused)
			elif mlt_stk_fct == 'both'and bst_err_plt == True:#stk_function_b== True 
				pts_line_M = SPEC_POINTS_M_9
				pts_line_M = pts_line_M
				pts_line_A = SPEC_POINTS_A_9
				pts_line_A = pts_line_A
				color2bused1 = 'blue'
				color2bused2 = 'red'
				print
				print colored('Plot values (SEP-BIN):','yellow')
				print SPEC_SEP_VAR_BU
				print SPEC_SEP_VAR
				print colored('Plot values (EW-MED):','yellow')
				print pts_line_M
				print colored('Plot values (EW-AVG):','yellow')
				print pts_line_A
				print
				print colored('Errors for Average values:','yellow')
				print pts_line_A
				print SPEC_POINTS_A_9_ERR_LOW
				print SPEC_POINTS_A_9_ERR_LOW
				print np.sqrt(SPEC_POINTS_A_9_ERR_LOW)
				print np.sqrt(SPEC_POINTS_A_9_ERR_HGH)
				print
				print colored('Errors for Median values:','yellow')
				print pts_line_M
				print SPEC_POINTS_M_9_ERR_LOW
				print SPEC_POINTS_M_9_ERR_HGH
				print np.sqrt(SPEC_POINTS_M_9_ERR_LOW)
				print np.sqrt(SPEC_POINTS_M_9_ERR_HGH)
				print
				print colored('Number of galaxies per bin:','yellow') 
				print SPEC_POINTS_NMB
				print colored('Number of galaxies per bin (SQR):','yellow') 
				print np.sqrt(SPEC_POINTS_NMB)
				print
				print colored('SNR Individual Line (Median): ','yellow')
				print SPEC_POINTS_M_SNR
				print SPEC_POINTS_M_SNR3
				print SPEC_POINTS_M_SNR3
				print SPEC_POINTS_M_SNR4
				print SPEC_POINTS_M_SNR5
				print
				print colored('SNR Individual Line (Average): ','yellow')
				print SPEC_POINTS_A_SNR
				print SPEC_POINTS_A_SNR3
				print SPEC_POINTS_A_SNR3
				print SPEC_POINTS_A_SNR4
				print SPEC_POINTS_A_SNR5
				print
				print colored('Errors for Average values considering sample size (N):','yellow')
				print abs(pts_line_A-(SPEC_POINTS_A_9_ERR_LOW))/np.sqrt(SPEC_POINTS_NMB)
				print colored('Errors for Median values considering sample size (N):','yellow')
				print abs((SPEC_POINTS_A_9_ERR_HGH)-pts_line_A)/np.sqrt(SPEC_POINTS_NMB)
				print
				plt.plot(SPEC_SEP_VAR,pts_line_M,
							marker = LINES[6][lines],color=color2bused1,markersize=20,
							label  = LINES[4][lines]   +
							' ('+ str(LINES[0][lines]) +
							r'$\AA$' + ') '+'med '     +
							 "\n"  + 'SNR-A   : '  + str(SPEC_POINTS_M_SNR)  +
							 "\n"  + 'SNR-C   : '  + str(SPEC_POINTS_M_SNR2) +
							 #"\n"  + 'SNR-P   : '  + str(SPEC_POINTS_M_SNR3) +
							 #"\n"  + 'SNR-BM: '  + str(SPEC_POINTS_M_SNR4) +
							 "\n"  + 'N: '    + str(SPEC_POINTS_NMB)    +
							 #"\n"  + 'N: '    + str(SPEC_POINTS_NMB2)   +
							 "\n"  + 'N: '    + str(SPEC_POINTS_NMB3),
							ls='-')
				plt.plot(SPEC_SEP_VAR,pts_line_A,
							marker = LINES[6][lines],color=color2bused2,markersize=20,
							label  = LINES[4][lines]   +
							' ('+ str(LINES[0][lines]) +
							r'$\AA$' + ') '+'avg '     +
							 "\n"  + 'SNR-A   : '  + str(SPEC_POINTS_A_SNR)  +
							 "\n"  + 'SNR-C   : '  + str(SPEC_POINTS_A_SNR2) +
							 #"\n"  + 'SNR-P   : '  + str(SPEC_POINTS_A_SNR3) +
							 #"\n"  + 'SNR-BM: '  + str(SPEC_POINTS_A_SNR4) +
							 "\n"  + 'N: '    + str(SPEC_POINTS_NMB)    +
							 #"\n"  + 'N: '    + str(SPEC_POINTS_NMB2)   +
							 "\n"  + 'N: '    + str(SPEC_POINTS_NMB3),
							ls='-.')			
				pts_line_ALL_A.append(pts_line_A)
				pts_line_ALL_M.append(pts_line_M)
				lbl_line_ALL_A.append(LINES[4][lines]+' ('+ str(LINES[0][lines]) + r'$\AA$' + ') '+' '+'avg '+color2bused)
				lbl_line_ALL_M.append(LINES[4][lines]+' ('+ str(LINES[0][lines]) + r'$\AA$' + ') '+' '+'med '+color2bused)
				mrk_line_ALL.append(LINES[6][lines])
				clr_line_ALL.append(color2bused)

				if bst_err_plt_sym == False:
					plt.errorbar(SPEC_SEP_VAR, pts_line_M, 
						yerr = [abs(pts_line_M-SPEC_POINTS_M_9_ERR_LOW)/np.sqrt(SPEC_POINTS_NMB),abs(SPEC_POINTS_M_9_ERR_HGH-pts_line_M)/np.sqrt(SPEC_POINTS_NMB)], #yerr = [E_V1[j][0:],E_V2[j][0:]],
						fmt=LINES[6][lines],color=color2bused1,elinewidth = 1.5, capsize = 5.5,
						markeredgecolor=color2bused1, markerfacecolor = None,markeredgewidth=0.5,ms=20)
					plt.errorbar(SPEC_SEP_VAR, pts_line_A, 
						yerr = [abs(pts_line_A-SPEC_POINTS_A_9_ERR_LOW)/np.sqrt(SPEC_POINTS_NMB),abs(SPEC_POINTS_A_9_ERR_HGH-pts_line_A)/np.sqrt(SPEC_POINTS_NMB)], #yerr = [E_V1[j][0:],E_V2[j][0:]],
						fmt=LINES[6][lines],color=color2bused2,elinewidth = 1.5, capsize = 5.5,
						markeredgecolor=color2bused2, markerfacecolor = None,markeredgewidth=0.5,ms=20)
				elif bst_err_plt_sym ==True:
					plt.errorbar(SPEC_SEP_VAR, pts_line_M, 
						yerr = [abs(pts_line_M-SPEC_POINTS_M_9_ERR_HGH)/np.sqrt(SPEC_POINTS_NMB),abs(SPEC_POINTS_M_9_ERR_HGH-pts_line_M)/np.sqrt(SPEC_POINTS_NMB)], #yerr = [E_V1[j][0:],E_V2[j][0:]],
						fmt=LINES[6][lines],color=color2bused1,elinewidth = 1.5, capsize = 5.5,
						markeredgecolor=color2bused1, markerfacecolor = None,markeredgewidth=0.5,ms=20)
					plt.errorbar(SPEC_SEP_VAR, pts_line_A, 
						yerr = [abs(pts_line_A-SPEC_POINTS_A_9_ERR_HGH)/np.sqrt(SPEC_POINTS_NMB),abs(SPEC_POINTS_A_9_ERR_HGH-pts_line_A)/np.sqrt(SPEC_POINTS_NMB)], #yerr = [E_V1[j][0:],E_V2[j][0:]],
						fmt=LINES[6][lines],color=color2bused2,elinewidth = 1.5, capsize = 5.5,
						markeredgecolor=color2bused2, markerfacecolor = None,markeredgewidth=0.5,ms=20)
				else:
					pass

			else:
				pass
			colors = "bgrcmykw"
			for index,specfile_glx_b_ref in enumerate(FILES_M):
				glx = Spectra_x_y(specfile_glx_b_ref)
				lambda_glx,inten_glx,crval_glx,cdel1_glx,cd1_glx = glx[0], glx[1], glx[2], glx[3], glx[4]
				mask      = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
				mask_ft   = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
				X0_f2DG    = LINES[0][lines]
				SIGMA_f2DG = LINES[1][lines]
				A_f2DG     = -(1-(min(inten_glx[mask_ft])))

				########################################################LINE-FIT#######################################################
				if fit_fnct=='gauss':
					fit_typ = 'G'
					pass
					#GAUSSIAN FIT
				elif fit_fnct=='lorentz':
					fit_typ = 'L'
					pass
					###LORENTZIAN FIT
				elif fit_fnct=='voigt':
					fit_typ = 'V'
					pass
				elif fit_fnct == None:
					pass

				else:
					pass
				########################################################LINE-FIT#######################################################
			lg=plt.legend(loc=0,prop={'size':22})
			lg.draw_frame(False)

			#plt.plot(x_s,Lya_b  ,label='Lya   Steidel+10',ls='-.',color='black'  ,marker='*')
			#plt.plot(x_s,SiII_b ,label='SiII  Steidel+10',ls='-.',color='green'  ,marker='x')
			#plt.plot(x_s,CII_b  ,label='CII   Steidel+10',ls='-.',color='purple' ,marker='2')
			#plt.plot(x_s,SiII_b ,label='SiII  Steidel+10',ls='-.',color='salmon' ,marker='3')	
			#plt.plot(x_s,SiIV_b ,label='SiIV  Steidel+10',ls='-.',color='cyan'   ,marker='>')
			#plt.plot(x_s,CIV_b  ,label='CIV   Steidel+10',ls='-.',color='red'    ,marker='o')
			#plt.plot(x_s,AlII_b ,label='AlII  Steidel+10',ls='-.',color='magenta',marker='p')
			
			#lg1=plt.legend(loc=3,prop={'size':22})
			#lg1.draw_frame(False)

			#plt.xlim([10**-0.2,xplotlimit])
			#xmin, xmax = plt.xlim()
			#plt.xlim((xmin,xmax))
			##plt.ylim([np.log10(0.1),np.log10(10)])
			##ymin, ymax = plt.ylim()
			##plt.ylim((ymin,ymax))
			#min_y, max_y = ax110.get_ylim()

			if plt_inv_xax == True:
				print
				print colored('X-axis inverted!','magenta')
				print
				min_x, max_x = ax110.get_xlim()
				plt.xlim((max_x,min_x))
			else:
				pass

			#################################################################SAVE###########################################################

			if dest_dir != None:
				PLOTFILENAME1 = str(dest_dir) + plt_sufix_fnm+'-'+str(int(LINES[0][lines]))+'-'+str(LINES[4][lines]) + '-' +stk_function_file + stk_function +'-'+fit_typ + '-EW-' +plt_nme_prp + '-' + fit_type_m + '_m-' + fit_type_e + '_e.pdf'
				PLOTFILENAME2 = str(dest_dir) + plt_sufix_fnm+'-'+str(int(LINES[0][lines]))+'-'+str(LINES[4][lines]) + '-' +stk_function_file + stk_function +'-'+fit_typ + '-EW-' +plt_nme_prp + '-' + fit_type_m + '_m-' + fit_type_e + '_e.eps'

			elif dest_dir == None:
				PLOTFILENAME1 = ewr_plt_res + plt_sufix_fnm+'-'+str(int(LINES[0][lines]))+'-'+str(LINES[4][lines]) + '-' +stk_function_file + stk_function +'-'+fit_typ + '-EW-' +plt_nme_prp + '-' + fit_type_m + '_m-' + fit_type_e + '_e.pdf'
				PLOTFILENAME2 = ewr_plt_res + plt_sufix_fnm+'-'+str(int(LINES[0][lines]))+'-'+str(LINES[4][lines]) + '-' +stk_function_file + stk_function +'-'+fit_typ + '-EW-' +plt_nme_prp + '-' + fit_type_m + '_m-' + fit_type_e + '_e.eps'

			print colored('Generated Plot: ' + str(PLOTFILENAME1),'cyan')
			plt.savefig(PLOTFILENAME1)
			if verbose == True:
				print colored('Generated Plot: ' + str(PLOTFILENAME1),'cyan')
			elif verbose ==False:
				pass
			if epssave == True:
				plt.savefig(PLOTFILENAME2, rasterized=True)
				#os.system('open Spectra.eps')
			elif epssave == False:
				pass
			if showplot == True:
				#os.system('open '+str(PLOTFILENAME))
				pass
			elif showplot == False:
				pass	
			plt.close('all')
			###############################PLOT PER LINE###############################
		elif LINES[0][lines]*(1+z_glx_Ps) > 6700 :
			break

	################################PLOT ALL LINES################################
	fxsize=11
	fysize=8
	f = plt.figure(num=None, figsize=(fxsize, fysize), dpi=180, facecolor='w',
		edgecolor='k')
	plt.subplots_adjust(
		left 	= (30/25.4)/fxsize,            #-26 bigger  22-def
		bottom 	= (24/25.4)/fysize,            #-20 bigger  19-def
		right 	= 1 - (8/25.4)/fxsize,         #-4  bigger  2-def
		top 	= 1 - (4/25.4)/fysize)         #            4-def
	plt.subplots_adjust(hspace=0)#,wspace=0)
	#f.suptitle('An overall title', size=20)
	gs0 = gridspec.GridSpec(1, 1)
	##########################################SPEC-1###################################
	gs11 = gridspec.GridSpecFromSubplotSpec(1, 1, subplot_spec=gs0[0])
	ax110 = plt.Subplot(f, gs11[0,0])
	f.add_subplot(ax110)

	ax110.set_rasterization_zorder(1)
	plt.autoscale(enable=True , axis='y', tight=False)
	plt.autoscale(enable=True , axis='x', tight=False)
	ax110.xaxis.set_tick_params(labelsize=26)
	ax110.yaxis.set_tick_params(labelsize=26)
	#ax110.set_title(PLOT_TITLE)
	xticklabels = ax110.get_xticklabels()
	plt.setp(xticklabels, visible=True,family='serif')
	yticklabels = ax110.get_yticklabels()
	plt.setp(yticklabels, visible=True,family='serif')

	ax110.yaxis.set_tick_params(which='both',labelsize=26,direction='in',color='black',bottom=True,top=True,left=True,right=True)
	ax110.xaxis.set_tick_params(which='both',labelsize=26,direction='in',color='black',bottom=True,top=True,left=True,right=True)

	#minorLocator_x   = plt.MultipleLocator(10)
	#majorLocator_x   = plt.MultipleLocator(100)
	#minorLocator_y   = plt.MultipleLocator(0.5)
	#majorLocator_y   = plt.MultipleLocator(1.0)
	#ax110.xaxis.set_minor_locator(minorLocator_x)
	#ax110.xaxis.set_major_locator(majorLocator_x)
	#ax110.yaxis.set_minor_locator(minorLocator_y)
	#ax110.yaxis.set_major_locator(majorLocator_y)
	#
	#plt.tick_params(which='both' , width=0.7)
	#plt.tick_params(which='major', length=5)
	#plt.tick_params(which='minor', length=2)
	#ax110.minorticks_on()

	if plt_log_axs == 'both':
		print
		print colored('Logarithmic scale on axis: '+ str(plt_log_axs),'green')
		print
		plt.yscale('log', nonposy='clip')
		plt.xscale('log', nonposx='clip')
	elif plt_log_axs == 'y':
		print
		print colored('Logarithmic scale on axis: '+ str(plt_log_axs),'green')
		print
		plt.yscale('log', nonposy='clip')
	elif plt_log_axs == 'x':
		print
		print colored('Logarithmic scale on axis: '+ str(plt_log_axs),'green')
		print
		plt.xscale('log', nonposx='clip')
	elif plt_log_axs == None:
		print
		print colored('Logarithmic scale on axis: '+ str(plt_log_axs),'green')
		print
		pass
	else:
		pass

	#ax110.set_xticks(xticks_values)
	#ax110.get_xaxis().set_major_formatter(mpl.ticker.ScalarFormatter())
	#ax110.set_yticks(yticks_values)
	#ax110.get_yaxis().set_major_formatter(mpl.ticker.ScalarFormatter())
	#plt.grid(True, which='both')

	plt.xlabel(xlabel,fontsize=28, family = 'serif')
	plt.ylabel('Rest Equivalent Width W$_0$ ($\AA$)',fontsize=28, family = 'serif')

	x_s = [1.003,31,63,103]
	
	for lines_all in range(len(pts_line_ALL_A)):
		########################################################PLOT ALL LINES########################################################
		if mlt_stk_fct == 'med':#stk_function_m == True:
			pts_line_M = SPEC_POINTS_M_9
			plt.plot(SPEC_SEP_VAR,pts_line_ALL_M[lines_all],
					marker = mrk_line_ALL[lines_all],color=clr_line_ALL[lines_all],markersize=20,
					label  = lbl_line_ALL_M[lines_all],ls='-')
			pts_line_ALL_M.append(pts_line_M)
			lbl_line_ALL_M.append(LINES[4][lines]+' '+'med '+color2bused)				
		elif mlt_stk_fct == 'avg':#stk_function_a == True:
			pts_line_A = SPEC_POINTS_A_9
			pts_line_A = pts_line_A#np.log10(pts_line_A)
			plt.plot(SPEC_SEP_VAR,pts_line_ALL_A[lines_all],
					marker = mrk_line_ALL[lines_all],color=clr_line_ALL[lines_all],markersize=20,
					label  = lbl_line_ALL_A[lines_all],ls='-.')
			pts_line_ALL_A.append(pts_line_A)
			lbl_line_ALL_A.append(LINES[4][lines]+' '+'avg '+color2bused)
		elif mlt_stk_fct == 'both':#stk_function_b== True:
			pts_line_M = SPEC_POINTS_M_9
			plt.plot(SPEC_SEP_VAR,pts_line_ALL_M[lines_all],
					marker = mrk_line_ALL[lines_all],color=clr_line_ALL[lines_all],markersize=20,
					ls='-',label=lbl_line_ALL_M[lines_all])
			pts_line_A = SPEC_POINTS_A_9
			pts_line_A = pts_line_A#np.log10(pts_line_A)
			plt.plot(SPEC_SEP_VAR,pts_line_ALL_A[lines_all],
					marker = mrk_line_ALL[lines_all],color=clr_line_ALL[lines_all],markersize=20,
					ls='-.',label=lbl_line_ALL_A[lines_all])
			pts_line_ALL_A.append(pts_line_A)
			pts_line_ALL_M.append(pts_line_M)
			lbl_line_ALL_A.append(LINES[4][lines]+' '+'avg '+color2bused)
			lbl_line_ALL_M.append(LINES[4][lines]+' '+'med '+color2bused)
		colors = "bgrcmykw"

		########################################################LINE-FIT#######################################################
		if fit_fnct=='gauss':
			fit_typ = 'G'
			pass
			#GAUSSIAN FIT
		elif fit_fnct=='lorentz':
			fit_typ = 'L'
			pass
			###LORENTZIAN FIT
		elif fit_fnct=='voigt':
			fit_typ = 'V'
			pass
		elif fit_fnct == None:
			pass
		else:
			pass
			########################################################LINE-FIT#######################################################
	lg=plt.legend(loc=0,prop={'size':22})
	lg.draw_frame(False)
	if plt_lit_res == True:
		Steidel_Tbl = std_dir_res +'EW_Steidel_b.csv'
		Steidel_Res_Plt = readtable_Lit(Steidel_Tbl,tbl_format_ipt)
		cols_lit_tbl = Steidel_Res_Plt[0].colnames
		LNS_LIT_PLT  =[]
		[[LNS_LIT_PLT.append(int(i+1)) for i, j in enumerate(cols_lit_tbl) if j == str(line_observed)]for line_observed in LNS_PLT]
		LNS_LIT_PLT       = np.asarray(LNS_LIT_PLT)
		LNS_LIT_PLT_U     = np.unique(LNS_LIT_PLT)
		LNS_LIT_PLT_HDR   = np.asarray(Steidel_Res_Plt[0].colnames)[LNS_LIT_PLT-1]
		LNS_LIT_PLT_HDR_U = np.asarray(Steidel_Res_Plt[0].colnames)[LNS_LIT_PLT_U-1]
		print
		print LNS_PLT
		print cols_lit_tbl
		print colored('Literature Lines to be Plot: ','yellow')
		print colored(str(LNS_LIT_PLT_HDR),'cyan')
		print colored('With indices: ','yellow')
		print colored(str(LNS_LIT_PLT),'cyan')
		print colored(str(LNS_LIT_PLT_U),'cyan')
		print
		Steidel_Res_Plt = np.asarray(Steidel_Res_Plt)
		print Steidel_Res_Plt[LNS_LIT_PLT]
		print
		print len(LNS_LIT_PLT)
		print len(LNS_LIT_PLT_HDR)
		print
		colors_steidel=['black' ,'salmon','purple','green','blue','red','magenta','black','salmon','purple','green','blue','red','magenta']
		marker_steidel=['*','x','2','3','>','o','p','*','x','2','3','>','o','p']
		for item_lne,index in enumerate(LNS_LIT_PLT_U):
			print
			print item_lne
			print str(cols_lit_tbl[index-1])
			print Steidel_Res_Plt[1]
			print Steidel_Res_Plt[index]
			print
			#print len(Steidel_Res_Plt[1])
			#print len(Steidel_Res_Plt[index])
			#plt.plot(Steidel_Res_Plt[1],Steidel_Res_Plt[index]  ,
					#label=str(cols_lit_tbl[index-1])+ '   Steidel+10',ls='-.',
					#color=colors_steidel[item_lne],marker=marker_steidel[item_lne+2])
		print "\n".join([str(cols_lit_tbl[index-1]) +' '+str(index)+' '+str(Steidel_Res_Plt[1])+' '+str(Steidel_Res_Plt[index]) for item_lne,index in enumerate(LNS_LIT_PLT_U)])
		#[plt.plot(Steidel_Res_Plt[1],Steidel_Res_Plt[index]  ,
					#label=str(cols_lit_tbl[index-1])+ '   Steidel+10',ls='-.',
					#color=colors_steidel[item_lne],marker=marker_steidel[item_lne+2]) for item_lne,line in enumerate(LNS_LIT_PLT_U)]

		#quit()
		Steidel_Res_Plt[1] #c1 #  = ftbl['R']
		Steidel_Res_Plt[2] #c2 #  = ftbl['Lya']
		Steidel_Res_Plt[3] #c3 #  = ftbl['Lya_e']
		Steidel_Res_Plt[4] #c4 #  = ftbl['SiII']
		Steidel_Res_Plt[5] #c5 #  = ftbl['SiII_e']
		Steidel_Res_Plt[6] #c6 #  = ftbl['CII']
		Steidel_Res_Plt[7] #c7 #  = ftbl['CII_e']
		Steidel_Res_Plt[8] #c8 #  = ftbl['SiIv']
		Steidel_Res_Plt[9] #c9 #  = ftbl['SiIV_e']
		Steidel_Res_Plt[10]#c10#  = ftbl['SiII']
		Steidel_Res_Plt[11]#c11#  = ftbl['SiII_e']
		Steidel_Res_Plt[12]#c12#  = ftbl['CIV']
		Steidel_Res_Plt[13]#c13#  = ftbl['CIV_e']
		Steidel_Res_Plt[14]#c14#  = ftbl['AlII']
		Steidel_Res_Plt[15]#c15#  = ftbl['AlII_e']		
		#plt.plot(x_s,Lya_b  ,label='Lya   Steidel+10',ls='-.',color='black'  ,marker='*')
		#plt.plot(x_s,SiII_b ,label='SiII  Steidel+10',ls='-.',color='green'  ,marker='x')
		#plt.plot(x_s,CII_b  ,label='CII   Steidel+10',ls='-.',color='purple' ,marker='2')
		#plt.plot(x_s,SiII_b ,label='SiII  Steidel+10',ls='-.',color='salmon' ,marker='3')
		#plt.plot(x_s,SiIV_b ,label='SiIV  Steidel+10',ls='-.',color='cyan'   ,marker='>')
		#plt.plot(x_s,CIV_b  ,label='CIV   Steidel+10',ls='-.',color='red'    ,marker='o')
		#plt.plot(x_s,AlII_b ,label='AlII  Steidel+10',ls='-.',color='magenta',marker='p')
		lg1=plt.legend(loc=0,prop={'size':14})
		lg1.draw_frame(False)
		plt.xlim([0,180])


	else:
		pass

	#plt.xlim([10**-0.2,xplotlimit])
	#xmin, xmax = plt.xlim()
	#plt.xlim((xmin,xmax))
	#plt.ylim([np.log10(0.1),np.log10(10)])
	#plt.ylim([(0.1),(10)])
	#ymin, ymax = plt.ylim()
	#plt.ylim((ymin,ymax))
	##min_y, max_y = ax110.get_ylim()
	if plt_inv_xax == True:
		print
		print colored('X-axis inverted!','magenta')
		print
		min_x, max_x = ax110.get_xlim()
		plt.xlim((max_x,min_x))
	else:
		pass	


		#################################################################SAVE###########################################################
	if dest_dir != None:
		PLOTFILENAME1 = str(dest_dir) + plt_sufix_fnm+'-'+str(lmb_min)+'-'+str(lmb_max)+ '-' + stk_function_file + stk_function + '-' + fit_typ + '-EW-'+ plt_nme_prp +'-ALL'+ '-' + fit_type_m + '_m-' + fit_type_e + '_e.pdf'
		PLOTFILENAME2 = str(dest_dir) + plt_sufix_fnm+'-'+str(lmb_min)+'-'+str(lmb_max)+ '-' + stk_function_file + stk_function + '-' + fit_typ + '-EW-'+ plt_nme_prp +'-ALL'+ '-' + fit_type_m + '_m-' + fit_type_e + '_e.eps'
	elif dest_dir == None:
		PLOTFILENAME1 = ewr_plt_res + plt_sufix_fnm+'-'+str(lmb_min)+'-'+str(lmb_max)+ '-' + stk_function_file + stk_function + '-' + fit_typ + '-EW-'+ plt_nme_prp +'-ALL'+ '-' + fit_type_m + '_m-' + fit_type_e + '_e.pdf'
		PLOTFILENAME2 = ewr_plt_res + plt_sufix_fnm+'-'+str(lmb_min)+'-'+str(lmb_max)+ '-' + stk_function_file + stk_function + '-' + fit_typ + '-EW-'+ plt_nme_prp +'-ALL'+ '-' + fit_type_m + '_m-' + fit_type_e + '_e.eps'
	plt.savefig(PLOTFILENAME1)
	if verbose == True:
		print colored('Generated Plot: ' + str(PLOTFILENAME1),'cyan')
	elif verbose ==False:
		pass
	if epssave == True:
		plt.savefig(PLOTFILENAME2, rasterized=True)
		#os.system('open Spectra.eps')
	elif epssave == False:
		pass
	if showplot == True:
		#os.system('open '+str(PLOTFILENAME))
		pass
	elif showplot == False:
		pass	
	plt.close('all')
	################################PLOT ALL LINES################################

def Plot_Idp_EW_Lne_All_Grid(int_typ_spl,n_int_spt,*args, **kwargs):
	z_glx_Ps        = kwargs.get('z_glx_Ps'    ,0)
	dest_dir        = kwargs.get('dest_dir'    , None)
	verbose         = kwargs.get('verbose'     , False)
	epssave         = kwargs.get('epssave'     , False)
	showplot        = kwargs.get('showplot'    , False) 

	autoaxis_Idp    = kwargs.get('autoaxis_Idp', False)
	#min_y_lim_Idp   = kwargs.get('min_y_lim'   , 0.5)
	#max_y_lim_Idp   = kwargs.get('max_y_lim'   , 1.5)

	lmb_min         = kwargs.get('lmb_min',1200)
	lmb_max         = kwargs.get('lmb_max',1700)

	lmb_min_lim     = lmb_min
	lmb_max_lim     = lmb_max

	upper_shift     = kwargs.get('upper_shift',0)
	lower_shift     = kwargs.get('lower_shift',0)
	#stk_function_m  = kwargs.get('stk_function_m',False)
	#stk_function_a  = kwargs.get('stk_function_a',False)
	#stk_function_b  = kwargs.get('stk_function_b',False)
	mlt_stk_fct     = kwargs.get('mlt_stk_fct'   , 'both')

	#stk_function   = kwargs.get('stk_function','med')

	fit_fnct        = kwargs.get('fit_fnct','gauss')
	dest_dir        = kwargs.get('dest_dir',None)

	stk_function    = kwargs.get('stk_function',' ')

	#int_typ_spl     = kwargs.get('int_typ_spl','arcsec')
	#frg_ref_plt     = kwargs.get('frg_ref_plt',True)

	bst_err_plt     = kwargs.get('bst_err_plt',False)
	bst_itr_nmb     = kwargs.get('bst_itr_nmb',None)
	bst_err_plt_sym = kwargs.get('bst_err_plt_sym',True)

	fit_type_m      = kwargs.get('fit_type_m','scipy')
	fit_type_e      = kwargs.get('fit_type_e','scipy')
	fit_type_e      = kwargs.get('fit_type_e','lmfit')

	plt_lit_res     = kwargs.get('plt_lit_res',False)
	plt_log_axs     = kwargs.get('plt_log_axs',None)

	plt_inv_xax     = kwargs.get('plt_inv_xax',False)
	skip_fg_ref_ew  = kwargs.get('skip_fg_ref_ew',False)

	#n_int_spt       = kwargs.get('n_int_spt',False)

	max_sep         = kwargs.get('max_sep'         ,23)

	lbl_col_idv     = kwargs.get('lbl_col_idv',True)
	fit_typ         = kwargs.get('fit_typ','lmfit')

	empty_plots     = kwargs.get('empty_plots',1)
	landscape_plt   = kwargs.get('landscape_plt',True)

	add_snr_vls     = kwargs.get('add_snr_vls',True)
	cln_pts_snr     = kwargs.get('cln_pts_snr',True)
	cln_snr_aux     = kwargs.get('cln_snr_aux',False)
	cln_snr_mth     = kwargs.get('cln_snr_mth',3)
	cln_snr_thr     = kwargs.get('cln_snr_thr',3)
	cln_snr_th2     = kwargs.get('cln_snr_th2',2)

	rmv_uft_spc     = kwargs.get('rmv_uft_spc',False)
	ems_lne_ctb     = kwargs.get('ems_lne_ctb',False)

	print cln_snr_mth
	print cln_pts_snr
	print cln_snr_aux	
	print cln_snr_thr
	print cln_snr_th2
	print skip_fg_ref_ew

	if fit_type_m == 'scipy':
		ft_m_sfx = 'A'
	elif fit_type_m == 'lmfit':
		ft_m_sfx = 'L'
	else:
		pass

	print
	print colored('Plotting EW absoprtions dependent on: '+int_typ_spl,'yellow')
	print
	if int_typ_spl == 'kpc'  and n_int_spt == 0:#in specfile_glx_f:
		splt_smpl_sfx  = '_kpc' 
		splt_smpl_unt  = 'kpc'
		plt_nme_prp    = 'kpc'
		slc_kpc_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv)
		slc_kpc_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv)				
		slc_int_fg     = slc_kpc_int_fg[1]
		slc_int_bg     = slc_kpc_int_bg[1]		
		xlabel         = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr    = 'SKP'
		xticks_values  = [5,50, 100, 1500]
		yticks_values  = np.arange(0,30,0.5)#[0.1,0.5,1,3]
	elif int_typ_spl == 'kpc'  and n_int_spt == 1:#in specfile_glx_f:
		splt_smpl_sfx  = '_kpc' 
		splt_smpl_unt  = 'kpc'
		plt_nme_prp    = 'kpc'
		slc_kpc_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_1)
		slc_kpc_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_1)				
		slc_int_fg     = slc_kpc_int_fg[1]
		slc_int_bg     = slc_kpc_int_bg[1]
		xlabel         = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr    = 'SKP'
		xticks_values = [5,50, 100, 150]
		yticks_values = np.arange(0,30,.1)#[0.1,0.5,1,3]
	elif int_typ_spl == 'kpc'  and n_int_spt == 2:#in specfile_glx_f:
		splt_smpl_sfx  = '_kpc' 
		splt_smpl_unt  = 'kpc'
		plt_nme_prp    = 'kpc'
		slc_kpc_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_2)
		slc_kpc_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_2)				
		slc_int_fg     = slc_kpc_int_fg[1]
		slc_int_bg     = slc_kpc_int_bg[1]
		xlabel         = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr    = 'SKP'
		xticks_values  = [5,50, 100, 1500]
		yticks_values  = np.arange(0,30,0.5)#[0.1,0.5,1,3]
	elif int_typ_spl == 'kpc'  and n_int_spt == 3:#in specfile_glx_f:
		splt_smpl_sfx  = '_kpc' 
		splt_smpl_unt  = 'kpc'
		plt_nme_prp    = 'kpc'
		slc_kpc_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_3)
		slc_kpc_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_3)				
		slc_int_fg     = slc_kpc_int_fg[1]
		slc_int_bg     = slc_kpc_int_bg[1]
		xlabel         = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr    = 'SKP'
		xticks_values  = [5,50, 100, 1500]
		yticks_values  = np.arange(0,30,0.5)#[0.1,0.5,1,3]
	elif int_typ_spl == 'kpc'  and n_int_spt == 4:#in specfile_glx_f:
		splt_smpl_sfx  = '_kpc' 
		splt_smpl_unt  = 'kpc'
		plt_nme_prp    = 'kpc'
		slc_kpc_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_4)
		slc_kpc_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_4)				
		slc_int_fg     = slc_kpc_int_fg[1]
		slc_int_bg     = slc_kpc_int_bg[1]
		xlabel         = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr    = 'SKP'
		xticks_values  = [5,50, 100, 1500]
		yticks_values  = np.arange(0,30,0.5)#[0.1,0.5,1,3]
	elif int_typ_spl == 'mass' and n_int_spt == 0 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx  = '-mass_F'
		splt_smpl_unt  = 'log[M/M$_{\odot}$]'
		plt_nme_prp    = 'Mass'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23)				
		slc_int_fg     = slc_mss_int_fg[1]
		slc_int_bg     = slc_mss_int_bg[1]
		xlabel         = 'log[M/M$_{\odot}$]'
		var_prp_hdr    = 'MSF'
		xticks_values  = np.arange(1,20,0.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl == 'mass' and n_int_spt == 1 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx  = '-mass_F'
		splt_smpl_unt  = 'log[M/M$_{\odot}$]'
		plt_nme_prp    = 'Mass'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_1)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_1)				
		slc_int_fg     = slc_mss_int_fg[1]
		slc_int_bg     = slc_mss_int_bg[1]
		xlabel         = 'log[M/M$_{\odot}$]'
		var_prp_hdr    = 'MSF'
		xticks_values  = np.arange(1,20,0.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl == 'mass' and n_int_spt == 2 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx  = '-mass_F'
		splt_smpl_unt  = 'log[M/M$_{\odot}$]'
		plt_nme_prp    = 'Mass'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_2)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_2)				
		slc_int_fg     = slc_mss_int_fg[1]
		slc_int_bg     = slc_mss_int_bg[1]
		xlabel         = 'log[M/M$_{\odot}$]'
		var_prp_hdr    = 'MSF'
		xticks_values  = np.arange(1,20,.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,.5)         #[0.1,0.5,1,3]
	elif int_typ_spl == 'mass' and n_int_spt == 3 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx  = '-mass_F'
		splt_smpl_unt  = 'log[M/M$_{\odot}$]'
		plt_nme_prp    = 'Mass'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_3)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_3)				
		slc_int_fg     = slc_mss_int_fg[1]
		slc_int_bg     = slc_mss_int_bg[1]
		xlabel         = 'log[M/M$_{\odot}$]'
		var_prp_hdr    = 'MSF'
		xticks_values  = np.arange(1,20,0.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl == 'mass' and n_int_spt == 4 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx  = '-mass_F'
		splt_smpl_unt  = 'log[M/M$_{\odot}$]'
		plt_nme_prp    = 'Mass'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_4)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_4)				
		slc_int_fg     = slc_mss_int_fg[1]
		slc_int_bg     = slc_mss_int_bg[1]
		xlabel         = 'log[M/M$_{\odot}$]'
		var_prp_hdr    = 'MSF'
		xticks_values  = np.arange(1,20,0.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)         #[0.1,0.5,1,3]				
	elif int_typ_spl == 'Age'  and n_int_spt == 0:#in specfile_glx_f:
		splt_smpl_sfx  = '-Age_F'
		splt_smpl_unt  = 'Age'
		plt_nme_prp    = 'Age'
		slc_age_int_fg_0 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv)
		slc_age_int_bg_0 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv)
		slc_int_fg     = slc_age_int_fg_0[1]
		slc_int_bg     = slc_age_int_bg_0[1]
		xlabel         = 'Age'
		var_prp_hdr    = 'AGF'
		xticks_values = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]  #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values = np.arange(0,30,.1)         #[0.1,0.5,1,3]
	elif int_typ_spl == 'Age'  and n_int_spt == 1 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx  = '-Age_F'
		splt_smpl_unt  = 'Age'
		plt_nme_prp    = 'Age'
		slc_age_int_fg_1 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_1)
		slc_age_int_bg_1 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_1)
		slc_int_fg     = slc_age_int_fg_1[1]
		slc_int_bg     = slc_age_int_bg_1[1]
		xlabel         = 'Age'
		var_prp_hdr    = 'AGF'
		xticks_values  = np.arange(1e8,20.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl == 'Age'  and n_int_spt == 2 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx  = '-Age_F'
		splt_smpl_unt  = 'Age'
		plt_nme_prp    = 'Age'
		slc_age_int_fg_2 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_2)
		slc_age_int_bg_2 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_2)
		slc_int_fg     = slc_age_int_fg_2[1]
		slc_int_bg     = slc_age_int_bg_2[1]
		xlabel         = 'Age'
		var_prp_hdr    = 'AGF'
		xticks_values  = np.arange(1e8,20.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl == 'Age'  and n_int_spt == 3 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx  = '-Age_F'
		splt_smpl_unt  = 'Age'
		plt_nme_prp    = 'Age'
		slc_age_int_fg_3 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_3)
		slc_age_int_bg_3 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_3)
		slc_int_fg     = slc_age_int_fg_3[1]
		slc_int_bg     = slc_age_int_bg_3[1]
		xlabel         = 'Age'
		var_prp_hdr    = 'AGF'
		xticks_values  = np.arange(1e8,20.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl == 'Age'  and n_int_spt == 4 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx  = '-Age_F'
		splt_smpl_unt  = 'Age'
		plt_nme_prp    = 'Age'
		slc_age_int_fg_4 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_4)
		slc_age_int_bg_4 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_4)
		slc_int_fg     = slc_age_int_fg_4[1]
		slc_int_bg     = slc_age_int_bg_4[1]
		xlabel         = 'Age'
		var_prp_hdr    = 'AGF'
		xticks_values  = np.arange(1e8,20.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl == 'SFR'  and n_int_spt == 0:#in specfile_glx_f:
		splt_smpl_sfx  = '-SFR_F' 
		splt_smpl_unt  = 'M$_{\odot}$yr$^{-1}$' 
		plt_nme_prp    = 'SFR'
		slc_sfr_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv)
		slc_sfr_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv)
		slc_int_fg     = slc_sfr_int_fg[1]
		slc_int_bg     = slc_sfr_int_bg[1]
		xlabel         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr    = 'SFF'
		xticks_values  = np.arange(0,3,00.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl == 'SFR'  and n_int_spt == 1 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx  = '-SFR_F' 
		splt_smpl_unt  = 'M$_{\odot}$yr$^{-1}$' 
		plt_nme_prp    = 'SFR'
		slc_sfr_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_1)
		slc_sfr_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_1)
		slc_int_fg     = slc_sfr_int_fg[1]
		slc_int_bg     = slc_sfr_int_bg[1]
		xlabel         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr    = 'SFF'
		xticks_values  = np.arange(0,3,00.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl == 'SFR'  and n_int_spt == 2 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx  = '-SFR_F' 
		splt_smpl_unt  = 'M$_{\odot}$yr$^{-1}$' 
		plt_nme_prp    = 'SFR'
		slc_sfr_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_2)
		slc_sfr_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_2)
		slc_int_fg     = slc_sfr_int_fg[1]
		slc_int_bg     = slc_sfr_int_bg[1]
		xlabel         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr    = 'SFF'
		xticks_values  = np.arange(0,3,00.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl == 'SFR'  and n_int_spt == 3 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx  = '-SFR_F' 
		splt_smpl_unt  = 'M$_{\odot}$yr$^{-1}$' 
		plt_nme_prp    = 'SFR'
		slc_sfr_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_3)
		slc_sfr_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_3)
		slc_int_fg     = slc_sfr_int_fg[1]
		slc_int_bg     = slc_sfr_int_bg[1]
		xlabel         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr    = 'SFF'
		xticks_values  = np.arange(0,3,00.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl == 'SFR'  and n_int_spt == 4 and max_sep ==23:#in specfile_glx_f:
		splt_smpl_sfx  = '-SFR_F' 
		splt_smpl_unt  = 'M$_{\odot}$yr$^{-1}$' 
		plt_nme_prp    = 'SFR'
		slc_sfr_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_4)
		slc_sfr_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_4)
		slc_int_fg     = slc_sfr_int_fg[1]
		slc_int_bg     = slc_sfr_int_bg[1]
		xlabel         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr    = 'SFF'
		xticks_values  = np.arange(0,3,00.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl == 'sSFR' and n_int_spt == 0:# in specfile_glx_f:
		splt_smpl_sfx  = '-sSFR_F'
		splt_smpl_unt  = 'sSFR'
		plt_nme_prp    = 'sSFR'
		slc_ssf_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv)
		slc_ssf_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv)
		slc_int_fg     = slc_ssf_int_fg[1]
		slc_int_bg     = slc_ssf_int_bg[1]
		xlabel         = 'sSFR [Gyr]'
		var_prp_hdr    = 'sSF'
		xticks_values  = np.arange(-20,-01,0.1)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl == 'sSFR' and n_int_spt == 1 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx  = '-sSFR_F'
		splt_smpl_unt  = 'sSFR'
		plt_nme_prp    = 'sSFR'
		slc_ssf_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_1)
		slc_ssf_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_1)
		slc_int_fg     = slc_ssf_int_fg[1]
		slc_int_bg     = slc_ssf_int_bg[1]
		xlabel         = 'sSFR [Gyr]'
		var_prp_hdr    = 'sSF'
		xticks_values  = np.arange(-20,-01,0.1)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl == 'sSFR' and n_int_spt == 2 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx  = '-sSFR_F'
		splt_smpl_unt  = 'sSFR'
		plt_nme_prp    = 'sSFR'
		slc_ssf_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_2)
		slc_ssf_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_2)
		slc_int_fg     = slc_ssf_int_fg[1]
		slc_int_bg     = slc_ssf_int_bg[1]
		xlabel         = 'sSFR [Gyr]'
		var_prp_hdr    = 'sSF'
		xticks_values  = np.arange(-20,-01,0.1)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl == 'sSFR' and n_int_spt == 3 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx  = '-sSFR_F'
		splt_smpl_unt  = 'sSFR'
		plt_nme_prp    = 'sSFR'
		slc_ssf_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_3)
		slc_ssf_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_3)
		slc_int_fg     = slc_ssf_int_fg[1]
		slc_int_bg     = slc_ssf_int_bg[1]
		xlabel         = 'sSFR [Gyr]'
		var_prp_hdr    = 'sSF'
		xticks_values  = np.arange(-20,-01,0.1)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl == 'sSFR' and n_int_spt == 4 and max_sep ==23:# in specfile_glx_f:
		splt_smpl_sfx  = '-sSFR_F'
		splt_smpl_unt  = 'sSFR'
		plt_nme_prp    = 'sSFR'
		slc_ssf_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_4)
		slc_ssf_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_4)
		slc_int_fg     = slc_ssf_int_fg[1]
		slc_int_bg     = slc_ssf_int_bg[1]
		xlabel         = 'sSFR [Gyr]'
		var_prp_hdr    = 'sSF'
		xticks_values  = np.arange(-20,-1,0.25)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,.25)   #[0.1,0.5,1,3]						
	elif int_typ_spl == 'Lnuv' and n_int_spt == 0:# in specfile_glx_f:
		splt_smpl_sfx  = '-Lnuv_F'
		splt_smpl_unt  = 'ergs cm$^{-2}$ s$^{-1}$'
		plt_nme_prp    = 'Lnuv'
		slc_luv_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv)
		slc_luv_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv)
		slc_int_fg     = slc_luv_int_fg[1]
		slc_int_bg     = slc_luv_int_bg[1]
		xlabel         = 'L$_{\mathrm{NUV}}$ [ergs cm$^{-2}$ s$^{-1}$]'
		var_prp_hdr    = 'UVF'
		xticks_values  = np.arange(8,14,0.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl == 'Lnuv' and n_int_spt == 1 and max_sep==23:# in specfile_glx_f:
		splt_smpl_sfx  = '-Lnuv_F'
		splt_smpl_unt  = 'ergs cm$^{-2}$ s$^{-1}$'
		plt_nme_prp    = 'Lnuv'
		slc_luv_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_1)
		slc_luv_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_1)
		slc_int_fg     = slc_luv_int_fg[1]
		slc_int_bg     = slc_luv_int_bg[1]
		xlabel         = 'L$_{\mathrm{NUV}}$ [ergs cm$^{-2}$ s$^{-1}$]'
		var_prp_hdr    = 'UVF'
		xticks_values  = np.arange(8,14,0.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl == 'Lnuv' and n_int_spt == 2 and max_sep==23:# in specfile_glx_f:
		splt_smpl_sfx  = '-Lnuv_F'
		splt_smpl_unt  = 'ergs cm$^{-2}$ s$^{-1}$'
		plt_nme_prp    = 'Lnuv'
		slc_luv_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_2)
		slc_luv_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_2)
		slc_int_fg     = slc_luv_int_fg[1]
		slc_int_bg     = slc_luv_int_bg[1]
		xlabel         = 'L$_{\mathrm{NUV}}$ [ergs cm$^{-2}$ s$^{-1}$]'
		var_prp_hdr    = 'UVF'
		xticks_values  = np.arange(8,14,0.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl == 'Lnuv' and n_int_spt == 3 and max_sep==23:# in specfile_glx_f:
		splt_smpl_sfx  = '-Lnuv_F'
		splt_smpl_unt  = 'ergs cm$^{-2}$ s$^{-1}$'
		plt_nme_prp    = 'Lnuv'
		slc_luv_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_3)
		slc_luv_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_3)
		slc_int_fg     = slc_luv_int_fg[1]
		slc_int_bg     = slc_luv_int_bg[1]
		xlabel         = 'L$_{\mathrm{NUV}}$ [ergs cm$^{-2}$ s$^{-1}$]'
		var_prp_hdr    = 'UVF'
		xticks_values  = np.arange(8,14,0.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl == 'Lnuv' and n_int_spt == 4 and max_sep==23:# in specfile_glx_f:
		splt_smpl_sfx  = '-Lnuv_F'
		splt_smpl_unt  = 'ergs cm$^{-2}$ s$^{-1}$'
		plt_nme_prp    = 'Lnuv'
		slc_luv_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_4)
		slc_luv_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_4)
		slc_int_fg     = slc_luv_int_fg[1]
		slc_int_bg     = slc_luv_int_bg[1]
		xlabel         = 'L$_{\mathrm{NUV}}$ [ergs cm$^{-2}$ s$^{-1}$]'
		var_prp_hdr    = 'UVF'
		xticks_values  = np.arange(8,14,0.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl == 'sep_as' and n_int_spt == 0 and max_sep==23:
		splt_smpl_sfx  = 'sep_as'
		splt_smpl_unt  = '$^{\\prime\\prime}$'#'arcsec' '$^{\\prime\\prime}$'
		plt_nme_prp    = 'Radial'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep[1])
		slc_int_fg     = slc_sep_int_fg[1]
		slc_int_bg     = slc_sep_int_bg[1]
		xlabel         = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr    = 'SKP'#'SAS'
		xticks_values  = [5,50, 100, 150]
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl == 'sep_as' and n_int_spt == 1 and max_sep==23:
		splt_smpl_sfx  = 'sep_as'
		splt_smpl_unt  = '$^{\\prime\\prime}$'#'arcsec' '$^{\\prime\\prime}$'
		plt_nme_prp    = 'Radial'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_1[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_1[1])
		slc_int_fg     = slc_sep_int_fg[1]
		slc_int_bg     = slc_sep_int_bg[1]
		xlabel         = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr    = 'SKP'#'SAS'
		xticks_values  = [5,50, 100, 150]
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl == 'sep_as' and n_int_spt == 2 and max_sep==23:
		splt_smpl_sfx  = 'sep_as'
		splt_smpl_unt  = '$^{\\prime\\prime}$'#'arcsec' '$^{\\prime\\prime}$'
		plt_nme_prp    = 'Radial'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_2[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_2[1])
		slc_int_fg     = slc_sep_int_fg[1]
		slc_int_bg     = slc_sep_int_bg[1]
		xlabel         = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr    = 'SKP'#'SAS'
		xticks_values  = [5,50, 100, 150]
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl == 'sep_as' and n_int_spt == 3 and max_sep==23:
		splt_smpl_sfx  = 'sep_as'
		splt_smpl_unt  = '$^{\\prime\\prime}$'#'arcsec' '$^{\\prime\\prime}$'
		plt_nme_prp    = 'Radial'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_3[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_3[1])
		slc_int_fg     = slc_sep_int_fg[1]
		slc_int_bg     = slc_sep_int_bg[1]
		xlabel         = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr    = 'SKP'#'SAS'
		xticks_values  = [5,50, 100, 150]
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl == 'sep_as' and n_int_spt == 4 and max_sep==23:
		splt_smpl_sfx  = 'sep_as'
		splt_smpl_unt  = '$^{\\prime\\prime}$'#'arcsec' '$^{\\prime\\prime}$'
		plt_nme_prp    = 'Radial'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_4[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_4[1])
		slc_int_fg     = slc_sep_int_fg[1]
		slc_int_bg     = slc_sep_int_bg[1]
		xlabel         = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr    = 'SKP'#'SAS'
		xticks_values  = [5,50, 100, 150]
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl == 'sep_as' and n_int_spt == 5 and max_sep==23:
		splt_smpl_sfx  = 'sep_as'
		splt_smpl_unt  = '$^{\\prime\\prime}$'#'arcsec' '$^{\\prime\\prime}$'
		plt_nme_prp    = 'Radial'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_5[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_5[1])
		slc_int_fg     = slc_sep_int_fg[1]
		slc_int_bg     = slc_sep_int_bg[1]
		xlabel         = 'Impact Parameter b (kpc)'
		var_prp_hdr    = 'SKP'#'SAS'
		xticks_values  = [5,50, 100, 150, 200]
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl == 'sep_as' and n_int_spt == 6 and max_sep==23:
		splt_smpl_sfx  = 'sep_as'
		splt_smpl_unt  = '$^{\\prime\\prime}$'#'arcsec' '$^{\\prime\\prime}$'
		plt_nme_prp    = 'Radial'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_6[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_6[1])
		slc_int_fg     = slc_sep_int_fg[1]
		slc_int_bg     = slc_sep_int_bg[1]
		xlabel         = 'Impact Parameter b (kpc)'
		var_prp_hdr    = 'SKP'#'SAS'
		xticks_values  = [5,50, 100, 150, 200]
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl == 'sep_as' and n_int_spt == 0 and max_sep==25:
		splt_smpl_sfx  = 'sep_as'
		splt_smpl_unt  = '$^{\\prime\\prime}$'#'arcsec' '$^{\\prime\\prime}$'
		plt_nme_prp    = 'Radial'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep[1])
		slc_int_fg     = slc_sep_int_fg[1]
		slc_int_bg     = slc_sep_int_bg[1]
		xlabel         = 'Impact Parameter b (kpc)'
		var_prp_hdr    = 'SKP'#'SAS'
		xticks_values  = [5,50, 100, 150]
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl == 'sep_as' and n_int_spt == 1 and max_sep==25:
		splt_smpl_sfx  = 'sep_as'
		splt_smpl_unt  = '$^{\\prime\\prime}$'#'arcsec' '$^{\\prime\\prime}$'
		plt_nme_prp    = 'Radial'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_1[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_1[1])
		slc_int_fg     = slc_sep_int_fg[1]
		slc_int_bg     = slc_sep_int_bg[1]
		xlabel         = 'Impact Parameter b (kpc)'
		var_prp_hdr    = 'SKP'#'SAS'
		xticks_values  = [5,50, 100, 150]
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl == 'sep_as' and n_int_spt == 2 and max_sep==25:
		splt_smpl_sfx  = 'sep_as'
		splt_smpl_unt  = '$^{\\prime\\prime}$'#'arcsec' '$^{\\prime\\prime}$'
		plt_nme_prp    = 'Radial'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_2[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_2[1])
		slc_int_fg     = slc_sep_int_fg[1]
		slc_int_bg     = slc_sep_int_bg[1]
		xlabel         = 'Impact Parameter b (kpc)'
		var_prp_hdr    = 'SKP'#'SAS'
		xticks_values  = [5,50, 100, 150]
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl == 'sep_as' and n_int_spt == 3 and max_sep==25:
		splt_smpl_sfx  = 'sep_as'
		splt_smpl_unt  = '$^{\\prime\\prime}$'#'arcsec' '$^{\\prime\\prime}$'
		plt_nme_prp    = 'Radial'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_3[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_3[1])
		slc_int_fg     = slc_sep_int_fg[1]
		slc_int_bg     = slc_sep_int_bg[1]
		xlabel         = 'Impact Parameter b (kpc)'
		var_prp_hdr    = 'SKP'#'SAS'
		xticks_values  = [5,50, 100, 150]
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl == 'sep_as' and n_int_spt == 4 and max_sep==25:
		splt_smpl_sfx  = 'sep_as'
		splt_smpl_unt  = '$^{\\prime\\prime}$'#'arcsec' '$^{\\prime\\prime}$'
		plt_nme_prp    = 'Radial'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_4[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_4[1])
		slc_int_fg     = slc_sep_int_fg[1]
		slc_int_bg     = slc_sep_int_bg[1]
		xlabel         = 'Impact Parameter b (kpc)'
		var_prp_hdr    = 'SKP'#'SAS'
		xticks_values  = [5,50, 100, 150]
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl == 'sep_as' and n_int_spt == 5 and max_sep==25:
		splt_smpl_sfx  = 'sep_as'
		splt_smpl_unt  = '$^{\\prime\\prime}$'#'arcsec' '$^{\\prime\\prime}$'
		plt_nme_prp    = 'Radial'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_5[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_5[1])
		slc_int_fg     = slc_sep_int_fg[1]
		slc_int_bg     = slc_sep_int_bg[1]
		xlabel         = 'Impact Parameter b (kpc)'
		var_prp_hdr    = 'SKP'#'SAS'
		xticks_values  = [5,50, 100, 150, 200]
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl == 'sep_as' and n_int_spt == 6 and max_sep==25:
		splt_smpl_sfx  = 'sep_as'
		splt_smpl_unt  = '$^{\\prime\\prime}$'#'arcsec' '$^{\\prime\\prime}$'
		plt_nme_prp    = 'Radial'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_25_6[1])
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_25_6[1])
		slc_int_fg     = slc_sep_int_fg[1]
		slc_int_bg     = slc_sep_int_bg[1]
		xlabel         = 'Impact Parameter b (kpc)'
		var_prp_hdr    = 'SKP'#'SAS'
		xticks_values  = [5,50, 100, 150, 200]
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl == 'magi' and n_int_spt == 0:# in specfile_glx:
		splt_smpl_sfx  = '-magi_F'
		splt_smpl_unt  = '$^{\\prime\\prime}$'#'arcsec' '$^{\\prime\\prime}$'
		plt_nme_prp    = 'magi'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv)
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv)
		slc_int_fg     = slc_sep_int_fg[1]
		slc_int_bg     = slc_sep_int_bg[1]
		xlabel         = 'mag$_{i}$'
		var_prp_hdr    = 'magi'#'SAS'
		xticks_values  = np.arange(-100,100,0.25)
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]				
	elif int_typ_spl == 'magi' and n_int_spt == 1:# in specfile_glx:
		splt_smpl_sfx  = '-magi_F'
		splt_smpl_unt  = 'mag'
		plt_nme_prp    = 'magi'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv)
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv)
		slc_int_fg     = slc_sep_int_fg[1]
		slc_int_bg     = slc_sep_int_bg[1]
		xlabel         = 'mag$_{i}$'
		var_prp_hdr    = 'magi'#'SAS'
		xticks_values  = np.arange(-100,100,0.25)
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]				
	elif int_typ_spl == 'magi' and n_int_spt == 2 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx  = '-magi_F'
		splt_smpl_unt  = 'mag'
		plt_nme_prp    = 'magi'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_2)
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_2)
		slc_int_fg     = slc_sep_int_fg[1]
		slc_int_bg     = slc_sep_int_bg[1]
		xlabel         = 'mag$_{i}$'
		var_prp_hdr    = 'magi'#'SAS'
		xticks_values  = np.arange(-100,100,0.25)
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]				
	elif int_typ_spl == 'magi' and n_int_spt == 3 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx  = '-magi_F'
		splt_smpl_unt  = 'mag'
		plt_nme_prp    = 'magi'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_3)
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_3)
		slc_int_fg     = slc_sep_int_fg[1]
		slc_int_bg     = slc_sep_int_bg[1]
		xlabel         = 'mag$_{i}$'
		var_prp_hdr    = 'magi'#'SAS'
		xticks_values  = np.arange(-100,100,0.25)
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]				
	elif int_typ_spl == 'magi' and n_int_spt == 4 and max_sep ==23:# in specfile_glx:
		splt_smpl_sfx  = '-magi_F'
		splt_smpl_unt  = 'mag'
		plt_nme_prp    = 'magi'
		slc_sep_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_4)
		slc_sep_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_4)
		slc_int_fg     = slc_sep_int_fg[1]
		slc_int_bg     = slc_sep_int_bg[1]
		xlabel         = 'mag$_{i}$'
		var_prp_hdr    = 'magi'#'SAS'
		xticks_values  = np.arange(-100,100,0.25)
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]				
	elif int_typ_spl == 'phi' and n_int_spt == 0:# in specfile_glx:
		splt_smpl_sfx  = '-PHI'
		splt_smpl_unt  = 'deg'
		plt_nme_prp    = 'PHI'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv)
		slc_int_fg     = slc_mss_int_fg[1]
		slc_int_bg     = slc_mss_int_bg[1]
		xlabel         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr    = 'PHI'#'SAS'
		xticks_values  = np.arange(-10,100,10) #xticks_values  = [0,100]
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl == 'phi'  and n_int_spt == 2:# in specfile_glx:
		splt_smpl_sfx  = '-PHI'
		splt_smpl_unt  = 'deg'
		plt_nme_prp    = 'PHI'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv_23_2)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv_23_2)			
		slc_int_fg     = slc_mss_int_fg[1]
		slc_int_bg     = slc_mss_int_bg[1]
		xlabel         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr    = 'PHI'#'SAS'
		xticks_values  = np.arange(-10,100,10) #xticks_values  = [0,100]
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl == 'phi'  and n_int_spt == 3:# in specfile_glx:
		splt_smpl_sfx  = '-PHI'
		splt_smpl_unt  = 'deg'
		plt_nme_prp    = 'PHI'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv_23_3)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv_23_3)			
		slc_int_fg     = slc_mss_int_fg[1]
		slc_int_bg     = slc_mss_int_bg[1]
		xlabel         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr    = 'PHI'#'SAS'
		xticks_values  = np.arange(-10,100,10) #xticks_values  = [0,100]
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]	
	elif int_typ_spl == 'icl_fg' and n_int_spt == 0:# in specfile_glx:
		splt_smpl_sfx  = '-q_F'
		splt_smpl_unt  = ''
		plt_nme_prp    = 'q'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv)
		slc_int_fg     = slc_mss_int_fg[1]
		slc_int_bg     = slc_mss_int_bg[1]
		xlabel         = '$q$'
		var_prp_hdr    = 'q'#'SAS'
		xticks_values  = np.arange(-1,1,0.1)
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl == 'icl_fg' and n_int_spt == 2:# in specfile_glx:
		splt_smpl_sfx  = '-q_F'
		splt_smpl_unt  = ''
		plt_nme_prp    = 'q'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv_23_2)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv_23_2)
		slc_int_fg     = slc_mss_int_fg[1]
		slc_int_bg     = slc_mss_int_bg[1]
		xlabel         = '$q$'
		var_prp_hdr    = 'q'#'SAS'
		xticks_values  = np.arange(-1,1,0.1)
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]	
	elif int_typ_spl == 'icl_fg' and n_int_spt == 3:# in specfile_glx:
		splt_smpl_sfx  = '-q_F'
		splt_smpl_unt  = ''
		plt_nme_prp    = 'q'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv_23_3)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv_23_3)
		slc_int_fg     = slc_mss_int_fg[1]
		slc_int_bg     = slc_mss_int_bg[1]
		xlabel         = '$q$'
		var_prp_hdr    = 'q'#'SAS'
		xticks_values  = np.arange(-1,1,0.1)
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl == 'icl_fg' and n_int_spt == 4:# in specfile_glx:
		splt_smpl_sfx  = '-q_F'
		splt_smpl_unt  = ''
		plt_nme_prp    = 'q'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv_23_4)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv_23_4)			
		slc_int_fg     = slc_mss_int_fg[1]
		slc_int_bg     = slc_mss_int_bg[1]
		xlabel         = '$q$'
		var_prp_hdr    = 'q'#'SAS'
		xticks_values  = np.arange(-1,1,0.1)
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl == 'n_sersic_fg' and n_int_spt == 0:# in specfile_glx:
		splt_smpl_sfx  = '-n_F'
		splt_smpl_unt  = 'n'
		plt_nme_prp    = 'n_srs'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,n_srs_itv)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,n_srs_itv)
		slc_int_fg     = slc_mss_int_fg[1]
		slc_int_bg     = slc_mss_int_bg[1]
		xlabel         = 'n'
		var_prp_hdr    = 'nsr'#'SAS'
		xticks_values  = np.arange(-1,3,0.25)
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl == 'n_sersic_fg'  and n_int_spt == 2:# in specfile_glx:
		splt_smpl_sfx  = '-n_F'
		splt_smpl_unt  = 'n'
		plt_nme_prp    = 'n_srs'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,n_srs_itv_23_2)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,n_srs_itv_23_2)			
		slc_int_fg     = slc_mss_int_fg[1]
		slc_int_bg     = slc_mss_int_bg[1]
		xlabel         = 'n'
		var_prp_hdr    = 'nsr'#'SAS'
		xticks_values  = np.arange(-1,3,0.25)
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl == 'r_eff_fg' and n_int_spt == 0:# in specfile_glx:
		splt_smpl_sfx  = '-re_F'
		splt_smpl_unt  = 'kpc'#$^{\\prime\\prime}$'#'arcsec' '$^{\\prime\\prime}$'
		plt_nme_prp    = 'r_eff'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv)
		slc_int_fg     = slc_mss_int_fg[1]
		slc_int_bg     = slc_mss_int_bg[1]  
		xlabel         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr    = 'ref'#'SAS'
		xticks_values  = np.arange(-1,50,0.5)
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl == 'r_eff_fg'  and n_int_spt == 2:# in specfile_glx:
		splt_smpl_sfx  = '-re_F'
		splt_smpl_unt  = 'kpc'#$^{\\prime\\prime}$'#'arcsec' '$^{\\prime\\prime}$'
		plt_nme_prp    = 'r_eff'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv_23_2)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv_23_2)			
		slc_int_fg = slc_mss_int_fg[1]
		slc_int_bg = slc_mss_int_bg[1]
		xlabel         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr    = 'ref'#'SAS'
		xticks_values  = np.arange(-1,50,0.5)
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl == 'r_eff_fg'  and n_int_spt == 3:# in specfile_glx:
		splt_smpl_sfx  = '-re_F'
		splt_smpl_unt  = 'kpc'#$^{\\prime\\prime}$'#'arcsec' '$^{\\prime\\prime}$'
		plt_nme_prp    = 'r_eff'
		slc_mss_int_fg = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv_23_3)
		slc_mss_int_bg = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv_23_3)			
		slc_int_fg     = slc_mss_int_fg[1]
		slc_int_bg     = slc_mss_int_bg[1]
		xlabel         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr    = 'ref'#'SAS'
		xticks_values  = np.arange(-1,50,0.5)
		yticks_values  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	else:
		print
		print (colored('Such combination (1st-split) does not exist!','yellow'))
		print (colored('Variable: '+str(int_typ_spl)+', # bins: '+str(n_int_spt),'yellow'))
		print
		quit()			
	############CHECK NUMBER OF BINS############
	if (lower_shift+upper_shift)>=len(slc_int_bg):
		print
		print colored('Upper and Lower shifts larger than number of bins!','yellow')
		print colored('Number of bins       : ' + str(len(slc_int_bg)),'yellow')
		print colored('Number of slices     : ' + str(n_int_spt),'yellow')
		print colored('Lower & Upper shifts : ' + str(lower_shift)+' - '+str(upper_shift),'yellow')
		print colored('Check: lower_shift & upper_shift parameters','yellow')
		print
		quit()
	else:
		print
		print colored('Number of bins       : ' + str(len(slc_int_bg)),'yellow')
		print colored('Number of slices     : ' + str(n_int_spt),'yellow')
		print colored('Lower & Upper shifts : ' + str(lower_shift)+' - '+str(upper_shift),'yellow')
		print
		pass
	############CHECK NUMBER OF BINS############

	FILES_M_BG  = []
	FILES_A_BG  = []
	FILES_M_FG  = []
	FILES_A_FG  = []

	for element,interval_range in enumerate(range(lower_shift,len(slc_int_bg)-upper_shift)):
		index_int = interval_range

		if int_typ_spl == 'sep_as':
			ini_fg_spc_m_A  = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) + '-ss-' + splt_smpl_sfx +'-'+str(slc_int_fg[-1]) + '-stk-med'+str(stk_function)+'.fits'
			ini_fg_spc_a_A  = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) + '-ss-' + splt_smpl_sfx +'-'+str(slc_int_fg[-1]) + '-stk-avg'+str(stk_function)+'.fits'
			ini_bg_spc_m_A  = res_stk_res + 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) + '-ss-' + splt_smpl_sfx +'-'+str(slc_int_fg[-1]) + '-stk-med'+str(stk_function)+'.fits'
			ini_bg_spc_a_A  = res_stk_res + 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) + '-ss-' + splt_smpl_sfx +'-'+str(slc_int_fg[-1]) + '-stk-avg'+str(stk_function)+'.fits'


			ini_fg_spc_m    = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) + '-ss-' + splt_smpl_sfx +'-'+str(slc_int_fg[index_int]) + '-stk-med'+str(stk_function)+'.fits'
			ini_fg_spc_a    = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) + '-ss-' + splt_smpl_sfx +'-'+str(slc_int_fg[index_int]) + '-stk-avg'+str(stk_function)+'.fits'
			ini_bg_spc_m    = res_stk_res + 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) + '-ss-' + splt_smpl_sfx +'-'+str(slc_int_fg[index_int]) + '-stk-med'+str(stk_function)+'.fits'
			ini_bg_spc_a    = res_stk_res + 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) + '-ss-' + splt_smpl_sfx +'-'+str(slc_int_fg[index_int]) + '-stk-avg'+str(stk_function)+'.fits'
		else:
			ini_fg_spc_m_A  = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-0-' + str(max_sep) + '-ss-' + splt_smpl_sfx +'-'+str(slc_int_fg[-1]) + '-stk-med'+str(stk_function)+'.fits'
			ini_fg_spc_a_A  = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-0-' + str(max_sep) + '-ss-' + splt_smpl_sfx +'-'+str(slc_int_fg[-1]) + '-stk-avg'+str(stk_function)+'.fits'
			ini_bg_spc_m_A  = res_stk_res + 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-0-' + str(max_sep) + '-ss-' + splt_smpl_sfx +'-'+str(slc_int_fg[-1]) + '-stk-med'+str(stk_function)+'.fits'
			ini_bg_spc_a_A  = res_stk_res + 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-0-' + str(max_sep) + '-ss-' + splt_smpl_sfx +'-'+str(slc_int_fg[-1]) + '-stk-avg'+str(stk_function)+'.fits'


			ini_fg_spc_m    = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-0-' + str(max_sep) + '-ss' + splt_smpl_sfx +'-'+str(slc_int_fg[index_int]) + '-stk-med'+str(stk_function)+'.fits'
			ini_fg_spc_a    = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-0-' + str(max_sep) + '-ss' + splt_smpl_sfx +'-'+str(slc_int_fg[index_int]) + '-stk-avg'+str(stk_function)+'.fits'
			ini_bg_spc_m    = res_stk_res + 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-0-' + str(max_sep) + '-ss' + splt_smpl_sfx +'-'+str(slc_int_fg[index_int]) + '-stk-med'+str(stk_function)+'.fits'
			ini_bg_spc_a    = res_stk_res + 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-sep_as-0-' + str(max_sep) + '-ss' + splt_smpl_sfx +'-'+str(slc_int_fg[index_int]) + '-stk-avg'+str(stk_function)+'.fits'

		FILES_M_BG.append(ini_bg_spc_m)
		FILES_A_BG.append(ini_bg_spc_a)
		FILES_M_FG.append(ini_fg_spc_m)
		FILES_A_FG.append(ini_fg_spc_a)

	print
	#print colored('Spectra  : '+str(specfile_glx),'yellow')
	print colored('Intervals: '+str(slc_int_fg)	,'yellow')
	print
	print colored('Lower shift: '+str(lower_shift),'yellow')
	print colored('Lower shift: '+str(slc_int_fg[lower_shift]),'yellow')
	print colored('Upper shift: '+str(upper_shift)+','+str(upper_shift-1),'yellow')
	print colored('Upper shift: '+str(slc_int_fg[len(slc_int_bg)-upper_shift-1]),'yellow')
	print

	B_FLAG = (FILES_M_BG[0].split('ss-zf_B-')[1]).rsplit('-ss-zf_F-')[0]
	F_FLAG = (FILES_M_FG[0].split('ss-zf_F-')[1]).rsplit('-ss-sep_as-')[0]
	print
	print colored('Background Redshift Flag: '+str(B_FLAG),'yellow')
	print colored('Foreground Redshift Flag: '+str(F_FLAG),'yellow')
	print

	print
	print colored('Fitting ' + str(len(LINES[0])) + ' lines in the range ' +str(lmb_min_lim) +'-'+str(lmb_max_lim),'yellow') 
	print "\n".join([lineinrange[0] + '-' +str(lineinrange[1]) +  '-' +str(lineinrange[2]) +  '-' +str(lineinrange[3]) for lineinrange in zip(LINES[4],LINES[0],LINES[5],LINES[9])])
	print

	if splt_smpl_sfx == 'sep_as':

		try:
			plt_sufix_fnm = ((FILES_M_BG[0]).rsplit(splt_smpl_sfx,1)[0]).rsplit('/',1)[-1] + 'sep_as-' + '0-' +str(max_sep)+'-ss-'+slc_int_fg[lower_shift] + '-' + slc_int_fg[len(slc_int_bg[0])-upper_shift-1] + '-' + fit_fnct
			PLOT_TITLE    = 'z_Bg: ' + B_FLAG + ', z_Fg:' + F_FLAG + ' ' + str(slc_int_fg[1][lower_shift]) + '-' + str(slc_int_fg[1][len(slc_int_bg[0])-upper_shift-1]) 
		except IndexError:
			plt_sufix_fnm = ((FILES_M_BG[0]).rsplit(splt_smpl_sfx,1)[0]).rsplit('/',1)[-1] + 'sep_as-' + '0-' +str(max_sep)+'-ss-'+slc_int_fg[lower_shift] + '-' + slc_int_fg[len(slc_int_bg)-upper_shift-1] + '-' + fit_fnct
			PLOT_TITLE    = 'z_Bg: ' + B_FLAG + ', z_Fg:' + F_FLAG + ' ' + str(slc_int_fg[1][lower_shift]) + '-' + str(slc_int_fg[1][len(slc_int_bg)-upper_shift-1]) 
	else:
		try:
			plt_sufix_fnm = ((FILES_M_BG[0]).rsplit(splt_smpl_sfx,1)[0]).rsplit('/',1)[-1] + '-' + slc_int_fg[lower_shift] + '-' + slc_int_fg[len(slc_int_bg[0])-upper_shift-1] + '-' + fit_fnct
			PLOT_TITLE    = 'z_Bg: ' + B_FLAG + ', z_Fg:' + F_FLAG + ' ' + str(slc_int_fg[1][lower_shift]) + '-' + str(slc_int_fg[1][len(slc_int_bg[0])-upper_shift-1]) 
		except IndexError:
			plt_sufix_fnm = ((FILES_M_BG[0]).rsplit(splt_smpl_sfx,1)[0]).rsplit('/',1)[-1] + '-' + slc_int_fg[lower_shift] + '-' + slc_int_fg[len(slc_int_bg)-upper_shift-1] + '-' + fit_fnct
			PLOT_TITLE    = 'z_Bg: ' + B_FLAG + ', z_Fg:' + F_FLAG + ' ' + str(slc_int_fg[1][lower_shift]) + '-' + str(slc_int_fg[1][len(slc_int_bg)-upper_shift-1]) 

	if skip_fg_ref_ew == False:
		print
		print FILES_M_FG[-1]
		print FILES_A_FG[-1]
		print
		FILES_M_BG.insert(0,ini_fg_spc_m_A)
		FILES_A_BG.insert(0,ini_fg_spc_a_A)
	elif skip_fg_ref_ew == True:
		print
		print colored('Omitting FG EW value in the PLOT!','yellow')
		print					
		pass


	if 'Fg' in FILES_M_BG[0]:
		glx_type = 'Fg'
		clr_plt  = 'red'
	elif 'Bg' in FILES_M_BG[0]:
		glx_type = 'Bg'
		clr_plt  = 'blue'

	if mlt_stk_fct=='med': #stk_function_m == True:
		stk_function_file = 'med-c'

	elif mlt_stk_fct=='avg': #stk_function_a == True:
		stk_function_file = 'avg-c'

	elif mlt_stk_fct=='both': #stk_function_b == True:
		stk_function_file = 'med-avg'

	print
	print colored('EW from spectra files: ','yellow')
	print
	print colored("\n".join([FILE for FILE in FILES_M_BG]),'blue')
	print
	print colored("\n".join([FILE for FILE in FILES_A_BG]),'red')
	print
	print
	print colored("\n".join([FILE for FILE in FILES_M_FG]),'cyan')
	print
	print colored("\n".join([FILE for FILE in FILES_A_FG]),'magenta')
	print

	MSK_NTMS=2.5
	index_line_color = -1
	pts_line_ALL_A = []
	pts_line_ALL_M = []
	lbl_line_ALL_A = []
	lbl_line_ALL_M = []

	mrk_line_ALL = []
	clr_line_ALL = []
	
	LNS_PLT = []

	LINES_NEW = np.asarray(LINES[0][:]*(1+z_glx_Ps))
	INDXS_NEW = np.where(np.logical_and(LINES_NEW>=lmb_min, LINES_NEW<=lmb_max))
	LENIN_NEW  =len(INDXS_NEW[0])

	print
	print len(INDXS_NEW[0])
	print
	if lbl_col_idv == True:
		i=1
		while (len(INDXS_NEW[0]) / i) != empty_plots:
			print 'while',i, (len(INDXS_NEW[0]) / i )
			i +=1
		nmb_cols = i
	elif lbl_col_idv == False:
		nmb_cols = 4
		nmb_cols   = kwargs.get('nmb_cols',4)

	nmb_rows = LENIN_NEW/nmb_cols
	nmb_rows = int(np.ceil(float(LENIN_NEW)/float(nmb_cols)))
	print
	print colored('Number of cols & rows : ' + str(nmb_cols)+','+str(nmb_rows),'yellow')
	print colored('Total number of panels: ' + str(nmb_cols*nmb_rows),'yellow')
	print colored('Total number of lines : ' + str(len(INDXS_NEW[0])),'yellow')
	print colored('Total empty panels    : ' + str(abs(len(INDXS_NEW[0])-nmb_cols*nmb_rows)),'yellow')
	print colored('Total empty plots     : ' + str(empty_plots),'yellow')
	print	

	if landscape_plt == True:
		fxsize=11*1.5            #16 *nmb_cols
		fysize=8#*nmb_rows       #16 *nmb_rows
	else:
		fysize=11*1.5            #16 *nmb_cols
		fxsize=8#*nmb_rows       #16 *nmb_rows
	f = plt.figure(num=None, figsize=(fxsize, fysize), dpi=180, facecolor='w',
		edgecolor='k')
	plt.subplots_adjust(
		left 	= (34/25.4)/fxsize,     #22-def --> 26 bigger
		bottom 	= (30/25.4)/fysize,     #19-def --> 20 bigger
		right 	= 1 - (8/25.4)/fxsize,  # 2-def --> 6  bigger
		top 	= 1 - (4/25.4)/fysize)  # 4-def --> 8  bigger
	plt.subplots_adjust(hspace=0.18,wspace=0.30)

	f.add_subplot(111, frameon=False)
	#plt.frameon=False
	plt.tick_params(labelcolor='none', top=False, bottom=False, left=False, right=False)
	plt.xlabel(xlabel         ,labelpad=25,fontsize=38, family = 'serif', ha='center')
	#plt.ylabel('Rest Equivalent Width W$_0$ ($\AA$)',labelpad=25,fontsize=38, va='center', rotation='vertical')
	plt.ylabel('W$_0$ ($\AA$)',labelpad=45,fontsize=38, family = 'serif', va='center', rotation='vertical')

	gs0 = gridspec.GridSpec(nmb_rows,nmb_cols)
	MSK_NTMS     = 2.5
	MSK_NTMS_PLT = 1.5

	#f.text(0.50, 0.04, '$\lambda$'  ,fontsize=48, family = 'serif', ha='center')
	#f.text(0.04, 0.50, 'F$_\lambda$',fontsize=48, family = 'serif', va='center', rotation='vertical')
	'''
	if 'Bg' in specfile_glx:
		colors = "bgrcmykw"
	elif 'Fg' in specfile_glx:
		colors = "rgbcmykw"
	'''
	colors = "rgbcmykw"
	print
	print '***'
	print [slc_int_fg [interval_range] for interval_range in range(lower_shift,len(slc_int_bg)-upper_shift)]
	print '***'
	print

	if lbl_col_idv == True or (lbl_col_idv == False and nmb_cols==2):
		from matplotlib.lines import Line2D
		pass
		ax110 = plt.Subplot(f, gs0[-empty_plots])
		f.add_subplot(ax110)
		ax110.axis('off')
		print [ax110.annotate('['+str(slc_int_fg [interval_range] + '] ' + splt_smpl_unt), (0.025, 0.8 - (subsmpl*0.15)),xytext=((0.125, 0.8 - (subsmpl*0.15))),arrowprops=dict(arrowstyle = '-',fc='k',ec='k',relpos=(0.5, 0.5),lw=2.5),xycoords='axes fraction', family='serif', fontsize=18, va='center') for subsmpl,interval_range in enumerate(range(lower_shift,len(slc_int_bg)-upper_shift))]
		##print [f.text(0.60+(subsmpl*0.1), 0.02, '   - ' + '['+str(slc_int_fg [interval_range] + '] $^{\\prime\\prime}$')  ,fontsize=24, family = 'serif', ha='left',color=colors[subsmpl]) for subsmpl,interval_range in enumerate(range(lower_shift,len(slc_int_bg)-upper_shift))]
		ax120 = plt.Subplot(f, gs0[-empty_plots+1])
		f.add_subplot(ax120)
		ax120.axis('off')
		#25CB WHITE CIRCLE UNICODE
		#25CF BLACK CIRCLE UNICODE
		if mlt_stk_fct == 'avg' and cln_snr_aux == False:#(stk_function_a == True and stk_function_m == False):
			ax120.annotate(u'\u25CF' + ' avg', 
							(0.15, 0.8 - (0.15*0)),
							xytext=((0.25, 0.8 - (0.15*0))),color = 'red'  ,
							#arrowprops=dict(arrowstyle = '-' ,fc='red' ,ec='r',relpos=(0.5, 0.5),lw=2.5,ls='-' ),
							xycoords='axes fraction', family='serif', fontsize=18, va='center')
		elif mlt_stk_fct == 'med' and cln_snr_aux == False:#(stk_function_m == True and stk_function_a == False):
			ax120.annotate(u'\u25CB' + ' med', 
							(0.15, 0.8 - (0.15*0)),
							xytext=((0.25, 0.8 - (0.15*0))),color = 'blue' ,
							#arrowprops=dict(arrowstyle = '-' ,fc='blue',ec='b',relpos=(0.5, 0.5),lw=2.5,ls='-.'),
							xycoords='axes fraction', family='serif', fontsize=18, va='center')
		elif mlt_stk_fct == 'both' and cln_snr_aux == False:#(stk_function_a == False and stk_function_m == False and stk_function_b	== True):
			ax120.annotate(u'\u25CF' + ' avg', 
							(0.15, 0.8 - (0.15*0)),
							xytext=((0.25, 0.8 - (0.15*0))),color = 'red'  ,
							#arrowprops=dict(arrowstyle = '-' ,fc='red' ,ec='r',relpos=(0.5, 0.5),lw=2.5,ls='-' ),
							xycoords='axes fraction', family='serif', fontsize=18, va='center')
			ax120.annotate(u'\u25CB' + ' med', 
							(0.15, 0.8 - (0.15*1)),
							xytext=((0.25, 0.8 - (0.15*1))),color = 'blue' ,
							#arrowprops=dict(arrowstyle = '-' ,fc='blue',ec='b',relpos=(0.5, 0.5),lw=2.5,ls='-.'),
							xycoords='axes fraction', family='serif', fontsize=18, va='center')
		elif mlt_stk_fct == 'avg' and cln_snr_aux == True:#(stk_function_a == True and stk_function_m == False):
			ax120.annotate(u'\u25CF' + ' avg', 
							(0.15, 0.8 - (0.15*0)),
							xytext=((0.25, 0.8 - (0.15*0))),color = 'red'  ,
							#arrowprops=dict(arrowstyle = '-' ,fc='red' ,ec='r',relpos=(0.5, 0.5),lw=2.5,ls='-' ),
							xycoords='axes fraction', family='serif', fontsize=18, va='center')
			ax120.annotate(u'\u25CF' + ' ' + str(cln_snr_thr) + '$\leqslant$ SNR <' + str(cln_snr_th2), 
							(0.15, 0.8 - (0.15*1)),
							xytext=((0.25, 0.8 - (0.15*1))),color = 'black'  ,
							#arrowprops=dict(arrowstyle = '-' ,fc='red' ,ec='r',relpos=(0.5, 0.5),lw=2.5,ls='-' ),
							xycoords='axes fraction', family='serif', fontsize=18, va='center')
		elif mlt_stk_fct == 'med' and cln_snr_aux == True:#(stk_function_m == True and stk_function_a == False):
			ax120.annotate(u'\u25CB' + ' med', 
							(0.15, 0.8 - (0.15*0)),
							xytext=((0.25, 0.8 - (0.15*0))),color = 'blue' ,
							#arrowprops=dict(arrowstyle = '-' ,fc='blue',ec='b',relpos=(0.5, 0.5),lw=2.5,ls='-.'),
							xycoords='axes fraction', family='serif', fontsize=18, va='center')
			ax120.annotate(u'\u25CF' + ' ' + str(cln_snr_thr) + '$\leqslant$ SNR <' + str(cln_snr_th2), 
							(0.15, 0.8 - (0.15*1)),
							xytext=((0.25, 0.8 - (0.15*1))),color = 'black'  ,
							#arrowprops=dict(arrowstyle = '-' ,fc='red' ,ec='r',relpos=(0.5, 0.5),lw=2.5,ls='-' ),
							xycoords='axes fraction', family='serif', fontsize=18, va='center')
		elif mlt_stk_fct == 'both' and cln_snr_aux == True:#(stk_function_a == False and stk_function_m == False and stk_function_b	== True):
			ax120.annotate(u'\u25CF' + ' avg', 
							(0.15, 0.8 - (0.15*0)),
							xytext=((0.25, 0.8 - (0.15*0))),color = 'red'  ,
							#arrowprops=dict(arrowstyle = '-' ,fc='red' ,ec='r',relpos=(0.5, 0.5),lw=2.5,ls='-' ),
							xycoords='axes fraction', family='serif', fontsize=18, va='center')
			ax120.annotate(u'\u25CB' + ' med', 
							(0.15, 0.8 - (0.15*1)),
							xytext=((0.25, 0.8 - (0.15*1))),color = 'blue' ,
							#arrowprops=dict(arrowstyle = '-' ,fc='blue',ec='b',relpos=(0.5, 0.5),lw=2.5,ls='-.'),
							xycoords='axes fraction', family='serif', fontsize=18, va='center')
			ax120.annotate(u'\u25CF' + ' ' + str(cln_snr_thr) + '$\leqslant$ SNR <' + str(cln_snr_th2), 
							(0.15, 0.8 - (0.15*2)),
							xytext=((0.25, 0.8 - (0.15*2))),color = 'black'  ,
							#arrowprops=dict(arrowstyle = '-' ,fc='red' ,ec='r',relpos=(0.5, 0.5),lw=2.5,ls='-' ),
							xycoords='axes fraction', family='serif', fontsize=18, va='center')
		else:
			pass
	elif (lbl_col_idv == False and nmb_cols>2):
		print [f.text(0.60+(subsmpl*0.1), 0.02, '   - ' + '['+str(slc_int_fg [interval_range] + '] '+ splt_smpl_unt), family = 'serif', fontsize=24, ha='left',color=colors[subsmpl]) for subsmpl,interval_range in enumerate(range(lower_shift,len(slc_int_bg)-upper_shift))]

	################################LITTERATURE RESULTS################################
	if plt_lit_res == True:
		Steidel_Tbl = std_dir_res +'EW_Steidel_b.csv'
		
		Bordoloi_Res_Plt           = readtable_Lit(std_dir_res + 'EW_Bordoloi.csv',tbl_format_ipt)
		Borthakur_Res_Plt          = readtable_Lit(std_dir_res + 'EW_Borthakur.csv',tbl_format_ipt)
		Johnson_Res_Plt            = readtable_Lit(std_dir_res + 'EW_Johnson.csv',tbl_format_ipt)
		Liang_Res_Plt              = readtable_Lit(std_dir_res + 'EW_Liang.csv',tbl_format_ipt)
		Prochaska_Res_Plt          = readtable_Lit(std_dir_res + 'EW_Prochaska.csv',tbl_format_ipt)
		Steidel_Res_Plt            = readtable_Lit(std_dir_res + 'EW_Steidel.csv','csv')

		Werk_Table3_FeIII_Res_Plt  = readtable_Lit(std_dir_res + 'Werk-Table3-FeIII.csv',tbl_format_ipt)
		Werk_Table3_NI_Res_Plt     = readtable_Lit(std_dir_res + 'Werk-Table3-NI.csv',tbl_format_ipt)
		Werk_Table3_OI_Res_Plt     = readtable_Lit(std_dir_res + 'Werk-Table3-OI.csv',tbl_format_ipt)
		Werk_Table3_Si_II_Res_Plt  = readtable_Lit(std_dir_res + 'Werk-Table3-Si-II.csv',tbl_format_ipt)
		Werk_Table3_CII_Res_Plt    = readtable_Lit(std_dir_res + 'Werk-Table3-CII.csv',tbl_format_ipt)
		Werk_Table3_Lya_Res_Plt    = readtable_Lit(std_dir_res + 'Werk-Table3-Lya.csv',tbl_format_ipt)
		Werk_Table3_NII_Res_Plt    = readtable_Lit(std_dir_res + 'Werk-Table3-NII.csv',tbl_format_ipt)
		Werk_Table3_OVI_Res_Plt    = readtable_Lit(std_dir_res + 'Werk-Table3-OVI.csv',tbl_format_ipt)
		Werk_Table3_Si_III_Res_Plt = readtable_Lit(std_dir_res + 'Werk-Table3-Si-III.csv',tbl_format_ipt)
		Werk_Table3_CIII_Res_Plt   = readtable_Lit(std_dir_res + 'Werk-Table3-CIII.csv',tbl_format_ipt)
		Werk_Table3_MgI_Res_Plt    = readtable_Lit(std_dir_res + 'Werk-Table3-MgI.csv',tbl_format_ipt)
		Werk_Table3_NIII_Res_Plt   = readtable_Lit(std_dir_res + 'Werk-Table3-NIII.csv',tbl_format_ipt)
		Werk_Table3_SII_Res_Plt    = readtable_Lit(std_dir_res + 'Werk-Table3-SII.csv',tbl_format_ipt)
		Werk_Table3_Si_IV_Res_Plt  = readtable_Lit(std_dir_res + 'Werk-Table3-Si-IV.csv',tbl_format_ipt)
		Werk_Table3_FeII_Res_Plt   = readtable_Lit(std_dir_res + 'Werk-Table3-FeII.csv',tbl_format_ipt)
		Werk_Table3_MgII_Res_Plt   = readtable_Lit(std_dir_res + 'Werk-Table3-MgII.csv',tbl_format_ipt)
		Werk_Table3_NV_Res_Plt     = readtable_Lit(std_dir_res + 'Werk-Table3-NV.csv',tbl_format_ipt)
		Werk_Table3_SIII_Res_Plt   = readtable_Lit(std_dir_res + 'Werk-Table3-SIII.csv',tbl_format_ipt)


		#https://colorcyclepicker.mpetroff.net
		#29610b, #6e9fd5, #f7cb38, #f26e83, #8732e9, #a2eeba
		marker_Bordoloi  = '*'
		color_Bordoloi   = '#6e9fd5' #blue      #'purple'
		marker_Borthakur = 's'
		color_Borthakur  = '#f7cb38' #yellow    #'cyan'
		marker_Johnson   = 'P'
		color_Johnson    = '#a2eeba' #turquoise #'magenta'
		marker_Liang     = 'X'
		color_Liang      = '#8732e9' #purple    #'brown'
		marker_Prochaska = 'D'
		color_Prochaska  = '#f26e83' #pink      #'fuchsia'
		marker_Werk      = 'H'
		color_Werk       = '#29610b' #green     #'orange'
		marker_Steidel   = '>'#'v'
		color_Steidel    = 'black'		
		
		'''
		print
		print colored('Plotting Literature Results!','yellow')
		print colored('Line: ','yellow')
		print 
		print colored('From tables:','yellow')
		print colored(std_dir_res + 'EW_Prochaska.csv','green')
		print colored(std_dir_res + 'EW_Bordoloi.csv','green')
		print colored(std_dir_res + 'EW_Borthakur.csv','green')
		print colored(std_dir_res + 'EW_Johnson.csv','green')
		print colored(std_dir_res + 'EW_Liang.csv','green')
		print colored(std_dir_res + 'Werk-Table3-FeIII.csv','green')
		print colored(std_dir_res + 'Werk-Table3-NI.csv','green')
		print colored(std_dir_res + 'Werk-Table3-OI.csv','green')
		print colored(std_dir_res + 'Werk-Table3-Si_II.csv','green')
		print colored(std_dir_res + 'Werk-Table3-CII.csv','green')
		print colored(std_dir_res + 'Werk-Table3-Lya.csv','green')
		print colored(std_dir_res + 'Werk-Table3-NII.csv','green')
		print colored(std_dir_res + 'Werk-Table3-OVI.csv','green')
		print colored(std_dir_res + 'Werk-Table3-Si_III.csv','green')
		print colored(std_dir_res + 'Werk-Table3-CIII.csv','green')
		print colored(std_dir_res + 'Werk-Table3-MgI.csv','green')
		print colored(std_dir_res + 'Werk-Table3-NIII.csv','green')
		print colored(std_dir_res + 'Werk-Table3-SII.csv','green')
		print colored(std_dir_res + 'Werk-Table3-Si_IV.csv','green')
		print colored(std_dir_res + 'Werk-Table3-FeII.csv','green')
		print colored(std_dir_res + 'Werk-Table3-MgII.csv','green')
		print colored(std_dir_res + 'Werk-Table3-NV.csv','green')
		print colored(std_dir_res + 'Werk-Table3-SIII.csv','green')
		print colored(std_dir_res + 'EW_Steidel.csv','green')
		print
		quit()
		'''
	else:
		pass
	################################LITTERATURE RESULTS################################

	#############LINE PER LINE#############
	for j,lines in enumerate(INDXS_NEW[0]):
		print
		print colored('Getting Median Values for Subsamples split by: ' + int_typ_spl + '_MED','cyan')
		print colored('From Stacked spectra Header: ' + var_prp_hdr+'_MED','cyan')
		print

		SPEC_SEP_VAR = [Header_Get(spec_res_file,var_prp_hdr+'_MED') for spec_res_file in FILES_A_BG]
		SPEC_SEP_VAR = np.asarray(SPEC_SEP_VAR)
		SPEC_SEP_VAR_BU = SPEC_SEP_VAR

		min_y_ind_spec = []
		max_y_ind_spec = []		
		print
		print colored('Line: ','yellow')
		print colored(LINES[4][lines]+' '+str(LINES[0][lines]),'yellow')
		print
		lmb_min_lim_line_ft = LINES[0][lines] - MSK_NTMS*LINES[1][lines]
		lmb_max_lim_line_ft = LINES[0][lines] + MSK_NTMS*LINES[1][lines]

		lmb_min_lim_line = LINES[0][lines]*(1+z_glx_Ps) - MSK_NTMS_PLT*LINES[2][lines]
		lmb_max_lim_line = LINES[0][lines]*(1+z_glx_Ps) + MSK_NTMS_PLT*LINES[2][lines]
		
		ax110 = plt.Subplot(f, gs0[j])
		f.add_subplot(ax110)

		ax110.set_rasterization_zorder(1)
		plt.autoscale(enable=True, axis='both', tight=False)
		plt.autoscale(enable=True, axis='y', tight=False)
		#ax110.set_title(PLOT_TITLE)
		xticklabels = ax110.get_xticklabels()
		plt.setp(xticklabels, visible=True,family='serif')
		yticklabels = ax110.get_yticklabels()
		plt.setp(yticklabels, visible=True,family='serif')
		ax110.yaxis.set_tick_params(which='both',labelsize=18,direction='in',color='black',bottom=True,top=True,left=True,right=True)
		ax110.xaxis.set_tick_params(which='both',labelsize=18,direction='in',color='black',bottom=True,top=True,left=True,right=True)

		#minorLocator_x   = plt.MultipleLocator(5)
		#majorLocator_x   = plt.MultipleLocator(10)
		###minorLocator_y   = plt.MultipleLocator(0.1)
		###majorLocator_y   = plt.MultipleLocator(0.5)
		#ax110.xaxis.set_minor_locator(minorLocator_x)
		#ax110.xaxis.set_major_locator(majorLocator_x)
		##ax110.yaxis.set_minor_locator(minorLocator_y)
		##ax110.yaxis.set_major_locator(majorLocator_y)
		plt.tick_params(which='both', width=0.7)
		plt.tick_params(which='major', length=5)
		plt.tick_params(which='minor', length=2)
		ax110.minorticks_on()

		#plt.xlabel('$\lambda$',fontsize=28, family = 'serif')
		#plt.ylabel('F$_\lambda$ (ergs/sec/cm$^{2}/\AA$)',fontsize=28)
		#plt.ylabel('F$_\lambda$',fontsize=28, family = 'serif')
	
		if mlt_stk_fct == 'med' and fit_fnct == 'gauss':#stk_function_m == True :
			try: 
				SPEC_POINTS_M_1  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_2  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_3  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_4  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_5  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_6  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_7  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_8  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_9  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_10 = [Header_Get(spec_res_file,str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_M_BG]

				SPEC_POINTS_NMB_M  = [Header_Get(spec_res_file,'STK_NUM') for spec_res_file in FILES_M_BG]					
				SPEC_POINTS_M_SNR  = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU1'),0) for spec_res_file in FILES_M_BG]

				SPEC_POINTS_M_SNR2 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU2'),0) for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_SNR3 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU3'),0) for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_SNR4 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU4'),0) for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_SNR5 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNB2'),0) for spec_res_file in FILES_M_BG]

				SPEC_POINTS_NMB2_M = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NHT') for spec_res_file in FILES_M_BG]					
				SPEC_POINTS_NMB3_M = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NHW') for spec_res_file in FILES_M_BG]					

				print SPEC_POINTS_M_9

				##############CLEANING NON FIT VALUES ##############
				print
				print colored('Deleting Unfitted bins!','yellow')
				print colored('From:','yellow')
				print colored('MED: '+str(SPEC_POINTS_M_9),'yellow')
				print

				indx_msk_med       = (np.where(np.asarray(SPEC_POINTS_M_9)==999999.99999)[0])
				indx_msk_med       = np.asarray(indx_msk_med)			

				if len(indx_msk_med)>0:
					print colored('Points with FIT values (MED): ' + str(999999.99999) +' :','yellow')
					print colored(([indx_msk_med]),'yellow')
					#print colored(str(SPEC_POINTS_M_9[indx_msk_med]),'yellow')
					print colored('Corresponding to ' + plt_nme_prp +' points: ','yellow')
					print colored(str(SPEC_SEP_VAR[indx_msk_med]),'yellow')
					print
				else:
					print colored('No Unfitted Values found (MED)!','yellow')
					print
					
				SPEC_POINTS_M_9         = np.asarray(SPEC_POINTS_M_9)
				SPEC_POINTS_M_9         = np.delete(SPEC_POINTS_M_9,indx_msk_med)

				SPEC_SEP_VAR_M          = SPEC_SEP_VAR
				SPEC_SEP_VAR_M          = np.delete(SPEC_SEP_VAR_M,indx_msk_med)
				SPEC_SEP_VAR_BU         = np.delete(SPEC_SEP_VAR_BU,indx_msk_med)

				SPEC_POINTS_NMB_M       = np.delete(SPEC_POINTS_NMB_M,indx_msk_med)
				SPEC_POINTS_NMB2_M      = np.delete(SPEC_POINTS_NMB2_M,indx_msk_med)
				SPEC_POINTS_NMB3_M      = np.delete(SPEC_POINTS_NMB3_M,indx_msk_med)

				SPEC_POINTS_M_SNR       = np.delete(SPEC_POINTS_M_SNR,indx_msk_med)
				SPEC_POINTS_M_SNR2      = np.delete(SPEC_POINTS_M_SNR2,indx_msk_med)
				SPEC_POINTS_M_SNR3      = np.delete(SPEC_POINTS_M_SNR3,indx_msk_med)
				SPEC_POINTS_M_SNR4      = np.delete(SPEC_POINTS_M_SNR4,indx_msk_med)
				SPEC_POINTS_M_SNR5      = np.delete(SPEC_POINTS_M_SNR5,indx_msk_med)
				SPEC_POINTS_NMB2_M      = np.delete(SPEC_POINTS_NMB2_M,indx_msk_med)
				SPEC_POINTS_NMB3_M      = np.delete(SPEC_POINTS_NMB3_M,indx_msk_med)

				SPEC_POINTS_M_9_AUX     = SPEC_POINTS_M_9 

				SPEC_SEP_VAR_M_AUX      = SPEC_SEP_VAR_M 
				SPEC_SEP_VAR_BU_AUX     = SPEC_SEP_VAR_BU 

				SPEC_POINTS_NMB_M_AUX   = SPEC_POINTS_NMB_M 
				SPEC_POINTS_NMB2_M_AUX  = SPEC_POINTS_NMB2_M 
				SPEC_POINTS_NMB3_M_AUX  = SPEC_POINTS_NMB3_M 

				SPEC_POINTS_M_SNR_AUX   = SPEC_POINTS_M_SNR 
				SPEC_POINTS_M_SNR2_AUX  = SPEC_POINTS_M_SNR2 
				SPEC_POINTS_M_SNR3_AUX  = SPEC_POINTS_M_SNR3 
				SPEC_POINTS_M_SNR4_AUX  = SPEC_POINTS_M_SNR4 
				SPEC_POINTS_M_SNR5_AUX  = SPEC_POINTS_M_SNR5 

				SPEC_POINTS_NMB2_M_AUX  = SPEC_POINTS_NMB2_M 
				SPEC_POINTS_NMB3_M_AUX  = SPEC_POINTS_NMB3_M
				##############CLEANING NON FIT VALUES ############## 

				if cln_snr_mth == 1:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					pass
					SPEC_POINTS_M_SNR0     = SPEC_POINTS_M_SNR
					SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR_AUX
				elif cln_snr_mth == 2:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					pass
					SPEC_POINTS_M_SNR0     = SPEC_POINTS_M_SNR2
					SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR2_AUX
				elif cln_snr_mth == 3:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					pass
					SPEC_POINTS_M_SNR0     = SPEC_POINTS_M_SNR3
					SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR3_AUX
				elif cln_snr_mth == 4:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					pass
					SPEC_POINTS_M_SNR0     = SPEC_POINTS_M_SNR4
					SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR4_AUX
				else:
					SPEC_POINTS_M_SNR0     = SPEC_POINTS_M_SNR
					SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR_AUX
					print
					print colored('SNR method: ' + str(cln_snr_mth) + ' does not exist!','yellow')
					print colored('Assuming SNR method: 1','yellow')
					print

				#############CLEANING LOW SNR EW POINTS#############
				if cln_pts_snr == True:
					indx_msk_snr_med   = (np.where(np.asarray(SPEC_POINTS_M_SNR0)<cln_snr_thr)[0])
					indx_msk_snr_med   = np.asarray(indx_msk_snr_med)			

					print
					print colored('Cleaning points according their SNR!','yellow')
					print colored('From:','yellow')
					print colored('MED: ' + str(SPEC_POINTS_M_SNR0),'yellow')
					print colored('SNR Computation Method : ' + str(cln_snr_mth),'yellow')
					print colored('Threshold value        : ' + str(cln_snr_thr),'yellow')
					print
					print
					print colored('Points with SNR < ' + str(cln_snr_thr) +' :','yellow')
					print colored('MED-IDX: ' + str(indx_msk_snr_med),'yellow')
					print colored('MED-VAL: ' + str(SPEC_POINTS_M_SNR0[indx_msk_snr_med]),'yellow')
					print colored('Corresponding to ' + plt_nme_prp +' points: ','yellow')
					print colored('MED-VAR: ' + str(SPEC_SEP_VAR_M[indx_msk_snr_med]),'yellow')
					print

					SPEC_POINTS_M_9    = np.delete(SPEC_POINTS_M_9,indx_msk_snr_med)

					SPEC_SEP_VAR_M     = np.delete(SPEC_SEP_VAR_M,indx_msk_snr_med)
					SPEC_SEP_VAR_BU    = np.delete(SPEC_SEP_VAR_BU,indx_msk_snr_med)


					SPEC_POINTS_NMB_M  = np.delete(SPEC_POINTS_NMB_M,indx_msk_snr_med)
					SPEC_POINTS_NMB2_M = np.delete(SPEC_POINTS_NMB2_M,indx_msk_snr_med)
					SPEC_POINTS_NMB3_M = np.delete(SPEC_POINTS_NMB3_M,indx_msk_snr_med)

					SPEC_POINTS_M_SNR0 = np.delete(SPEC_POINTS_M_SNR0,indx_msk_snr_med)

					SPEC_POINTS_M_SNR  = np.delete(SPEC_POINTS_M_SNR,indx_msk_snr_med)
					SPEC_POINTS_M_SNR2 = np.delete(SPEC_POINTS_M_SNR2,indx_msk_snr_med)
					SPEC_POINTS_M_SNR3 = np.delete(SPEC_POINTS_M_SNR3,indx_msk_snr_med)
					SPEC_POINTS_M_SNR4 = np.delete(SPEC_POINTS_M_SNR4,indx_msk_snr_med)
					SPEC_POINTS_M_SNR5 = np.delete(SPEC_POINTS_M_SNR5,indx_msk_snr_med)
					#SPEC_POINTS_NMB2   = np.delete(SPEC_POINTS_NMB2,indx_msk_snr_med)
					#SPEC_POINTS_NMB3   = np.delete(SPEC_POINTS_NMB3,indx_msk_snr_med)

					print
					print
					print len(SPEC_POINTS_M_9),SPEC_POINTS_M_9
					print len(SPEC_SEP_VAR_M),SPEC_SEP_VAR_M
					print len(SPEC_SEP_VAR_BU),SPEC_SEP_VAR_BU
					print len(SPEC_POINTS_NMB_M),SPEC_POINTS_NMB_M,indx_msk_snr_med
					print len(SPEC_POINTS_NMB2_M),SPEC_POINTS_NMB2_M
					print len(SPEC_POINTS_NMB3_M),SPEC_POINTS_NMB3_M
					print len(SPEC_POINTS_M_SNR),SPEC_POINTS_M_SNR
					print len(SPEC_POINTS_M_SNR2),SPEC_POINTS_M_SNR2
					print len(SPEC_POINTS_M_SNR3),SPEC_POINTS_M_SNR3
					print len(SPEC_POINTS_M_SNR4),SPEC_POINTS_M_SNR4
					print len(SPEC_POINTS_M_SNR5),SPEC_POINTS_M_SNR5					
					print
				elif cln_pts_snr == False:
					pass				
				#############CLEANING LOW SNR EW POINTS#############
				#######AUXILIARY MARKERS FOR LOW SNR EW POINTS######
				if cln_snr_aux == True:
					indx_msk_snr_med_aux = (np.where(100<np.asarray(SPEC_POINTS_M_SNR0_AUX))[0])
					indx_msk_snr_med_aux = np.asarray(indx_msk_snr_med_aux)			
					SPEC_POINTS_M_SNR0_AUX[indx_msk_snr_med_aux]=0

					indx_msk_snr_med_aux = (np.where((cln_snr_thr<=np.asarray(SPEC_POINTS_M_SNR0_AUX)) & (np.asarray(SPEC_POINTS_M_SNR0_AUX)<cln_snr_th2))[0])
					indx_msk_snr_med_aux = np.asarray(indx_msk_snr_med_aux)			

					print
					print colored('Cleaning points according their SNR!','cyan')
					print colored('From:','cyan')
					print colored('MED: ' + str(SPEC_POINTS_M_SNR0_AUX),'cyan')
					print colored('SNR Computation Method : ' + str(cln_snr_mth),'cyan')
					print colored('Threshold value        : ' + str(cln_snr_thr),'cyan')
					print colored('Threshold value (AUX)  : ' + str(cln_snr_th2),'cyan')
					print
					print
					print colored(str(cln_snr_thr) + '< Points with SNR < ' + str(cln_snr_th2) +' :','cyan')
					print colored('MED-IDX: ' + str(indx_msk_snr_med_aux) + ',' + str(SPEC_POINTS_M_SNR0_AUX[indx_msk_snr_med_aux]),'cyan')
					print colored('MED-VAL: ' + str(SPEC_POINTS_M_SNR0_AUX[indx_msk_snr_med_aux]),'cyan')
					print colored('Corresponding to ' + plt_nme_prp +' points: ','cyan')
					print colored('MED-VAR: ' + str(SPEC_SEP_VAR_M_AUX[indx_msk_snr_med_aux]),'cyan')
					print

					if skip_fg_ref_ew == False:
						#SPEC_SEP_VAR_A_AUX[0] = 1.0
						SPEC_SEP_VAR_M_AUX[0] = 1.0
					else:
						pass

					SPEC_POINTS_M_9_AUX    = SPEC_POINTS_M_9_AUX[indx_msk_snr_med_aux]

					SPEC_SEP_VAR_M_AUX     = SPEC_SEP_VAR_M_AUX[indx_msk_snr_med_aux]
					SPEC_SEP_VAR_BU_AUX    = SPEC_SEP_VAR_BU_AUX[indx_msk_snr_med_aux]

					SPEC_POINTS_NMB_M_AUX  = SPEC_POINTS_NMB_M_AUX[indx_msk_snr_med_aux]
					SPEC_POINTS_NMB2_M_AUX = SPEC_POINTS_NMB2_M_AUX[indx_msk_snr_med_aux]
					SPEC_POINTS_NMB3_M_AUX = SPEC_POINTS_NMB3_M_AUX[indx_msk_snr_med_aux]

					SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR0_AUX[indx_msk_snr_med_aux]

					SPEC_POINTS_M_SNR_AUX  = SPEC_POINTS_M_SNR_AUX[indx_msk_snr_med_aux]
					SPEC_POINTS_M_SNR2_AUX = SPEC_POINTS_M_SNR2_AUX[indx_msk_snr_med_aux]
					SPEC_POINTS_M_SNR3_AUX = SPEC_POINTS_M_SNR3_AUX[indx_msk_snr_med_aux]
					SPEC_POINTS_M_SNR4_AUX = SPEC_POINTS_M_SNR4_AUX[indx_msk_snr_med_aux]
					SPEC_POINTS_M_SNR5_AUX = SPEC_POINTS_M_SNR5_AUX[indx_msk_snr_med_aux]
					#SPEC_POINTS_NMB2_AUX   = SPEC_POINTS_NMB2_AUX[indx_msk_snr_med_aux]
					#SPEC_POINTS_NMB3_AUX   = SPEC_POINTS_NMB3_AUX[indx_msk_snr_med_aux]

					print
					print len(SPEC_POINTS_M_9_AUX),SPEC_POINTS_M_9_AUX
					print len(SPEC_SEP_VAR_M_AUX),SPEC_SEP_VAR_M_AUX
					print len(SPEC_POINTS_NMB_M_AUX),SPEC_POINTS_NMB_M_AUX
					print len(SPEC_POINTS_NMB2_M_AUX),SPEC_POINTS_NMB2_M_AUX
					print len(SPEC_POINTS_NMB3_M_AUX),SPEC_POINTS_NMB3_M_AUX
					print len(SPEC_POINTS_M_SNR_AUX),SPEC_POINTS_M_SNR_AUX
					print len(SPEC_POINTS_M_SNR2_AUX),SPEC_POINTS_M_SNR2_AUX
					print len(SPEC_POINTS_M_SNR3_AUX),SPEC_POINTS_M_SNR3_AUX
					print len(SPEC_POINTS_M_SNR4_AUX),SPEC_POINTS_M_SNR4_AUX
					print len(SPEC_POINTS_M_SNR5_AUX),SPEC_POINTS_M_SNR5_AUX
					print
				elif cln_snr_aux == False:
					pass				
				#######AUXILIARY MARKERS FOR LOW SNR EW POINTS######
			except KeyError:
				print
				print colored('Header Error! L-26606','yellow')
				print str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'C'
				print
				print 	'STK_NUM'
				print
				print str(LINES[5][lines])+'_SNU1'
				print str(LINES[5][lines])+'_SNU2'
				print str(LINES[5][lines])+'_SNU4'
				print str(LINES[5][lines])+'_SNB2'
				print
				print str(LINES[5][lines])+'_NHT'
				print str(LINES[5][lines])+'_NHW'									
				print 
				print colored("\n".join([FILE for FILE in FILES_M_BG]),'yellow')
				print
				SPEC_POINTS_M_1  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_2  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_3  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_4  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_5  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_6  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_7  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_8  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_9  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_10 = np.zeros([len(FILES_M_BG)])

				SPEC_POINTS_NMB    = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_SNR  = np.zeros([len(FILES_M_BG)])

				SPEC_POINTS_M_SNR2  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_SNR3  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_SNR4  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_SNR5  = np.zeros([len(FILES_M_BG)])

				SPEC_POINTS_NMB2    = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_NMB3    = np.zeros([len(FILES_M_BG)])

				SPEC_POINTS_NMB_M  = SPEC_POINTS_NMB
				SPEC_POINTS_NMB2_M = SPEC_POINTS_NMB2
				SPEC_POINTS_NMB3_M = SPEC_POINTS_NMB3

				SPEC_POINTS_M_SNR  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_SNR2 = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_SNR3 = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_SNR4 = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_SNR5 = np.zeros([len(FILES_M_BG)])
				#SPEC_POINTS_NMB2   = np.zeros([len(FILES_A_BG)])
				#SPEC_POINTS_NMB3   = np.zeros([len(FILES_A_BG)])				
		elif mlt_stk_fct == 'avg' and fit_fnct == 'gauss':#stk_function_a == True :
			try: 
				SPEC_POINTS_A_1  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_2  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_3  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_4  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_5  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_6  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_7  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_8  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_9  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_10 = [Header_Get(spec_res_file,str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_A_BG]
				
				SPEC_POINTS_NMB_A   = [Header_Get(spec_res_file,'STK_NUM') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_SNR  = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU1'),0) for spec_res_file in FILES_A_BG]

				SPEC_POINTS_A_SNR2 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU2'),0) for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_SNR3 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU3'),0) for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_SNR4 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU4'),0) for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_SNR5 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNB2'),0) for spec_res_file in FILES_A_BG]

				SPEC_POINTS_NMB2_A = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NHT') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_NMB3_A = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NHW') for spec_res_file in FILES_A_BG]

				##############CLEANING NON FIT VALUES ##############
				print
				print colored('Deleting Unfitted bins!','yellow')
				print colored('From:','yellow')
				print colored('AVG: '+str(SPEC_POINTS_A_9),'yellow')
				print

				indx_msk_avg       = (np.where(np.asarray(SPEC_POINTS_A_9)==999999.99999)[0])
				indx_msk_avg       = np.asarray(indx_msk_avg)
					
				if len(indx_msk_avg)>0:
					print colored('Points with FIT values (AVG): ' + str(999999.99999) +' :','yellow')
					print colored(([indx_msk_avg]),'yellow')
					print colored('Corresponding to ' + plt_nme_prp +' points: ','yellow')
					print colored(str(SPEC_SEP_VAR[indx_msk_avg]),'yellow')
					print
					print
				else:
					print colored('No Unfitted Values found (AVG)!','yellow')
					print

				SPEC_POINTS_A_9        = np.asarray(SPEC_POINTS_A_9)
				SPEC_POINTS_A_9        = np.delete(SPEC_POINTS_A_9,indx_msk_avg)

				SPEC_SEP_VAR_A         = SPEC_SEP_VAR
				SPEC_SEP_VAR_A         = np.delete(SPEC_SEP_VAR_A,indx_msk_avg)
				SPEC_SEP_VAR_BU        = np.delete(SPEC_SEP_VAR_BU,indx_msk_avg)

				SPEC_POINTS_NMB_A      = np.delete(SPEC_POINTS_NMB_A,indx_msk_avg)
				SPEC_POINTS_NMB2_A     = np.delete(SPEC_POINTS_NMB2_A,indx_msk_avg)
				SPEC_POINTS_NMB3_A     = np.delete(SPEC_POINTS_NMB3_A,indx_msk_avg)


				SPEC_POINTS_A_SNR      = np.delete(SPEC_POINTS_A_SNR,indx_msk_avg)
				SPEC_POINTS_A_SNR2     = np.delete(SPEC_POINTS_A_SNR2,indx_msk_avg)
				SPEC_POINTS_A_SNR3     = np.delete(SPEC_POINTS_A_SNR3,indx_msk_avg)
				SPEC_POINTS_A_SNR4     = np.delete(SPEC_POINTS_A_SNR4,indx_msk_avg)
				SPEC_POINTS_A_SNR5     = np.delete(SPEC_POINTS_A_SNR5,indx_msk_avg)

				SPEC_POINTS_A_9_AUX    = SPEC_POINTS_A_9

				SPEC_SEP_VAR_A_AUX     = SPEC_SEP_VAR_A
				SPEC_SEP_VAR_BU_AUX    = SPEC_SEP_VAR_BU

				SPEC_POINTS_NMB_A_AUX  = SPEC_POINTS_NMB_A
				SPEC_POINTS_NMB2_A_AUX = SPEC_POINTS_NMB2_A
				SPEC_POINTS_NMB3_A_AUX = SPEC_POINTS_NMB3_A

				SPEC_POINTS_A_SNR_AUX  = SPEC_POINTS_A_SNR
				SPEC_POINTS_A_SNR2_AUX = SPEC_POINTS_A_SNR2
				SPEC_POINTS_A_SNR3_AUX = SPEC_POINTS_A_SNR3
				SPEC_POINTS_A_SNR4_AUX = SPEC_POINTS_A_SNR4
				SPEC_POINTS_A_SNR5_AUX = SPEC_POINTS_A_SNR5
				##############CLEANING NON FIT VALUES ##############

				if cln_snr_mth == 1:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					pass
					SPEC_POINTS_A_SNR0     = SPEC_POINTS_A_SNR
					SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR_AUX
				elif cln_snr_mth == 2:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					pass
					SPEC_POINTS_A_SNR0     = SPEC_POINTS_A_SNR2
					SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR2_AUX
				elif cln_snr_mth == 3:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					pass
					SPEC_POINTS_A_SNR0     = SPEC_POINTS_A_SNR3
					SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR3_AUX
				elif cln_snr_mth == 4:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					pass
					SPEC_POINTS_A_SNR0     = SPEC_POINTS_A_SNR4
					SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR4_AUX
				else:
					SPEC_POINTS_A_SNR0     = SPEC_POINTS_A_SNR
					SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR_AUX
					print
					print colored('SNR method: ' + str(cln_snr_mth) + ' does not exist!','yellow')
					print colored('Assuming SNR method: 1','yellow')
					print
				#############CLEANING LOW SNR EW POINTS#############
				if cln_pts_snr == True:
					indx_msk_snr_avg   = (np.where(np.asarray(SPEC_POINTS_A_SNR0)<cln_snr_thr)[0])
					indx_msk_snr_avg   = np.asarray(indx_msk_snr_avg)

					print
					print colored('Cleaning points according their SNR!','yellow')
					print colored('From:','yellow')
					print colored('AVG: ' + str(SPEC_POINTS_A_SNR0),'yellow')
					print colored('SNR Computation Method : ' + str(cln_snr_mth),'yellow')
					print colored('Threshold value        : ' + str(cln_snr_thr),'yellow')
					print
					print
					print colored('Points with SNR < ' + str(cln_snr_thr) +' :','yellow')
					print colored('AVG-IDX: ' + str(indx_msk_snr_avg),'yellow')
					print colored('AVG-VAL: ' + str(SPEC_POINTS_A_SNR0[indx_msk_snr_avg]),'yellow')
					print colored('Corresponding to ' + plt_nme_prp +' points: ','yellow')
					print colored('AVG-VAR: ' + str(SPEC_SEP_VAR_A[indx_msk_snr_avg]),'yellow')
					print

					SPEC_POINTS_A_9    = np.delete(SPEC_POINTS_A_9,indx_msk_snr_avg)

					SPEC_SEP_VAR_A     = np.delete(SPEC_SEP_VAR_A,indx_msk_snr_avg)
					SPEC_SEP_VAR_BU    = np.delete(SPEC_SEP_VAR_BU,indx_msk_snr_avg)

					SPEC_POINTS_NMB_A  = np.delete(SPEC_POINTS_NMB_A,indx_msk_snr_avg)
					SPEC_POINTS_NMB2_A = np.delete(SPEC_POINTS_NMB2_A,indx_msk_snr_avg)
					SPEC_POINTS_NMB3_A = np.delete(SPEC_POINTS_NMB3_A,indx_msk_snr_avg)

					SPEC_POINTS_A_SNR0 = np.delete(SPEC_POINTS_A_SNR0,indx_msk_snr_avg)

					SPEC_POINTS_A_SNR  = np.delete(SPEC_POINTS_A_SNR,indx_msk_snr_avg)
					SPEC_POINTS_A_SNR2 = np.delete(SPEC_POINTS_A_SNR2,indx_msk_snr_avg)
					SPEC_POINTS_A_SNR3 = np.delete(SPEC_POINTS_A_SNR3,indx_msk_snr_avg)
					SPEC_POINTS_A_SNR4 = np.delete(SPEC_POINTS_A_SNR4,indx_msk_snr_avg)
					SPEC_POINTS_A_SNR5 = np.delete(SPEC_POINTS_A_SNR5,indx_msk_snr_avg)

					print
					print len(SPEC_POINTS_A_9),SPEC_POINTS_A_9
					print len(SPEC_SEP_VAR_A),SPEC_SEP_VAR_A
					print len(SPEC_SEP_VAR_BU),SPEC_SEP_VAR_BU
					print len(SPEC_POINTS_NMB_A),SPEC_POINTS_NMB_A
					print len(SPEC_POINTS_NMB2_A),SPEC_POINTS_NMB2_A
					print len(SPEC_POINTS_NMB3_A),SPEC_POINTS_NMB3_A
					print len(SPEC_POINTS_A_SNR),SPEC_POINTS_A_SNR
					print len(SPEC_POINTS_A_SNR2),SPEC_POINTS_A_SNR2
					print len(SPEC_POINTS_A_SNR3),SPEC_POINTS_A_SNR3
					print len(SPEC_POINTS_A_SNR4),SPEC_POINTS_A_SNR4
					print len(SPEC_POINTS_A_SNR5),SPEC_POINTS_A_SNR5
					print
				elif cln_pts_snr == False:
					pass
				#############CLEANING LOW SNR EW POINTS#############
				#######AUXILIARY MARKERS FOR LOW SNR EW POINTS######
				if cln_snr_aux == True:
					indx_msk_snr_avg_aux = (np.where(100<np.asarray(SPEC_POINTS_A_SNR0_AUX))[0])
					indx_msk_snr_avg_aux = np.asarray(indx_msk_snr_avg_aux)
					SPEC_POINTS_A_SNR0_AUX[indx_msk_snr_avg_aux]=0

					indx_msk_snr_avg_aux = (np.where((cln_snr_thr<=np.asarray(SPEC_POINTS_A_SNR0_AUX)) & (np.asarray(SPEC_POINTS_A_SNR0_AUX)<cln_snr_th2))[0])
					indx_msk_snr_avg_aux = np.asarray(indx_msk_snr_avg_aux)

					print
					print colored('Cleaning points according their SNR!','cyan')
					print colored('From:','cyan')
					print colored('AVG: ' + str(SPEC_POINTS_A_SNR0_AUX),'cyan')
					print colored('SNR Computation Method : ' + str(cln_snr_mth),'cyan')
					print colored('Threshold value        : ' + str(cln_snr_thr),'cyan')
					print colored('Threshold value (AUX)  : ' + str(cln_snr_th2),'cyan')
					print
					print
					print colored(str(cln_snr_thr) + '< Points with SNR < ' + str(cln_snr_th2) +' :','cyan')
					print colored('AVG-IDX: ' + str(indx_msk_snr_avg_aux) + ',' + str(SPEC_POINTS_A_SNR0_AUX[indx_msk_snr_avg_aux]),'cyan')
					print colored('AVG-VAL: ' + str(SPEC_POINTS_A_SNR0_AUX[indx_msk_snr_avg_aux]),'cyan')
					print colored('Corresponding to ' + plt_nme_prp +' points: ','cyan')
					print colored('AVG-VAR: ' + str(SPEC_SEP_VAR_A_AUX[indx_msk_snr_avg_aux]),'cyan')
					print

					if skip_fg_ref_ew == False:
						SPEC_SEP_VAR_A_AUX[0] = 1.0
						#SPEC_SEP_VAR_M_AUX[0] = 1.0
					else:
						pass

					SPEC_POINTS_A_9_AUX    = SPEC_POINTS_A_9_AUX[indx_msk_snr_avg_aux]

					SPEC_SEP_VAR_A_AUX     = SPEC_SEP_VAR_A_AUX[indx_msk_snr_avg_aux]
					SPEC_SEP_VAR_BU_AUX    = SPEC_SEP_VAR_BU_AUX[indx_msk_snr_avg_aux]

					SPEC_POINTS_NMB_A_AUX  = SPEC_POINTS_NMB_A_AUX[indx_msk_snr_avg_aux]
					SPEC_POINTS_NMB2_A_AUX = SPEC_POINTS_NMB2_A_AUX[indx_msk_snr_avg_aux]
					SPEC_POINTS_NMB3_A_AUX = SPEC_POINTS_NMB3_A_AUX[indx_msk_snr_avg_aux]

					SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR0_AUX[indx_msk_snr_avg_aux]

					SPEC_POINTS_A_SNR_AUX  = SPEC_POINTS_A_SNR_AUX[indx_msk_snr_avg_aux]
					SPEC_POINTS_A_SNR2_AUX = SPEC_POINTS_A_SNR2_AUX[indx_msk_snr_avg_aux]
					SPEC_POINTS_A_SNR3_AUX = SPEC_POINTS_A_SNR3_AUX[indx_msk_snr_avg_aux]
					SPEC_POINTS_A_SNR4_AUX = SPEC_POINTS_A_SNR4_AUX[indx_msk_snr_avg_aux]
					SPEC_POINTS_A_SNR5_AUX = SPEC_POINTS_A_SNR5_AUX[indx_msk_snr_avg_aux]
					#SPEC_POINTS_NMB2_AUX   = SPEC_POINTS_NMB2_AUX[indx_msk_snr_med_aux]
					#SPEC_POINTS_NMB3_AUX   = SPEC_POINTS_NMB3_AUX[indx_msk_snr_med_aux]

					print
					print len(SPEC_POINTS_A_9_AUX),SPEC_POINTS_A_9_AUX
					print len(SPEC_SEP_VAR_A_AUX),SPEC_SEP_VAR_A_AUX
					print len(SPEC_SEP_VAR_BU_AUX),SPEC_SEP_VAR_BU_AUX
					print len(SPEC_POINTS_NMB_A_AUX),SPEC_POINTS_NMB_A_AUX
					print len(SPEC_POINTS_NMB2_A_AUX),SPEC_POINTS_NMB2_A_AUX
					print len(SPEC_POINTS_NMB3_A_AUX),SPEC_POINTS_NMB3_A_AUX
					print len(SPEC_POINTS_A_SNR_AUX),SPEC_POINTS_A_SNR_AUX
					print len(SPEC_POINTS_A_SNR2_AUX),SPEC_POINTS_A_SNR2_AUX
					print len(SPEC_POINTS_A_SNR3_AUX),SPEC_POINTS_A_SNR3_AUX
					print len(SPEC_POINTS_A_SNR4_AUX),SPEC_POINTS_A_SNR4_AUX
					print len(SPEC_POINTS_A_SNR5_AUX),SPEC_POINTS_A_SNR5_AUX
					print
				elif cln_snr_aux == False:
					pass
				#######AUXILIARY MARKERS FOR LOW SNR EW POINTS######
			except KeyError:
				print
				print colored('Header Error! - L26892','yellow')
				print str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'C'
				print
				print 	'STK_NUM'
				print
				print str(LINES[5][lines])+'_SNU1'
				print str(LINES[5][lines])+'_SNU2'
				print str(LINES[5][lines])+'_SNU4'
				print str(LINES[5][lines])+'_SNB2'
				print
				print str(LINES[5][lines])+'_NHT'
				print str(LINES[5][lines])+'_NHW'					
				print
				print colored("\n".join([FILE for FILE in FILES_A_BG]),'yellow')
				print
				SPEC_POINTS_A_1  = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_2  = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_3  = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_4  = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_5  = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_6  = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_7  = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_8  = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_9  = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_10 = np.zeros([len(FILES_A_BG)])

				SPEC_POINTS_NMB    = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_SNR  = np.zeros([len(FILES_A_BG)])

				SPEC_POINTS_A_SNR2 = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_SNR3 = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_SNR4 = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_SNR5 = np.zeros([len(FILES_A_BG)])

				SPEC_POINTS_NMB2   = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_NMB3   = np.zeros([len(FILES_A_BG)])

				SPEC_POINTS_NMB_A  = SPEC_POINTS_NMB
				SPEC_POINTS_NMB2_A = SPEC_POINTS_NMB2
				SPEC_POINTS_NMB3_A = SPEC_POINTS_NMB3

				SPEC_POINTS_A_SNR  = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_SNR2 = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_SNR3 = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_SNR4 = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_SNR5 = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_NMB2   = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_NMB3   = np.zeros([len(FILES_A_BG)])				
		elif mlt_stk_fct == 'both' and fit_fnct == 'gauss':#stk_function_b	== True:
			try: 
				SPEC_POINTS_M_1  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_2  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_3  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_4  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_5  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_6  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_7  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_8  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_9  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_10 = [Header_Get(spec_res_file,str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_M_BG]

				SPEC_POINTS_A_1  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_2  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_3  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_4  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_5  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_6  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_7  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_8  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_9  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_10 = [Header_Get(spec_res_file,str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_A_BG]

				SPEC_POINTS_NMB    = [Header_Get(spec_res_file,'STK_NUM') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_SNR  = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU1'),0) for spec_res_file in FILES_A_BG]#' SNR UBIN SPC REG ALL'
				SPEC_POINTS_M_SNR  = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU1'),0) for spec_res_file in FILES_M_BG]

				SPEC_POINTS_A_SNR2 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU2'),0) for spec_res_file in FILES_A_BG]#' SNR UBIN SPC REG CNT'
				SPEC_POINTS_M_SNR2 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU2'),0) for spec_res_file in FILES_M_BG]

				SPEC_POINTS_A_SNR3 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU3'),0) for spec_res_file in FILES_A_BG]#' SNR UBIN SPC REG FIT'
				SPEC_POINTS_M_SNR3 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU3'),0) for spec_res_file in FILES_M_BG]

				SPEC_POINTS_A_SNR4 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU4'),0) for spec_res_file in FILES_A_BG]#' SNR UBIN SPC REG PLT'
				SPEC_POINTS_M_SNR4 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU4'),0) for spec_res_file in FILES_M_BG]

				SPEC_POINTS_A_SNR5 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNB2'),0) for spec_res_file in FILES_A_BG]
				SPEC_POINTS_M_SNR5 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNB2'),0) for spec_res_file in FILES_M_BG]

				SPEC_POINTS_NMB2   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NHT') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_NMB3   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NHW') for spec_res_file in FILES_M_BG]

				SPEC_POINTS_NMB_A  = SPEC_POINTS_NMB
				SPEC_POINTS_NMB2_A = SPEC_POINTS_NMB2
				SPEC_POINTS_NMB3_A = SPEC_POINTS_NMB3

				SPEC_POINTS_NMB_M  = SPEC_POINTS_NMB
				SPEC_POINTS_NMB2_M = SPEC_POINTS_NMB2
				SPEC_POINTS_NMB3_M = SPEC_POINTS_NMB3

				##############CLEANING NON FIT VALUES ##############
				print
				print colored('Deleting Unfitted bins!','yellow')
				print colored('From:','yellow')
				print colored('MED: '+str(SPEC_POINTS_M_9),'yellow')
				print colored('AVG: '+str(SPEC_POINTS_A_9),'yellow')
				print

				indx_msk_med       = (np.where(np.asarray(SPEC_POINTS_M_9)==999999.99999)[0])
				indx_msk_avg       = (np.where(np.asarray(SPEC_POINTS_A_9)==999999.99999)[0])
				indx_msk_med       = np.asarray(indx_msk_med)			
				indx_msk_avg       = np.asarray(indx_msk_avg)

				if len(indx_msk_med)>0:
					print colored('Points with FIT values (MED): ' + str(999999.99999) +' :','yellow')
					print colored(([indx_msk_med]),'yellow')
					print colored('Corresponding to ' + plt_nme_prp +' points: ','yellow')
					print colored(str(SPEC_SEP_VAR[indx_msk_med]),'yellow')
					print
				else:
					print colored('No Unfitted Values found (MED)!','yellow')
					print
					
				if len(indx_msk_avg)>0:
					print colored('Points with FIT values (AVG): ' + str(999999.99999) +' :','yellow')
					print colored(([indx_msk_avg]),'yellow')
					print colored('Corresponding to ' + plt_nme_prp +' points: ','yellow')
					print colored(str(SPEC_SEP_VAR[indx_msk_avg]),'yellow')
					print
					print
				else:
					print colored('No Unfitted Values found (AVG)!','yellow')
					print

				SPEC_POINTS_M_9    = np.asarray(SPEC_POINTS_M_9)
				SPEC_POINTS_A_9    = np.asarray(SPEC_POINTS_A_9)
				SPEC_POINTS_M_9    = np.delete(SPEC_POINTS_M_9,indx_msk_med)
				SPEC_POINTS_A_9    = np.delete(SPEC_POINTS_A_9,indx_msk_avg)

				SPEC_SEP_VAR_M     = SPEC_SEP_VAR
				SPEC_SEP_VAR_A     = SPEC_SEP_VAR
				SPEC_SEP_VAR_M     = np.delete(SPEC_SEP_VAR_M,indx_msk_med)
				SPEC_SEP_VAR_A     = np.delete(SPEC_SEP_VAR_A,indx_msk_avg)
				SPEC_SEP_VAR_BU    = np.delete(SPEC_SEP_VAR_BU,indx_msk_avg)

				SPEC_POINTS_NMB_A  = np.delete(SPEC_POINTS_NMB_A,indx_msk_avg)
				SPEC_POINTS_NMB2_A = np.delete(SPEC_POINTS_NMB2_A,indx_msk_avg)
				SPEC_POINTS_NMB3_A = np.delete(SPEC_POINTS_NMB3_A,indx_msk_avg)

				SPEC_POINTS_NMB_M  = np.delete(SPEC_POINTS_NMB_M,indx_msk_med)
				SPEC_POINTS_NMB2_M = np.delete(SPEC_POINTS_NMB2_M,indx_msk_med)
				SPEC_POINTS_NMB3_M = np.delete(SPEC_POINTS_NMB3_M,indx_msk_med)

				SPEC_POINTS_A_SNR  = np.delete(SPEC_POINTS_A_SNR,indx_msk_avg)
				SPEC_POINTS_M_SNR  = np.delete(SPEC_POINTS_M_SNR,indx_msk_med)
				SPEC_POINTS_A_SNR2 = np.delete(SPEC_POINTS_A_SNR2,indx_msk_avg)
				SPEC_POINTS_M_SNR2 = np.delete(SPEC_POINTS_M_SNR2,indx_msk_med)
				SPEC_POINTS_A_SNR3 = np.delete(SPEC_POINTS_A_SNR3,indx_msk_avg)
				SPEC_POINTS_M_SNR3 = np.delete(SPEC_POINTS_M_SNR3,indx_msk_med)
				SPEC_POINTS_A_SNR4 = np.delete(SPEC_POINTS_A_SNR4,indx_msk_avg)
				SPEC_POINTS_M_SNR4 = np.delete(SPEC_POINTS_M_SNR4,indx_msk_med)
				SPEC_POINTS_A_SNR5 = np.delete(SPEC_POINTS_A_SNR5,indx_msk_avg)
				SPEC_POINTS_M_SNR5 = np.delete(SPEC_POINTS_M_SNR5,indx_msk_med)
				SPEC_POINTS_NMB2   = np.delete(SPEC_POINTS_NMB2,indx_msk_med)
				SPEC_POINTS_NMB3   = np.delete(SPEC_POINTS_NMB3,indx_msk_med)


				SPEC_POINTS_M_9_AUX    = SPEC_POINTS_M_9 
				SPEC_POINTS_A_9_AUX    = SPEC_POINTS_A_9 

				SPEC_SEP_VAR_M_AUX     = SPEC_SEP_VAR_M 
				SPEC_SEP_VAR_A_AUX     = SPEC_SEP_VAR_A 
				SPEC_SEP_VAR_BU_AUX    = SPEC_SEP_VAR_BU 

				SPEC_POINTS_NMB_A_AUX  = SPEC_POINTS_NMB_A 
				SPEC_POINTS_NMB2_A_AUX = SPEC_POINTS_NMB2_A 
				SPEC_POINTS_NMB3_A_AUX = SPEC_POINTS_NMB3_A 

				SPEC_POINTS_NMB_M_AUX  = SPEC_POINTS_NMB_M 
				SPEC_POINTS_NMB2_M_AUX = SPEC_POINTS_NMB2_M 
				SPEC_POINTS_NMB3_M_AUX = SPEC_POINTS_NMB3_M 

				SPEC_POINTS_A_SNR_AUX  = SPEC_POINTS_A_SNR 
				SPEC_POINTS_M_SNR_AUX  = SPEC_POINTS_M_SNR 
				SPEC_POINTS_A_SNR2_AUX = SPEC_POINTS_A_SNR2 
				SPEC_POINTS_M_SNR2_AUX = SPEC_POINTS_M_SNR2 
				SPEC_POINTS_A_SNR3_AUX = SPEC_POINTS_A_SNR3 
				SPEC_POINTS_M_SNR3_AUX = SPEC_POINTS_M_SNR3 
				SPEC_POINTS_A_SNR4_AUX = SPEC_POINTS_A_SNR4 
				SPEC_POINTS_M_SNR4_AUX = SPEC_POINTS_M_SNR4 
				SPEC_POINTS_A_SNR5_AUX = SPEC_POINTS_A_SNR5 
				SPEC_POINTS_M_SNR5_AUX = SPEC_POINTS_M_SNR5 
				SPEC_POINTS_NMB2_AUX   = SPEC_POINTS_NMB2 
				SPEC_POINTS_NMB3_AUX   = SPEC_POINTS_NMB3 
				##############CLEANING NON FIT VALUES ##############
				if cln_snr_mth == 1:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					pass
					SPEC_POINTS_M_SNR0     = SPEC_POINTS_M_SNR
					SPEC_POINTS_A_SNR0     = SPEC_POINTS_A_SNR
					SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR_AUX
					SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR_AUX

				elif cln_snr_mth == 2:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					pass
					SPEC_POINTS_M_SNR0     = SPEC_POINTS_M_SNR2
					SPEC_POINTS_A_SNR0     = SPEC_POINTS_A_SNR2
					SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR2_AUX
					SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR2_AUX

				elif cln_snr_mth == 3:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					pass
					SPEC_POINTS_M_SNR0     = SPEC_POINTS_M_SNR3
					SPEC_POINTS_A_SNR0     = SPEC_POINTS_A_SNR3
					SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR3_AUX
					SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR3_AUX

				elif cln_snr_mth == 4:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					pass
					SPEC_POINTS_M_SNR0     = SPEC_POINTS_M_SNR4
					SPEC_POINTS_A_SNR0     = SPEC_POINTS_A_SNR4
					SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR4_AUX
					SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR4_AUX

				else:
					SPEC_POINTS_M_SNR0     = SPEC_POINTS_M_SNR
					SPEC_POINTS_A_SNR0     = SPEC_POINTS_A_SNR
					SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR_AUX
					SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR_AUX

					print
					print colored('SNR method: ' + str(cln_snr_mth) + ' does not exist!','yellow')
					print colored('Assuming SNR method: 1','yellow')
					print
				#############CLEANING LOW SNR EW POINTS#############
				if cln_pts_snr == True:
					indx_msk_snr_med   = (np.where(100<np.asarray(SPEC_POINTS_M_SNR0))[0])
					indx_msk_snr_avg   = (np.where(100<np.asarray(SPEC_POINTS_A_SNR0))[0])
					indx_msk_snr_med   = np.asarray(indx_msk_snr_med)			
					indx_msk_snr_avg   = np.asarray(indx_msk_snr_avg)
					SPEC_POINTS_M_SNR0[indx_msk_snr_med]=0
					SPEC_POINTS_A_SNR0[indx_msk_snr_avg]=0

					indx_msk_snr_med   = (np.where(np.asarray(SPEC_POINTS_M_SNR0)<cln_snr_thr)[0])
					indx_msk_snr_avg   = (np.where(np.asarray(SPEC_POINTS_A_SNR0)<cln_snr_thr)[0])
					indx_msk_snr_med   = np.asarray(indx_msk_snr_med)			
					indx_msk_snr_avg   = np.asarray(indx_msk_snr_avg)

					print
					print colored('Cleaning points according their SNR!','yellow')
					print colored('From:','yellow')
					print colored('AVG: ' + str(SPEC_POINTS_A_SNR0),'yellow')
					print colored('MED: ' + str(SPEC_POINTS_M_SNR0),'yellow')
					print colored('SNR Computation Method : ' + str(cln_snr_mth),'yellow')
					print colored('Threshold value        : ' + str(cln_snr_thr),'yellow')
					print
					print
					print colored('Points with SNR < ' + str(cln_snr_thr) +' :','yellow')
					print colored('AVG-IDX: ' + str(indx_msk_snr_avg),'yellow')
					print colored('MED-IDX: ' + str(indx_msk_snr_med),'yellow')
					print colored('AVG-VAL: ' + str(SPEC_POINTS_A_SNR0[indx_msk_snr_avg]),'yellow')
					print colored('MED-VAL: ' + str(SPEC_POINTS_M_SNR0[indx_msk_snr_med]),'yellow')
					print colored('Corresponding to ' + plt_nme_prp +' points: ','yellow')
					print colored('AVG-VAR: ' + str(SPEC_SEP_VAR_A[indx_msk_snr_avg]),'yellow')
					print colored('MED-VAR: ' + str(SPEC_SEP_VAR_M[indx_msk_snr_med]),'yellow')
					print

					SPEC_POINTS_A_9    = np.delete(SPEC_POINTS_A_9,indx_msk_snr_avg)
					SPEC_POINTS_M_9    = np.delete(SPEC_POINTS_M_9,indx_msk_snr_med)

					SPEC_SEP_VAR_A     = np.delete(SPEC_SEP_VAR_A,indx_msk_snr_avg)
					SPEC_SEP_VAR_M     = np.delete(SPEC_SEP_VAR_M,indx_msk_snr_med)
					SPEC_SEP_VAR_BU    = np.delete(SPEC_SEP_VAR_BU,indx_msk_snr_avg)

					SPEC_POINTS_NMB_A  = np.delete(SPEC_POINTS_NMB_A,indx_msk_snr_avg)
					SPEC_POINTS_NMB2_A = np.delete(SPEC_POINTS_NMB2_A,indx_msk_snr_avg)
					SPEC_POINTS_NMB3_A = np.delete(SPEC_POINTS_NMB3_A,indx_msk_snr_avg)

					SPEC_POINTS_NMB_M  = np.delete(SPEC_POINTS_NMB_M,indx_msk_snr_med)
					SPEC_POINTS_NMB2_M = np.delete(SPEC_POINTS_NMB2_M,indx_msk_snr_med)
					SPEC_POINTS_NMB3_M = np.delete(SPEC_POINTS_NMB3_M,indx_msk_snr_med)

					SPEC_POINTS_A_SNR0 = np.delete(SPEC_POINTS_A_SNR0,indx_msk_snr_avg)
					SPEC_POINTS_M_SNR0 = np.delete(SPEC_POINTS_M_SNR0,indx_msk_snr_med)

					SPEC_POINTS_A_SNR  = np.delete(SPEC_POINTS_A_SNR,indx_msk_snr_avg)
					SPEC_POINTS_M_SNR  = np.delete(SPEC_POINTS_M_SNR,indx_msk_snr_med)
					SPEC_POINTS_A_SNR2 = np.delete(SPEC_POINTS_A_SNR2,indx_msk_snr_avg)
					SPEC_POINTS_M_SNR2 = np.delete(SPEC_POINTS_M_SNR2,indx_msk_snr_med)
					SPEC_POINTS_A_SNR3 = np.delete(SPEC_POINTS_A_SNR3,indx_msk_snr_avg)
					SPEC_POINTS_M_SNR3 = np.delete(SPEC_POINTS_M_SNR3,indx_msk_snr_med)
					SPEC_POINTS_A_SNR4 = np.delete(SPEC_POINTS_A_SNR4,indx_msk_snr_avg)
					SPEC_POINTS_M_SNR4 = np.delete(SPEC_POINTS_M_SNR4,indx_msk_snr_med)
					SPEC_POINTS_A_SNR5 = np.delete(SPEC_POINTS_A_SNR5,indx_msk_snr_avg)
					SPEC_POINTS_M_SNR5 = np.delete(SPEC_POINTS_M_SNR5,indx_msk_snr_med)
					#SPEC_POINTS_NMB2   = np.delete(SPEC_POINTS_NMB2,indx_msk_snr_med)
					#SPEC_POINTS_NMB3   = np.delete(SPEC_POINTS_NMB3,indx_msk_snr_med)

					print
					print len(SPEC_POINTS_A_9),SPEC_POINTS_A_9
					print len(SPEC_SEP_VAR_A),SPEC_SEP_VAR_A
					print len(SPEC_SEP_VAR_BU),SPEC_SEP_VAR_BU
					print len(SPEC_POINTS_NMB_A),SPEC_POINTS_NMB_A
					print len(SPEC_POINTS_NMB2_A),SPEC_POINTS_NMB2_A
					print len(SPEC_POINTS_NMB3_A),SPEC_POINTS_NMB3_A
					print len(SPEC_POINTS_A_SNR),SPEC_POINTS_A_SNR
					print len(SPEC_POINTS_A_SNR2),SPEC_POINTS_A_SNR2
					print len(SPEC_POINTS_A_SNR3),SPEC_POINTS_A_SNR3
					print len(SPEC_POINTS_A_SNR4),SPEC_POINTS_A_SNR4
					print len(SPEC_POINTS_A_SNR5),SPEC_POINTS_A_SNR5
					print
					print len(SPEC_POINTS_M_9),SPEC_POINTS_M_9
					print len(SPEC_SEP_VAR_M),SPEC_SEP_VAR_M
					print len(SPEC_POINTS_NMB_M),SPEC_POINTS_NMB_M,indx_msk_snr_med
					print len(SPEC_POINTS_NMB2_M),SPEC_POINTS_NMB2_M
					print len(SPEC_POINTS_NMB3_M),SPEC_POINTS_NMB3_M
					print len(SPEC_POINTS_M_SNR),SPEC_POINTS_M_SNR
					print len(SPEC_POINTS_M_SNR2),SPEC_POINTS_M_SNR2
					print len(SPEC_POINTS_M_SNR3),SPEC_POINTS_M_SNR3
					print len(SPEC_POINTS_M_SNR4),SPEC_POINTS_M_SNR4
					print len(SPEC_POINTS_M_SNR5),SPEC_POINTS_M_SNR5					
					print
				elif cln_pts_snr == False:
					pass
				#############CLEANING LOW SNR EW POINTS#############
				#######AUXILIARY MARKERS FOR LOW SNR EW POINTS######
				if cln_snr_aux == True:
					indx_msk_snr_med_aux = (np.where(100<np.asarray(SPEC_POINTS_M_SNR0_AUX))[0])
					indx_msk_snr_avg_aux = (np.where(100<np.asarray(SPEC_POINTS_A_SNR0_AUX))[0])
					indx_msk_snr_med_aux = np.asarray(indx_msk_snr_med_aux)			
					indx_msk_snr_avg_aux = np.asarray(indx_msk_snr_avg_aux)
					SPEC_POINTS_M_SNR0_AUX[indx_msk_snr_med_aux]=0
					SPEC_POINTS_A_SNR0_AUX[indx_msk_snr_avg_aux]=0

					indx_msk_snr_med_aux = (np.where((cln_snr_thr<=np.asarray(SPEC_POINTS_M_SNR0_AUX)) & (np.asarray(SPEC_POINTS_M_SNR0_AUX)<cln_snr_th2))[0])
					indx_msk_snr_avg_aux = (np.where((cln_snr_thr<=np.asarray(SPEC_POINTS_A_SNR0_AUX)) & (np.asarray(SPEC_POINTS_A_SNR0_AUX)<cln_snr_th2))[0])
					indx_msk_snr_med_aux = np.asarray(indx_msk_snr_med_aux)			
					indx_msk_snr_avg_aux = np.asarray(indx_msk_snr_avg_aux)

					print
					print colored('Cleaning points according their SNR!','cyan')
					print colored('From:','cyan')
					print colored('AVG: ' + str(SPEC_POINTS_A_SNR0_AUX),'cyan')
					print colored('MED: ' + str(SPEC_POINTS_M_SNR0_AUX),'cyan')
					print colored('SNR Computation Method : ' + str(cln_snr_mth),'cyan')
					print colored('Threshold value        : ' + str(cln_snr_thr),'cyan')
					print colored('Threshold value (AUX)  : ' + str(cln_snr_th2),'cyan')
					print
					print
					print colored(str(cln_snr_thr) + '< Points with SNR < ' + str(cln_snr_th2) +' :','cyan')
					print colored('AVG-IDX: ' + str(indx_msk_snr_avg_aux) + ',' + str(SPEC_POINTS_A_SNR0_AUX[indx_msk_snr_avg_aux]),'cyan')
					print colored('MED-IDX: ' + str(indx_msk_snr_med_aux) + ',' + str(SPEC_POINTS_M_SNR0_AUX[indx_msk_snr_med_aux]),'cyan')
					print colored('AVG-VAL: ' + str(SPEC_POINTS_A_SNR0_AUX[indx_msk_snr_avg_aux]),'cyan')
					print colored('MED-VAL: ' + str(SPEC_POINTS_M_SNR0_AUX[indx_msk_snr_med_aux]),'cyan')
					print colored('Corresponding to ' + plt_nme_prp +' points: ','cyan')
					print colored('AVG-VAR: ' + str(SPEC_SEP_VAR_A_AUX[indx_msk_snr_avg_aux]),'cyan')
					print colored('MED-VAR: ' + str(SPEC_SEP_VAR_M_AUX[indx_msk_snr_med_aux]),'cyan')
					print
					print '****'

					if skip_fg_ref_ew == False:
						SPEC_SEP_VAR_A_AUX[0] = 1.0
						SPEC_SEP_VAR_M_AUX[0] = 1.0
					else:
						pass

					SPEC_POINTS_A_9_AUX    = SPEC_POINTS_A_9_AUX[indx_msk_snr_avg_aux]
					SPEC_POINTS_M_9_AUX    = SPEC_POINTS_M_9_AUX[indx_msk_snr_med_aux]

					SPEC_SEP_VAR_A_AUX     = SPEC_SEP_VAR_A_AUX[indx_msk_snr_avg_aux]
					SPEC_SEP_VAR_M_AUX     = SPEC_SEP_VAR_M_AUX[indx_msk_snr_med_aux]
					SPEC_SEP_VAR_BU_AUX    = SPEC_SEP_VAR_BU_AUX[indx_msk_snr_avg_aux]

					SPEC_POINTS_NMB_A_AUX  = SPEC_POINTS_NMB_A_AUX[indx_msk_snr_avg_aux]
					SPEC_POINTS_NMB2_A_AUX = SPEC_POINTS_NMB2_A_AUX[indx_msk_snr_avg_aux]
					SPEC_POINTS_NMB3_A_AUX = SPEC_POINTS_NMB3_A_AUX[indx_msk_snr_avg_aux]

					SPEC_POINTS_NMB_M_AUX  = SPEC_POINTS_NMB_M_AUX[indx_msk_snr_med_aux]
					SPEC_POINTS_NMB2_M_AUX = SPEC_POINTS_NMB2_M_AUX[indx_msk_snr_med_aux]
					SPEC_POINTS_NMB3_M_AUX = SPEC_POINTS_NMB3_M_AUX[indx_msk_snr_med_aux]

					SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR0_AUX[indx_msk_snr_avg_aux]
					SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR0_AUX[indx_msk_snr_med_aux]

					SPEC_POINTS_A_SNR_AUX  = SPEC_POINTS_A_SNR_AUX[indx_msk_snr_avg_aux]
					SPEC_POINTS_M_SNR_AUX  = SPEC_POINTS_M_SNR_AUX[indx_msk_snr_med_aux]
					SPEC_POINTS_A_SNR2_AUX = SPEC_POINTS_A_SNR2_AUX[indx_msk_snr_avg_aux]
					SPEC_POINTS_M_SNR2_AUX = SPEC_POINTS_M_SNR2_AUX[indx_msk_snr_med_aux]
					SPEC_POINTS_A_SNR3_AUX = SPEC_POINTS_A_SNR3_AUX[indx_msk_snr_avg_aux]
					SPEC_POINTS_M_SNR3_AUX = SPEC_POINTS_M_SNR3_AUX[indx_msk_snr_med_aux]
					SPEC_POINTS_A_SNR4_AUX = SPEC_POINTS_A_SNR4_AUX[indx_msk_snr_avg_aux]
					SPEC_POINTS_M_SNR4_AUX = SPEC_POINTS_M_SNR4_AUX[indx_msk_snr_med_aux]
					SPEC_POINTS_A_SNR5_AUX = SPEC_POINTS_A_SNR5_AUX[indx_msk_snr_avg_aux]
					SPEC_POINTS_M_SNR5_AUX = SPEC_POINTS_M_SNR5_AUX[indx_msk_snr_med_aux]
					#SPEC_POINTS_NMB2_AUX   = SPEC_POINTS_NMB2_AUX[indx_msk_snr_med_aux]
					#SPEC_POINTS_NMB3_AUX   = SPEC_POINTS_NMB3_AUX[indx_msk_snr_med_aux]

					print
					print len(SPEC_POINTS_A_9_AUX),SPEC_POINTS_A_9_AUX
					print len(SPEC_SEP_VAR_A_AUX),SPEC_SEP_VAR_A_AUX
					print len(SPEC_SEP_VAR_BU_AUX),SPEC_SEP_VAR_BU_AUX
					print len(SPEC_POINTS_NMB_A_AUX),SPEC_POINTS_NMB_A_AUX
					print len(SPEC_POINTS_NMB2_A_AUX),SPEC_POINTS_NMB2_A_AUX
					print len(SPEC_POINTS_NMB3_A_AUX),SPEC_POINTS_NMB3_A_AUX
					print len(SPEC_POINTS_A_SNR_AUX),SPEC_POINTS_A_SNR_AUX
					print len(SPEC_POINTS_A_SNR2_AUX),SPEC_POINTS_A_SNR2_AUX
					print len(SPEC_POINTS_A_SNR3_AUX),SPEC_POINTS_A_SNR3_AUX
					print len(SPEC_POINTS_A_SNR4_AUX),SPEC_POINTS_A_SNR4_AUX
					print len(SPEC_POINTS_A_SNR5_AUX),SPEC_POINTS_A_SNR5_AUX
					print
					print len(SPEC_POINTS_M_9_AUX),SPEC_POINTS_M_9_AUX
					print len(SPEC_SEP_VAR_M_AUX),SPEC_SEP_VAR_M_AUX
					print len(SPEC_POINTS_NMB_M_AUX),SPEC_POINTS_NMB_M_AUX
					print len(SPEC_POINTS_NMB2_M_AUX),SPEC_POINTS_NMB2_M_AUX
					print len(SPEC_POINTS_NMB3_M_AUX),SPEC_POINTS_NMB3_M_AUX
					print len(SPEC_POINTS_M_SNR_AUX),SPEC_POINTS_M_SNR_AUX
					print len(SPEC_POINTS_M_SNR2_AUX),SPEC_POINTS_M_SNR2_AUX
					print len(SPEC_POINTS_M_SNR3_AUX),SPEC_POINTS_M_SNR3_AUX
					print len(SPEC_POINTS_M_SNR4_AUX),SPEC_POINTS_M_SNR4_AUX
					print len(SPEC_POINTS_M_SNR5_AUX),SPEC_POINTS_M_SNR5_AUX
					print
				elif cln_snr_aux == False:
					pass
			except KeyError:
				print
				print colored('Header Error! - L27330','yellow')
				print str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'C'
				print
				print 	'STK_NUM'
				print
				print str(LINES[5][lines])+'_SNU1'
				print str(LINES[5][lines])+'_SNU2'
				print str(LINES[5][lines])+'_SNU4'
				print str(LINES[5][lines])+'_SNB2'
				print
				print str(LINES[5][lines])+'_NHT'
				print str(LINES[5][lines])+'_NHW'
				print
				print colored("\n".join([FILE for FILE in FILES_M_BG]),'yellow')
				print
				print colored("\n".join([FILE for FILE in FILES_A_BG]),'yellow')
				print
				SPEC_POINTS_M_1  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_2  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_3  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_4  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_5  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_6  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_7  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_8  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_9  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_10 = np.zeros([len(FILES_M_BG)])

				SPEC_POINTS_A_1  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_2  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_3  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_4  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_5  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_6  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_7  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_8  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_9  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_10 = np.zeros([len(FILES_M_BG)])

				SPEC_POINTS_NMB    = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_SNR  = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_M_SNR  = np.zeros([len(FILES_M_BG)])

				SPEC_POINTS_A_SNR2 = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_M_SNR2 = np.zeros([len(FILES_M_BG)])

				SPEC_POINTS_A_SNR3 = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_M_SNR3 = np.zeros([len(FILES_M_BG)])

				SPEC_POINTS_A_SNR4 = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_M_SNR4 = np.zeros([len(FILES_M_BG)])

				SPEC_POINTS_A_SNR5 = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_M_SNR5 = np.zeros([len(FILES_M_BG)])

				SPEC_POINTS_NMB2   = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_NMB3   = np.zeros([len(FILES_M_BG)])

				SPEC_POINTS_NMB_A  = SPEC_POINTS_NMB
				SPEC_POINTS_NMB2_A = SPEC_POINTS_NMB2
				SPEC_POINTS_NMB3_A = SPEC_POINTS_NMB3

				SPEC_POINTS_NMB_M  = SPEC_POINTS_NMB
				SPEC_POINTS_NMB2_M = SPEC_POINTS_NMB2
				SPEC_POINTS_NMB3_M = SPEC_POINTS_NMB3

				SPEC_POINTS_A_SNR  = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_M_SNR  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_SNR2 = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_M_SNR2 = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_SNR3 = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_M_SNR3 = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_SNR4 = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_M_SNR4 = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_SNR5 = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_M_SNR5 = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_NMB2   = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_NMB3   = np.zeros([len(FILES_A_BG)])
		elif mlt_stk_fct == 'med' and fit_fnct == 'gaussM' and ems_lne_ctb == False:#stk_function_m == True :
			try: 
				SPEC_POINTS_M_1  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CLOM') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_2  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_ALOM') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_3  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FLOM') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_4  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WLOM') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_5  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_ELOM') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_6  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CLCM') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_7  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_ALCM') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_8  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FLCM') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_9  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WLCM') for spec_res_file in FILES_M_BG]#TOTAL: _WTOT CTR: _WLCM
				SPEC_POINTS_M_10 = [Header_Get(spec_res_file,str(LINES[5][lines])+'_ELCM') for spec_res_file in FILES_M_BG]

				SPEC_POINTS_NMB_M  = [Header_Get(spec_res_file,'STK_NUM') for spec_res_file in FILES_M_BG]					
				SPEC_POINTS_M_SNR  = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU1'),0) for spec_res_file in FILES_M_BG]

				SPEC_POINTS_M_SNR2 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU2'),0) for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_SNR3 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU3'),0) for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_SNR4 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU4'),0) for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_SNR5 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNB2'),0) for spec_res_file in FILES_M_BG]

				SPEC_POINTS_NMB2_M = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NHT') for spec_res_file in FILES_M_BG]					
				SPEC_POINTS_NMB3_M = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NHW') for spec_res_file in FILES_M_BG]					

				##############CLEANING NON FIT VALUES ##############
				print
				print colored('Deleting Unfitted bins!','yellow')
				print colored('From:','yellow')
				print colored('MED: '+str(SPEC_POINTS_M_9),'yellow')
				print

				indx_msk_med       = (np.where(np.asarray(SPEC_POINTS_M_9)==999999.99999)[0])
				indx_msk_med       = np.asarray(indx_msk_med)			

				if len(indx_msk_med)>0:
					print colored('Points with FIT values (MED): ' + str(999999.99999) +' :','yellow')
					print colored(([indx_msk_med]),'yellow')
					#print colored(str(SPEC_POINTS_M_9[indx_msk_med]),'yellow')
					print colored('Corresponding to ' + plt_nme_prp +' points: ','yellow')
					print colored(str(SPEC_SEP_VAR[indx_msk_med]),'yellow')
					print
				else:
					print colored('No Unfitted Values found (MED)!','yellow')
					print
					
				SPEC_POINTS_M_9         = np.asarray(SPEC_POINTS_M_9)
				SPEC_POINTS_M_9         = np.delete(SPEC_POINTS_M_9,indx_msk_med)

				SPEC_SEP_VAR_M          = SPEC_SEP_VAR
				SPEC_SEP_VAR_M          = np.delete(SPEC_SEP_VAR_M,indx_msk_med)
				SPEC_SEP_VAR_BU         = np.delete(SPEC_SEP_VAR_BU,indx_msk_med)

				SPEC_POINTS_NMB_M       = np.delete(SPEC_POINTS_NMB_M,indx_msk_med)
				SPEC_POINTS_NMB2_M      = np.delete(SPEC_POINTS_NMB2_M,indx_msk_med)
				SPEC_POINTS_NMB3_M      = np.delete(SPEC_POINTS_NMB3_M,indx_msk_med)

				SPEC_POINTS_M_SNR       = np.delete(SPEC_POINTS_M_SNR,indx_msk_med)
				SPEC_POINTS_M_SNR2      = np.delete(SPEC_POINTS_M_SNR2,indx_msk_med)
				SPEC_POINTS_M_SNR3      = np.delete(SPEC_POINTS_M_SNR3,indx_msk_med)
				SPEC_POINTS_M_SNR4      = np.delete(SPEC_POINTS_M_SNR4,indx_msk_med)
				SPEC_POINTS_M_SNR5      = np.delete(SPEC_POINTS_M_SNR5,indx_msk_med)
				SPEC_POINTS_NMB2_M      = np.delete(SPEC_POINTS_NMB2_M,indx_msk_med)
				SPEC_POINTS_NMB3_M      = np.delete(SPEC_POINTS_NMB3_M,indx_msk_med)

				SPEC_POINTS_M_9_AUX     = SPEC_POINTS_M_9 

				SPEC_SEP_VAR_M_AUX      = SPEC_SEP_VAR_M 
				SPEC_SEP_VAR_BU_AUX     = SPEC_SEP_VAR_BU 

				SPEC_POINTS_NMB_M_AUX   = SPEC_POINTS_NMB_M 
				SPEC_POINTS_NMB2_M_AUX  = SPEC_POINTS_NMB2_M 
				SPEC_POINTS_NMB3_M_AUX  = SPEC_POINTS_NMB3_M 

				SPEC_POINTS_M_SNR_AUX   = SPEC_POINTS_M_SNR 
				SPEC_POINTS_M_SNR2_AUX  = SPEC_POINTS_M_SNR2 
				SPEC_POINTS_M_SNR3_AUX  = SPEC_POINTS_M_SNR3 
				SPEC_POINTS_M_SNR4_AUX  = SPEC_POINTS_M_SNR4 
				SPEC_POINTS_M_SNR5_AUX  = SPEC_POINTS_M_SNR5 

				SPEC_POINTS_NMB2_M_AUX  = SPEC_POINTS_NMB2_M 
				SPEC_POINTS_NMB3_M_AUX  = SPEC_POINTS_NMB3_M
				##############CLEANING NON FIT VALUES ############## 

				if cln_snr_mth == 1:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					pass
					SPEC_POINTS_M_SNR0     = SPEC_POINTS_M_SNR
					SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR_AUX
				elif cln_snr_mth == 2:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					pass
					SPEC_POINTS_M_SNR0     = SPEC_POINTS_M_SNR2
					SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR2_AUX
				elif cln_snr_mth == 3:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					pass
					SPEC_POINTS_M_SNR0     = SPEC_POINTS_M_SNR3
					SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR3_AUX
				elif cln_snr_mth == 4:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					pass
					SPEC_POINTS_M_SNR0     = SPEC_POINTS_M_SNR4
					SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR4_AUX
				else:
					SPEC_POINTS_M_SNR0     = SPEC_POINTS_M_SNR
					SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR_AUX
					print
					print colored('SNR method: ' + str(cln_snr_mth) + ' does not exist!','yellow')
					print colored('Assuming SNR method: 1','yellow')
					print

				#############CLEANING LOW SNR EW POINTS#############
				if cln_pts_snr == True:
					indx_msk_snr_med   = (np.where(np.asarray(SPEC_POINTS_M_SNR0)<cln_snr_thr)[0])
					indx_msk_snr_med   = np.asarray(indx_msk_snr_med)			

					print
					print colored('Cleaning points according their SNR!','yellow')
					print colored('From:','yellow')
					print colored('MED: ' + str(SPEC_POINTS_M_SNR0),'yellow')
					print colored('SNR Computation Method : ' + str(cln_snr_mth),'yellow')
					print colored('Threshold value        : ' + str(cln_snr_thr),'yellow')
					print
					print
					print colored('Points with SNR < ' + str(cln_snr_thr) +' :','yellow')
					print colored('MED-IDX: ' + str(indx_msk_snr_med),'yellow')
					print colored('MED-VAL: ' + str(SPEC_POINTS_M_SNR0[indx_msk_snr_med]),'yellow')
					print colored('Corresponding to ' + plt_nme_prp +' points: ','yellow')
					print colored('MED-VAR: ' + str(SPEC_SEP_VAR_M[indx_msk_snr_med]),'yellow')
					print

					SPEC_POINTS_M_9    = np.delete(SPEC_POINTS_M_9,indx_msk_snr_med)

					SPEC_SEP_VAR_M     = np.delete(SPEC_SEP_VAR_M,indx_msk_snr_med)
					SPEC_SEP_VAR_BU    = np.delete(SPEC_SEP_VAR_BU,indx_msk_snr_med)


					SPEC_POINTS_NMB_M  = np.delete(SPEC_POINTS_NMB_M,indx_msk_snr_med)
					SPEC_POINTS_NMB2_M = np.delete(SPEC_POINTS_NMB2_M,indx_msk_snr_med)
					SPEC_POINTS_NMB3_M = np.delete(SPEC_POINTS_NMB3_M,indx_msk_snr_med)

					SPEC_POINTS_M_SNR0 = np.delete(SPEC_POINTS_M_SNR0,indx_msk_snr_med)

					SPEC_POINTS_M_SNR  = np.delete(SPEC_POINTS_M_SNR,indx_msk_snr_med)
					SPEC_POINTS_M_SNR2 = np.delete(SPEC_POINTS_M_SNR2,indx_msk_snr_med)
					SPEC_POINTS_M_SNR3 = np.delete(SPEC_POINTS_M_SNR3,indx_msk_snr_med)
					SPEC_POINTS_M_SNR4 = np.delete(SPEC_POINTS_M_SNR4,indx_msk_snr_med)
					SPEC_POINTS_M_SNR5 = np.delete(SPEC_POINTS_M_SNR5,indx_msk_snr_med)
					#SPEC_POINTS_NMB2   = np.delete(SPEC_POINTS_NMB2,indx_msk_snr_med)
					#SPEC_POINTS_NMB3   = np.delete(SPEC_POINTS_NMB3,indx_msk_snr_med)

					print
					print
					print len(SPEC_POINTS_M_9),SPEC_POINTS_M_9
					print len(SPEC_SEP_VAR_M),SPEC_SEP_VAR_M
					print len(SPEC_SEP_VAR_BU),SPEC_SEP_VAR_BU
					print len(SPEC_POINTS_NMB_M),SPEC_POINTS_NMB_M,indx_msk_snr_med
					print len(SPEC_POINTS_NMB2_M),SPEC_POINTS_NMB2_M
					print len(SPEC_POINTS_NMB3_M),SPEC_POINTS_NMB3_M
					print len(SPEC_POINTS_M_SNR),SPEC_POINTS_M_SNR
					print len(SPEC_POINTS_M_SNR2),SPEC_POINTS_M_SNR2
					print len(SPEC_POINTS_M_SNR3),SPEC_POINTS_M_SNR3
					print len(SPEC_POINTS_M_SNR4),SPEC_POINTS_M_SNR4
					print len(SPEC_POINTS_M_SNR5),SPEC_POINTS_M_SNR5					
					print
				elif cln_pts_snr == False:
					pass				
				#############CLEANING LOW SNR EW POINTS#############
				#######AUXILIARY MARKERS FOR LOW SNR EW POINTS######
				if cln_snr_aux == True:
					indx_msk_snr_med_aux = (np.where(100<np.asarray(SPEC_POINTS_M_SNR0_AUX))[0])
					indx_msk_snr_med_aux = np.asarray(indx_msk_snr_med_aux)			
					SPEC_POINTS_M_SNR0_AUX[indx_msk_snr_med_aux]=0

					indx_msk_snr_med_aux = (np.where((cln_snr_thr<=np.asarray(SPEC_POINTS_M_SNR0_AUX)) & (np.asarray(SPEC_POINTS_M_SNR0_AUX)<cln_snr_th2))[0])
					indx_msk_snr_med_aux = np.asarray(indx_msk_snr_med_aux)			

					print
					print colored('Cleaning points according their SNR!','cyan')
					print colored('From:','cyan')
					print colored('MED: ' + str(SPEC_POINTS_M_SNR0_AUX),'cyan')
					print colored('SNR Computation Method : ' + str(cln_snr_mth),'cyan')
					print colored('Threshold value        : ' + str(cln_snr_thr),'cyan')
					print colored('Threshold value (AUX)  : ' + str(cln_snr_th2),'cyan')
					print
					print
					print colored(str(cln_snr_thr) + '< Points with SNR < ' + str(cln_snr_th2) +' :','cyan')
					print colored('MED-IDX: ' + str(indx_msk_snr_med_aux) + ',' + str(SPEC_POINTS_M_SNR0_AUX[indx_msk_snr_med_aux]),'cyan')
					print colored('MED-VAL: ' + str(SPEC_POINTS_M_SNR0_AUX[indx_msk_snr_med_aux]),'cyan')
					print colored('Corresponding to ' + plt_nme_prp +' points: ','cyan')
					print colored('MED-VAR: ' + str(SPEC_SEP_VAR_M_AUX[indx_msk_snr_med_aux]),'cyan')
					print

					if skip_fg_ref_ew == False:
						#SPEC_SEP_VAR_A_AUX[0] = 1.0
						SPEC_SEP_VAR_M_AUX[0] = 1.0
					else:
						pass


					SPEC_POINTS_M_9_AUX    = SPEC_POINTS_M_9_AUX[indx_msk_snr_med_aux]

					SPEC_SEP_VAR_M_AUX     = SPEC_SEP_VAR_M_AUX[indx_msk_snr_med_aux]
					SPEC_SEP_VAR_BU_AUX    = SPEC_SEP_VAR_BU_AUX[indx_msk_snr_med_aux]

					SPEC_POINTS_NMB_M_AUX  = SPEC_POINTS_NMB_M_AUX[indx_msk_snr_med_aux]
					SPEC_POINTS_NMB2_M_AUX = SPEC_POINTS_NMB2_M_AUX[indx_msk_snr_med_aux]
					SPEC_POINTS_NMB3_M_AUX = SPEC_POINTS_NMB3_M_AUX[indx_msk_snr_med_aux]

					SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR0_AUX[indx_msk_snr_med_aux]

					SPEC_POINTS_M_SNR_AUX  = SPEC_POINTS_M_SNR_AUX[indx_msk_snr_med_aux]
					SPEC_POINTS_M_SNR2_AUX = SPEC_POINTS_M_SNR2_AUX[indx_msk_snr_med_aux]
					SPEC_POINTS_M_SNR3_AUX = SPEC_POINTS_M_SNR3_AUX[indx_msk_snr_med_aux]
					SPEC_POINTS_M_SNR4_AUX = SPEC_POINTS_M_SNR4_AUX[indx_msk_snr_med_aux]
					SPEC_POINTS_M_SNR5_AUX = SPEC_POINTS_M_SNR5_AUX[indx_msk_snr_med_aux]
					#SPEC_POINTS_NMB2_AUX   = SPEC_POINTS_NMB2_AUX[indx_msk_snr_med_aux]
					#SPEC_POINTS_NMB3_AUX   = SPEC_POINTS_NMB3_AUX[indx_msk_snr_med_aux]

					print
					print len(SPEC_POINTS_M_9_AUX),SPEC_POINTS_M_9_AUX
					print len(SPEC_SEP_VAR_M_AUX),SPEC_SEP_VAR_M_AUX
					print len(SPEC_POINTS_NMB_M_AUX),SPEC_POINTS_NMB_M_AUX
					print len(SPEC_POINTS_NMB2_M_AUX),SPEC_POINTS_NMB2_M_AUX
					print len(SPEC_POINTS_NMB3_M_AUX),SPEC_POINTS_NMB3_M_AUX
					print len(SPEC_POINTS_M_SNR_AUX),SPEC_POINTS_M_SNR_AUX
					print len(SPEC_POINTS_M_SNR2_AUX),SPEC_POINTS_M_SNR2_AUX
					print len(SPEC_POINTS_M_SNR3_AUX),SPEC_POINTS_M_SNR3_AUX
					print len(SPEC_POINTS_M_SNR4_AUX),SPEC_POINTS_M_SNR4_AUX
					print len(SPEC_POINTS_M_SNR5_AUX),SPEC_POINTS_M_SNR5_AUX
					print
				elif cln_snr_aux == False:
					pass				
				#######AUXILIARY MARKERS FOR LOW SNR EW POINTS######
			except KeyError:
				print
				print colored('Header Error! L-27656','yellow')
				print str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'C'
				print
				print 	'STK_NUM'
				print
				print str(LINES[5][lines])+'_SNU1'
				print str(LINES[5][lines])+'_SNU2'
				print str(LINES[5][lines])+'_SNU4'
				print str(LINES[5][lines])+'_SNB2'
				print
				print str(LINES[5][lines])+'_NHT'
				print str(LINES[5][lines])+'_NHW'									
				print 
				print colored("\n".join([FILE for FILE in FILES_M_BG]),'yellow')
				print
				SPEC_POINTS_M_1  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_2  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_3  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_4  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_5  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_6  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_7  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_8  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_9  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_10 = np.zeros([len(FILES_M_BG)])

				SPEC_POINTS_NMB    = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_SNR  = np.zeros([len(FILES_M_BG)])

				SPEC_POINTS_M_SNR2  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_SNR3  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_SNR4  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_SNR5  = np.zeros([len(FILES_M_BG)])

				SPEC_POINTS_NMB2    = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_NMB3    = np.zeros([len(FILES_M_BG)])

				SPEC_POINTS_NMB_M  = SPEC_POINTS_NMB
				SPEC_POINTS_NMB2_M = SPEC_POINTS_NMB2
				SPEC_POINTS_NMB3_M = SPEC_POINTS_NMB3

				SPEC_POINTS_M_SNR  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_SNR2 = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_SNR3 = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_SNR4 = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_SNR5 = np.zeros([len(FILES_M_BG)])
				#SPEC_POINTS_NMB2   = np.zeros([len(FILES_A_BG)])
				#SPEC_POINTS_NMB3   = np.zeros([len(FILES_A_BG)])				
		elif mlt_stk_fct == 'avg' and fit_fnct == 'gaussM' and ems_lne_ctb == False:#stk_function_a == True :
			try: 
				SPEC_POINTS_A_1  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CLOM') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_2  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_ALOM') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_3  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FLOM') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_4  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WLOM') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_5  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_ELOM') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_6  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CLCM') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_7  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_ALCM') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_8  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FLCM') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_9  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WLCM') for spec_res_file in FILES_A_BG]#TOTAL: _WTOT CTR: _WLCM
				SPEC_POINTS_A_10 = [Header_Get(spec_res_file,str(LINES[5][lines])+'_ELCM') for spec_res_file in FILES_A_BG]
			
				SPEC_POINTS_NMB_A   = [Header_Get(spec_res_file,'STK_NUM') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_SNR  = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU1'),0) for spec_res_file in FILES_A_BG]

				SPEC_POINTS_A_SNR2 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU2'),0) for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_SNR3 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU3'),0) for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_SNR4 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU4'),0) for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_SNR5 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNB2'),0) for spec_res_file in FILES_A_BG]

				SPEC_POINTS_NMB2_A = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NHT') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_NMB3_A = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NHW') for spec_res_file in FILES_A_BG]

				##############CLEANING NON FIT VALUES ##############
				print
				print colored('Deleting Unfitted bins!','yellow')
				print colored('From:','yellow')
				print colored('AVG: '+str(SPEC_POINTS_A_9),'yellow')
				print

				indx_msk_avg       = (np.where(np.asarray(SPEC_POINTS_A_9)==999999.99999)[0])
				indx_msk_avg       = np.asarray(indx_msk_avg)
					
				if len(indx_msk_avg)>0:
					print colored('Points with FIT values (AVG): ' + str(999999.99999) +' :','yellow')
					print colored(([indx_msk_avg]),'yellow')
					print colored('Corresponding to ' + plt_nme_prp +' points: ','yellow')
					print colored(str(SPEC_SEP_VAR[indx_msk_avg]),'yellow')
					print
					print
				else:
					print colored('No Unfitted Values found (AVG)!','yellow')
					print

				SPEC_POINTS_A_9        = np.asarray(SPEC_POINTS_A_9)
				SPEC_POINTS_A_9        = np.delete(SPEC_POINTS_A_9,indx_msk_avg)

				SPEC_SEP_VAR_A         = SPEC_SEP_VAR
				SPEC_SEP_VAR_A         = np.delete(SPEC_SEP_VAR_A,indx_msk_avg)
				SPEC_SEP_VAR_BU        = np.delete(SPEC_SEP_VAR_BU,indx_msk_avg)

				SPEC_POINTS_NMB_A      = np.delete(SPEC_POINTS_NMB_A,indx_msk_avg)
				SPEC_POINTS_NMB2_A     = np.delete(SPEC_POINTS_NMB2_A,indx_msk_avg)
				SPEC_POINTS_NMB3_A     = np.delete(SPEC_POINTS_NMB3_A,indx_msk_avg)


				SPEC_POINTS_A_SNR      = np.delete(SPEC_POINTS_A_SNR,indx_msk_avg)
				SPEC_POINTS_A_SNR2     = np.delete(SPEC_POINTS_A_SNR2,indx_msk_avg)
				SPEC_POINTS_A_SNR3     = np.delete(SPEC_POINTS_A_SNR3,indx_msk_avg)
				SPEC_POINTS_A_SNR4     = np.delete(SPEC_POINTS_A_SNR4,indx_msk_avg)
				SPEC_POINTS_A_SNR5     = np.delete(SPEC_POINTS_A_SNR5,indx_msk_avg)

				SPEC_POINTS_A_9_AUX    = SPEC_POINTS_A_9

				SPEC_SEP_VAR_A_AUX     = SPEC_SEP_VAR_A
				SPEC_SEP_VAR_BU_AUX    = SPEC_SEP_VAR_BU

				SPEC_POINTS_NMB_A_AUX  = SPEC_POINTS_NMB_A
				SPEC_POINTS_NMB2_A_AUX = SPEC_POINTS_NMB2_A
				SPEC_POINTS_NMB3_A_AUX = SPEC_POINTS_NMB3_A

				SPEC_POINTS_A_SNR_AUX  = SPEC_POINTS_A_SNR
				SPEC_POINTS_A_SNR2_AUX = SPEC_POINTS_A_SNR2
				SPEC_POINTS_A_SNR3_AUX = SPEC_POINTS_A_SNR3
				SPEC_POINTS_A_SNR4_AUX = SPEC_POINTS_A_SNR4
				SPEC_POINTS_A_SNR5_AUX = SPEC_POINTS_A_SNR5
				##############CLEANING NON FIT VALUES ##############

				if cln_snr_mth == 1:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					pass
					SPEC_POINTS_A_SNR0     = SPEC_POINTS_A_SNR
					SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR_AUX
				elif cln_snr_mth == 2:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					pass
					SPEC_POINTS_A_SNR0     = SPEC_POINTS_A_SNR2
					SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR2_AUX
				elif cln_snr_mth == 3:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					pass
					SPEC_POINTS_A_SNR0     = SPEC_POINTS_A_SNR3
					SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR3_AUX
				elif cln_snr_mth == 4:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					pass
					SPEC_POINTS_A_SNR0     = SPEC_POINTS_A_SNR4
					SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR4_AUX
				else:
					SPEC_POINTS_A_SNR0     = SPEC_POINTS_A_SNR
					SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR_AUX
					print
					print colored('SNR method: ' + str(cln_snr_mth) + ' does not exist!','yellow')
					print colored('Assuming SNR method: 1','yellow')
					print
				#############CLEANING LOW SNR EW POINTS#############
				if cln_pts_snr == True:
					indx_msk_snr_avg   = (np.where(np.asarray(SPEC_POINTS_A_SNR0)<cln_snr_thr)[0])
					indx_msk_snr_avg   = np.asarray(indx_msk_snr_avg)

					print
					print colored('Cleaning points according their SNR!','yellow')
					print colored('From:','yellow')
					print colored('AVG: ' + str(SPEC_POINTS_A_SNR0),'yellow')
					print colored('SNR Computation Method : ' + str(cln_snr_mth),'yellow')
					print colored('Threshold value        : ' + str(cln_snr_thr),'yellow')
					print
					print
					print colored('Points with SNR < ' + str(cln_snr_thr) +' :','yellow')
					print colored('AVG-IDX: ' + str(indx_msk_snr_avg),'yellow')
					print colored('AVG-VAL: ' + str(SPEC_POINTS_A_SNR0[indx_msk_snr_avg]),'yellow')
					print colored('Corresponding to ' + plt_nme_prp +' points: ','yellow')
					print colored('AVG-VAR: ' + str(SPEC_SEP_VAR_A[indx_msk_snr_avg]),'yellow')
					print

					SPEC_POINTS_A_9    = np.delete(SPEC_POINTS_A_9,indx_msk_snr_avg)

					SPEC_SEP_VAR_A     = np.delete(SPEC_SEP_VAR_A,indx_msk_snr_avg)
					SPEC_SEP_VAR_BU    = np.delete(SPEC_SEP_VAR_BU,indx_msk_snr_avg)

					SPEC_POINTS_NMB_A  = np.delete(SPEC_POINTS_NMB_A,indx_msk_snr_avg)
					SPEC_POINTS_NMB2_A = np.delete(SPEC_POINTS_NMB2_A,indx_msk_snr_avg)
					SPEC_POINTS_NMB3_A = np.delete(SPEC_POINTS_NMB3_A,indx_msk_snr_avg)

					SPEC_POINTS_A_SNR0 = np.delete(SPEC_POINTS_A_SNR0,indx_msk_snr_avg)

					SPEC_POINTS_A_SNR  = np.delete(SPEC_POINTS_A_SNR,indx_msk_snr_avg)
					SPEC_POINTS_A_SNR2 = np.delete(SPEC_POINTS_A_SNR2,indx_msk_snr_avg)
					SPEC_POINTS_A_SNR3 = np.delete(SPEC_POINTS_A_SNR3,indx_msk_snr_avg)
					SPEC_POINTS_A_SNR4 = np.delete(SPEC_POINTS_A_SNR4,indx_msk_snr_avg)
					SPEC_POINTS_A_SNR5 = np.delete(SPEC_POINTS_A_SNR5,indx_msk_snr_avg)

					print
					print len(SPEC_POINTS_A_9),SPEC_POINTS_A_9
					print len(SPEC_SEP_VAR_A),SPEC_SEP_VAR_A
					print len(SPEC_SEP_VAR_BU),SPEC_SEP_VAR_BU
					print len(SPEC_POINTS_NMB_A),SPEC_POINTS_NMB_A
					print len(SPEC_POINTS_NMB2_A),SPEC_POINTS_NMB2_A
					print len(SPEC_POINTS_NMB3_A),SPEC_POINTS_NMB3_A
					print len(SPEC_POINTS_A_SNR),SPEC_POINTS_A_SNR
					print len(SPEC_POINTS_A_SNR2),SPEC_POINTS_A_SNR2
					print len(SPEC_POINTS_A_SNR3),SPEC_POINTS_A_SNR3
					print len(SPEC_POINTS_A_SNR4),SPEC_POINTS_A_SNR4
					print len(SPEC_POINTS_A_SNR5),SPEC_POINTS_A_SNR5
					print
				elif cln_pts_snr == False:
					pass
				#############CLEANING LOW SNR EW POINTS#############
				#######AUXILIARY MARKERS FOR LOW SNR EW POINTS######
				if cln_snr_aux == True:
					indx_msk_snr_avg_aux = (np.where(100<np.asarray(SPEC_POINTS_A_SNR0_AUX))[0])
					indx_msk_snr_avg_aux = np.asarray(indx_msk_snr_avg_aux)
					SPEC_POINTS_A_SNR0_AUX[indx_msk_snr_avg_aux]=0

					indx_msk_snr_avg_aux = (np.where((cln_snr_thr<=np.asarray(SPEC_POINTS_A_SNR0_AUX)) & (np.asarray(SPEC_POINTS_A_SNR0_AUX)<cln_snr_th2))[0])
					indx_msk_snr_avg_aux = np.asarray(indx_msk_snr_avg_aux)

					print
					print colored('Cleaning points according their SNR!','cyan')
					print colored('From:','cyan')
					print colored('AVG: ' + str(SPEC_POINTS_A_SNR0_AUX),'cyan')
					print colored('SNR Computation Method : ' + str(cln_snr_mth),'cyan')
					print colored('Threshold value        : ' + str(cln_snr_thr),'cyan')
					print colored('Threshold value (AUX)  : ' + str(cln_snr_th2),'cyan')
					print
					print
					print colored(str(cln_snr_thr) + '< Points with SNR < ' + str(cln_snr_th2) +' :','cyan')
					print colored('AVG-IDX: ' + str(indx_msk_snr_avg_aux) + ',' + str(SPEC_POINTS_A_SNR0_AUX[indx_msk_snr_avg_aux]),'cyan')
					print colored('AVG-VAL: ' + str(SPEC_POINTS_A_SNR0_AUX[indx_msk_snr_avg_aux]),'cyan')
					print colored('Corresponding to ' + plt_nme_prp +' points: ','cyan')
					print colored('AVG-VAR: ' + str(SPEC_SEP_VAR_A_AUX[indx_msk_snr_avg_aux]),'cyan')
					print

					if skip_fg_ref_ew == False:
						SPEC_SEP_VAR_A_AUX[0] = 1.0
						#SPEC_SEP_VAR_M_AUX[0] = 1.0
					else:
						pass

					SPEC_POINTS_A_9_AUX    = SPEC_POINTS_A_9_AUX[indx_msk_snr_avg_aux]

					SPEC_SEP_VAR_A_AUX     = SPEC_SEP_VAR_A_AUX[indx_msk_snr_avg_aux]
					SPEC_SEP_VAR_BU_AUX    = SPEC_SEP_VAR_BU_AUX[indx_msk_snr_avg_aux]

					SPEC_POINTS_NMB_A_AUX  = SPEC_POINTS_NMB_A_AUX[indx_msk_snr_avg_aux]
					SPEC_POINTS_NMB2_A_AUX = SPEC_POINTS_NMB2_A_AUX[indx_msk_snr_avg_aux]
					SPEC_POINTS_NMB3_A_AUX = SPEC_POINTS_NMB3_A_AUX[indx_msk_snr_avg_aux]

					SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR0_AUX[indx_msk_snr_avg_aux]

					SPEC_POINTS_A_SNR_AUX  = SPEC_POINTS_A_SNR_AUX[indx_msk_snr_avg_aux]
					SPEC_POINTS_A_SNR2_AUX = SPEC_POINTS_A_SNR2_AUX[indx_msk_snr_avg_aux]
					SPEC_POINTS_A_SNR3_AUX = SPEC_POINTS_A_SNR3_AUX[indx_msk_snr_avg_aux]
					SPEC_POINTS_A_SNR4_AUX = SPEC_POINTS_A_SNR4_AUX[indx_msk_snr_avg_aux]
					SPEC_POINTS_A_SNR5_AUX = SPEC_POINTS_A_SNR5_AUX[indx_msk_snr_avg_aux]
					#SPEC_POINTS_NMB2_AUX   = SPEC_POINTS_NMB2_AUX[indx_msk_snr_med_aux]
					#SPEC_POINTS_NMB3_AUX   = SPEC_POINTS_NMB3_AUX[indx_msk_snr_med_aux]

					print
					print len(SPEC_POINTS_A_9_AUX),SPEC_POINTS_A_9_AUX
					print len(SPEC_SEP_VAR_A_AUX),SPEC_SEP_VAR_A_AUX
					print len(SPEC_SEP_VAR_BU_AUX),SPEC_SEP_VAR_BU_AUX
					print len(SPEC_POINTS_NMB_A_AUX),SPEC_POINTS_NMB_A_AUX
					print len(SPEC_POINTS_NMB2_A_AUX),SPEC_POINTS_NMB2_A_AUX
					print len(SPEC_POINTS_NMB3_A_AUX),SPEC_POINTS_NMB3_A_AUX
					print len(SPEC_POINTS_A_SNR_AUX),SPEC_POINTS_A_SNR_AUX
					print len(SPEC_POINTS_A_SNR2_AUX),SPEC_POINTS_A_SNR2_AUX
					print len(SPEC_POINTS_A_SNR3_AUX),SPEC_POINTS_A_SNR3_AUX
					print len(SPEC_POINTS_A_SNR4_AUX),SPEC_POINTS_A_SNR4_AUX
					print len(SPEC_POINTS_A_SNR5_AUX),SPEC_POINTS_A_SNR5_AUX
					print
				elif cln_snr_aux == False:
					pass
				#######AUXILIARY MARKERS FOR LOW SNR EW POINTS######
			except KeyError:
				print
				print colored('Header Error! - L27942','yellow')
				print str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'C'
				print
				print 	'STK_NUM'
				print
				print str(LINES[5][lines])+'_SNU1'
				print str(LINES[5][lines])+'_SNU2'
				print str(LINES[5][lines])+'_SNU4'
				print str(LINES[5][lines])+'_SNB2'
				print
				print str(LINES[5][lines])+'_NHT'
				print str(LINES[5][lines])+'_NHW'					
				print
				print colored("\n".join([FILE for FILE in FILES_A_BG]),'yellow')
				print
				SPEC_POINTS_A_1  = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_2  = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_3  = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_4  = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_5  = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_6  = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_7  = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_8  = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_9  = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_10 = np.zeros([len(FILES_A_BG)])

				SPEC_POINTS_NMB    = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_SNR  = np.zeros([len(FILES_A_BG)])

				SPEC_POINTS_A_SNR2 = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_SNR3 = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_SNR4 = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_SNR5 = np.zeros([len(FILES_A_BG)])

				SPEC_POINTS_NMB2   = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_NMB3   = np.zeros([len(FILES_A_BG)])

				SPEC_POINTS_NMB_A  = SPEC_POINTS_NMB
				SPEC_POINTS_NMB2_A = SPEC_POINTS_NMB2
				SPEC_POINTS_NMB3_A = SPEC_POINTS_NMB3

				SPEC_POINTS_A_SNR  = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_SNR2 = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_SNR3 = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_SNR4 = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_SNR5 = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_NMB2   = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_NMB3   = np.zeros([len(FILES_A_BG)])				
		elif mlt_stk_fct == 'both' and fit_fnct == 'gaussM' and ems_lne_ctb == False:#stk_function_b	== True:
			try: 
				SPEC_POINTS_M_1  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CLOM') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_2  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_ALOM') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_3  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FLOM') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_4  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WLOM') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_5  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_ELOM') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_6  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CLCM') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_7  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_ALCM') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_8  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FLCM') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_9  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WLCM') for spec_res_file in FILES_M_BG]#TOTAL: _WTOT CTR: _WLCM
				SPEC_POINTS_M_10 = [Header_Get(spec_res_file,str(LINES[5][lines])+'_ELCM') for spec_res_file in FILES_M_BG]

				SPEC_POINTS_A_1  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CLOM') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_2  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_ALOM') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_3  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FLOM') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_4  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WLOM') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_5  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_ELOM') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_6  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CLCM') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_7  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_ALCM') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_8  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FLCM') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_9  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WLCM') for spec_res_file in FILES_A_BG]#TOTAL: _WTOT CTR: _WLCM
				SPEC_POINTS_A_10 = [Header_Get(spec_res_file,str(LINES[5][lines])+'_ELCM') for spec_res_file in FILES_A_BG]

				SPEC_POINTS_NMB    = [Header_Get(spec_res_file,'STK_NUM') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_SNR  = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SMU1'),0) for spec_res_file in FILES_A_BG]#' SNR UBIN SPC REG ALL'
				SPEC_POINTS_M_SNR  = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SMU1'),0) for spec_res_file in FILES_M_BG]

				SPEC_POINTS_A_SNR2 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SMU2'),0) for spec_res_file in FILES_A_BG]#' SNR UBIN SPC REG CNT'
				SPEC_POINTS_M_SNR2 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SMU2'),0) for spec_res_file in FILES_M_BG]

				SPEC_POINTS_A_SNR3 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SMU3'),0) for spec_res_file in FILES_A_BG]#' SNR UBIN SPC REG FIT'
				SPEC_POINTS_M_SNR3 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SMU3'),0) for spec_res_file in FILES_M_BG]

				SPEC_POINTS_A_SNR4 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SMU4'),0) for spec_res_file in FILES_A_BG]#' SNR UBIN SPC REG PLT'
				SPEC_POINTS_M_SNR4 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SMU4'),0) for spec_res_file in FILES_M_BG]

				SPEC_POINTS_A_SNR5 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SMB2'),0) for spec_res_file in FILES_A_BG]
				SPEC_POINTS_M_SNR5 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SMB2'),0) for spec_res_file in FILES_M_BG]

				SPEC_POINTS_NMB2   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NHT') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_NMB3   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NHW') for spec_res_file in FILES_M_BG]

				SPEC_POINTS_NMB_A  = SPEC_POINTS_NMB
				SPEC_POINTS_NMB2_A = SPEC_POINTS_NMB2
				SPEC_POINTS_NMB3_A = SPEC_POINTS_NMB3

				SPEC_POINTS_NMB_M  = SPEC_POINTS_NMB
				SPEC_POINTS_NMB2_M = SPEC_POINTS_NMB2
				SPEC_POINTS_NMB3_M = SPEC_POINTS_NMB3

				##############CLEANING NON FIT VALUES ##############
				print
				print colored('Deleting Unfitted bins!','yellow')
				print colored('From:','yellow')
				print colored('MED: '+str(SPEC_POINTS_M_9),'yellow')
				print colored('AVG: '+str(SPEC_POINTS_A_9),'yellow')
				print

				indx_msk_med       = (np.where(np.asarray(SPEC_POINTS_M_9)==999999.99999)[0])
				indx_msk_avg       = (np.where(np.asarray(SPEC_POINTS_A_9)==999999.99999)[0])
				indx_msk_med       = np.asarray(indx_msk_med)			
				indx_msk_avg       = np.asarray(indx_msk_avg)

				if len(indx_msk_med)>0:
					print colored('Points with FIT values (MED): ' + str(999999.99999) +' :','yellow')
					print colored(([indx_msk_med]),'yellow')
					print colored('Corresponding to ' + plt_nme_prp +' points: ','yellow')
					print colored(str(SPEC_SEP_VAR[indx_msk_med]),'yellow')
					print
				else:
					print colored('No Unfitted Values found (MED)!','yellow')
					print
					
				if len(indx_msk_avg)>0:
					print colored('Points with FIT values (AVG): ' + str(999999.99999) +' :','yellow')
					print colored(([indx_msk_avg]),'yellow')
					print colored('Corresponding to ' + plt_nme_prp +' points: ','yellow')
					print colored(str(SPEC_SEP_VAR[indx_msk_avg]),'yellow')
					print
					print
				else:
					print colored('No Unfitted Values found (AVG)!','yellow')
					print

				SPEC_POINTS_M_9    = np.asarray(SPEC_POINTS_M_9)
				SPEC_POINTS_A_9    = np.asarray(SPEC_POINTS_A_9)
				SPEC_POINTS_M_9    = np.delete(SPEC_POINTS_M_9,indx_msk_med)
				SPEC_POINTS_A_9    = np.delete(SPEC_POINTS_A_9,indx_msk_avg)

				SPEC_SEP_VAR_M     = SPEC_SEP_VAR
				SPEC_SEP_VAR_A     = SPEC_SEP_VAR
				SPEC_SEP_VAR_M     = np.delete(SPEC_SEP_VAR_M,indx_msk_med)
				SPEC_SEP_VAR_A     = np.delete(SPEC_SEP_VAR_A,indx_msk_avg)
				SPEC_SEP_VAR_BU    = np.delete(SPEC_SEP_VAR_BU,indx_msk_avg)

				SPEC_POINTS_NMB_A  = np.delete(SPEC_POINTS_NMB_A,indx_msk_avg)
				SPEC_POINTS_NMB2_A = np.delete(SPEC_POINTS_NMB2_A,indx_msk_avg)
				SPEC_POINTS_NMB3_A = np.delete(SPEC_POINTS_NMB3_A,indx_msk_avg)

				SPEC_POINTS_NMB_M  = np.delete(SPEC_POINTS_NMB_M,indx_msk_med)
				SPEC_POINTS_NMB2_M = np.delete(SPEC_POINTS_NMB2_M,indx_msk_med)
				SPEC_POINTS_NMB3_M = np.delete(SPEC_POINTS_NMB3_M,indx_msk_med)

				SPEC_POINTS_A_SNR  = np.delete(SPEC_POINTS_A_SNR,indx_msk_avg)
				SPEC_POINTS_M_SNR  = np.delete(SPEC_POINTS_M_SNR,indx_msk_med)
				SPEC_POINTS_A_SNR2 = np.delete(SPEC_POINTS_A_SNR2,indx_msk_avg)
				SPEC_POINTS_M_SNR2 = np.delete(SPEC_POINTS_M_SNR2,indx_msk_med)
				SPEC_POINTS_A_SNR3 = np.delete(SPEC_POINTS_A_SNR3,indx_msk_avg)
				SPEC_POINTS_M_SNR3 = np.delete(SPEC_POINTS_M_SNR3,indx_msk_med)
				SPEC_POINTS_A_SNR4 = np.delete(SPEC_POINTS_A_SNR4,indx_msk_avg)
				SPEC_POINTS_M_SNR4 = np.delete(SPEC_POINTS_M_SNR4,indx_msk_med)
				SPEC_POINTS_A_SNR5 = np.delete(SPEC_POINTS_A_SNR5,indx_msk_avg)
				SPEC_POINTS_M_SNR5 = np.delete(SPEC_POINTS_M_SNR5,indx_msk_med)
				SPEC_POINTS_NMB2   = np.delete(SPEC_POINTS_NMB2,indx_msk_med)
				SPEC_POINTS_NMB3   = np.delete(SPEC_POINTS_NMB3,indx_msk_med)


				SPEC_POINTS_M_9_AUX    = SPEC_POINTS_M_9 
				SPEC_POINTS_A_9_AUX    = SPEC_POINTS_A_9 

				SPEC_SEP_VAR_M_AUX     = SPEC_SEP_VAR_M 
				SPEC_SEP_VAR_A_AUX     = SPEC_SEP_VAR_A 
				SPEC_SEP_VAR_BU_AUX    = SPEC_SEP_VAR_BU 

				SPEC_POINTS_NMB_A_AUX  = SPEC_POINTS_NMB_A 
				SPEC_POINTS_NMB2_A_AUX = SPEC_POINTS_NMB2_A 
				SPEC_POINTS_NMB3_A_AUX = SPEC_POINTS_NMB3_A 

				SPEC_POINTS_NMB_M_AUX  = SPEC_POINTS_NMB_M 
				SPEC_POINTS_NMB2_M_AUX = SPEC_POINTS_NMB2_M 
				SPEC_POINTS_NMB3_M_AUX = SPEC_POINTS_NMB3_M 

				SPEC_POINTS_A_SNR_AUX  = SPEC_POINTS_A_SNR 
				SPEC_POINTS_M_SNR_AUX  = SPEC_POINTS_M_SNR 
				SPEC_POINTS_A_SNR2_AUX = SPEC_POINTS_A_SNR2 
				SPEC_POINTS_M_SNR2_AUX = SPEC_POINTS_M_SNR2 
				SPEC_POINTS_A_SNR3_AUX = SPEC_POINTS_A_SNR3 
				SPEC_POINTS_M_SNR3_AUX = SPEC_POINTS_M_SNR3 
				SPEC_POINTS_A_SNR4_AUX = SPEC_POINTS_A_SNR4 
				SPEC_POINTS_M_SNR4_AUX = SPEC_POINTS_M_SNR4 
				SPEC_POINTS_A_SNR5_AUX = SPEC_POINTS_A_SNR5 
				SPEC_POINTS_M_SNR5_AUX = SPEC_POINTS_M_SNR5 
				SPEC_POINTS_NMB2_AUX   = SPEC_POINTS_NMB2 
				SPEC_POINTS_NMB3_AUX   = SPEC_POINTS_NMB3 
				##############CLEANING NON FIT VALUES ##############
				if cln_snr_mth == 1:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					pass
					SPEC_POINTS_M_SNR0     = SPEC_POINTS_M_SNR
					SPEC_POINTS_A_SNR0     = SPEC_POINTS_A_SNR
					SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR_AUX
					SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR_AUX

				elif cln_snr_mth == 2:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					pass
					SPEC_POINTS_M_SNR0     = SPEC_POINTS_M_SNR2
					SPEC_POINTS_A_SNR0     = SPEC_POINTS_A_SNR2
					SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR2_AUX
					SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR2_AUX

				elif cln_snr_mth == 3:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					pass
					SPEC_POINTS_M_SNR0     = SPEC_POINTS_M_SNR3
					SPEC_POINTS_A_SNR0     = SPEC_POINTS_A_SNR3
					SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR3_AUX
					SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR3_AUX

				elif cln_snr_mth == 4:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					pass
					SPEC_POINTS_M_SNR0     = SPEC_POINTS_M_SNR4
					SPEC_POINTS_A_SNR0     = SPEC_POINTS_A_SNR4
					SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR4_AUX
					SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR4_AUX

				else:
					SPEC_POINTS_M_SNR0     = SPEC_POINTS_M_SNR
					SPEC_POINTS_A_SNR0     = SPEC_POINTS_A_SNR
					SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR_AUX
					SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR_AUX

					print
					print colored('SNR method: ' + str(cln_snr_mth) + ' does not exist!','yellow')
					print colored('Assuming SNR method: 1','yellow')
					print
				#############CLEANING LOW SNR EW POINTS#############
				if cln_pts_snr == True:
					indx_msk_snr_med   = (np.where(100<np.asarray(SPEC_POINTS_M_SNR0))[0])
					indx_msk_snr_avg   = (np.where(100<np.asarray(SPEC_POINTS_A_SNR0))[0])
					indx_msk_snr_med   = np.asarray(indx_msk_snr_med)			
					indx_msk_snr_avg   = np.asarray(indx_msk_snr_avg)
					SPEC_POINTS_M_SNR0[indx_msk_snr_med]=0
					SPEC_POINTS_A_SNR0[indx_msk_snr_avg]=0

					indx_msk_snr_med   = (np.where(np.asarray(SPEC_POINTS_M_SNR0)<cln_snr_thr)[0])
					indx_msk_snr_avg   = (np.where(np.asarray(SPEC_POINTS_A_SNR0)<cln_snr_thr)[0])
					indx_msk_snr_med   = np.asarray(indx_msk_snr_med)			
					indx_msk_snr_avg   = np.asarray(indx_msk_snr_avg)

					print
					print colored('Cleaning points according their SNR!','yellow')
					print colored('From:','yellow')
					print colored('AVG: ' + str(SPEC_POINTS_A_SNR0),'yellow')
					print colored('MED: ' + str(SPEC_POINTS_M_SNR0),'yellow')
					print colored('SNR Computation Method : ' + str(cln_snr_mth),'yellow')
					print colored('Threshold value        : ' + str(cln_snr_thr),'yellow')
					print
					print
					print colored('Points with SNR < ' + str(cln_snr_thr) +' :','yellow')
					print colored('AVG-IDX: ' + str(indx_msk_snr_avg),'yellow')
					print colored('MED-IDX: ' + str(indx_msk_snr_med),'yellow')
					print colored('AVG-VAL: ' + str(SPEC_POINTS_A_SNR0[indx_msk_snr_avg]),'yellow')
					print colored('MED-VAL: ' + str(SPEC_POINTS_M_SNR0[indx_msk_snr_med]),'yellow')
					print colored('Corresponding to ' + plt_nme_prp +' points: ','yellow')
					print colored('AVG-VAR: ' + str(SPEC_SEP_VAR_A[indx_msk_snr_avg]),'yellow')
					print colored('MED-VAR: ' + str(SPEC_SEP_VAR_M[indx_msk_snr_med]),'yellow')
					print

					SPEC_POINTS_A_9    = np.delete(SPEC_POINTS_A_9,indx_msk_snr_avg)
					SPEC_POINTS_M_9    = np.delete(SPEC_POINTS_M_9,indx_msk_snr_med)

					SPEC_SEP_VAR_A     = np.delete(SPEC_SEP_VAR_A,indx_msk_snr_avg)
					SPEC_SEP_VAR_M     = np.delete(SPEC_SEP_VAR_M,indx_msk_snr_med)
					SPEC_SEP_VAR_BU    = np.delete(SPEC_SEP_VAR_BU,indx_msk_snr_avg)

					SPEC_POINTS_NMB_A  = np.delete(SPEC_POINTS_NMB_A,indx_msk_snr_avg)
					SPEC_POINTS_NMB2_A = np.delete(SPEC_POINTS_NMB2_A,indx_msk_snr_avg)
					SPEC_POINTS_NMB3_A = np.delete(SPEC_POINTS_NMB3_A,indx_msk_snr_avg)

					SPEC_POINTS_NMB_M  = np.delete(SPEC_POINTS_NMB_M,indx_msk_snr_med)
					SPEC_POINTS_NMB2_M = np.delete(SPEC_POINTS_NMB2_M,indx_msk_snr_med)
					SPEC_POINTS_NMB3_M = np.delete(SPEC_POINTS_NMB3_M,indx_msk_snr_med)

					SPEC_POINTS_A_SNR0 = np.delete(SPEC_POINTS_A_SNR0,indx_msk_snr_avg)
					SPEC_POINTS_M_SNR0 = np.delete(SPEC_POINTS_M_SNR0,indx_msk_snr_med)

					SPEC_POINTS_A_SNR  = np.delete(SPEC_POINTS_A_SNR,indx_msk_snr_avg)
					SPEC_POINTS_M_SNR  = np.delete(SPEC_POINTS_M_SNR,indx_msk_snr_med)
					SPEC_POINTS_A_SNR2 = np.delete(SPEC_POINTS_A_SNR2,indx_msk_snr_avg)
					SPEC_POINTS_M_SNR2 = np.delete(SPEC_POINTS_M_SNR2,indx_msk_snr_med)
					SPEC_POINTS_A_SNR3 = np.delete(SPEC_POINTS_A_SNR3,indx_msk_snr_avg)
					SPEC_POINTS_M_SNR3 = np.delete(SPEC_POINTS_M_SNR3,indx_msk_snr_med)
					SPEC_POINTS_A_SNR4 = np.delete(SPEC_POINTS_A_SNR4,indx_msk_snr_avg)
					SPEC_POINTS_M_SNR4 = np.delete(SPEC_POINTS_M_SNR4,indx_msk_snr_med)
					SPEC_POINTS_A_SNR5 = np.delete(SPEC_POINTS_A_SNR5,indx_msk_snr_avg)
					SPEC_POINTS_M_SNR5 = np.delete(SPEC_POINTS_M_SNR5,indx_msk_snr_med)
					#SPEC_POINTS_NMB2   = np.delete(SPEC_POINTS_NMB2,indx_msk_snr_med)
					#SPEC_POINTS_NMB3   = np.delete(SPEC_POINTS_NMB3,indx_msk_snr_med)

					print
					print len(SPEC_POINTS_A_9),SPEC_POINTS_A_9
					print len(SPEC_SEP_VAR_A),SPEC_SEP_VAR_A
					print len(SPEC_SEP_VAR_BU),SPEC_SEP_VAR_BU
					print len(SPEC_POINTS_NMB_A),SPEC_POINTS_NMB_A
					print len(SPEC_POINTS_NMB2_A),SPEC_POINTS_NMB2_A
					print len(SPEC_POINTS_NMB3_A),SPEC_POINTS_NMB3_A
					print len(SPEC_POINTS_A_SNR),SPEC_POINTS_A_SNR
					print len(SPEC_POINTS_A_SNR2),SPEC_POINTS_A_SNR2
					print len(SPEC_POINTS_A_SNR3),SPEC_POINTS_A_SNR3
					print len(SPEC_POINTS_A_SNR4),SPEC_POINTS_A_SNR4
					print len(SPEC_POINTS_A_SNR5),SPEC_POINTS_A_SNR5
					print
					print len(SPEC_POINTS_M_9),SPEC_POINTS_M_9
					print len(SPEC_SEP_VAR_M),SPEC_SEP_VAR_M
					print len(SPEC_POINTS_NMB_M),SPEC_POINTS_NMB_M,indx_msk_snr_med
					print len(SPEC_POINTS_NMB2_M),SPEC_POINTS_NMB2_M
					print len(SPEC_POINTS_NMB3_M),SPEC_POINTS_NMB3_M
					print len(SPEC_POINTS_M_SNR),SPEC_POINTS_M_SNR
					print len(SPEC_POINTS_M_SNR2),SPEC_POINTS_M_SNR2
					print len(SPEC_POINTS_M_SNR3),SPEC_POINTS_M_SNR3
					print len(SPEC_POINTS_M_SNR4),SPEC_POINTS_M_SNR4
					print len(SPEC_POINTS_M_SNR5),SPEC_POINTS_M_SNR5					
					print
				elif cln_pts_snr == False:
					pass
				#############CLEANING LOW SNR EW POINTS#############
				#######AUXILIARY MARKERS FOR LOW SNR EW POINTS######
				if cln_snr_aux == True:
					indx_msk_snr_med_aux = (np.where(100<np.asarray(SPEC_POINTS_M_SNR0_AUX))[0])
					indx_msk_snr_avg_aux = (np.where(100<np.asarray(SPEC_POINTS_A_SNR0_AUX))[0])
					indx_msk_snr_med_aux = np.asarray(indx_msk_snr_med_aux)			
					indx_msk_snr_avg_aux = np.asarray(indx_msk_snr_avg_aux)
					SPEC_POINTS_M_SNR0_AUX[indx_msk_snr_med_aux]=0
					SPEC_POINTS_A_SNR0_AUX[indx_msk_snr_avg_aux]=0

					indx_msk_snr_med_aux = (np.where((cln_snr_thr<=np.asarray(SPEC_POINTS_M_SNR0_AUX)) & (np.asarray(SPEC_POINTS_M_SNR0_AUX)<cln_snr_th2))[0])
					indx_msk_snr_avg_aux = (np.where((cln_snr_thr<=np.asarray(SPEC_POINTS_A_SNR0_AUX)) & (np.asarray(SPEC_POINTS_A_SNR0_AUX)<cln_snr_th2))[0])
					indx_msk_snr_med_aux = np.asarray(indx_msk_snr_med_aux)			
					indx_msk_snr_avg_aux = np.asarray(indx_msk_snr_avg_aux)

					if skip_fg_ref_ew == False:
						SPEC_SEP_VAR_A_AUX[0] = 1.0
						SPEC_SEP_VAR_M_AUX[0] = 1.0
					else:
						pass

					print
					print colored('Cleaning points according their SNR!','cyan')
					print colored('From:','cyan')
					print colored('AVG: ' + str(SPEC_POINTS_A_SNR0_AUX),'cyan')
					print colored('MED: ' + str(SPEC_POINTS_M_SNR0_AUX),'cyan')
					print colored('SNR Computation Method : ' + str(cln_snr_mth),'cyan')
					print colored('Threshold value        : ' + str(cln_snr_thr),'cyan')
					print colored('Threshold value (AUX)  : ' + str(cln_snr_th2),'cyan')
					print
					print
					print colored(str(cln_snr_thr) + '< Points with SNR < ' + str(cln_snr_th2) +' :','cyan')
					print colored('AVG-IDX: ' + str(indx_msk_snr_avg_aux) + ',' + str(SPEC_POINTS_A_SNR0_AUX[indx_msk_snr_avg_aux]),'cyan')
					print colored('MED-IDX: ' + str(indx_msk_snr_med_aux) + ',' + str(SPEC_POINTS_M_SNR0_AUX[indx_msk_snr_med_aux]),'cyan')
					print colored('AVG-VAL: ' + str(SPEC_POINTS_A_SNR0_AUX[indx_msk_snr_avg_aux]),'cyan')
					print colored('MED-VAL: ' + str(SPEC_POINTS_M_SNR0_AUX[indx_msk_snr_med_aux]),'cyan')
					print colored('Corresponding to ' + plt_nme_prp +' points: ','cyan')
					print colored('AVG-VAR: ' + str(SPEC_SEP_VAR_A_AUX[indx_msk_snr_avg_aux]),'cyan')
					print colored('MED-VAR: ' + str(SPEC_SEP_VAR_M_AUX[indx_msk_snr_med_aux]),'cyan')
					print
					print '****'

					SPEC_POINTS_A_9_AUX    = SPEC_POINTS_A_9_AUX[indx_msk_snr_avg_aux]
					SPEC_POINTS_M_9_AUX    = SPEC_POINTS_M_9_AUX[indx_msk_snr_med_aux]

					SPEC_SEP_VAR_A_AUX     = SPEC_SEP_VAR_A_AUX[indx_msk_snr_avg_aux]
					SPEC_SEP_VAR_M_AUX     = SPEC_SEP_VAR_M_AUX[indx_msk_snr_med_aux]
					SPEC_SEP_VAR_BU_AUX    = SPEC_SEP_VAR_BU_AUX[indx_msk_snr_avg_aux]

					SPEC_POINTS_NMB_A_AUX  = SPEC_POINTS_NMB_A_AUX[indx_msk_snr_avg_aux]
					SPEC_POINTS_NMB2_A_AUX = SPEC_POINTS_NMB2_A_AUX[indx_msk_snr_avg_aux]
					SPEC_POINTS_NMB3_A_AUX = SPEC_POINTS_NMB3_A_AUX[indx_msk_snr_avg_aux]

					SPEC_POINTS_NMB_M_AUX  = SPEC_POINTS_NMB_M_AUX[indx_msk_snr_med_aux]
					SPEC_POINTS_NMB2_M_AUX = SPEC_POINTS_NMB2_M_AUX[indx_msk_snr_med_aux]
					SPEC_POINTS_NMB3_M_AUX = SPEC_POINTS_NMB3_M_AUX[indx_msk_snr_med_aux]

					SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR0_AUX[indx_msk_snr_avg_aux]
					SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR0_AUX[indx_msk_snr_med_aux]

					SPEC_POINTS_A_SNR_AUX  = SPEC_POINTS_A_SNR_AUX[indx_msk_snr_avg_aux]
					SPEC_POINTS_M_SNR_AUX  = SPEC_POINTS_M_SNR_AUX[indx_msk_snr_med_aux]
					SPEC_POINTS_A_SNR2_AUX = SPEC_POINTS_A_SNR2_AUX[indx_msk_snr_avg_aux]
					SPEC_POINTS_M_SNR2_AUX = SPEC_POINTS_M_SNR2_AUX[indx_msk_snr_med_aux]
					SPEC_POINTS_A_SNR3_AUX = SPEC_POINTS_A_SNR3_AUX[indx_msk_snr_avg_aux]
					SPEC_POINTS_M_SNR3_AUX = SPEC_POINTS_M_SNR3_AUX[indx_msk_snr_med_aux]
					SPEC_POINTS_A_SNR4_AUX = SPEC_POINTS_A_SNR4_AUX[indx_msk_snr_avg_aux]
					SPEC_POINTS_M_SNR4_AUX = SPEC_POINTS_M_SNR4_AUX[indx_msk_snr_med_aux]
					SPEC_POINTS_A_SNR5_AUX = SPEC_POINTS_A_SNR5_AUX[indx_msk_snr_avg_aux]
					SPEC_POINTS_M_SNR5_AUX = SPEC_POINTS_M_SNR5_AUX[indx_msk_snr_med_aux]
					#SPEC_POINTS_NMB2_AUX   = SPEC_POINTS_NMB2_AUX[indx_msk_snr_med_aux]
					#SPEC_POINTS_NMB3_AUX   = SPEC_POINTS_NMB3_AUX[indx_msk_snr_med_aux]

					print
					print len(SPEC_POINTS_A_9_AUX),SPEC_POINTS_A_9_AUX
					print len(SPEC_SEP_VAR_A_AUX),SPEC_SEP_VAR_A_AUX
					print len(SPEC_SEP_VAR_BU_AUX),SPEC_SEP_VAR_BU_AUX
					print len(SPEC_POINTS_NMB_A_AUX),SPEC_POINTS_NMB_A_AUX
					print len(SPEC_POINTS_NMB2_A_AUX),SPEC_POINTS_NMB2_A_AUX
					print len(SPEC_POINTS_NMB3_A_AUX),SPEC_POINTS_NMB3_A_AUX
					print len(SPEC_POINTS_A_SNR_AUX),SPEC_POINTS_A_SNR_AUX
					print len(SPEC_POINTS_A_SNR2_AUX),SPEC_POINTS_A_SNR2_AUX
					print len(SPEC_POINTS_A_SNR3_AUX),SPEC_POINTS_A_SNR3_AUX
					print len(SPEC_POINTS_A_SNR4_AUX),SPEC_POINTS_A_SNR4_AUX
					print len(SPEC_POINTS_A_SNR5_AUX),SPEC_POINTS_A_SNR5_AUX
					print
					print len(SPEC_POINTS_M_9_AUX),SPEC_POINTS_M_9_AUX
					print len(SPEC_SEP_VAR_M_AUX),SPEC_SEP_VAR_M_AUX
					print len(SPEC_POINTS_NMB_M_AUX),SPEC_POINTS_NMB_M_AUX
					print len(SPEC_POINTS_NMB2_M_AUX),SPEC_POINTS_NMB2_M_AUX
					print len(SPEC_POINTS_NMB3_M_AUX),SPEC_POINTS_NMB3_M_AUX
					print len(SPEC_POINTS_M_SNR_AUX),SPEC_POINTS_M_SNR_AUX
					print len(SPEC_POINTS_M_SNR2_AUX),SPEC_POINTS_M_SNR2_AUX
					print len(SPEC_POINTS_M_SNR3_AUX),SPEC_POINTS_M_SNR3_AUX
					print len(SPEC_POINTS_M_SNR4_AUX),SPEC_POINTS_M_SNR4_AUX
					print len(SPEC_POINTS_M_SNR5_AUX),SPEC_POINTS_M_SNR5_AUX
					print
				elif cln_snr_aux == False:
					pass
			except KeyError:
				print
				print colored('Header Error! - L28380','yellow')
				print str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'C'
				print
				print 	'STK_NUM'
				print
				print str(LINES[5][lines])+'_SMU1'
				print str(LINES[5][lines])+'_SMU2'
				print str(LINES[5][lines])+'_SMU4'
				print str(LINES[5][lines])+'_SMB2'
				print
				print str(LINES[5][lines])+'_NHT'
				print str(LINES[5][lines])+'_NHW'
				print
				print colored("\n".join([FILE for FILE in FILES_M_BG]),'yellow')
				print
				print colored("\n".join([FILE for FILE in FILES_A_BG]),'yellow')
				print
				SPEC_POINTS_M_1  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_2  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_3  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_4  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_5  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_6  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_7  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_8  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_9  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_10 = np.zeros([len(FILES_M_BG)])

				SPEC_POINTS_A_1  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_2  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_3  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_4  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_5  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_6  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_7  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_8  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_9  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_10 = np.zeros([len(FILES_M_BG)])

				SPEC_POINTS_NMB    = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_SNR  = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_M_SNR  = np.zeros([len(FILES_M_BG)])

				SPEC_POINTS_A_SNR2 = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_M_SNR2 = np.zeros([len(FILES_M_BG)])

				SPEC_POINTS_A_SNR3 = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_M_SNR3 = np.zeros([len(FILES_M_BG)])

				SPEC_POINTS_A_SNR4 = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_M_SNR4 = np.zeros([len(FILES_M_BG)])

				SPEC_POINTS_A_SNR5 = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_M_SNR5 = np.zeros([len(FILES_M_BG)])

				SPEC_POINTS_NMB2   = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_NMB3   = np.zeros([len(FILES_M_BG)])

				SPEC_POINTS_NMB_A  = SPEC_POINTS_NMB
				SPEC_POINTS_NMB2_A = SPEC_POINTS_NMB2
				SPEC_POINTS_NMB3_A = SPEC_POINTS_NMB3

				SPEC_POINTS_NMB_M  = SPEC_POINTS_NMB
				SPEC_POINTS_NMB2_M = SPEC_POINTS_NMB2
				SPEC_POINTS_NMB3_M = SPEC_POINTS_NMB3

				SPEC_POINTS_A_SNR  = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_M_SNR  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_SNR2 = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_M_SNR2 = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_SNR3 = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_M_SNR3 = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_SNR4 = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_M_SNR4 = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_SNR5 = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_M_SNR5 = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_NMB2   = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_NMB3   = np.zeros([len(FILES_A_BG)])
		elif mlt_stk_fct == 'med' and fit_fnct == 'gaussM' and ems_lne_ctb == True:#stk_function_m == True :
			print
			print colored('*********************************************************************************','cyan')
			print colored('********************************Emission Profile*********************************','cyan')
			print colored('*********************************************************************************','cyan')
			print
			try: 
				SPEC_POINTS_M_1  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CLOM') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_2  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_ALOM') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_3  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FLOM') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_4  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WLOM') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_5  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_ELOM') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_6  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CLCM') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_7  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_ALCM') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_8  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FLCM') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_9  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WLCM') for spec_res_file in FILES_M_BG]#TOTAL: _WTOT CTR: _WLCM
				SPEC_POINTS_M_10 = [Header_Get(spec_res_file,str(LINES[5][lines])+'_ELCM') for spec_res_file in FILES_M_BG]

				SPEC_POINTS_M_1_PRE = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CGL1')  for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_2_PRE = [Header_Get(spec_res_file,str(LINES[5][lines])+'_AGL1')  for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_3_PRE = [Header_Get(spec_res_file,str(LINES[5][lines])+'_SGL1')  for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_1_PST = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CGL2')  for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_2_PST = [Header_Get(spec_res_file,str(LINES[5][lines])+'_AGL2')  for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_3_PST = [Header_Get(spec_res_file,str(LINES[5][lines])+'_SGL2')  for spec_res_file in FILES_M_BG]

				SPEC_POINTS_M_9_PRE = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WGL1') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_9_PST = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WGL2') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_9     = SPEC_POINTS_M_9_PRE + SPEC_POINTS_M_9_PST

				SPEC_POINTS_M_9    = SPEC_POINTS_M_9 * -1
				##############################PRE-PST GUASS FIT FOR Dbl LINES##############################
				'''
				CTRE_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGM1')
				AMPL_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGM1')
				SGMA_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGM1')
				FWHM_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGM1')
				EW_C_PRE       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGM1')
				EWE_C_PRE      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGM1')
				CTRE_G_C_PRE_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_CME1')
				AMPL_G_C_PRE_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_AME1')
				SGMA_G_C_PRE_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_SME1')

				CTRE_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGM2')
				AMPL_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGM2')
				SGMA_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGM2')
				FWHM_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGM2')
				EW_C_PST       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGM2')
				EWE_C_PST      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGM2')
				CTRE_G_C_PST_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_CME2')
				AMPL_G_C_PST_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_AME2')
				SGMA_G_C_PST_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_SME2')
				'''
				##############################PRE-PST GUASS FIT FOR Dbl LINES##############################

				SPEC_POINTS_M_NSE  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NMU1') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_NSE2 = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NMU2') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_NSE3 = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NMU3') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_NSE4 = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NMU4') for spec_res_file in FILES_M_BG]

				SPEC_POINTS_M_NSE5 = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NMB2') for spec_res_file in FILES_M_BG]

				SPEC_POINTS_NMB    = [Header_Get(spec_res_file,'STK_NUM') for spec_res_file in FILES_A_BG]

				SPEC_POINTS_M_SNR  = ((SPEC_POINTS_M_2_PRE + SPEC_POINTS_M_2_PST)/2) / SPEC_POINTS_M_NSE #[np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SMU1'),0) for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_SNR2 = ((SPEC_POINTS_M_2_PRE + SPEC_POINTS_M_2_PST)/2) / SPEC_POINTS_M_NSE2 #[np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SMU2'),0) for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_SNR3 = ((SPEC_POINTS_M_2_PRE + SPEC_POINTS_M_2_PST)/2) / SPEC_POINTS_M_NSE3 #[np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SMU3'),0) for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_SNR4 = ((SPEC_POINTS_M_2_PRE + SPEC_POINTS_M_2_PST)/2) / SPEC_POINTS_M_NSE4 #[np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SMU4'),0) for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_SNR5 = ((SPEC_POINTS_M_2_PRE + SPEC_POINTS_M_2_PST)/2) / SPEC_POINTS_M_NSE5 #[np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SMB2'),0) for spec_res_file in FILES_M_BG]

				SPEC_POINTS_NMB2   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NHT') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_NMB3   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NHW') for spec_res_file in FILES_M_BG]

				SPEC_POINTS_NMB_A  = SPEC_POINTS_NMB
				SPEC_POINTS_NMB2_A = SPEC_POINTS_NMB2
				SPEC_POINTS_NMB3_A = SPEC_POINTS_NMB3

				print SPEC_POINTS_M_9

				##############CLEANING NON FIT VALUES ##############
				print
				print colored('Deleting Unfitted bins!','yellow')
				print colored('From:','yellow')
				print colored('MED: '+str(SPEC_POINTS_M_9),'yellow')
				print

				indx_msk_med       = (np.where(np.asarray(SPEC_POINTS_M_9)==999999.99999)[0])
				indx_msk_med       = np.asarray(indx_msk_med)			

				if len(indx_msk_med)>0:
					print colored('Points with FIT values (MED): ' + str(999999.99999) +' :','yellow')
					print colored(([indx_msk_med]),'yellow')
					#print colored(str(SPEC_POINTS_M_9[indx_msk_med]),'yellow')
					print colored('Corresponding to ' + plt_nme_prp +' points: ','yellow')
					print colored(str(SPEC_SEP_VAR[indx_msk_med]),'yellow')
					print
				else:
					print colored('No Unfitted Values found (MED)!','yellow')
					print
					
				SPEC_POINTS_M_9         = np.asarray(SPEC_POINTS_M_9)
				SPEC_POINTS_M_9         = np.delete(SPEC_POINTS_M_9,indx_msk_med)

				SPEC_SEP_VAR_M          = SPEC_SEP_VAR
				SPEC_SEP_VAR_M          = np.delete(SPEC_SEP_VAR_M,indx_msk_med)
				SPEC_SEP_VAR_BU         = np.delete(SPEC_SEP_VAR_BU,indx_msk_med)

				SPEC_POINTS_NMB_M       = np.delete(SPEC_POINTS_NMB_M,indx_msk_med)
				SPEC_POINTS_NMB2_M      = np.delete(SPEC_POINTS_NMB2_M,indx_msk_med)
				SPEC_POINTS_NMB3_M      = np.delete(SPEC_POINTS_NMB3_M,indx_msk_med)

				SPEC_POINTS_M_SNR       = np.delete(SPEC_POINTS_M_SNR,indx_msk_med)
				SPEC_POINTS_M_SNR2      = np.delete(SPEC_POINTS_M_SNR2,indx_msk_med)
				SPEC_POINTS_M_SNR3      = np.delete(SPEC_POINTS_M_SNR3,indx_msk_med)
				SPEC_POINTS_M_SNR4      = np.delete(SPEC_POINTS_M_SNR4,indx_msk_med)
				SPEC_POINTS_M_SNR5      = np.delete(SPEC_POINTS_M_SNR5,indx_msk_med)
				SPEC_POINTS_NMB2_M      = np.delete(SPEC_POINTS_NMB2_M,indx_msk_med)
				SPEC_POINTS_NMB3_M      = np.delete(SPEC_POINTS_NMB3_M,indx_msk_med)

				SPEC_POINTS_M_9_AUX     = SPEC_POINTS_M_9 

				SPEC_SEP_VAR_M_AUX      = SPEC_SEP_VAR_M 
				SPEC_SEP_VAR_BU_AUX     = SPEC_SEP_VAR_BU 

				SPEC_POINTS_NMB_M_AUX   = SPEC_POINTS_NMB_M 
				SPEC_POINTS_NMB2_M_AUX  = SPEC_POINTS_NMB2_M 
				SPEC_POINTS_NMB3_M_AUX  = SPEC_POINTS_NMB3_M 

				SPEC_POINTS_M_SNR_AUX   = SPEC_POINTS_M_SNR 
				SPEC_POINTS_M_SNR2_AUX  = SPEC_POINTS_M_SNR2 
				SPEC_POINTS_M_SNR3_AUX  = SPEC_POINTS_M_SNR3 
				SPEC_POINTS_M_SNR4_AUX  = SPEC_POINTS_M_SNR4 
				SPEC_POINTS_M_SNR5_AUX  = SPEC_POINTS_M_SNR5 

				SPEC_POINTS_NMB2_M_AUX  = SPEC_POINTS_NMB2_M 
				SPEC_POINTS_NMB3_M_AUX  = SPEC_POINTS_NMB3_M
				##############CLEANING NON FIT VALUES ############## 

				if cln_snr_mth == 1:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					pass
					SPEC_POINTS_M_SNR0     = SPEC_POINTS_M_SNR
					SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR_AUX
				elif cln_snr_mth == 2:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					pass
					SPEC_POINTS_M_SNR0     = SPEC_POINTS_M_SNR2
					SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR2_AUX
				elif cln_snr_mth == 3:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					pass
					SPEC_POINTS_M_SNR0     = SPEC_POINTS_M_SNR3
					SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR3_AUX
				elif cln_snr_mth == 4:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					pass
					SPEC_POINTS_M_SNR0     = SPEC_POINTS_M_SNR4
					SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR4_AUX
				else:
					SPEC_POINTS_M_SNR0     = SPEC_POINTS_M_SNR
					SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR_AUX
					print
					print colored('SNR method: ' + str(cln_snr_mth) + ' does not exist!','yellow')
					print colored('Assuming SNR method: 1','yellow')
					print

				#############CLEANING LOW SNR EW POINTS#############
				if cln_pts_snr == True:
					indx_msk_snr_med   = (np.where(np.asarray(SPEC_POINTS_M_SNR0)<cln_snr_thr)[0])
					indx_msk_snr_med   = np.asarray(indx_msk_snr_med)			

					print
					print colored('Cleaning points according their SNR!','yellow')
					print colored('From:','yellow')
					print colored('MED: ' + str(SPEC_POINTS_M_SNR0),'yellow')
					print colored('SNR Computation Method : ' + str(cln_snr_mth),'yellow')
					print colored('Threshold value        : ' + str(cln_snr_thr),'yellow')
					print
					print
					print colored('Points with SNR < ' + str(cln_snr_thr) +' :','yellow')
					print colored('MED-IDX: ' + str(indx_msk_snr_med),'yellow')
					print colored('MED-VAL: ' + str(SPEC_POINTS_M_SNR0[indx_msk_snr_med]),'yellow')
					print colored('Corresponding to ' + plt_nme_prp +' points: ','yellow')
					print colored('MED-VAR: ' + str(SPEC_SEP_VAR_M[indx_msk_snr_med]),'yellow')
					print

					SPEC_POINTS_M_9    = np.delete(SPEC_POINTS_M_9,indx_msk_snr_med)

					SPEC_SEP_VAR_M     = np.delete(SPEC_SEP_VAR_M,indx_msk_snr_med)
					SPEC_SEP_VAR_BU    = np.delete(SPEC_SEP_VAR_BU,indx_msk_snr_med)


					SPEC_POINTS_NMB_M  = np.delete(SPEC_POINTS_NMB_M,indx_msk_snr_med)
					SPEC_POINTS_NMB2_M = np.delete(SPEC_POINTS_NMB2_M,indx_msk_snr_med)
					SPEC_POINTS_NMB3_M = np.delete(SPEC_POINTS_NMB3_M,indx_msk_snr_med)

					SPEC_POINTS_M_SNR0 = np.delete(SPEC_POINTS_M_SNR0,indx_msk_snr_med)

					SPEC_POINTS_M_SNR  = np.delete(SPEC_POINTS_M_SNR,indx_msk_snr_med)
					SPEC_POINTS_M_SNR2 = np.delete(SPEC_POINTS_M_SNR2,indx_msk_snr_med)
					SPEC_POINTS_M_SNR3 = np.delete(SPEC_POINTS_M_SNR3,indx_msk_snr_med)
					SPEC_POINTS_M_SNR4 = np.delete(SPEC_POINTS_M_SNR4,indx_msk_snr_med)
					SPEC_POINTS_M_SNR5 = np.delete(SPEC_POINTS_M_SNR5,indx_msk_snr_med)
					#SPEC_POINTS_NMB2   = np.delete(SPEC_POINTS_NMB2,indx_msk_snr_med)
					#SPEC_POINTS_NMB3   = np.delete(SPEC_POINTS_NMB3,indx_msk_snr_med)

					print
					print
					print len(SPEC_POINTS_M_9),SPEC_POINTS_M_9
					print len(SPEC_SEP_VAR_M),SPEC_SEP_VAR_M
					print len(SPEC_SEP_VAR_BU),SPEC_SEP_VAR_BU
					print len(SPEC_POINTS_NMB_M),SPEC_POINTS_NMB_M,indx_msk_snr_med
					print len(SPEC_POINTS_NMB2_M),SPEC_POINTS_NMB2_M
					print len(SPEC_POINTS_NMB3_M),SPEC_POINTS_NMB3_M
					print len(SPEC_POINTS_M_SNR),SPEC_POINTS_M_SNR
					print len(SPEC_POINTS_M_SNR2),SPEC_POINTS_M_SNR2
					print len(SPEC_POINTS_M_SNR3),SPEC_POINTS_M_SNR3
					print len(SPEC_POINTS_M_SNR4),SPEC_POINTS_M_SNR4
					print len(SPEC_POINTS_M_SNR5),SPEC_POINTS_M_SNR5					
					print
				elif cln_pts_snr == False:
					pass				
				#############CLEANING LOW SNR EW POINTS#############
				#######AUXILIARY MARKERS FOR LOW SNR EW POINTS######
				if cln_snr_aux == True:
					indx_msk_snr_med_aux = (np.where(100<np.asarray(SPEC_POINTS_M_SNR0_AUX))[0])
					indx_msk_snr_med_aux = np.asarray(indx_msk_snr_med_aux)			
					SPEC_POINTS_M_SNR0_AUX[indx_msk_snr_med_aux]=0

					indx_msk_snr_med_aux = (np.where((cln_snr_thr<=np.asarray(SPEC_POINTS_M_SNR0_AUX)) & (np.asarray(SPEC_POINTS_M_SNR0_AUX)<cln_snr_th2))[0])
					indx_msk_snr_med_aux = np.asarray(indx_msk_snr_med_aux)			

					print
					print colored('Cleaning points according their SNR!','cyan')
					print colored('From:','cyan')
					print colored('MED: ' + str(SPEC_POINTS_M_SNR0_AUX),'cyan')
					print colored('SNR Computation Method : ' + str(cln_snr_mth),'cyan')
					print colored('Threshold value        : ' + str(cln_snr_thr),'cyan')
					print colored('Threshold value (AUX)  : ' + str(cln_snr_th2),'cyan')
					print
					print
					print colored(str(cln_snr_thr) + '< Points with SNR < ' + str(cln_snr_th2) +' :','cyan')
					print colored('MED-IDX: ' + str(indx_msk_snr_med_aux) + ',' + str(SPEC_POINTS_M_SNR0_AUX[indx_msk_snr_med_aux]),'cyan')
					print colored('MED-VAL: ' + str(SPEC_POINTS_M_SNR0_AUX[indx_msk_snr_med_aux]),'cyan')
					print colored('Corresponding to ' + plt_nme_prp +' points: ','cyan')
					print colored('MED-VAR: ' + str(SPEC_SEP_VAR_M_AUX[indx_msk_snr_med_aux]),'cyan')
					print

					if skip_fg_ref_ew == False:
						#SPEC_SEP_VAR_A_AUX[0] = 1.0
						SPEC_SEP_VAR_M_AUX[0] = 1.0
					else:
						pass

					SPEC_POINTS_M_9_AUX    = SPEC_POINTS_M_9_AUX[indx_msk_snr_med_aux]

					SPEC_SEP_VAR_M_AUX     = SPEC_SEP_VAR_M_AUX[indx_msk_snr_med_aux]
					SPEC_SEP_VAR_BU_AUX    = SPEC_SEP_VAR_BU_AUX[indx_msk_snr_med_aux]

					SPEC_POINTS_NMB_M_AUX  = SPEC_POINTS_NMB_M_AUX[indx_msk_snr_med_aux]
					SPEC_POINTS_NMB2_M_AUX = SPEC_POINTS_NMB2_M_AUX[indx_msk_snr_med_aux]
					SPEC_POINTS_NMB3_M_AUX = SPEC_POINTS_NMB3_M_AUX[indx_msk_snr_med_aux]

					SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR0_AUX[indx_msk_snr_med_aux]

					SPEC_POINTS_M_SNR_AUX  = SPEC_POINTS_M_SNR_AUX[indx_msk_snr_med_aux]
					SPEC_POINTS_M_SNR2_AUX = SPEC_POINTS_M_SNR2_AUX[indx_msk_snr_med_aux]
					SPEC_POINTS_M_SNR3_AUX = SPEC_POINTS_M_SNR3_AUX[indx_msk_snr_med_aux]
					SPEC_POINTS_M_SNR4_AUX = SPEC_POINTS_M_SNR4_AUX[indx_msk_snr_med_aux]
					SPEC_POINTS_M_SNR5_AUX = SPEC_POINTS_M_SNR5_AUX[indx_msk_snr_med_aux]
					#SPEC_POINTS_NMB2_AUX   = SPEC_POINTS_NMB2_AUX[indx_msk_snr_med_aux]
					#SPEC_POINTS_NMB3_AUX   = SPEC_POINTS_NMB3_AUX[indx_msk_snr_med_aux]

					print
					print len(SPEC_POINTS_M_9_AUX),SPEC_POINTS_M_9_AUX
					print len(SPEC_SEP_VAR_M_AUX),SPEC_SEP_VAR_M_AUX
					print len(SPEC_POINTS_NMB_M_AUX),SPEC_POINTS_NMB_M_AUX
					print len(SPEC_POINTS_NMB2_M_AUX),SPEC_POINTS_NMB2_M_AUX
					print len(SPEC_POINTS_NMB3_M_AUX),SPEC_POINTS_NMB3_M_AUX
					print len(SPEC_POINTS_M_SNR_AUX),SPEC_POINTS_M_SNR_AUX
					print len(SPEC_POINTS_M_SNR2_AUX),SPEC_POINTS_M_SNR2_AUX
					print len(SPEC_POINTS_M_SNR3_AUX),SPEC_POINTS_M_SNR3_AUX
					print len(SPEC_POINTS_M_SNR4_AUX),SPEC_POINTS_M_SNR4_AUX
					print len(SPEC_POINTS_M_SNR5_AUX),SPEC_POINTS_M_SNR5_AUX
					print
				elif cln_snr_aux == False:
					pass				
				#######AUXILIARY MARKERS FOR LOW SNR EW POINTS######
			except KeyError:
				print
				print colored('Header Error! L-27656','yellow')
				print str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'C'
				print
				print 	'STK_NUM'
				print
				print str(LINES[5][lines])+'_SNU1'
				print str(LINES[5][lines])+'_SNU2'
				print str(LINES[5][lines])+'_SNU4'
				print str(LINES[5][lines])+'_SNB2'
				print
				print str(LINES[5][lines])+'_NHT'
				print str(LINES[5][lines])+'_NHW'									
				print 
				print colored("\n".join([FILE for FILE in FILES_M_BG]),'yellow')
				print
				SPEC_POINTS_M_1  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_2  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_3  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_4  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_5  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_6  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_7  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_8  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_9  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_10 = np.zeros([len(FILES_M_BG)])

				SPEC_POINTS_NMB    = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_SNR  = np.zeros([len(FILES_M_BG)])

				SPEC_POINTS_M_SNR2  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_SNR3  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_SNR4  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_SNR5  = np.zeros([len(FILES_M_BG)])

				SPEC_POINTS_NMB2    = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_NMB3    = np.zeros([len(FILES_M_BG)])

				SPEC_POINTS_NMB_M  = SPEC_POINTS_NMB
				SPEC_POINTS_NMB2_M = SPEC_POINTS_NMB2
				SPEC_POINTS_NMB3_M = SPEC_POINTS_NMB3

				SPEC_POINTS_M_SNR  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_SNR2 = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_SNR3 = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_SNR4 = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_SNR5 = np.zeros([len(FILES_M_BG)])
				#SPEC_POINTS_NMB2   = np.zeros([len(FILES_A_BG)])
				#SPEC_POINTS_NMB3   = np.zeros([len(FILES_A_BG)])				
		elif mlt_stk_fct == 'avg' and fit_fnct == 'gaussM' and ems_lne_ctb == True:#stk_function_a == True :
			print
			print colored('*********************************************************************************','cyan')
			print colored('********************************Emission Profile*********************************','cyan')
			print colored('*********************************************************************************','cyan')
			print

			try: 
				SPEC_POINTS_A_1  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CLOM') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_2  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_ALOM') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_3  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FLOM') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_4  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WLOM') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_5  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_ELOM') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_6  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CLCM') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_7  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_ALCM') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_8  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FLCM') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_9  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WLCM') for spec_res_file in FILES_A_BG]#TOTAL: _WTOT CTR: _WLCM
				SPEC_POINTS_A_10 = [Header_Get(spec_res_file,str(LINES[5][lines])+'_ELCM') for spec_res_file in FILES_A_BG]

				SPEC_POINTS_A_1_PRE = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CGL1')  for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_2_PRE = [Header_Get(spec_res_file,str(LINES[5][lines])+'_AGL1')  for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_3_PRE = [Header_Get(spec_res_file,str(LINES[5][lines])+'_SGL1')  for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_1_PST = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CGL2')  for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_2_PST = [Header_Get(spec_res_file,str(LINES[5][lines])+'_AGL2')  for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_3_PST = [Header_Get(spec_res_file,str(LINES[5][lines])+'_SGL2')  for spec_res_file in FILES_A_BG]

				SPEC_POINTS_A_9_PRE = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WGL1') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_9_PST = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WGL2') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_9     = SPEC_POINTS_A_9_PRE + SPEC_POINTS_A_9_PST

				SPEC_POINTS_A_9    = SPEC_POINTS_A_9 * -1
				##############################PRE-PST GUASS FIT FOR Dbl LINES##############################
				'''
				CTRE_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGM1')
				AMPL_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGM1')
				SGMA_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGM1')
				FWHM_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGM1')
				EW_C_PRE       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGM1')
				EWE_C_PRE      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGM1')
				CTRE_G_C_PRE_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_CME1')
				AMPL_G_C_PRE_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_AME1')
				SGMA_G_C_PRE_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_SME1')

				CTRE_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGM2')
				AMPL_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGM2')
				SGMA_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGM2')
				FWHM_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGM2')
				EW_C_PST       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGM2')
				EWE_C_PST      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGM2')
				CTRE_G_C_PST_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_CME2')
				AMPL_G_C_PST_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_AME2')
				SGMA_G_C_PST_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_SME2')
				'''
				##############################PRE-PST GUASS FIT FOR Dbl LINES##############################

				
				SPEC_POINTS_A_NSE  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NMU1') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_NSE2 = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NMU2') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_NSE3 = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NMU3') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_NSE4 = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NMU4') for spec_res_file in FILES_A_BG]

				SPEC_POINTS_A_NSE5 = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NMB2') for spec_res_file in FILES_A_BG]

				SPEC_POINTS_NMB    = [Header_Get(spec_res_file,'STK_NUM') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_SNR  = ((SPEC_POINTS_A_2_PRE + SPEC_POINTS_A_2_PST)/2) / SPEC_POINTS_A_NSE #[np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SMU1'),0) for spec_res_file in FILES_A_BG]#' SNR UBIN SPC REG ALL'
				SPEC_POINTS_A_SNR2 = ((SPEC_POINTS_A_2_PRE + SPEC_POINTS_A_2_PST)/2) / SPEC_POINTS_A_NSE2 #[np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SMU2'),0) for spec_res_file in FILES_A_BG]#' SNR UBIN SPC REG CNT'
				SPEC_POINTS_A_SNR3 = ((SPEC_POINTS_A_2_PRE + SPEC_POINTS_A_2_PST)/2) / SPEC_POINTS_A_NSE3 #[np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SMU3'),0) for spec_res_file in FILES_A_BG]#' SNR UBIN SPC REG FIT'
				SPEC_POINTS_A_SNR4 = ((SPEC_POINTS_A_2_PRE + SPEC_POINTS_A_2_PST)/2) / SPEC_POINTS_A_NSE4 #[np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SMU4'),0) for spec_res_file in FILES_A_BG]#' SNR UBIN SPC REG PLT'
				SPEC_POINTS_A_SNR5 = ((SPEC_POINTS_A_2_PRE + SPEC_POINTS_A_2_PST)/2) / SPEC_POINTS_A_NSE5 #[np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SMB2'),0) for spec_res_file in FILES_A_BG]

				SPEC_POINTS_NMB2   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NHT') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_NMB3   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NHW') for spec_res_file in FILES_M_BG]

				SPEC_POINTS_NMB_A  = SPEC_POINTS_NMB
				SPEC_POINTS_NMB2_A = SPEC_POINTS_NMB2
				SPEC_POINTS_NMB3_A = SPEC_POINTS_NMB3

				print SPEC_POINTS_A_9

				##############CLEANING NON FIT VALUES ##############
				print
				print colored('Deleting Unfitted bins!','yellow')
				print colored('From:','yellow')
				print colored('AVG: '+str(SPEC_POINTS_A_9),'yellow')
				print

				indx_msk_avg       = (np.where(np.asarray(SPEC_POINTS_A_9)==999999.99999)[0])
				indx_msk_avg       = np.asarray(indx_msk_avg)
					
				if len(indx_msk_avg)>0:
					print colored('Points with FIT values (AVG): ' + str(999999.99999) +' :','yellow')
					print colored(([indx_msk_avg]),'yellow')
					print colored('Corresponding to ' + plt_nme_prp +' points: ','yellow')
					print colored(str(SPEC_SEP_VAR[indx_msk_avg]),'yellow')
					print
					print
				else:
					print colored('No Unfitted Values found (AVG)!','yellow')
					print

				SPEC_POINTS_A_9        = np.asarray(SPEC_POINTS_A_9)
				SPEC_POINTS_A_9        = np.delete(SPEC_POINTS_A_9,indx_msk_avg)

				SPEC_SEP_VAR_A         = SPEC_SEP_VAR
				SPEC_SEP_VAR_A         = np.delete(SPEC_SEP_VAR_A,indx_msk_avg)
				SPEC_SEP_VAR_BU        = np.delete(SPEC_SEP_VAR_BU,indx_msk_avg)

				SPEC_POINTS_NMB_A      = np.delete(SPEC_POINTS_NMB_A,indx_msk_avg)
				SPEC_POINTS_NMB2_A     = np.delete(SPEC_POINTS_NMB2_A,indx_msk_avg)
				SPEC_POINTS_NMB3_A     = np.delete(SPEC_POINTS_NMB3_A,indx_msk_avg)


				SPEC_POINTS_A_SNR      = np.delete(SPEC_POINTS_A_SNR,indx_msk_avg)
				SPEC_POINTS_A_SNR2     = np.delete(SPEC_POINTS_A_SNR2,indx_msk_avg)
				SPEC_POINTS_A_SNR3     = np.delete(SPEC_POINTS_A_SNR3,indx_msk_avg)
				SPEC_POINTS_A_SNR4     = np.delete(SPEC_POINTS_A_SNR4,indx_msk_avg)
				SPEC_POINTS_A_SNR5     = np.delete(SPEC_POINTS_A_SNR5,indx_msk_avg)

				SPEC_POINTS_A_9_AUX    = SPEC_POINTS_A_9

				SPEC_SEP_VAR_A_AUX     = SPEC_SEP_VAR_A
				SPEC_SEP_VAR_BU_AUX    = SPEC_SEP_VAR_BU

				SPEC_POINTS_NMB_A_AUX  = SPEC_POINTS_NMB_A
				SPEC_POINTS_NMB2_A_AUX = SPEC_POINTS_NMB2_A
				SPEC_POINTS_NMB3_A_AUX = SPEC_POINTS_NMB3_A

				SPEC_POINTS_A_SNR_AUX  = SPEC_POINTS_A_SNR
				SPEC_POINTS_A_SNR2_AUX = SPEC_POINTS_A_SNR2
				SPEC_POINTS_A_SNR3_AUX = SPEC_POINTS_A_SNR3
				SPEC_POINTS_A_SNR4_AUX = SPEC_POINTS_A_SNR4
				SPEC_POINTS_A_SNR5_AUX = SPEC_POINTS_A_SNR5
				##############CLEANING NON FIT VALUES ##############

				if cln_snr_mth == 1:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					pass
					SPEC_POINTS_A_SNR0     = SPEC_POINTS_A_SNR
					SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR_AUX
				elif cln_snr_mth == 2:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					pass
					SPEC_POINTS_A_SNR0     = SPEC_POINTS_A_SNR2
					SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR2_AUX
				elif cln_snr_mth == 3:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					pass
					SPEC_POINTS_A_SNR0     = SPEC_POINTS_A_SNR3
					SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR3_AUX
				elif cln_snr_mth == 4:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					pass
					SPEC_POINTS_A_SNR0     = SPEC_POINTS_A_SNR4
					SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR4_AUX
				else:
					SPEC_POINTS_A_SNR0     = SPEC_POINTS_A_SNR
					SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR_AUX
					print
					print colored('SNR method: ' + str(cln_snr_mth) + ' does not exist!','yellow')
					print colored('Assuming SNR method: 1','yellow')
					print
				#############CLEANING LOW SNR EW POINTS#############
				if cln_pts_snr == True:
					indx_msk_snr_avg   = (np.where(np.asarray(SPEC_POINTS_A_SNR0)<cln_snr_thr)[0])
					indx_msk_snr_avg   = np.asarray(indx_msk_snr_avg)

					print
					print colored('Cleaning points according their SNR!','yellow')
					print colored('From:','yellow')
					print colored('AVG: ' + str(SPEC_POINTS_A_SNR0),'yellow')
					print colored('SNR Computation Method : ' + str(cln_snr_mth),'yellow')
					print colored('Threshold value        : ' + str(cln_snr_thr),'yellow')
					print
					print
					print colored('Points with SNR < ' + str(cln_snr_thr) +' :','yellow')
					print colored('AVG-IDX: ' + str(indx_msk_snr_avg),'yellow')
					print colored('AVG-VAL: ' + str(SPEC_POINTS_A_SNR0[indx_msk_snr_avg]),'yellow')
					print colored('Corresponding to ' + plt_nme_prp +' points: ','yellow')
					print colored('AVG-VAR: ' + str(SPEC_SEP_VAR_A[indx_msk_snr_avg]),'yellow')
					print

					SPEC_POINTS_A_9    = np.delete(SPEC_POINTS_A_9,indx_msk_snr_avg)

					SPEC_SEP_VAR_A     = np.delete(SPEC_SEP_VAR_A,indx_msk_snr_avg)
					SPEC_SEP_VAR_BU    = np.delete(SPEC_SEP_VAR_BU,indx_msk_snr_avg)

					SPEC_POINTS_NMB_A  = np.delete(SPEC_POINTS_NMB_A,indx_msk_snr_avg)
					SPEC_POINTS_NMB2_A = np.delete(SPEC_POINTS_NMB2_A,indx_msk_snr_avg)
					SPEC_POINTS_NMB3_A = np.delete(SPEC_POINTS_NMB3_A,indx_msk_snr_avg)

					SPEC_POINTS_A_SNR0 = np.delete(SPEC_POINTS_A_SNR0,indx_msk_snr_avg)

					SPEC_POINTS_A_SNR  = np.delete(SPEC_POINTS_A_SNR,indx_msk_snr_avg)
					SPEC_POINTS_A_SNR2 = np.delete(SPEC_POINTS_A_SNR2,indx_msk_snr_avg)
					SPEC_POINTS_A_SNR3 = np.delete(SPEC_POINTS_A_SNR3,indx_msk_snr_avg)
					SPEC_POINTS_A_SNR4 = np.delete(SPEC_POINTS_A_SNR4,indx_msk_snr_avg)
					SPEC_POINTS_A_SNR5 = np.delete(SPEC_POINTS_A_SNR5,indx_msk_snr_avg)

					print
					print len(SPEC_POINTS_A_9),SPEC_POINTS_A_9
					print len(SPEC_SEP_VAR_A),SPEC_SEP_VAR_A
					print len(SPEC_SEP_VAR_BU),SPEC_SEP_VAR_BU
					print len(SPEC_POINTS_NMB_A),SPEC_POINTS_NMB_A
					print len(SPEC_POINTS_NMB2_A),SPEC_POINTS_NMB2_A
					print len(SPEC_POINTS_NMB3_A),SPEC_POINTS_NMB3_A
					print len(SPEC_POINTS_A_SNR),SPEC_POINTS_A_SNR
					print len(SPEC_POINTS_A_SNR2),SPEC_POINTS_A_SNR2
					print len(SPEC_POINTS_A_SNR3),SPEC_POINTS_A_SNR3
					print len(SPEC_POINTS_A_SNR4),SPEC_POINTS_A_SNR4
					print len(SPEC_POINTS_A_SNR5),SPEC_POINTS_A_SNR5
					print
				elif cln_pts_snr == False:
					pass
				#############CLEANING LOW SNR EW POINTS#############
				#######AUXILIARY MARKERS FOR LOW SNR EW POINTS######
				if cln_snr_aux == True:
					indx_msk_snr_avg_aux = (np.where(100<np.asarray(SPEC_POINTS_A_SNR0_AUX))[0])
					indx_msk_snr_avg_aux = np.asarray(indx_msk_snr_avg_aux)
					SPEC_POINTS_A_SNR0_AUX[indx_msk_snr_avg_aux]=0

					indx_msk_snr_avg_aux = (np.where((cln_snr_thr<=np.asarray(SPEC_POINTS_A_SNR0_AUX)) & (np.asarray(SPEC_POINTS_A_SNR0_AUX)<cln_snr_th2))[0])
					indx_msk_snr_avg_aux = np.asarray(indx_msk_snr_avg_aux)

					print
					print colored('Cleaning points according their SNR!','cyan')
					print colored('From:','cyan')
					print colored('AVG: ' + str(SPEC_POINTS_A_SNR0_AUX),'cyan')
					print colored('SNR Computation Method : ' + str(cln_snr_mth),'cyan')
					print colored('Threshold value        : ' + str(cln_snr_thr),'cyan')
					print colored('Threshold value (AUX)  : ' + str(cln_snr_th2),'cyan')
					print
					print
					print colored(str(cln_snr_thr) + '< Points with SNR < ' + str(cln_snr_th2) +' :','cyan')
					print colored('AVG-IDX: ' + str(indx_msk_snr_avg_aux) + ',' + str(SPEC_POINTS_A_SNR0_AUX[indx_msk_snr_avg_aux]),'cyan')
					print colored('AVG-VAL: ' + str(SPEC_POINTS_A_SNR0_AUX[indx_msk_snr_avg_aux]),'cyan')
					print colored('Corresponding to ' + plt_nme_prp +' points: ','cyan')
					print colored('AVG-VAR: ' + str(SPEC_SEP_VAR_A_AUX[indx_msk_snr_avg_aux]),'cyan')
					print

					if skip_fg_ref_ew == False:
						SPEC_SEP_VAR_A_AUX[0] = 1.0
						#SPEC_SEP_VAR_M_AUX[0] = 1.0
					else:
						pass

					SPEC_POINTS_A_9_AUX    = SPEC_POINTS_A_9_AUX[indx_msk_snr_avg_aux]

					SPEC_SEP_VAR_A_AUX     = SPEC_SEP_VAR_A_AUX[indx_msk_snr_avg_aux]
					SPEC_SEP_VAR_BU_AUX    = SPEC_SEP_VAR_BU_AUX[indx_msk_snr_avg_aux]

					SPEC_POINTS_NMB_A_AUX  = SPEC_POINTS_NMB_A_AUX[indx_msk_snr_avg_aux]
					SPEC_POINTS_NMB2_A_AUX = SPEC_POINTS_NMB2_A_AUX[indx_msk_snr_avg_aux]
					SPEC_POINTS_NMB3_A_AUX = SPEC_POINTS_NMB3_A_AUX[indx_msk_snr_avg_aux]

					SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR0_AUX[indx_msk_snr_avg_aux]

					SPEC_POINTS_A_SNR_AUX  = SPEC_POINTS_A_SNR_AUX[indx_msk_snr_avg_aux]
					SPEC_POINTS_A_SNR2_AUX = SPEC_POINTS_A_SNR2_AUX[indx_msk_snr_avg_aux]
					SPEC_POINTS_A_SNR3_AUX = SPEC_POINTS_A_SNR3_AUX[indx_msk_snr_avg_aux]
					SPEC_POINTS_A_SNR4_AUX = SPEC_POINTS_A_SNR4_AUX[indx_msk_snr_avg_aux]
					SPEC_POINTS_A_SNR5_AUX = SPEC_POINTS_A_SNR5_AUX[indx_msk_snr_avg_aux]
					#SPEC_POINTS_NMB2_AUX   = SPEC_POINTS_NMB2_AUX[indx_msk_snr_med_aux]
					#SPEC_POINTS_NMB3_AUX   = SPEC_POINTS_NMB3_AUX[indx_msk_snr_med_aux]

					print
					print len(SPEC_POINTS_A_9_AUX),SPEC_POINTS_A_9_AUX
					print len(SPEC_SEP_VAR_A_AUX),SPEC_SEP_VAR_A_AUX
					print len(SPEC_SEP_VAR_BU_AUX),SPEC_SEP_VAR_BU_AUX
					print len(SPEC_POINTS_NMB_A_AUX),SPEC_POINTS_NMB_A_AUX
					print len(SPEC_POINTS_NMB2_A_AUX),SPEC_POINTS_NMB2_A_AUX
					print len(SPEC_POINTS_NMB3_A_AUX),SPEC_POINTS_NMB3_A_AUX
					print len(SPEC_POINTS_A_SNR_AUX),SPEC_POINTS_A_SNR_AUX
					print len(SPEC_POINTS_A_SNR2_AUX),SPEC_POINTS_A_SNR2_AUX
					print len(SPEC_POINTS_A_SNR3_AUX),SPEC_POINTS_A_SNR3_AUX
					print len(SPEC_POINTS_A_SNR4_AUX),SPEC_POINTS_A_SNR4_AUX
					print len(SPEC_POINTS_A_SNR5_AUX),SPEC_POINTS_A_SNR5_AUX
					print
				elif cln_snr_aux == False:
					pass
				#######AUXILIARY MARKERS FOR LOW SNR EW POINTS######
			except KeyError:
				print
				print colored('Header Error! - L27942','yellow')
				print str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'C'
				print
				print 	'STK_NUM'
				print
				print str(LINES[5][lines])+'_SNU1'
				print str(LINES[5][lines])+'_SNU2'
				print str(LINES[5][lines])+'_SNU4'
				print str(LINES[5][lines])+'_SNB2'
				print
				print str(LINES[5][lines])+'_NHT'
				print str(LINES[5][lines])+'_NHW'					
				print
				print colored("\n".join([FILE for FILE in FILES_A_BG]),'yellow')
				print
				SPEC_POINTS_A_1  = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_2  = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_3  = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_4  = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_5  = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_6  = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_7  = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_8  = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_9  = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_10 = np.zeros([len(FILES_A_BG)])

				SPEC_POINTS_NMB    = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_SNR  = np.zeros([len(FILES_A_BG)])

				SPEC_POINTS_A_SNR2 = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_SNR3 = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_SNR4 = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_SNR5 = np.zeros([len(FILES_A_BG)])

				SPEC_POINTS_NMB2   = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_NMB3   = np.zeros([len(FILES_A_BG)])

				SPEC_POINTS_NMB_A  = SPEC_POINTS_NMB
				SPEC_POINTS_NMB2_A = SPEC_POINTS_NMB2
				SPEC_POINTS_NMB3_A = SPEC_POINTS_NMB3

				SPEC_POINTS_A_SNR  = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_SNR2 = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_SNR3 = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_SNR4 = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_SNR5 = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_NMB2   = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_NMB3   = np.zeros([len(FILES_A_BG)])				
		elif mlt_stk_fct == 'both' and fit_fnct == 'gaussM' and ems_lne_ctb == True:#stk_function_b	== True:
			print
			print colored('*********************************************************************************','cyan')
			print colored('********************************Emission Profile*********************************','cyan')
			print colored('*********************************************************************************','cyan')
			print

			try: 
				SPEC_POINTS_M_1  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CLOM') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_2  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_ALOM') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_3  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FLOM') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_4  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WLOM') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_5  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_ELOM') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_6  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CLCM') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_7  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_ALCM') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_8  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FLCM') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_9  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WLCM') for spec_res_file in FILES_M_BG]#TOTAL: _WTOT CTR: _WLCM
				SPEC_POINTS_M_10 = [Header_Get(spec_res_file,str(LINES[5][lines])+'_ELCM') for spec_res_file in FILES_M_BG]

				SPEC_POINTS_M_1_PRE = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CGL1')  for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_2_PRE = [Header_Get(spec_res_file,str(LINES[5][lines])+'_AGL1')  for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_3_PRE = [Header_Get(spec_res_file,str(LINES[5][lines])+'_SGL1')  for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_1_PST = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CGL2')  for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_2_PST = [Header_Get(spec_res_file,str(LINES[5][lines])+'_AGL2')  for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_3_PST = [Header_Get(spec_res_file,str(LINES[5][lines])+'_SGL2')  for spec_res_file in FILES_M_BG]

				SPEC_POINTS_M_9_PRE = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WGL1') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_9_PST = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WGL2') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_9     = np.asarray(SPEC_POINTS_M_9_PRE) + np.asarray(SPEC_POINTS_M_9_PST)
			except KeyError:
				pass
				print 'Header Error! - 37281'
				print str(LINES[5][lines])+'_CLOM'
				print str(LINES[5][lines])+'_ALOM'
				print str(LINES[5][lines])+'_FLOM'
				print str(LINES[5][lines])+'_WLOM'
				print str(LINES[5][lines])+'_ELOM'
				print str(LINES[5][lines])+'_CLCM'
				print str(LINES[5][lines])+'_ALCM'
				print str(LINES[5][lines])+'_FLCM'
				print str(LINES[5][lines])+'_WLCM'
				print str(LINES[5][lines])+'_ELCM'
				print str(LINES[5][lines])+'_CGL1'
				print str(LINES[5][lines])+'_AGL1'
				print str(LINES[5][lines])+'_SGL1'
				print str(LINES[5][lines])+'_CGL2'
				print str(LINES[5][lines])+'_AGL2'
				print str(LINES[5][lines])+'_SGL2'
				print str(LINES[5][lines])+'_WGL1'
				print str(LINES[5][lines])+'_WGL2'


				print colored("\n".join([FILE for FILE in FILES_M_BG]),'yellow')
				print
				print colored("\n".join([FILE for FILE in FILES_A_BG]),'yellow')
				print
				SPEC_POINTS_M_1     = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_2     = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_3     = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_4     = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_5     = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_6     = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_7     = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_8     = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_9     = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_10    = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_1_PRE = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_2_PRE = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_3_PRE = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_1_PST = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_2_PST = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_3_PST = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_9_PRE = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_9_PST = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_9     = np.zeros([len(FILES_M_BG)])
				quit()
			try:
				SPEC_POINTS_A_1  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CLOM') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_2  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_ALOM') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_3  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FLOM') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_4  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WLOM') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_5  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_ELOM') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_6  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CLCM') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_7  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_ALCM') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_8  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FLCM') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_9  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WLCM') for spec_res_file in FILES_A_BG]#TOTAL: _WTOT CTR: _WLCM
				SPEC_POINTS_A_10 = [Header_Get(spec_res_file,str(LINES[5][lines])+'_ELCM') for spec_res_file in FILES_A_BG]

				SPEC_POINTS_A_1_PRE = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CGL1')  for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_2_PRE = [Header_Get(spec_res_file,str(LINES[5][lines])+'_AGL1')  for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_3_PRE = [Header_Get(spec_res_file,str(LINES[5][lines])+'_SGL1')  for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_1_PST = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CGL2')  for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_2_PST = [Header_Get(spec_res_file,str(LINES[5][lines])+'_AGL2')  for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_3_PST = [Header_Get(spec_res_file,str(LINES[5][lines])+'_SGL2')  for spec_res_file in FILES_A_BG]

				SPEC_POINTS_A_9_PRE = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WGL1') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_9_PST = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WGL2') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_9     = np.asarray(SPEC_POINTS_A_9_PRE) + np.asarray(SPEC_POINTS_A_9_PST)
			except KeyError:
				pass
				print 'Header Error! - 37325'				
				print str(LINES[5][lines])+'_CLOM'
				print str(LINES[5][lines])+'_ALOM'
				print str(LINES[5][lines])+'_FLOM'
				print str(LINES[5][lines])+'_WLOM'
				print str(LINES[5][lines])+'_ELOM'
				print str(LINES[5][lines])+'_CLCM'
				print str(LINES[5][lines])+'_ALCM'
				print str(LINES[5][lines])+'_FLCM'
				print str(LINES[5][lines])+'_WLCM'
				print str(LINES[5][lines])+'_ELCM'
				print str(LINES[5][lines])+'_CGL1'
				print str(LINES[5][lines])+'_AGL1'
				print str(LINES[5][lines])+'_SGL1'
				print str(LINES[5][lines])+'_CGL2'
				print str(LINES[5][lines])+'_AGL2'
				print str(LINES[5][lines])+'_SGL2'
				print str(LINES[5][lines])+'_WGL1'
				print str(LINES[5][lines])+'_WGL2'

				SPEC_POINTS_A_1     = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_2     = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_3     = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_4     = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_5     = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_6     = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_7     = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_8     = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_9     = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_10    = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_1_PRE = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_2_PRE = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_3_PRE = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_1_PST = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_2_PST = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_3_PST = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_9_PRE = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_9_PST = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_A_9     = np.zeros([len(FILES_M_BG)])
				quit()
				##############################PRE-PST GUASS FIT FOR Dbl LINES##############################
				'''
				CTRE_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGM1')
				AMPL_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGM1')
				SGMA_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGM1')
				FWHM_G_C_PRE   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGM1')
				EW_C_PRE       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGM1')
				EWE_C_PRE      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGM1')
				CTRE_G_C_PRE_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_CME1')
				AMPL_G_C_PRE_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_AME1')
				SGMA_G_C_PRE_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_SME1')

				CTRE_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_CGM2')
				AMPL_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_AGM2')
				SGMA_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_SGM2')
				FWHM_G_C_PST   = Header_Get(specfile_glx,str(LINES[5][lines])+'_FGM2')
				EW_C_PST       = Header_Get(specfile_glx,str(LINES[5][lines])+'_WGM2')
				EWE_C_PST      = Header_Get(specfile_glx,str(LINES[5][lines])+'_EGM2')
				CTRE_G_C_PST_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_CME2')
				AMPL_G_C_PST_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_AME2')
				SGMA_G_C_PST_E = Header_Get(specfile_glx,str(LINES[5][lines])+'_SME2')
				'''
				##############################PRE-PST GUASS FIT FOR Dbl LINES##############################
			try:
				SPEC_POINTS_NMB    = [Header_Get(spec_res_file,'STK_NUM') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_NMB2   = [Header_Get(spec_res_file,str(LINES[5][lines]) + '_NHT') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_NMB3   = [Header_Get(spec_res_file,str(LINES[5][lines]) + '_NHW') for spec_res_file in FILES_A_BG]

				SPEC_POINTS_A_NSE  = [Header_Get(spec_res_file,str(LINES[5][lines]) +'_NMU1') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_NSE2 = [Header_Get(spec_res_file,str(LINES[5][lines]) +'_NMU2') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_NSE3 = [Header_Get(spec_res_file,str(LINES[5][lines]) +'_NMU3') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_NSE4 = [Header_Get(spec_res_file,str(LINES[5][lines]) +'_NMU4') for spec_res_file in FILES_A_BG]
				SPEC_POINTS_A_NSE5 = [Header_Get(spec_res_file,str(LINES[5][lines]) +'_NMB2') for spec_res_file in FILES_A_BG]

				SPEC_POINTS_NMB_A  = SPEC_POINTS_NMB
				SPEC_POINTS_NMB2_A = SPEC_POINTS_NMB2
				SPEC_POINTS_NMB3_A = SPEC_POINTS_NMB3			
			except KeyError:
				print
				print 'Heeaderr Error! - 37380'
				print 'STK_NUM'
				print str(LINES[5][lines]) + '_NMU1' 
				print str(LINES[5][lines]) + '_NMU2' 
				print str(LINES[5][lines]) + '_NMU3' 
				print str(LINES[5][lines]) + '_NMU4' 
				print str(LINES[5][lines]) + '_NMB2'
				print str(LINES[5][lines]) + '_NMB2'
				

				SPEC_POINTS_NMB    = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_NMB2   = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_NMB3   = np.zeros([len(FILES_A_BG)])

				SPEC_POINTS_A_NSE  = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_NSE2 = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_NSE3 = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_NSE4 = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_A_NSE5 = np.zeros([len(FILES_A_BG)])

				SPEC_POINTS_NMB_A  = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_NMB2_A = np.zeros([len(FILES_A_BG)])
				SPEC_POINTS_NMB3_A = np.zeros([len(FILES_A_BG)])
				quit()
			try:
				SPEC_POINTS_NMB    = [Header_Get(spec_res_file,'STK_NUM') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_NMB2   = [Header_Get(spec_res_file,str(LINES[5][lines]) + '_NHT') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_NMB3   = [Header_Get(spec_res_file,str(LINES[5][lines]) + '_NHW') for spec_res_file in FILES_M_BG]

				SPEC_POINTS_M_NSE  = [Header_Get(spec_res_file,str(LINES[5][lines]) + '_NMU1') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_NSE2 = [Header_Get(spec_res_file,str(LINES[5][lines]) + '_NMU2') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_NSE3 = [Header_Get(spec_res_file,str(LINES[5][lines]) + '_NMU3') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_NSE4 = [Header_Get(spec_res_file,str(LINES[5][lines]) + '_NMU4') for spec_res_file in FILES_M_BG]
				SPEC_POINTS_M_NSE5 = [Header_Get(spec_res_file,str(LINES[5][lines]) + '_NMB2') for spec_res_file in FILES_M_BG]

				SPEC_POINTS_NMB_M  = SPEC_POINTS_NMB
				SPEC_POINTS_NMB2_M = SPEC_POINTS_NMB2
				SPEC_POINTS_NMB3_M = SPEC_POINTS_NMB3	
			except KeyError:
				print
				print 'Heeaderr Error! - 37467'
				print 'STK_NUM'
				print str(LINES[5][lines]) + '_NHT'
				print str(LINES[5][lines]) + '_NHW'

				print str(LINES[5][lines]) + '_NMU1'
				print str(LINES[5][lines]) + '_NMU2'
				print str(LINES[5][lines]) + '_NMU3'
				print str(LINES[5][lines]) + '_NMU4'
				print str(LINES[5][lines]) + '_NMB2'

				SPEC_POINTS_NMB    = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_NMB2   = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_NMB3   = np.zeros([len(FILES_M_BG)])

				SPEC_POINTS_M_NSE  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_NSE2 = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_NSE3 = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_NSE4 = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_M_NSE5 = np.zeros([len(FILES_M_BG)])

				SPEC_POINTS_NMB_M  = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_NMB2_M = np.zeros([len(FILES_M_BG)])
				SPEC_POINTS_NMB3_M = np.zeros([len(FILES_M_BG)])
				quit()

			SPEC_POINTS_A_2_PRE    = np.asarray(SPEC_POINTS_A_2_PRE)
			SPEC_POINTS_A_2_PST    = np.asarray(SPEC_POINTS_A_2_PST)
			SPEC_POINTS_M_2_PRE    = np.asarray(SPEC_POINTS_M_2_PRE)
			SPEC_POINTS_M_2_PST    = np.asarray(SPEC_POINTS_M_2_PST)

			SPEC_POINTS_A_NSE      = np.asarray(SPEC_POINTS_A_NSE)
			SPEC_POINTS_M_NSE      = np.asarray(SPEC_POINTS_M_NSE)
			SPEC_POINTS_A_NSE2     = np.asarray(SPEC_POINTS_A_NSE2)
			SPEC_POINTS_M_NSE2     = np.asarray(SPEC_POINTS_M_NSE2)
			SPEC_POINTS_A_NSE3     = np.asarray(SPEC_POINTS_A_NSE3)
			SPEC_POINTS_M_NSE3     = np.asarray(SPEC_POINTS_M_NSE3)
			SPEC_POINTS_A_NSE4     = np.asarray(SPEC_POINTS_A_NSE4)
			SPEC_POINTS_M_NSE4     = np.asarray(SPEC_POINTS_M_NSE4)
			SPEC_POINTS_A_NSE5     = np.asarray(SPEC_POINTS_A_NSE5)
			SPEC_POINTS_M_NSE5     = np.asarray(SPEC_POINTS_M_NSE5)

			print SPEC_POINTS_A_2_PRE,len(SPEC_POINTS_A_2_PRE)
			print SPEC_POINTS_A_2_PST,len(SPEC_POINTS_A_2_PST)
			print SPEC_POINTS_A_NSE,len(SPEC_POINTS_A_NSE)		

			SPEC_POINTS_A_SNR  = ((SPEC_POINTS_A_2_PRE + SPEC_POINTS_A_2_PST)/2) / SPEC_POINTS_A_NSE #[np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SMU1'),0) for spec_res_file in FILES_A_BG]#' SNR UBIN SPC REG ALL'
			SPEC_POINTS_M_SNR  = ((SPEC_POINTS_M_2_PRE + SPEC_POINTS_M_2_PST)/2) / SPEC_POINTS_M_NSE #[np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SMU1'),0) for spec_res_file in FILES_M_BG]

			SPEC_POINTS_A_SNR2 = ((SPEC_POINTS_A_2_PRE + SPEC_POINTS_A_2_PST)/2) / SPEC_POINTS_A_NSE2 #[np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SMU2'),0) for spec_res_file in FILES_A_BG]#' SNR UBIN SPC REG CNT'
			SPEC_POINTS_M_SNR2 = ((SPEC_POINTS_M_2_PRE + SPEC_POINTS_M_2_PST)/2) / SPEC_POINTS_M_NSE2 #[np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SMU2'),0) for spec_res_file in FILES_M_BG]

			SPEC_POINTS_A_SNR3 = ((SPEC_POINTS_A_2_PRE + SPEC_POINTS_A_2_PST)/2) / SPEC_POINTS_A_NSE3 #[np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SMU3'),0) for spec_res_file in FILES_A_BG]#' SNR UBIN SPC REG FIT'
			SPEC_POINTS_M_SNR3 = ((SPEC_POINTS_M_2_PRE + SPEC_POINTS_M_2_PST)/2) / SPEC_POINTS_M_NSE3 #[np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SMU3'),0) for spec_res_file in FILES_M_BG]

			SPEC_POINTS_A_SNR4 = ((SPEC_POINTS_A_2_PRE + SPEC_POINTS_A_2_PST)/2) / SPEC_POINTS_A_NSE4 #[np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SMU4'),0) for spec_res_file in FILES_A_BG]#' SNR UBIN SPC REG PLT'
			SPEC_POINTS_M_SNR4 = ((SPEC_POINTS_M_2_PRE + SPEC_POINTS_M_2_PST)/2) / SPEC_POINTS_M_NSE4 #[np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SMU4'),0) for spec_res_file in FILES_M_BG]

			SPEC_POINTS_A_SNR5 = ((SPEC_POINTS_A_2_PRE + SPEC_POINTS_A_2_PST)/2) / SPEC_POINTS_A_NSE5 #[np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SMB2'),0) for spec_res_file in FILES_A_BG]
			SPEC_POINTS_M_SNR5 = ((SPEC_POINTS_M_2_PRE + SPEC_POINTS_M_2_PST)/2) / SPEC_POINTS_M_NSE5 #[np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SMB2'),0) for spec_res_file in FILES_M_BG]


			SPEC_POINTS_NMB_A  = SPEC_POINTS_NMB
			SPEC_POINTS_NMB2_A = SPEC_POINTS_NMB2
			SPEC_POINTS_NMB3_A = SPEC_POINTS_NMB3

			SPEC_POINTS_NMB_M  = SPEC_POINTS_NMB
			SPEC_POINTS_NMB2_M = SPEC_POINTS_NMB2
			SPEC_POINTS_NMB3_M = SPEC_POINTS_NMB3

			SPEC_POINTS_M_9    = SPEC_POINTS_M_9 * -1
			SPEC_POINTS_A_9    = SPEC_POINTS_A_9 * -1			

			##############CLEANING NON FIT VALUES ##############
			print
			print colored('Deleting Unfitted bins!','yellow')
			print colored('From:','yellow')
			print colored('MED: '+str(SPEC_POINTS_M_9),'yellow')
			print colored('AVG: '+str(SPEC_POINTS_A_9),'yellow')
			print

			indx_msk_med       = (np.where(np.asarray(SPEC_POINTS_M_9)==999999.99999)[0])
			indx_msk_avg       = (np.where(np.asarray(SPEC_POINTS_A_9)==999999.99999)[0])
			indx_msk_med       = np.asarray(indx_msk_med)			
			indx_msk_avg       = np.asarray(indx_msk_avg)

			if len(indx_msk_med)>0:
				print colored('Points with FIT values (MED): ' + str(999999.99999) +' :','yellow')
				print colored(([indx_msk_med]),'yellow')
				print colored('Corresponding to ' + plt_nme_prp +' points: ','yellow')
				print colored(str(SPEC_SEP_VAR[indx_msk_med]),'yellow')
				print
			else:
				print colored('No Unfitted Values found (MED)!','yellow')
				print
				
			if len(indx_msk_avg)>0:
				print colored('Points with FIT values (AVG): ' + str(999999.99999) +' :','yellow')
				print colored(([indx_msk_avg]),'yellow')
				print colored('Corresponding to ' + plt_nme_prp +' points: ','yellow')
				print colored(str(SPEC_SEP_VAR[indx_msk_avg]),'yellow')
				print
				print
			else:
				print colored('No Unfitted Values found (AVG)!','yellow')
				print

			SPEC_POINTS_M_9    = np.asarray(SPEC_POINTS_M_9)
			SPEC_POINTS_A_9    = np.asarray(SPEC_POINTS_A_9)
			SPEC_POINTS_M_9    = np.delete(SPEC_POINTS_M_9,indx_msk_med)
			SPEC_POINTS_A_9    = np.delete(SPEC_POINTS_A_9,indx_msk_avg)

			SPEC_SEP_VAR_M     = SPEC_SEP_VAR
			SPEC_SEP_VAR_A     = SPEC_SEP_VAR
			SPEC_SEP_VAR_M     = np.delete(SPEC_SEP_VAR_M,indx_msk_med)
			SPEC_SEP_VAR_A     = np.delete(SPEC_SEP_VAR_A,indx_msk_avg)
			SPEC_SEP_VAR_BU    = np.delete(SPEC_SEP_VAR_BU,indx_msk_avg)

			SPEC_POINTS_NMB_A  = np.delete(SPEC_POINTS_NMB_A,indx_msk_avg)
			SPEC_POINTS_NMB2_A = np.delete(SPEC_POINTS_NMB2_A,indx_msk_avg)
			SPEC_POINTS_NMB3_A = np.delete(SPEC_POINTS_NMB3_A,indx_msk_avg)

			SPEC_POINTS_NMB_M  = np.delete(SPEC_POINTS_NMB_M,indx_msk_med)
			SPEC_POINTS_NMB2_M = np.delete(SPEC_POINTS_NMB2_M,indx_msk_med)
			SPEC_POINTS_NMB3_M = np.delete(SPEC_POINTS_NMB3_M,indx_msk_med)

			SPEC_POINTS_A_SNR  = np.delete(SPEC_POINTS_A_SNR,indx_msk_avg)
			SPEC_POINTS_M_SNR  = np.delete(SPEC_POINTS_M_SNR,indx_msk_med)
			SPEC_POINTS_A_SNR2 = np.delete(SPEC_POINTS_A_SNR2,indx_msk_avg)
			SPEC_POINTS_M_SNR2 = np.delete(SPEC_POINTS_M_SNR2,indx_msk_med)
			SPEC_POINTS_A_SNR3 = np.delete(SPEC_POINTS_A_SNR3,indx_msk_avg)
			SPEC_POINTS_M_SNR3 = np.delete(SPEC_POINTS_M_SNR3,indx_msk_med)
			SPEC_POINTS_A_SNR4 = np.delete(SPEC_POINTS_A_SNR4,indx_msk_avg)
			SPEC_POINTS_M_SNR4 = np.delete(SPEC_POINTS_M_SNR4,indx_msk_med)
			SPEC_POINTS_A_SNR5 = np.delete(SPEC_POINTS_A_SNR5,indx_msk_avg)
			SPEC_POINTS_M_SNR5 = np.delete(SPEC_POINTS_M_SNR5,indx_msk_med)
			SPEC_POINTS_NMB2   = np.delete(SPEC_POINTS_NMB2,indx_msk_med)
			SPEC_POINTS_NMB3   = np.delete(SPEC_POINTS_NMB3,indx_msk_med)


			SPEC_POINTS_M_9_AUX    = SPEC_POINTS_M_9 
			SPEC_POINTS_A_9_AUX    = SPEC_POINTS_A_9 

			SPEC_SEP_VAR_M_AUX     = SPEC_SEP_VAR_M 
			SPEC_SEP_VAR_A_AUX     = SPEC_SEP_VAR_A 
			SPEC_SEP_VAR_BU_AUX    = SPEC_SEP_VAR_BU 

			SPEC_POINTS_NMB_A_AUX  = SPEC_POINTS_NMB_A 
			SPEC_POINTS_NMB2_A_AUX = SPEC_POINTS_NMB2_A 
			SPEC_POINTS_NMB3_A_AUX = SPEC_POINTS_NMB3_A 

			SPEC_POINTS_NMB_M_AUX  = SPEC_POINTS_NMB_M 
			SPEC_POINTS_NMB2_M_AUX = SPEC_POINTS_NMB2_M 
			SPEC_POINTS_NMB3_M_AUX = SPEC_POINTS_NMB3_M 

			SPEC_POINTS_A_SNR_AUX  = SPEC_POINTS_A_SNR 
			SPEC_POINTS_M_SNR_AUX  = SPEC_POINTS_M_SNR 
			SPEC_POINTS_A_SNR2_AUX = SPEC_POINTS_A_SNR2 
			SPEC_POINTS_M_SNR2_AUX = SPEC_POINTS_M_SNR2 
			SPEC_POINTS_A_SNR3_AUX = SPEC_POINTS_A_SNR3 
			SPEC_POINTS_M_SNR3_AUX = SPEC_POINTS_M_SNR3 
			SPEC_POINTS_A_SNR4_AUX = SPEC_POINTS_A_SNR4 
			SPEC_POINTS_M_SNR4_AUX = SPEC_POINTS_M_SNR4 
			SPEC_POINTS_A_SNR5_AUX = SPEC_POINTS_A_SNR5 
			SPEC_POINTS_M_SNR5_AUX = SPEC_POINTS_M_SNR5 
			SPEC_POINTS_NMB2_AUX   = SPEC_POINTS_NMB2 
			SPEC_POINTS_NMB3_AUX   = SPEC_POINTS_NMB3 
			##############CLEANING NON FIT VALUES ##############
			if cln_snr_mth == 1:
				print
				print colored('SNR method: ' + str(cln_snr_mth),'yellow')
				print
				pass
				SPEC_POINTS_M_SNR0     = SPEC_POINTS_M_SNR
				SPEC_POINTS_A_SNR0     = SPEC_POINTS_A_SNR
				SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR_AUX
				SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR_AUX

			elif cln_snr_mth == 2:
				print
				print colored('SNR method: ' + str(cln_snr_mth),'yellow')
				print
				pass
				SPEC_POINTS_M_SNR0     = SPEC_POINTS_M_SNR2
				SPEC_POINTS_A_SNR0     = SPEC_POINTS_A_SNR2
				SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR2_AUX
				SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR2_AUX

			elif cln_snr_mth == 3:
				print
				print colored('SNR method: ' + str(cln_snr_mth),'yellow')
				print
				pass
				SPEC_POINTS_M_SNR0     = SPEC_POINTS_M_SNR3
				SPEC_POINTS_A_SNR0     = SPEC_POINTS_A_SNR3
				SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR3_AUX
				SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR3_AUX

			elif cln_snr_mth == 4:
				print
				print colored('SNR method: ' + str(cln_snr_mth),'yellow')
				print
				pass
				SPEC_POINTS_M_SNR0     = SPEC_POINTS_M_SNR4
				SPEC_POINTS_A_SNR0     = SPEC_POINTS_A_SNR4
				SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR4_AUX
				SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR4_AUX

			else:
				SPEC_POINTS_M_SNR0     = SPEC_POINTS_M_SNR
				SPEC_POINTS_A_SNR0     = SPEC_POINTS_A_SNR
				SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR_AUX
				SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR_AUX

				print
				print colored('SNR method: ' + str(cln_snr_mth) + ' does not exist!','yellow')
				print colored('Assuming SNR method: 1','yellow')
				print
			#############CLEANING LOW SNR EW POINTS#############
			if cln_pts_snr == True:
				indx_msk_snr_med   = (np.where(100<np.asarray(SPEC_POINTS_M_SNR0))[0])
				indx_msk_snr_avg   = (np.where(100<np.asarray(SPEC_POINTS_A_SNR0))[0])
				indx_msk_snr_med   = np.asarray(indx_msk_snr_med)			
				indx_msk_snr_avg   = np.asarray(indx_msk_snr_avg)
				SPEC_POINTS_M_SNR0[indx_msk_snr_med]=0
				SPEC_POINTS_A_SNR0[indx_msk_snr_avg]=0

				indx_msk_snr_med   = (np.where(np.asarray(SPEC_POINTS_M_SNR0)<cln_snr_thr)[0])
				indx_msk_snr_avg   = (np.where(np.asarray(SPEC_POINTS_A_SNR0)<cln_snr_thr)[0])
				indx_msk_snr_med   = np.asarray(indx_msk_snr_med)			
				indx_msk_snr_avg   = np.asarray(indx_msk_snr_avg)

				print
				print colored('Cleaning points according their SNR!','yellow')
				print colored('From:','yellow')
				print colored('AVG: ' + str(SPEC_POINTS_A_SNR0),'yellow')
				print colored('MED: ' + str(SPEC_POINTS_M_SNR0),'yellow')
				print colored('SNR Computation Method : ' + str(cln_snr_mth),'yellow')
				print colored('Threshold value        : ' + str(cln_snr_thr),'yellow')
				print
				print
				print colored('Points with SNR < ' + str(cln_snr_thr) +' :','yellow')
				print colored('AVG-IDX: ' + str(indx_msk_snr_avg),'yellow')
				print colored('MED-IDX: ' + str(indx_msk_snr_med),'yellow')
				print colored('AVG-VAL: ' + str(SPEC_POINTS_A_SNR0[indx_msk_snr_avg]),'yellow')
				print colored('MED-VAL: ' + str(SPEC_POINTS_M_SNR0[indx_msk_snr_med]),'yellow')
				print colored('Corresponding to ' + plt_nme_prp +' points: ','yellow')
				print colored('AVG-VAR: ' + str(SPEC_SEP_VAR_A[indx_msk_snr_avg]),'yellow')
				print colored('MED-VAR: ' + str(SPEC_SEP_VAR_M[indx_msk_snr_med]),'yellow')
				print

				SPEC_POINTS_A_9    = np.delete(SPEC_POINTS_A_9,indx_msk_snr_avg)
				SPEC_POINTS_M_9    = np.delete(SPEC_POINTS_M_9,indx_msk_snr_med)

				SPEC_SEP_VAR_A     = np.delete(SPEC_SEP_VAR_A,indx_msk_snr_avg)
				SPEC_SEP_VAR_M     = np.delete(SPEC_SEP_VAR_M,indx_msk_snr_med)
				SPEC_SEP_VAR_BU    = np.delete(SPEC_SEP_VAR_BU,indx_msk_snr_avg)

				SPEC_POINTS_NMB_A  = np.delete(SPEC_POINTS_NMB_A,indx_msk_snr_avg)
				SPEC_POINTS_NMB2_A = np.delete(SPEC_POINTS_NMB2_A,indx_msk_snr_avg)
				SPEC_POINTS_NMB3_A = np.delete(SPEC_POINTS_NMB3_A,indx_msk_snr_avg)

				SPEC_POINTS_NMB_M  = np.delete(SPEC_POINTS_NMB_M,indx_msk_snr_med)
				SPEC_POINTS_NMB2_M = np.delete(SPEC_POINTS_NMB2_M,indx_msk_snr_med)
				SPEC_POINTS_NMB3_M = np.delete(SPEC_POINTS_NMB3_M,indx_msk_snr_med)

				SPEC_POINTS_A_SNR0 = np.delete(SPEC_POINTS_A_SNR0,indx_msk_snr_avg)
				SPEC_POINTS_M_SNR0 = np.delete(SPEC_POINTS_M_SNR0,indx_msk_snr_med)

				SPEC_POINTS_A_SNR  = np.delete(SPEC_POINTS_A_SNR,indx_msk_snr_avg)
				SPEC_POINTS_M_SNR  = np.delete(SPEC_POINTS_M_SNR,indx_msk_snr_med)
				SPEC_POINTS_A_SNR2 = np.delete(SPEC_POINTS_A_SNR2,indx_msk_snr_avg)
				SPEC_POINTS_M_SNR2 = np.delete(SPEC_POINTS_M_SNR2,indx_msk_snr_med)
				SPEC_POINTS_A_SNR3 = np.delete(SPEC_POINTS_A_SNR3,indx_msk_snr_avg)
				SPEC_POINTS_M_SNR3 = np.delete(SPEC_POINTS_M_SNR3,indx_msk_snr_med)
				SPEC_POINTS_A_SNR4 = np.delete(SPEC_POINTS_A_SNR4,indx_msk_snr_avg)
				SPEC_POINTS_M_SNR4 = np.delete(SPEC_POINTS_M_SNR4,indx_msk_snr_med)
				SPEC_POINTS_A_SNR5 = np.delete(SPEC_POINTS_A_SNR5,indx_msk_snr_avg)
				SPEC_POINTS_M_SNR5 = np.delete(SPEC_POINTS_M_SNR5,indx_msk_snr_med)
				#SPEC_POINTS_NMB2   = np.delete(SPEC_POINTS_NMB2,indx_msk_snr_med)
				#SPEC_POINTS_NMB3   = np.delete(SPEC_POINTS_NMB3,indx_msk_snr_med)

				print
				print len(SPEC_POINTS_A_9),SPEC_POINTS_A_9
				print len(SPEC_SEP_VAR_A),SPEC_SEP_VAR_A
				print len(SPEC_SEP_VAR_BU),SPEC_SEP_VAR_BU
				print len(SPEC_POINTS_NMB_A),SPEC_POINTS_NMB_A
				print len(SPEC_POINTS_NMB2_A),SPEC_POINTS_NMB2_A
				print len(SPEC_POINTS_NMB3_A),SPEC_POINTS_NMB3_A
				print len(SPEC_POINTS_A_SNR),SPEC_POINTS_A_SNR
				print len(SPEC_POINTS_A_SNR2),SPEC_POINTS_A_SNR2
				print len(SPEC_POINTS_A_SNR3),SPEC_POINTS_A_SNR3
				print len(SPEC_POINTS_A_SNR4),SPEC_POINTS_A_SNR4
				print len(SPEC_POINTS_A_SNR5),SPEC_POINTS_A_SNR5
				print
				print len(SPEC_POINTS_M_9),SPEC_POINTS_M_9
				print len(SPEC_SEP_VAR_M),SPEC_SEP_VAR_M
				print len(SPEC_POINTS_NMB_M),SPEC_POINTS_NMB_M,indx_msk_snr_med
				print len(SPEC_POINTS_NMB2_M),SPEC_POINTS_NMB2_M
				print len(SPEC_POINTS_NMB3_M),SPEC_POINTS_NMB3_M
				print len(SPEC_POINTS_M_SNR),SPEC_POINTS_M_SNR
				print len(SPEC_POINTS_M_SNR2),SPEC_POINTS_M_SNR2
				print len(SPEC_POINTS_M_SNR3),SPEC_POINTS_M_SNR3
				print len(SPEC_POINTS_M_SNR4),SPEC_POINTS_M_SNR4
				print len(SPEC_POINTS_M_SNR5),SPEC_POINTS_M_SNR5					
				print
			elif cln_pts_snr == False:
				pass
			#############CLEANING LOW SNR EW POINTS#############
			#######AUXILIARY MARKERS FOR LOW SNR EW POINTS######
			if cln_snr_aux == True:
				indx_msk_snr_med_aux = (np.where(100<np.asarray(SPEC_POINTS_M_SNR0_AUX))[0])
				indx_msk_snr_avg_aux = (np.where(100<np.asarray(SPEC_POINTS_A_SNR0_AUX))[0])
				indx_msk_snr_med_aux = np.asarray(indx_msk_snr_med_aux)			
				indx_msk_snr_avg_aux = np.asarray(indx_msk_snr_avg_aux)
				SPEC_POINTS_M_SNR0_AUX[indx_msk_snr_med_aux]=0
				SPEC_POINTS_A_SNR0_AUX[indx_msk_snr_avg_aux]=0

				indx_msk_snr_med_aux = (np.where((cln_snr_thr<=np.asarray(SPEC_POINTS_M_SNR0_AUX)) & (np.asarray(SPEC_POINTS_M_SNR0_AUX)<cln_snr_th2))[0])
				indx_msk_snr_avg_aux = (np.where((cln_snr_thr<=np.asarray(SPEC_POINTS_A_SNR0_AUX)) & (np.asarray(SPEC_POINTS_A_SNR0_AUX)<cln_snr_th2))[0])
				indx_msk_snr_med_aux = np.asarray(indx_msk_snr_med_aux)			
				indx_msk_snr_avg_aux = np.asarray(indx_msk_snr_avg_aux)

				print
				print colored('Cleaning points according their SNR!','cyan')
				print colored('From:','cyan')
				print colored('AVG (SEP) : '+ str(SPEC_SEP_VAR_A_AUX),'cyan')
				print colored('AVG: ' + str(SPEC_POINTS_A_SNR0_AUX),'cyan')
				print colored('MED (SEP) : '+ str(SPEC_SEP_VAR_M_AUX),'cyan')
				print colored('MED: ' + str(SPEC_POINTS_M_SNR0_AUX),'cyan')
				print colored('SNR Computation Method : ' + str(cln_snr_mth),'cyan')
				print colored('Threshold value        : ' + str(cln_snr_thr),'cyan')
				print colored('Threshold value (AUX)  : ' + str(cln_snr_th2),'cyan')
				print
				print
				print colored(str(cln_snr_thr) + '< Points with SNR < ' + str(cln_snr_th2) +' :','cyan')
				print colored('AVG-IDX: ' + str(indx_msk_snr_avg_aux) + ',' + str(SPEC_POINTS_A_SNR0_AUX[indx_msk_snr_avg_aux]),'cyan')
				print colored('MED-IDX: ' + str(indx_msk_snr_med_aux) + ',' + str(SPEC_POINTS_M_SNR0_AUX[indx_msk_snr_med_aux]),'cyan')
				print colored('AVG-VAL: ' + str(SPEC_POINTS_A_SNR0_AUX[indx_msk_snr_avg_aux]),'cyan')
				print colored('MED-VAL: ' + str(SPEC_POINTS_M_SNR0_AUX[indx_msk_snr_med_aux]),'cyan')
				print colored('Corresponding to ' + plt_nme_prp +' points: ','cyan')
				print colored('AVG-VAR: ' + str(SPEC_SEP_VAR_A_AUX[indx_msk_snr_avg_aux]),'cyan')
				print colored('MED-VAR: ' + str(SPEC_SEP_VAR_M_AUX[indx_msk_snr_med_aux]),'cyan')
				print
				print '****'

				if skip_fg_ref_ew == False:
					SPEC_SEP_VAR_A_AUX[0] = 1.0
					SPEC_SEP_VAR_M_AUX[0] = 1.0
				else:
					pass

				SPEC_POINTS_A_9_AUX    = SPEC_POINTS_A_9_AUX[indx_msk_snr_avg_aux]
				SPEC_POINTS_M_9_AUX    = SPEC_POINTS_M_9_AUX[indx_msk_snr_med_aux]

				SPEC_SEP_VAR_A_AUX     = SPEC_SEP_VAR_A_AUX[indx_msk_snr_avg_aux]
				SPEC_SEP_VAR_M_AUX     = SPEC_SEP_VAR_M_AUX[indx_msk_snr_med_aux]
				SPEC_SEP_VAR_BU_AUX    = SPEC_SEP_VAR_BU_AUX[indx_msk_snr_avg_aux]

				SPEC_POINTS_NMB_A_AUX  = SPEC_POINTS_NMB_A_AUX[indx_msk_snr_avg_aux]
				SPEC_POINTS_NMB2_A_AUX = SPEC_POINTS_NMB2_A_AUX[indx_msk_snr_avg_aux]
				SPEC_POINTS_NMB3_A_AUX = SPEC_POINTS_NMB3_A_AUX[indx_msk_snr_avg_aux]

				SPEC_POINTS_NMB_M_AUX  = SPEC_POINTS_NMB_M_AUX[indx_msk_snr_med_aux]
				SPEC_POINTS_NMB2_M_AUX = SPEC_POINTS_NMB2_M_AUX[indx_msk_snr_med_aux]
				SPEC_POINTS_NMB3_M_AUX = SPEC_POINTS_NMB3_M_AUX[indx_msk_snr_med_aux]

				SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR0_AUX[indx_msk_snr_avg_aux]
				SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR0_AUX[indx_msk_snr_med_aux]

				SPEC_POINTS_A_SNR_AUX  = SPEC_POINTS_A_SNR_AUX[indx_msk_snr_avg_aux]
				SPEC_POINTS_M_SNR_AUX  = SPEC_POINTS_M_SNR_AUX[indx_msk_snr_med_aux]
				SPEC_POINTS_A_SNR2_AUX = SPEC_POINTS_A_SNR2_AUX[indx_msk_snr_avg_aux]
				SPEC_POINTS_M_SNR2_AUX = SPEC_POINTS_M_SNR2_AUX[indx_msk_snr_med_aux]
				SPEC_POINTS_A_SNR3_AUX = SPEC_POINTS_A_SNR3_AUX[indx_msk_snr_avg_aux]
				SPEC_POINTS_M_SNR3_AUX = SPEC_POINTS_M_SNR3_AUX[indx_msk_snr_med_aux]
				SPEC_POINTS_A_SNR4_AUX = SPEC_POINTS_A_SNR4_AUX[indx_msk_snr_avg_aux]
				SPEC_POINTS_M_SNR4_AUX = SPEC_POINTS_M_SNR4_AUX[indx_msk_snr_med_aux]
				SPEC_POINTS_A_SNR5_AUX = SPEC_POINTS_A_SNR5_AUX[indx_msk_snr_avg_aux]
				SPEC_POINTS_M_SNR5_AUX = SPEC_POINTS_M_SNR5_AUX[indx_msk_snr_med_aux]
				#SPEC_POINTS_NMB2_AUX   = SPEC_POINTS_NMB2_AUX[indx_msk_snr_med_aux]
				#SPEC_POINTS_NMB3_AUX   = SPEC_POINTS_NMB3_AUX[indx_msk_snr_med_aux]

				print
				print len(SPEC_POINTS_A_9_AUX),SPEC_POINTS_A_9_AUX
				print len(SPEC_SEP_VAR_A_AUX),SPEC_SEP_VAR_A_AUX
				print len(SPEC_SEP_VAR_BU_AUX),SPEC_SEP_VAR_BU_AUX
				print len(SPEC_POINTS_NMB_A_AUX),SPEC_POINTS_NMB_A_AUX
				print len(SPEC_POINTS_NMB2_A_AUX),SPEC_POINTS_NMB2_A_AUX
				print len(SPEC_POINTS_NMB3_A_AUX),SPEC_POINTS_NMB3_A_AUX
				print len(SPEC_POINTS_A_SNR_AUX),SPEC_POINTS_A_SNR_AUX
				print len(SPEC_POINTS_A_SNR2_AUX),SPEC_POINTS_A_SNR2_AUX
				print len(SPEC_POINTS_A_SNR3_AUX),SPEC_POINTS_A_SNR3_AUX
				print len(SPEC_POINTS_A_SNR4_AUX),SPEC_POINTS_A_SNR4_AUX
				print len(SPEC_POINTS_A_SNR5_AUX),SPEC_POINTS_A_SNR5_AUX
				print
				print len(SPEC_POINTS_M_9_AUX),SPEC_POINTS_M_9_AUX
				print len(SPEC_SEP_VAR_M_AUX),SPEC_SEP_VAR_M_AUX
				print len(SPEC_POINTS_NMB_M_AUX),SPEC_POINTS_NMB_M_AUX
				print len(SPEC_POINTS_NMB2_M_AUX),SPEC_POINTS_NMB2_M_AUX
				print len(SPEC_POINTS_NMB3_M_AUX),SPEC_POINTS_NMB3_M_AUX
				print len(SPEC_POINTS_M_SNR_AUX),SPEC_POINTS_M_SNR_AUX
				print len(SPEC_POINTS_M_SNR2_AUX),SPEC_POINTS_M_SNR2_AUX
				print len(SPEC_POINTS_M_SNR3_AUX),SPEC_POINTS_M_SNR3_AUX
				print len(SPEC_POINTS_M_SNR4_AUX),SPEC_POINTS_M_SNR4_AUX
				print len(SPEC_POINTS_M_SNR5_AUX),SPEC_POINTS_M_SNR5_AUX
				print
			elif cln_snr_aux == False:
				pass
		else:
			pass

		if skip_fg_ref_ew == False and mlt_stk_fct == 'med':
			SPEC_SEP_VAR_M[0]    = 1.0
		elif skip_fg_ref_ew == False and mlt_stk_fct == 'avg':
			pass
			SPEC_SEP_VAR_A[0]     = 1.0
		elif skip_fg_ref_ew == False and mlt_stk_fct == 'both':
			print
			print '%%%%%%%%%%%%%%%%%%%'
			print SPEC_SEP_VAR_M
			print np.asarray(SPEC_SEP_VAR_M)
			print len(np.asarray(SPEC_SEP_VAR_M))
			print '%%%%%%%%%%%%%%%%%%%'
			print
			if len(np.asarray(SPEC_SEP_VAR_M))== 0:
				#SPEC_SEP_VAR_M = [1.0]
				#SPEC_SEP_VAR_M = np.asarray(SPEC_SEP_VAR_M)
				pass
			else:
				SPEC_SEP_VAR_M[0]     = 1.0
			print
			print '%%%%%%%%%%%%%%%%%%%'
			print SPEC_SEP_VAR_M
			print np.asarray(SPEC_SEP_VAR_M)
			print len(np.asarray(SPEC_SEP_VAR_M))
			print '%%%%%%%%%%%%%%%%%%%'
			print
			print
			print '%%%%%%%%%%%%%%%%%%%'
			print SPEC_SEP_VAR_A
			print np.asarray(SPEC_SEP_VAR_A)
			print len(np.asarray(SPEC_SEP_VAR_A))
			print '%%%%%%%%%%%%%%%%%%%'
			print			
			if len(np.asarray(SPEC_SEP_VAR_A))== 0:
				#SPEC_SEP_VAR_A = [1.0]
				#SPEC_SEP_VAR_A = np.asarray(SPEC_SEP_VAR_A)
				pass
			else:
				SPEC_SEP_VAR_A[0]     = 1.0
			print
			print '%%%%%%%%%%%%%%%%%%%'
			print SPEC_SEP_VAR_A
			print np.asarray(SPEC_SEP_VAR_A)
			print len(np.asarray(SPEC_SEP_VAR_A))
			print '%%%%%%%%%%%%%%%%%%%'
			print
		else:
			pass
		lmb_min_lim_line_ft = LINES[0][lines] - MSK_NTMS*LINES[1][lines]
		lmb_max_lim_line_ft = LINES[0][lines] + MSK_NTMS*LINES[1][lines]
		lmb_min_lim_line    = LINES[0][lines]*(1+z_glx_Ps) - LINES[2][lines]#- 20#LINES[2][lines] - 10
		lmb_max_lim_line    = LINES[0][lines]*(1+z_glx_Ps) + LINES[2][lines]#+ 20#LINES[2][lines] + 10

		###############################################TABLE ERRORS FROM BOOTSTRAP####################################################
		if   bst_err_plt == True and mlt_stk_fct == 'both' and fit_fnct == 'gauss'  and ems_lne_ctb == False:#stk_function_b == True:
			TBL_BS_STT_M =[]
			TBL_BS_STT_A =[]

			if skip_fg_ref_ew == False:
				print
				print FILES_M_BG[0]
				print FILES_A_BG[0]
				print (FILES_M_BG[0].rsplit('/',1)[1]).split('-stk',1)[0]
				print (FILES_A_BG[0].rsplit('/',1)[1]).split('-stk',1)[0]
				print

				pfx_med = (FILES_M_BG[0].rsplit('/',1)[1]).split(splt_smpl_sfx,1)[0] + splt_smpl_sfx + '-'
				pfx_avg = (FILES_A_BG[0].rsplit('/',1)[1]).split(splt_smpl_sfx,1)[0] + splt_smpl_sfx + '-'
				cur_tbl_bs_stt_1 = stt_bst_tbl + pfx_med + str(slc_int_fg[-1]) +'-BS-'+ str(bst_itr_nmb) + '-stk-med' +stk_function +'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gauss.csv'
				cur_tbl_bs_stt_2 = stt_bst_tbl + pfx_avg + str(slc_int_fg[-1]) +'-BS-'+ str(bst_itr_nmb) + '-stk-avg' +stk_function +'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gauss.csv'

				TBL_BS_STT_M.append(cur_tbl_bs_stt_1)
				TBL_BS_STT_A.append(cur_tbl_bs_stt_2)
			elif skip_fg_ref_ew == True:
				print
				print colored('Omitting FG EW value in the PLOT!','yellow')
				print					
				pass

			for interval_range in range(lower_shift,len(slc_int_bg)-upper_shift):
				pfx_med = (FILES_M_BG[1].rsplit('/',1)[1]).split(splt_smpl_sfx,1)[0] + splt_smpl_sfx + '-'
				pfx_avg = (FILES_A_BG[1].rsplit('/',1)[1]).split(splt_smpl_sfx,1)[0] + splt_smpl_sfx + '-'
				cur_tbl_bs_stt_1 = stt_bst_tbl + pfx_med + str(slc_int_fg[interval_range]) +'-BS-'+ str(bst_itr_nmb) + '-stk-med' +stk_function +'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gauss.csv'
				cur_tbl_bs_stt_2 = stt_bst_tbl + pfx_avg + str(slc_int_fg[interval_range]) +'-BS-'+ str(bst_itr_nmb) + '-stk-avg' +stk_function +'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gauss.csv'
				TBL_BS_STT_M.append(cur_tbl_bs_stt_1)
				TBL_BS_STT_A.append(cur_tbl_bs_stt_2)
			print 
			print colored('BS Errors from tables:','yellow')
			print
			print colored("\n".join([TABLE for TABLE in TBL_BS_STT_M]),'blue')
			print
			print colored("\n".join([TABLE for TABLE in TBL_BS_STT_A]),'red')
			print

			SPEC_POINTS_M_9_ERR=[]
			SPEC_POINTS_A_9_ERR=[]
			SPEC_POINTS_M_9_ERR.append((([Confident_Intervals(tbl_cdf_file,tbl_format_ipt,cdf2bobt_lne=str(LINES[3][lines]),cdf_2b_rtrn='1sgm',rmv_uft_spc=rmv_uft_spc) for tbl_cdf_file in TBL_BS_STT_M])))
			SPEC_POINTS_A_9_ERR.append((([Confident_Intervals(tbl_cdf_file,tbl_format_ipt,cdf2bobt_lne=str(LINES[3][lines]),cdf_2b_rtrn='1sgm',rmv_uft_spc=rmv_uft_spc) for tbl_cdf_file in TBL_BS_STT_A])))

			if skip_fg_ref_ew == False:
				SPEC_POINTS_M_9_ERR = np.asarray(SPEC_POINTS_M_9_ERR).flatten().reshape(abs(lower_shift-(len(slc_int_fg)-upper_shift+1)),2)
				SPEC_POINTS_A_9_ERR = np.asarray(SPEC_POINTS_A_9_ERR).flatten().reshape(abs(lower_shift-(len(slc_int_fg)-upper_shift+1)),2)
			else:
				SPEC_POINTS_M_9_ERR = np.asarray(SPEC_POINTS_M_9_ERR).flatten().reshape(abs(lower_shift-(len(slc_int_fg)-upper_shift)),2)
				SPEC_POINTS_A_9_ERR = np.asarray(SPEC_POINTS_A_9_ERR).flatten().reshape(abs(lower_shift-(len(slc_int_fg)-upper_shift)),2)

			SPEC_POINTS_M_9_ERR_LOW = SPEC_POINTS_M_9_ERR[:,0]
			SPEC_POINTS_M_9_ERR_HGH = SPEC_POINTS_M_9_ERR[:,1]
			SPEC_POINTS_A_9_ERR_LOW = SPEC_POINTS_A_9_ERR[:,0]
			SPEC_POINTS_A_9_ERR_HGH = SPEC_POINTS_A_9_ERR[:,1]

			SPEC_POINTS_M_9_ERR_LOW = np.delete(SPEC_POINTS_M_9_ERR_LOW,indx_msk_med)
			SPEC_POINTS_M_9_ERR_HGH = np.delete(SPEC_POINTS_M_9_ERR_HGH,indx_msk_med)
			SPEC_POINTS_A_9_ERR_LOW = np.delete(SPEC_POINTS_A_9_ERR_LOW,indx_msk_avg)
			SPEC_POINTS_A_9_ERR_HGH = np.delete(SPEC_POINTS_A_9_ERR_HGH,indx_msk_avg)

			####CLEANING NON FIT VALUES & LOW SNR EW POINTS####
			if cln_pts_snr == True:
				print
				print colored('Cleaning points according their SNR!','yellow')
				print colored('BS CI values','yellow')
				print

				indx_msk_snr_med
				indx_msk_snr_avg

				SPEC_POINTS_M_9_ERR_LOW = np.delete(SPEC_POINTS_M_9_ERR_LOW,indx_msk_snr_med)
				SPEC_POINTS_M_9_ERR_HGH = np.delete(SPEC_POINTS_M_9_ERR_HGH,indx_msk_snr_med)
				SPEC_POINTS_A_9_ERR_LOW = np.delete(SPEC_POINTS_A_9_ERR_LOW,indx_msk_snr_avg)
				SPEC_POINTS_A_9_ERR_HGH = np.delete(SPEC_POINTS_A_9_ERR_HGH,indx_msk_snr_avg)


			elif cln_pts_snr == False:
				pass				
			####CLEANING NON FIT VALUES & LOW SNR EW POINTS####
		elif bst_err_plt == True and mlt_stk_fct == 'med'  and fit_fnct == 'gauss'  and ems_lne_ctb == False:#stk_function_m == True:
			TBL_BS_STT_M =[]
			#TBL_BS_STT_A =[]

			if skip_fg_ref_ew == False:		
				print
				print FILES_M_BG[0]
				#print FILES_A_BG[0]
				print (FILES_M_BG[0].rsplit('/',1)[1]).split('-stk',1)[0]
				#print (FILES_A_BG[0].rsplit('/',1)[1]).split('-stk',1)[0]
				print

				pfx_med = (FILES_M_BG[0].rsplit('/',1)[1]).split(splt_smpl_sfx,1)[0] + splt_smpl_sfx + '-'
				#pfx_avg = (FILES_A_BG[0].rsplit('/',1)[1]).split(splt_smpl_sfx,1)[0] + splt_smpl_sfx + '-'
				cur_tbl_bs_stt_1 = stt_bst_tbl + pfx_med + str(slc_int_fg[-1]) +'-BS-'+ str(bst_itr_nmb) + '-stk-med' +stk_function +'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gauss.csv'
				#cur_tbl_bs_stt_2 = stt_bst_tbl + pfx_avg + str(slc_int_fg[-1]) +'-BS-'+ str(bst_itr_nmb) + '-stk-avg' +stk_function +'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gauss.csv'

				TBL_BS_STT_M.append(cur_tbl_bs_stt_1)
				#TBL_BS_STT_A.append(cur_tbl_bs_stt_2)
			elif skip_fg_ref_ew == True:
				print
				print colored('Omitting FG EW value in the PLOT!','yellow')
				print					
				pass

			for interval_range in range(lower_shift,len(slc_int_bg)-upper_shift):
				pfx_med = (FILES_M_BG[1].rsplit('/',1)[1]).split(splt_smpl_sfx,1)[0] + splt_smpl_sfx + '-'
				#pfx_avg = (FILES_A_BG[1].rsplit('/',1)[1]).split(splt_smpl_sfx,1)[0] + splt_smpl_sfx + '-'
				cur_tbl_bs_stt_1 = stt_bst_tbl + pfx_med + str(slc_int_fg[interval_range]) +'-BS-'+ str(bst_itr_nmb) + '-stk-med' +stk_function +'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gauss.csv'
				#cur_tbl_bs_stt_2 = stt_bst_tbl + pfx_avg + str(slc_int_fg[interval_range]) +'-BS-'+ str(bst_itr_nmb) + '-stk-avg' +stk_function +'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gauss.csv'
				TBL_BS_STT_M.append(cur_tbl_bs_stt_1)
				#TBL_BS_STT_A.append(cur_tbl_bs_stt_2)
			print 
			print colored('BS Errors from tables:','yellow')
			print
			print colored("\n".join([TABLE for TABLE in TBL_BS_STT_M]),'blue')
			print
			#print colored("\n".join([TABLE for TABLE in TBL_BS_STT_A]),'red')
			print

			SPEC_POINTS_M_9_ERR=[]
			#SPEC_POINTS_A_9_ERR=[]
			SPEC_POINTS_M_9_ERR.append((([Confident_Intervals(tbl_cdf_file,tbl_format_ipt,cdf2bobt_lne=str(LINES[3][lines]),cdf_2b_rtrn='1sgm',rmv_uft_spc=rmv_uft_spc) for tbl_cdf_file in TBL_BS_STT_M])))
			#SPEC_POINTS_A_9_ERR.append((([Confident_Intervals(tbl_cdf_file,tbl_format_ipt,cdf2bobt_lne=str(LINES[3][lines]),cdf_2b_rtrn='1sgm',rmv_uft_spc=rmv_uft_spc) for tbl_cdf_file in TBL_BS_STT_A])))

			#SPEC_POINTS_M_9_ERR = np.asarray(SPEC_POINTS_M_9_ERR).flatten().reshape(abs(lower_shift-(len(slc_int_fg)-upper_shift)),2)
			##SPEC_POINTS_A_9_ERR = np.asarray(SPEC_POINTS_A_9_ERR).flatten().reshape(abs(lower_shift-(len(slc_int_fg)-upper_shift)),2)
			if skip_fg_ref_ew == False:
				SPEC_POINTS_M_9_ERR = np.asarray(SPEC_POINTS_M_9_ERR).flatten().reshape(abs(lower_shift-(len(slc_int_fg)-upper_shift+1)),2)
				#SPEC_POINTS_A_9_ERR = np.asarray(SPEC_POINTS_A_9_ERR).flatten().reshape(abs(lower_shift-(len(slc_int_fg)-upper_shift+1)),2)
			else:
				SPEC_POINTS_M_9_ERR = np.asarray(SPEC_POINTS_M_9_ERR).flatten().reshape(abs(lower_shift-(len(slc_int_fg)-upper_shift)),2)
				#SPEC_POINTS_A_9_ERR = np.asarray(SPEC_POINTS_A_9_ERR).flatten().reshape(abs(lower_shift-(len(slc_int_fg)-upper_shift)),2)



			SPEC_POINTS_M_9_ERR_LOW = SPEC_POINTS_M_9_ERR[:,0]
			SPEC_POINTS_M_9_ERR_HGH = SPEC_POINTS_M_9_ERR[:,1]
			#SPEC_POINTS_A_9_ERR_LOW = SPEC_POINTS_A_9_ERR[:,0]
			#SPEC_POINTS_A_9_ERR_HGH = SPEC_POINTS_A_9_ERR[:,1]
			SPEC_POINTS_M_9_ERR_LOW = np.delete(SPEC_POINTS_M_9_ERR_LOW,indx_msk_med)
			SPEC_POINTS_M_9_ERR_HGH = np.delete(SPEC_POINTS_M_9_ERR_HGH,indx_msk_med)
			#SPEC_POINTS_A_9_ERR_LOW = np.delete(SPEC_POINTS_A_9_ERR_LOW,indx_msk_avg)
			#SPEC_POINTS_A_9_ERR_HGH = np.delete(SPEC_POINTS_A_9_ERR_HGH,indx_msk_avg)

			####CLEANING NON FIT VALUES & LOW SNR EW POINTS####
			if cln_pts_snr == True:
				print
				print colored('Cleaning points according their SNR!','yellow')
				print colored('BS CI values','yellow')
				print

				indx_msk_snr_med
				#indx_msk_snr_avg

				SPEC_POINTS_M_9_ERR_LOW = np.delete(SPEC_POINTS_M_9_ERR_LOW,indx_msk_snr_med)
				SPEC_POINTS_M_9_ERR_HGH = np.delete(SPEC_POINTS_M_9_ERR_HGH,indx_msk_snr_med)
				#SPEC_POINTS_A_9_ERR_LOW = np.delete(SPEC_POINTS_A_9_ERR_LOW,indx_msk_snr_avg)
				#SPEC_POINTS_A_9_ERR_HGH = np.delete(SPEC_POINTS_A_9_ERR_HGH,indx_msk_snr_avg)


			elif cln_pts_snr == False:
				pass				
			####CLEANING NON FIT VALUES & LOW SNR EW POINTS####
		elif bst_err_plt == True and mlt_stk_fct == 'avg'  and fit_fnct == 'gauss'  and ems_lne_ctb == False:#stk_function_a == True:
			#TBL_BS_STT_M =[]
			TBL_BS_STT_A =[]

			if skip_fg_ref_ew == False:		
				print
				#print FILES_M_BG[0]
				print FILES_A_BG[0]
				#print (FILES_M_BG[0].rsplit('/',1)[1]).split('-stk',1)[0]
				print (FILES_A_BG[0].rsplit('/',1)[1]).split('-stk',1)[0]
				print

				#pfx_med = (FILES_M_BG[0].rsplit('/',1)[1]).split(splt_smpl_sfx,1)[0] + splt_smpl_sfx + '-'
				pfx_avg = (FILES_A_BG[0].rsplit('/',1)[1]).split(splt_smpl_sfx,1)[0] + splt_smpl_sfx + '-'
				#cur_tbl_bs_stt_1 = stt_bst_tbl + pfx_med + str(slc_int_fg[-1]) +'-BS-'+ str(bst_itr_nmb) + '-stk-med' +stk_function +'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gauss.csv'
				cur_tbl_bs_stt_2 = stt_bst_tbl + pfx_avg + str(slc_int_fg[-1]) +'-BS-'+ str(bst_itr_nmb) + '-stk-avg' +stk_function +'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gauss.csv'

				#TBL_BS_STT_M.append(cur_tbl_bs_stt_1)
				TBL_BS_STT_A.append(cur_tbl_bs_stt_2)
			elif skip_fg_ref_ew == True:
				print
				print colored('Omitting FG EW value in the PLOT!','yellow')
				print					
				pass

			for interval_range in range(lower_shift,len(slc_int_bg)-upper_shift):
				#pfx_med = (FILES_M_BG[1].rsplit('/',1)[1]).split(splt_smpl_sfx,1)[0] + splt_smpl_sfx + '-'
				pfx_avg = (FILES_A_BG[1].rsplit('/',1)[1]).split(splt_smpl_sfx,1)[0] + splt_smpl_sfx + '-'
				#cur_tbl_bs_stt_1 = stt_bst_tbl + pfx_med + str(slc_int_fg[interval_range]) +'-BS-'+ str(bst_itr_nmb) + '-stk-med' +stk_function +'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gauss.csv'
				cur_tbl_bs_stt_2 = stt_bst_tbl + pfx_avg + str(slc_int_fg[interval_range]) +'-BS-'+ str(bst_itr_nmb) + '-stk-avg' +stk_function +'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gauss.csv'
				#TBL_BS_STT_M.append(cur_tbl_bs_stt_1)
				TBL_BS_STT_A.append(cur_tbl_bs_stt_2)
			print 
			print colored('BS Errors from tables:','yellow')
			print
			#print colored("\n".join([TABLE for TABLE in TBL_BS_STT_M]),'blue')
			print
			print colored("\n".join([TABLE for TABLE in TBL_BS_STT_A]),'red')
			print

			#SPEC_POINTS_M_9_ERR=[]
			SPEC_POINTS_A_9_ERR=[]
			#SPEC_POINTS_M_9_ERR.append((([Confident_Intervals(tbl_cdf_file,tbl_format_ipt,cdf2bobt_lne=str(LINES[3][lines]),cdf_2b_rtrn='1sgm',rmv_uft_spc=rmv_uft_spc) for tbl_cdf_file in TBL_BS_STT_M])))
			SPEC_POINTS_A_9_ERR.append((([Confident_Intervals(tbl_cdf_file,tbl_format_ipt,cdf2bobt_lne=str(LINES[3][lines]),cdf_2b_rtrn='1sgm',rmv_uft_spc=rmv_uft_spc) for tbl_cdf_file in TBL_BS_STT_A])))

			##SPEC_POINTS_M_9_ERR = np.asarray(SPEC_POINTS_M_9_ERR).flatten().reshape(abs(lower_shift-(len(slc_int_fg)-upper_shift)),2)
			#SPEC_POINTS_A_9_ERR = np.asarray(SPEC_POINTS_A_9_ERR).flatten().reshape(abs(lower_shift-(len(slc_int_fg)-upper_shift)),2)

			if skip_fg_ref_ew == False:
				#SPEC_POINTS_M_9_ERR = np.asarray(SPEC_POINTS_M_9_ERR).flatten().reshape(abs(lower_shift-(len(slc_int_fg)-upper_shift+1)),2)
				SPEC_POINTS_A_9_ERR = np.asarray(SPEC_POINTS_A_9_ERR).flatten().reshape(abs(lower_shift-(len(slc_int_fg)-upper_shift+1)),2)
			else:
				#SPEC_POINTS_M_9_ERR = np.asarray(SPEC_POINTS_M_9_ERR).flatten().reshape(abs(lower_shift-(len(slc_int_fg)-upper_shift)),2)
				SPEC_POINTS_A_9_ERR = np.asarray(SPEC_POINTS_A_9_ERR).flatten().reshape(abs(lower_shift-(len(slc_int_fg)-upper_shift)),2)

			#SPEC_POINTS_M_9_ERR_LOW = SPEC_POINTS_M_9_ERR[:,0]
			#SPEC_POINTS_M_9_ERR_HGH = SPEC_POINTS_M_9_ERR[:,1]
			SPEC_POINTS_A_9_ERR_LOW = SPEC_POINTS_A_9_ERR[:,0]
			SPEC_POINTS_A_9_ERR_HGH = SPEC_POINTS_A_9_ERR[:,1]

			#SPEC_POINTS_M_9_ERR_LOW = np.delete(SPEC_POINTS_M_9_ERR_LOW,indx_msk_med)
			#SPEC_POINTS_M_9_ERR_HGH = np.delete(SPEC_POINTS_M_9_ERR_HGH,indx_msk_med)
			SPEC_POINTS_A_9_ERR_LOW = np.delete(SPEC_POINTS_A_9_ERR_LOW,indx_msk_avg)
			SPEC_POINTS_A_9_ERR_HGH = np.delete(SPEC_POINTS_A_9_ERR_HGH,indx_msk_avg)

			####CLEANING NON FIT VALUES & LOW SNR EW POINTS####
			if cln_pts_snr == True:
				print
				print colored('Cleaning points according their SNR!','yellow')
				print colored('BS CI values','yellow')
				print

				#indx_msk_snr_med
				indx_msk_snr_avg

				#SPEC_POINTS_M_9_ERR_LOW = np.delete(SPEC_POINTS_M_9_ERR_LOW,indx_msk_snr_med)
				#SPEC_POINTS_M_9_ERR_HGH = np.delete(SPEC_POINTS_M_9_ERR_HGH,indx_msk_snr_med)
				SPEC_POINTS_A_9_ERR_LOW = np.delete(SPEC_POINTS_A_9_ERR_LOW,indx_msk_snr_avg)
				SPEC_POINTS_A_9_ERR_HGH = np.delete(SPEC_POINTS_A_9_ERR_HGH,indx_msk_snr_avg)


			elif cln_pts_snr == False:
				pass				
			####CLEANING NON FIT VALUES & LOW SNR EW POINTS####
		elif bst_err_plt == True and mlt_stk_fct == 'both' and fit_fnct == 'gaussM' and ems_lne_ctb == True:#stk_function_b == True:
			print
			print colored('*********************************************************************************','cyan')
			print colored('********************************Emission Profile*********************************','cyan')
			print colored('*********************************************************************************','cyan')
			print
			TBL_BS_STT_M =[]
			TBL_BS_STT_A =[]

			if skip_fg_ref_ew == False:
				print
				print FILES_M_BG[0]
				print FILES_A_BG[0]
				print (FILES_M_BG[0].rsplit('/',1)[1]).split('-stk',1)[0]
				print (FILES_A_BG[0].rsplit('/',1)[1]).split('-stk',1)[0]
				print

				pfx_med = (FILES_M_BG[0].rsplit('/',1)[1]).split(splt_smpl_sfx,1)[0] + splt_smpl_sfx + '-'
				pfx_avg = (FILES_A_BG[0].rsplit('/',1)[1]).split(splt_smpl_sfx,1)[0] + splt_smpl_sfx + '-'
				cur_tbl_bs_stt_1 = stt_bst_tbl + pfx_med + str(slc_int_fg[-1]) +'-BS-'+ str(bst_itr_nmb) + '-stk-med' +stk_function +'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gaussM.csv'
				cur_tbl_bs_stt_2 = stt_bst_tbl + pfx_avg + str(slc_int_fg[-1]) +'-BS-'+ str(bst_itr_nmb) + '-stk-avg' +stk_function +'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gaussM.csv'

				TBL_BS_STT_M.append(cur_tbl_bs_stt_1)
				TBL_BS_STT_A.append(cur_tbl_bs_stt_2)
			elif skip_fg_ref_ew == True:
				print
				print colored('Omitting FG EW value in the PLOT!','yellow')
				print					
				pass

			for interval_range in range(lower_shift,len(slc_int_bg)-upper_shift):
				pfx_med = (FILES_M_BG[1].rsplit('/',1)[1]).split(splt_smpl_sfx,1)[0] + splt_smpl_sfx + '-'
				pfx_avg = (FILES_A_BG[1].rsplit('/',1)[1]).split(splt_smpl_sfx,1)[0] + splt_smpl_sfx + '-'
				cur_tbl_bs_stt_1 = stt_bst_tbl + pfx_med + str(slc_int_fg[interval_range]) +'-BS-'+ str(bst_itr_nmb) + '-stk-med' +stk_function +'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gaussM.csv'
				cur_tbl_bs_stt_2 = stt_bst_tbl + pfx_avg + str(slc_int_fg[interval_range]) +'-BS-'+ str(bst_itr_nmb) + '-stk-avg' +stk_function +'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gaussM.csv'
				TBL_BS_STT_M.append(cur_tbl_bs_stt_1)
				TBL_BS_STT_A.append(cur_tbl_bs_stt_2)
			print 
			print colored('BS Errors from tables:','yellow')
			print
			print colored("\n".join([TABLE for TABLE in TBL_BS_STT_M]),'blue')
			print
			print colored("\n".join([TABLE for TABLE in TBL_BS_STT_A]),'red')
			print

			SPEC_POINTS_M_9_ERR=[]
			SPEC_POINTS_A_9_ERR=[]
			SPEC_POINTS_M_9_ERR.append((([Confident_Intervals(tbl_cdf_file,tbl_format_ipt,cdf2bobt_lne=str(LINES[3][lines]),cdf_2b_rtrn='1sgm',rmv_uft_spc=rmv_uft_spc, ems_lne_ctb=ems_lne_ctb) for tbl_cdf_file in TBL_BS_STT_M])))
			SPEC_POINTS_A_9_ERR.append((([Confident_Intervals(tbl_cdf_file,tbl_format_ipt,cdf2bobt_lne=str(LINES[3][lines]),cdf_2b_rtrn='1sgm',rmv_uft_spc=rmv_uft_spc, ems_lne_ctb=ems_lne_ctb) for tbl_cdf_file in TBL_BS_STT_A])))

			if skip_fg_ref_ew == False:
				SPEC_POINTS_M_9_ERR = np.asarray(SPEC_POINTS_M_9_ERR).flatten().reshape(abs(lower_shift-(len(slc_int_fg)-upper_shift+1)),2)
				SPEC_POINTS_A_9_ERR = np.asarray(SPEC_POINTS_A_9_ERR).flatten().reshape(abs(lower_shift-(len(slc_int_fg)-upper_shift+1)),2)
			else:
				SPEC_POINTS_M_9_ERR = np.asarray(SPEC_POINTS_M_9_ERR).flatten().reshape(abs(lower_shift-(len(slc_int_fg)-upper_shift)),2)
				SPEC_POINTS_A_9_ERR = np.asarray(SPEC_POINTS_A_9_ERR).flatten().reshape(abs(lower_shift-(len(slc_int_fg)-upper_shift)),2)

			SPEC_POINTS_M_9_ERR_LOW = SPEC_POINTS_M_9_ERR[:,0]
			SPEC_POINTS_M_9_ERR_HGH = SPEC_POINTS_M_9_ERR[:,1]
			SPEC_POINTS_A_9_ERR_LOW = SPEC_POINTS_A_9_ERR[:,0]
			SPEC_POINTS_A_9_ERR_HGH = SPEC_POINTS_A_9_ERR[:,1]

			SPEC_POINTS_M_9_ERR_LOW = np.delete(SPEC_POINTS_M_9_ERR_LOW,indx_msk_med)
			SPEC_POINTS_M_9_ERR_HGH = np.delete(SPEC_POINTS_M_9_ERR_HGH,indx_msk_med)
			SPEC_POINTS_A_9_ERR_LOW = np.delete(SPEC_POINTS_A_9_ERR_LOW,indx_msk_avg)
			SPEC_POINTS_A_9_ERR_HGH = np.delete(SPEC_POINTS_A_9_ERR_HGH,indx_msk_avg)

			####CLEANING NON FIT VALUES & LOW SNR EW POINTS####
			if cln_pts_snr == True:
				print
				print colored('Cleaning points according their SNR!','yellow')
				print colored('BS CI values','yellow')
				print

				indx_msk_snr_med
				indx_msk_snr_avg

				SPEC_POINTS_M_9_ERR_LOW = np.delete(SPEC_POINTS_M_9_ERR_LOW,indx_msk_snr_med)
				SPEC_POINTS_M_9_ERR_HGH = np.delete(SPEC_POINTS_M_9_ERR_HGH,indx_msk_snr_med)
				SPEC_POINTS_A_9_ERR_LOW = np.delete(SPEC_POINTS_A_9_ERR_LOW,indx_msk_snr_avg)
				SPEC_POINTS_A_9_ERR_HGH = np.delete(SPEC_POINTS_A_9_ERR_HGH,indx_msk_snr_avg)


			elif cln_pts_snr == False:
				pass				
			####CLEANING NON FIT VALUES & LOW SNR EW POINTS####
		elif bst_err_plt == True and mlt_stk_fct == 'med' and fit_fnct == 'gaussM' and ems_lne_ctb == True:#stk_function_m == True:
			print
			print colored('*********************************************************************************','cyan')
			print colored('********************************Emission Profile*********************************','cyan')
			print colored('*********************************************************************************','cyan')
			print
			quit()
			TBL_BS_STT_M =[]
			#TBL_BS_STT_A =[]

			if skip_fg_ref_ew == False:		
				print
				print FILES_M_BG[0]
				#print FILES_A_BG[0]
				print (FILES_M_BG[0].rsplit('/',1)[1]).split('-stk',1)[0]
				#print (FILES_A_BG[0].rsplit('/',1)[1]).split('-stk',1)[0]
				print

				pfx_med = (FILES_M_BG[0].rsplit('/',1)[1]).split(splt_smpl_sfx,1)[0] + splt_smpl_sfx + '-'
				#pfx_avg = (FILES_A_BG[0].rsplit('/',1)[1]).split(splt_smpl_sfx,1)[0] + splt_smpl_sfx + '-'
				cur_tbl_bs_stt_1 = stt_bst_tbl + pfx_med + str(slc_int_fg[-1]) +'-BS-'+ str(bst_itr_nmb) + '-stk-med' +stk_function +'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gaussM.csv'
				#cur_tbl_bs_stt_2 = stt_bst_tbl + pfx_avg + str(slc_int_fg[-1]) +'-BS-'+ str(bst_itr_nmb) + '-stk-avg' +stk_function +'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gaussM.csv'

				TBL_BS_STT_M.append(cur_tbl_bs_stt_1)
				#TBL_BS_STT_A.append(cur_tbl_bs_stt_2)
			elif skip_fg_ref_ew == True:
				print
				print colored('Omitting FG EW value in the PLOT!','yellow')
				print					
				pass

			for interval_range in range(lower_shift,len(slc_int_bg)-upper_shift):
				pfx_med = (FILES_M_BG[1].rsplit('/',1)[1]).split(splt_smpl_sfx,1)[0] + splt_smpl_sfx + '-'
				#pfx_avg = (FILES_A_BG[1].rsplit('/',1)[1]).split(splt_smpl_sfx,1)[0] + splt_smpl_sfx + '-'
				cur_tbl_bs_stt_1 = stt_bst_tbl + pfx_med + str(slc_int_fg[interval_range]) +'-BS-'+ str(bst_itr_nmb) + '-stk-med' +stk_function +'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gaussM.csv'
				#cur_tbl_bs_stt_2 = stt_bst_tbl + pfx_avg + str(slc_int_fg[interval_range]) +'-BS-'+ str(bst_itr_nmb) + '-stk-avg' +stk_function +'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gaussM.csv'
				TBL_BS_STT_M.append(cur_tbl_bs_stt_1)
				#TBL_BS_STT_A.append(cur_tbl_bs_stt_2)
			print 
			print colored('BS Errors from tables:','yellow')
			print
			print colored("\n".join([TABLE for TABLE in TBL_BS_STT_M]),'blue')
			print
			#print colored("\n".join([TABLE for TABLE in TBL_BS_STT_A]),'red')
			print

			SPEC_POINTS_M_9_ERR=[]
			#SPEC_POINTS_A_9_ERR=[]
			SPEC_POINTS_M_9_ERR.append((([Confident_Intervals(tbl_cdf_file,tbl_format_ipt,cdf2bobt_lne=str(LINES[3][lines]),cdf_2b_rtrn='1sgm',rmv_uft_spc=rmv_uft_spc,ems_lne_ctb=ems_lne_ctb) for tbl_cdf_file in TBL_BS_STT_M])))
			#SPEC_POINTS_A_9_ERR.append((([Confident_Intervals(tbl_cdf_file,tbl_format_ipt,cdf2bobt_lne=str(LINES[3][lines]),cdf_2b_rtrn='1sgm',rmv_uft_spc=rmv_uft_spc,ems_lne_ctb=ems_lne_ctb) for tbl_cdf_file in TBL_BS_STT_A])))

			#SPEC_POINTS_M_9_ERR = np.asarray(SPEC_POINTS_M_9_ERR).flatten().reshape(abs(lower_shift-(len(slc_int_fg)-upper_shift)),2)
			##SPEC_POINTS_A_9_ERR = np.asarray(SPEC_POINTS_A_9_ERR).flatten().reshape(abs(lower_shift-(len(slc_int_fg)-upper_shift)),2)
			if skip_fg_ref_ew == False:
				SPEC_POINTS_M_9_ERR = np.asarray(SPEC_POINTS_M_9_ERR).flatten().reshape(abs(lower_shift-(len(slc_int_fg)-upper_shift+1)),2)
				#SPEC_POINTS_A_9_ERR = np.asarray(SPEC_POINTS_A_9_ERR).flatten().reshape(abs(lower_shift-(len(slc_int_fg)-upper_shift+1)),2)
			else:
				SPEC_POINTS_M_9_ERR = np.asarray(SPEC_POINTS_M_9_ERR).flatten().reshape(abs(lower_shift-(len(slc_int_fg)-upper_shift)),2)
				#SPEC_POINTS_A_9_ERR = np.asarray(SPEC_POINTS_A_9_ERR).flatten().reshape(abs(lower_shift-(len(slc_int_fg)-upper_shift)),2)



			SPEC_POINTS_M_9_ERR_LOW = SPEC_POINTS_M_9_ERR[:,0]
			SPEC_POINTS_M_9_ERR_HGH = SPEC_POINTS_M_9_ERR[:,1]
			#SPEC_POINTS_A_9_ERR_LOW = SPEC_POINTS_A_9_ERR[:,0]
			#SPEC_POINTS_A_9_ERR_HGH = SPEC_POINTS_A_9_ERR[:,1]
			SPEC_POINTS_M_9_ERR_LOW = np.delete(SPEC_POINTS_M_9_ERR_LOW,indx_msk_med)
			SPEC_POINTS_M_9_ERR_HGH = np.delete(SPEC_POINTS_M_9_ERR_HGH,indx_msk_med)
			#SPEC_POINTS_A_9_ERR_LOW = np.delete(SPEC_POINTS_A_9_ERR_LOW,indx_msk_avg)
			#SPEC_POINTS_A_9_ERR_HGH = np.delete(SPEC_POINTS_A_9_ERR_HGH,indx_msk_avg)

			####CLEANING NON FIT VALUES & LOW SNR EW POINTS####
			if cln_pts_snr == True:
				print
				print colored('Cleaning points according their SNR!','yellow')
				print colored('BS CI values','yellow')
				print

				indx_msk_snr_med
				#indx_msk_snr_avg

				SPEC_POINTS_M_9_ERR_LOW = np.delete(SPEC_POINTS_M_9_ERR_LOW,indx_msk_snr_med)
				SPEC_POINTS_M_9_ERR_HGH = np.delete(SPEC_POINTS_M_9_ERR_HGH,indx_msk_snr_med)
				#SPEC_POINTS_A_9_ERR_LOW = np.delete(SPEC_POINTS_A_9_ERR_LOW,indx_msk_snr_avg)
				#SPEC_POINTS_A_9_ERR_HGH = np.delete(SPEC_POINTS_A_9_ERR_HGH,indx_msk_snr_avg)


			elif cln_pts_snr == False:
				pass				
			####CLEANING NON FIT VALUES & LOW SNR EW POINTS####
		elif bst_err_plt == True and mlt_stk_fct == 'avg' and fit_fnct == 'gaussM' and ems_lne_ctb == True:#stk_function_a == True:
			print
			print colored('*********************************************************************************','cyan')
			print colored('********************************Emission Profile*********************************','cyan')
			print colored('*********************************************************************************','cyan')
			print
			quit()			
			#TBL_BS_STT_M =[]
			TBL_BS_STT_A =[]

			if skip_fg_ref_ew == False:		
				print
				#print FILES_M_BG[0]
				print FILES_A_BG[0]
				#print (FILES_M_BG[0].rsplit('/',1)[1]).split('-stk',1)[0]
				print (FILES_A_BG[0].rsplit('/',1)[1]).split('-stk',1)[0]
				print

				#pfx_med = (FILES_M_BG[0].rsplit('/',1)[1]).split(splt_smpl_sfx,1)[0] + splt_smpl_sfx + '-'
				pfx_avg = (FILES_A_BG[0].rsplit('/',1)[1]).split(splt_smpl_sfx,1)[0] + splt_smpl_sfx + '-'
				#cur_tbl_bs_stt_1 = stt_bst_tbl + pfx_med + str(slc_int_fg[-1]) +'-BS-'+ str(bst_itr_nmb) + '-stk-med' +stk_function +'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gaussM.csv'
				cur_tbl_bs_stt_2 = stt_bst_tbl + pfx_avg + str(slc_int_fg[-1]) +'-BS-'+ str(bst_itr_nmb) + '-stk-avg' +stk_function +'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gaussM.csv'

				#TBL_BS_STT_M.append(cur_tbl_bs_stt_1)
				TBL_BS_STT_A.append(cur_tbl_bs_stt_2)
			elif skip_fg_ref_ew == True:
				print
				print colored('Omitting FG EW value in the PLOT!','yellow')
				print					
				pass

			for interval_range in range(lower_shift,len(slc_int_bg)-upper_shift):
				#pfx_med = (FILES_M_BG[1].rsplit('/',1)[1]).split(splt_smpl_sfx,1)[0] + splt_smpl_sfx + '-'
				pfx_avg = (FILES_A_BG[1].rsplit('/',1)[1]).split(splt_smpl_sfx,1)[0] + splt_smpl_sfx + '-'
				#cur_tbl_bs_stt_1 = stt_bst_tbl + pfx_med + str(slc_int_fg[interval_range]) +'-BS-'+ str(bst_itr_nmb) + '-stk-med' +stk_function +'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gaussM.csv'
				cur_tbl_bs_stt_2 = stt_bst_tbl + pfx_avg + str(slc_int_fg[interval_range]) +'-BS-'+ str(bst_itr_nmb) + '-stk-avg' +stk_function +'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gaussM.csv'
				#TBL_BS_STT_M.append(cur_tbl_bs_stt_1)
				TBL_BS_STT_A.append(cur_tbl_bs_stt_2)
			print 
			print colored('BS Errors from tables:','yellow')
			print
			#print colored("\n".join([TABLE for TABLE in TBL_BS_STT_M]),'blue')
			print
			print colored("\n".join([TABLE for TABLE in TBL_BS_STT_A]),'red')
			print

			#SPEC_POINTS_M_9_ERR=[]
			SPEC_POINTS_A_9_ERR=[]
			#SPEC_POINTS_M_9_ERR.append((([Confident_Intervals(tbl_cdf_file,tbl_format_ipt,cdf2bobt_lne=str(LINES[3][lines]),cdf_2b_rtrn='1sgm',rmv_uft_spc=rmv_uft_spc,ems_lne_ctb=ems_lne_ctb) for tbl_cdf_file in TBL_BS_STT_M])))
			SPEC_POINTS_A_9_ERR.append((([Confident_Intervals(tbl_cdf_file,tbl_format_ipt,cdf2bobt_lne=str(LINES[3][lines]),cdf_2b_rtrn='1sgm',rmv_uft_spc=rmv_uft_spc,ems_lne_ctb=ems_lne_ctb) for tbl_cdf_file in TBL_BS_STT_A])))

			##SPEC_POINTS_M_9_ERR = np.asarray(SPEC_POINTS_M_9_ERR).flatten().reshape(abs(lower_shift-(len(slc_int_fg)-upper_shift)),2)
			#SPEC_POINTS_A_9_ERR = np.asarray(SPEC_POINTS_A_9_ERR).flatten().reshape(abs(lower_shift-(len(slc_int_fg)-upper_shift)),2)

			if skip_fg_ref_ew == False:
				#SPEC_POINTS_M_9_ERR = np.asarray(SPEC_POINTS_M_9_ERR).flatten().reshape(abs(lower_shift-(len(slc_int_fg)-upper_shift+1)),2)
				SPEC_POINTS_A_9_ERR = np.asarray(SPEC_POINTS_A_9_ERR).flatten().reshape(abs(lower_shift-(len(slc_int_fg)-upper_shift+1)),2)
			else:
				#SPEC_POINTS_M_9_ERR = np.asarray(SPEC_POINTS_M_9_ERR).flatten().reshape(abs(lower_shift-(len(slc_int_fg)-upper_shift)),2)
				SPEC_POINTS_A_9_ERR = np.asarray(SPEC_POINTS_A_9_ERR).flatten().reshape(abs(lower_shift-(len(slc_int_fg)-upper_shift)),2)

			#SPEC_POINTS_M_9_ERR_LOW = SPEC_POINTS_M_9_ERR[:,0]
			#SPEC_POINTS_M_9_ERR_HGH = SPEC_POINTS_M_9_ERR[:,1]
			SPEC_POINTS_A_9_ERR_LOW = SPEC_POINTS_A_9_ERR[:,0]
			SPEC_POINTS_A_9_ERR_HGH = SPEC_POINTS_A_9_ERR[:,1]

			#SPEC_POINTS_M_9_ERR_LOW = np.delete(SPEC_POINTS_M_9_ERR_LOW,indx_msk_med)
			#SPEC_POINTS_M_9_ERR_HGH = np.delete(SPEC_POINTS_M_9_ERR_HGH,indx_msk_med)
			SPEC_POINTS_A_9_ERR_LOW = np.delete(SPEC_POINTS_A_9_ERR_LOW,indx_msk_avg)
			SPEC_POINTS_A_9_ERR_HGH = np.delete(SPEC_POINTS_A_9_ERR_HGH,indx_msk_avg)

			####CLEANING NON FIT VALUES & LOW SNR EW POINTS####
			if cln_pts_snr == True:
				print
				print colored('Cleaning points according their SNR!','yellow')
				print colored('BS CI values','yellow')
				print

				#indx_msk_snr_med
				indx_msk_snr_avg

				#SPEC_POINTS_M_9_ERR_LOW = np.delete(SPEC_POINTS_M_9_ERR_LOW,indx_msk_snr_med)
				#SPEC_POINTS_M_9_ERR_HGH = np.delete(SPEC_POINTS_M_9_ERR_HGH,indx_msk_snr_med)
				SPEC_POINTS_A_9_ERR_LOW = np.delete(SPEC_POINTS_A_9_ERR_LOW,indx_msk_snr_avg)
				SPEC_POINTS_A_9_ERR_HGH = np.delete(SPEC_POINTS_A_9_ERR_HGH,indx_msk_snr_avg)


			elif cln_pts_snr == False:
				pass				
			####CLEANING NON FIT VALUES & LOW SNR EW POINTS####
		elif bst_err_plt == False:
			pass
		###############################################TABLE ERRORS FROM BOOTSTRAP###################################################

		###############################################PLOT EW PROFILE###################################################
		index_line_color = index_line_color +1 
		#color2bused = array_new_colors[0][index_line_color]
		xplotlimit = max(SPEC_SEP_VAR)+(.10*max(SPEC_SEP_VAR))
		if mlt_stk_fct == 'med'  and bst_err_plt == False:
			pts_line_M = SPEC_POINTS_M_9
			pts_line_M = pts_line_M#np.log10(pts_line_M)
			color2bused = 'blue'
			print
			print colored('Plot values (SEP-BIN):','yellow')
			print SPEC_SEP_VAR
			print colored('Plot values (EW-MED):','yellow')
			print pts_line_M
			print
			print colored('Number of galaxies per bin:','yellow') 
			print SPEC_POINTS_NMB_M						
			print colored('Number of galaxies per bin (SQR):','yellow') 
			print np.sqrt(SPEC_POINTS_NMB_M)						
			print
			print colored('SNR Individual Line (Median): ','yellow')
			print SPEC_POINTS_M_SNR
			print
			print colored('Plot values (SEP-BIN):','yellow')
			print SPEC_SEP_VAR,len(SPEC_SEP_VAR)
			print SPEC_SEP_VAR_M,len(SPEC_SEP_VAR_M)
			print colored('Plot values (EW-MED):','yellow')
			print pts_line_M,len(pts_line_M)
			print
			print colored('Number of galaxies per bin:','yellow') 
			print SPEC_POINTS_NMB_M,len(SPEC_POINTS_NMB_M)
			print SPEC_POINTS_NMB2_M,len(SPEC_POINTS_NMB2_M)
			print colored('Number of galaxies per bin (SQR):','yellow') 
			print	
			print colored('SNR Individual Line (Median): ','yellow')
			print SPEC_POINTS_M_SNR,len(SPEC_POINTS_M_SNR0)
			print SPEC_POINTS_M_SNR,len(SPEC_POINTS_M_SNR)
			print SPEC_POINTS_M_SNR2,len(SPEC_POINTS_M_SNR2)
			print SPEC_POINTS_M_SNR3,len(SPEC_POINTS_M_SNR3)
			print SPEC_POINTS_M_SNR4,len(SPEC_POINTS_M_SNR4)
			print SPEC_POINTS_M_SNR5,len(SPEC_POINTS_M_SNR5)
			print
			print len(SPEC_POINTS_M_SNR),SPEC_POINTS_M_SNR
			print len(SPEC_POINTS_M_SNR2),SPEC_POINTS_M_SNR2
			print len(SPEC_POINTS_M_SNR3),SPEC_POINTS_M_SNR3
			print len(SPEC_POINTS_M_SNR4),SPEC_POINTS_M_SNR4
			print

			plt.plot(SPEC_SEP_VAR_M,pts_line_M,
						#marker = LINES[6][lines],
						marker = 'o',
						color=color2bused,markersize=10,
						markerfacecolor = 'None',
						zorder = 5,
						label  = LINES[4][lines]  + 
						' ('+ str(LINES[0][lines])+
						 r'$\AA$' + ') '+'med '   +
						 "\n"  + 'SNR-A   : '   + str(SPEC_POINTS_M_SNR)  +
						 "\n"  + 'SNR-C   : '   + str(SPEC_POINTS_M_SNR2) +
						 "\n"  + 'N: '    + str(SPEC_POINTS_NMB_M)    +
						 "\n"  + 'N: '    + str(SPEC_POINTS_NMB3_M),
						 ls='-.')
			pts_line_ALL_M.append(pts_line_M)
			lbl_line_ALL_M.append(LINES[4][lines]+ ' ('+ str(LINES[0][lines])+ r'$\AA$' + ') ' + 'med ' + color2bused)
			mrk_line_ALL.append(LINES[6][lines])
			clr_line_ALL.append(color2bused)
			if add_snr_vls == True:
				[ax110.annotate(str(sbs_snr_vle), 					# this is the text
								(SPEC_SEP_VAR_M[sbs_idx],pts_line_M[sbs_idx]),	# this is the point to label
								textcoords="offset points", 		# how to position the text
								xytext=(2,6), 						# distance from text to points (x,y)
								color='blue',						#
								family='serif',                     #
								fontsize = 12,						#
								ha='center') 						# horizontal alignment can be left, right or center
				for sbs_idx,sbs_snr_vle in enumerate(SPEC_POINTS_M_SNR0)]
			else:
				pass			
		elif mlt_stk_fct == 'med'  and bst_err_plt == True:
			pts_line_M = SPEC_POINTS_M_9
			pts_line_M = pts_line_M
			color2bused = 'blue'
			print
			print colored('Plot values (SEP-BIN):','yellow')
			print SPEC_SEP_VAR
			print colored('Plot values (EW-MED):','yellow')
			print pts_line_M
			print
			print colored('Number of galaxies per bin:','yellow') 
			print SPEC_POINTS_NMB_M						
			print colored('Number of galaxies per bin (SQR):','yellow') 
			print np.sqrt(SPEC_POINTS_NMB_M)						
			print
			print colored('SNR Individual Line (Median): ','yellow')
			print SPEC_POINTS_M_SNR
			print
			print colored('Plot values (SEP-BIN):','yellow')
			print SPEC_SEP_VAR,len(SPEC_SEP_VAR)
			print SPEC_SEP_VAR_M,len(SPEC_SEP_VAR_M)
			print colored('Plot values (EW-MED):','yellow')
			print pts_line_M,len(pts_line_M)
			print
			print colored('Number of galaxies per bin:','yellow') 
			print SPEC_POINTS_NMB_M,len(SPEC_POINTS_NMB_M)
			print SPEC_POINTS_NMB2_M,len(SPEC_POINTS_NMB2_M)
			print colored('Number of galaxies per bin (SQR):','yellow') 
			print	
			print colored('SNR Individual Line (Median): ','yellow')
			print SPEC_POINTS_M_SNR,len(SPEC_POINTS_M_SNR0)
			print SPEC_POINTS_M_SNR,len(SPEC_POINTS_M_SNR)
			print SPEC_POINTS_M_SNR2,len(SPEC_POINTS_M_SNR2)
			print SPEC_POINTS_M_SNR3,len(SPEC_POINTS_M_SNR3)
			print SPEC_POINTS_M_SNR4,len(SPEC_POINTS_M_SNR4)
			print SPEC_POINTS_M_SNR5,len(SPEC_POINTS_M_SNR5)
			print
			plt.plot(SPEC_SEP_VAR_M,pts_line_M,
						#marker = LINES[6][lines],
						marker = 'o',
						color  = color2bused,markersize=10,
						markerfacecolor = 'None',
						zorder = 5,
						label  = LINES[4][lines]  +
						' ('+ str(LINES[0][lines])+
						r'$\AA$'+') '+'med '      +
						 "\n"  + 'SNR-A   : '  + str(SPEC_POINTS_M_SNR)  +
						 "\n"  + 'SNR-C   : '  + str(SPEC_POINTS_M_SNR2) +
						 "\n"  + 'N: '    + str(SPEC_POINTS_NMB_M)    +
						 "\n"  + 'N: '    + str(SPEC_POINTS_NMB3_M),
						ls='-.')
			pts_line_ALL_M.append(pts_line_M)
			lbl_line_ALL_M.append(LINES[4][lines]+' ('+ str(LINES[0][lines])+r'$\AA$'+') '+'med '+color2bused)
			mrk_line_ALL.append(LINES[6][lines])
			clr_line_ALL.append(color2bused)								
			if bst_err_plt_sym == False and (plt_log_axs == 'x' or plt_log_axs == None):
				plt.errorbar(SPEC_SEP_VAR_M, pts_line_M, 
					yerr   = [abs(pts_line_M-SPEC_POINTS_M_9_ERR_LOW)/np.sqrt(SPEC_POINTS_NMB_M),
							abs(SPEC_POINTS_M_9_ERR_HGH-pts_line_M)/np.sqrt(SPEC_POINTS_NMB_M)], #yerr = [E_V1[j][0:],E_V2[j][0:]],
					#fmt   = LINES[6][lines],
					fmt    = 'o',
					zorder = 4,
					color  = color2bused,elinewidth = 1.5, capsize = 5.5,
					markeredgecolor=color2bused, markerfacecolor = 'None',markeredgewidth=0.5,ms=10)
			elif bst_err_plt_sym ==True and (plt_log_axs == 'x' or plt_log_axs == None):
				print
				print len(SPEC_SEP_VAR_M),len(pts_line_M)
				print len(pts_line_M),len(SPEC_POINTS_M_9_ERR_HGH),len(SPEC_POINTS_NMB_M)
				print len(pts_line_M),len(SPEC_POINTS_M_9_ERR_LOW),len(SPEC_POINTS_NMB_M)
				print len(SPEC_POINTS_M_SNR0)
				print
				plt.errorbar(SPEC_SEP_VAR_M, pts_line_M, 
					yerr   = [abs(pts_line_M-SPEC_POINTS_M_9_ERR_HGH)/np.sqrt(SPEC_POINTS_NMB_M),
							abs(SPEC_POINTS_M_9_ERR_HGH-pts_line_M)/np.sqrt(SPEC_POINTS_NMB_M)], #yerr = [E_V1[j][0:],E_V2[j][0:]],
					#fmt   = LINES[6][lines],
					fmt    = 'o',
					zorder = 4,
					color  = color2bused,elinewidth = 1.5, capsize = 5.5,
					markeredgecolor=color2bused, markerfacecolor = 'None',markeredgewidth=0.5,ms=10)

			elif bst_err_plt_sym == False and (plt_log_axs == 'y' or plt_log_axs == 'both'):
				plt.errorbar(SPEC_SEP_VAR_M, pts_line_M, 
					#yerr   = [((abs(pts_line_M-SPEC_POINTS_M_9_ERR_LOW)/np.sqrt(SPEC_POINTS_NMB_M))/pts_line_M)*0.434,
							#((abs(SPEC_POINTS_M_9_ERR_HGH-pts_line_M)/np.sqrt(SPEC_POINTS_NMB_M))/pts_line_M)*0.434],
					yerr   = [abs(pts_line_M-SPEC_POINTS_M_9_ERR_LOW)/np.sqrt(SPEC_POINTS_NMB_M),
							abs(SPEC_POINTS_M_9_ERR_HGH-pts_line_M)/np.sqrt(SPEC_POINTS_NMB_M)], #yerr = [E_V1[j][0:],E_V2[j][0:]],
					#fmt   = LINES[6][lines],
					fmt    = 'o',
					zorder = 4,
					color  = color2bused,elinewidth = 1.5, capsize = 5.5,
					markeredgecolor=color2bused, markerfacecolor = 'None',markeredgewidth=0.5,ms=10)
			elif bst_err_plt_sym ==True and (plt_log_axs == 'y' or plt_log_axs == 'both'):
				print
				print len(SPEC_SEP_VAR_M),len(pts_line_M)
				print len(pts_line_M),len(SPEC_POINTS_M_9_ERR_HGH),len(SPEC_POINTS_NMB_M)
				print len(pts_line_M),len(SPEC_POINTS_M_9_ERR_LOW),len(SPEC_POINTS_NMB_M)
				print len(SPEC_POINTS_M_SNR0)
				print
				plt.errorbar(SPEC_SEP_VAR_M, pts_line_M, 
					#yerr   = [((abs(pts_line_M-SPEC_POINTS_M_9_ERR_HGH)/np.sqrt(SPEC_POINTS_NMB_M))/pts_line_M)*0.434,
							#((abs(SPEC_POINTS_M_9_ERR_HGH-pts_line_M)/np.sqrt(SPEC_POINTS_NMB_M))/pts_line_M)*0.434],
					yerr   = [abs(pts_line_M-SPEC_POINTS_M_9_ERR_HGH)/np.sqrt(SPEC_POINTS_NMB_M),
							abs(SPEC_POINTS_M_9_ERR_HGH-pts_line_M)/np.sqrt(SPEC_POINTS_NMB_M)], #yerr = [E_V1[j][0:],E_V2[j][0:]],
					#fmt   = LINES[6][lines],
					fmt    = 'o',
					zorder = 4,
					color  = color2bused,elinewidth = 1.5, capsize = 5.5,
					markeredgecolor=color2bused, markerfacecolor = 'None',markeredgewidth=0.5,ms=10)
			else:
				pass
			if add_snr_vls == True:
				#print [ax110.annotate('['+str(slc_int_fg [interval_range] + '] ' + splt_smpl_unl), (0.05, 0.8 - (subsmpl*0.15)),xytext=((0.15, 0.8 - (subsmpl*0.15))),arrowprops=dict(arrowstyle = '-',fc=colors[subsmpl],ec=colors[subsmpl],relpos=(0.5, 0.5),lw=2.5),xycoords='axes fraction', family = 'serif', fontsize=18, va='center') for subsmpl,interval_range in enumerate(range(lower_shift,len(slc_int_bg)-upper_shift))]
				[ax110.annotate(str(sbs_snr_vle), 					# this is the text
								(SPEC_SEP_VAR_M[sbs_idx],pts_line_M[sbs_idx]),	# this is the point to label
								textcoords="offset points", 		# how to position the text
								xytext=(2,6), 						# distance from text to points (x,y)
								color='blue',						#
								family='serif',                     #
								fontsize = 12,						#
								ha='center') 						# horizontal alignment can be left, right or center
				for sbs_idx,sbs_snr_vle in enumerate(SPEC_POINTS_M_SNR0)]
			else:
				pass			
		elif mlt_stk_fct == 'avg'  and bst_err_plt == False:
			pts_line_A = SPEC_POINTS_A_9
			pts_line_A = pts_line_A
			color2bused = 'red'
			print
			print colored('Plot values (SEP-BIN):','yellow')
			print SPEC_SEP_VAR
			print colored('Plot values (EW-AVG):','yellow')
			print pts_line_A
			print
			print colored('Number of galaxies per bin:','yellow') 
			print SPEC_POINTS_NMB_A
			print colored('Number of galaxies per bin (SQR):','yellow') 
			print np.sqrt(SPEC_POINTS_NMB_A)
			print
			print colored('SNR Individual Line (Average): ','yellow')
			print SPEC_POINTS_A_SNR
			print
			print colored('Plot values (SEP-BIN):','yellow')
			print SPEC_SEP_VAR,len(SPEC_SEP_VAR)
			print SPEC_SEP_VAR_A,len(SPEC_SEP_VAR_A)
			print colored('Plot values (EW-AVG):','yellow')
			print pts_line_A,len(pts_line_A)
			print
			print colored('Number of galaxies per bin:','yellow') 
			print SPEC_POINTS_NMB_A,len(SPEC_POINTS_NMB_A)
			print SPEC_POINTS_NMB2_A,len(SPEC_POINTS_NMB2_A)
			print colored('Number of galaxies per bin (SQR):','yellow') 
			print	
			print colored('SNR Individual Line (Average): ','yellow')
			print SPEC_POINTS_A_SNR0,len(SPEC_POINTS_A_SNR0)
			print SPEC_POINTS_A_SNR,len(SPEC_POINTS_A_SNR)
			print SPEC_POINTS_A_SNR2,len(SPEC_POINTS_A_SNR2)
			print SPEC_POINTS_A_SNR3,len(SPEC_POINTS_A_SNR3)
			print SPEC_POINTS_A_SNR4,len(SPEC_POINTS_A_SNR4)
			print SPEC_POINTS_A_SNR5,len(SPEC_POINTS_A_SNR5)												
			print				
			plt.plot(SPEC_SEP_VAR_A,pts_line_A,
						#marker = LINES[6][lines],
						marker = 'o',
						color=color2bused,markersize=10,
						zorder = 5,
						label  = LINES[4][lines] +
						' ('+ str(LINES[0][lines])+
						r'$\AA$'+') '+'avg '+
						 "\n"  + 'SNR-A   : '  + str(SPEC_POINTS_A_SNR)  +
						 "\n"  + 'SNR-C   : '  + str(SPEC_POINTS_A_SNR2) +
						 "\n"  + 'N: '    + str(SPEC_POINTS_NMB_A)    +
						 "\n"  + 'N: '    + str(SPEC_POINTS_NMB3_A),
						ls='-')			
			pts_line_ALL_A.append(pts_line_A)
			lbl_line_ALL_A.append(LINES[4][lines]+' ('+ str(LINES[0][lines])+r'$\AA$'+') '+'avg '+color2bused)
			mrk_line_ALL.append(LINES[6][lines])
			clr_line_ALL.append(color2bused)
			if add_snr_vls == True:
				[ax110.annotate(str(sbs_snr_vle), 					# this is the text
								(SPEC_SEP_VAR_A[sbs_idx],pts_line_A[sbs_idx]),	# this is the point to label
								textcoords="offset points", 		# how to position the text
								xytext=(2,6), 						# distance from text to points (x,y)
								color='red',						#
								family='serif',                     #
								fontsize = 12,						#
								ha='center') 						# horizontal alignment can be left, right or center
				for sbs_idx,sbs_snr_vle in enumerate(SPEC_POINTS_A_SNR0)]

			else:
				pass			
		elif mlt_stk_fct == 'avg'  and bst_err_plt == True:
			pts_line_A = SPEC_POINTS_A_9
			pts_line_A = pts_line_A
			color2bused = 'red'
			print
			print colored('Plot values (SEP-BIN):','yellow')
			print SPEC_SEP_VAR
			print colored('Plot values (EW-AVG):','yellow')
			print pts_line_A
			print
			print colored('Number of galaxies per bin:','yellow') 
			print SPEC_POINTS_NMB_A
			print colored('Number of galaxies per bin (SQR):','yellow') 
			print np.sqrt(SPEC_POINTS_NMB_A)
			print
			print colored('SNR Individual Line (Average): ','yellow')
			print SPEC_POINTS_A_SNR
			print
			print colored('Plot values (SEP-BIN):','yellow')
			print SPEC_SEP_VAR,len(SPEC_SEP_VAR)
			print SPEC_SEP_VAR_A,len(SPEC_SEP_VAR_A)
			print colored('Plot values (EW-AVG):','yellow')
			print pts_line_A,len(pts_line_A)
			print
			print colored('Number of galaxies per bin:','yellow') 
			print SPEC_POINTS_NMB2_A,len(SPEC_POINTS_NMB2_A)
			print SPEC_POINTS_NMB_A,len(SPEC_POINTS_NMB_A)
			print SPEC_POINTS_NMB2_A,len(SPEC_POINTS_NMB2_A)
			print colored('Number of galaxies per bin (SQR):','yellow') 
			print
			print colored('SNR Individual Line (Average): ','yellow')
			print SPEC_POINTS_A_SNR0,len(SPEC_POINTS_A_SNR0)
			print SPEC_POINTS_A_SNR,len(SPEC_POINTS_A_SNR)
			print SPEC_POINTS_A_SNR2,len(SPEC_POINTS_A_SNR2)
			print SPEC_POINTS_A_SNR3,len(SPEC_POINTS_A_SNR3)
			print SPEC_POINTS_A_SNR4,len(SPEC_POINTS_A_SNR4)
			print SPEC_POINTS_A_SNR5,len(SPEC_POINTS_A_SNR5)												
			print	
			plt.plot(SPEC_SEP_VAR_A,pts_line_A,
						#marker = LINES[6][lines],
						marker = 'o',
						color  = color2bused,markersize=10,
						zorder = 5,
						label  = LINES[4][lines]  +
						' ('+ str(LINES[0][lines])+ 
						r'$\AA$'+') '+'avg '      +
						 "\n"  + 'SNR-A   : '  + str(SPEC_POINTS_A_SNR)  +
						 "\n"  + 'SNR-C   : '  + str(SPEC_POINTS_A_SNR2) +
						 "\n"  + 'N: '    + str(SPEC_POINTS_NMB_A)    +
						 "\n"  + 'N: '    + str(SPEC_POINTS_NMB3_A),
						ls='-')			
			pts_line_ALL_A.append(pts_line_A)
			lbl_line_ALL_A.append(LINES[4][lines]+' ('+ str(LINES[0][lines])+ r'$\AA$'+') '+'avg '+color2bused)
			mrk_line_ALL.append(LINES[6][lines])
			clr_line_ALL.append(color2bused)
			if bst_err_plt_sym == False and (plt_log_axs == 'x' or plt_log_axs == None):
				plt.errorbar(SPEC_SEP_VAR_A, pts_line_A, 
					yerr   = [abs(pts_line_A-SPEC_POINTS_A_9_ERR_LOW)/np.sqrt(SPEC_POINTS_NMB_A),
							abs(SPEC_POINTS_A_9_ERR_HGH-pts_line_A)/np.sqrt(SPEC_POINTS_NMB_A)], #yerr = [E_V1[j][0:],E_V2[j][0:]],
					#fmt   = LINES[6][lines],
					fmt    = 'o',
					zorder = 4,
					color  = color2bused,elinewidth = 1.5, capsize = 5.5,
					markeredgecolor=color2bused, markerfacecolor = None,markeredgewidth=0.5,ms=10)
			elif bst_err_plt_sym ==True and (plt_log_axs == 'x' or plt_log_axs == None):
				print
				print len(SPEC_SEP_VAR_A),len(pts_line_A)
				print len(pts_line_A),len(SPEC_POINTS_A_9_ERR_HGH),len(SPEC_POINTS_NMB_A)
				print len(pts_line_A),len(SPEC_POINTS_A_9_ERR_LOW),len(SPEC_POINTS_NMB_A)
				print len(SPEC_POINTS_A_SNR0)
				print
				plt.errorbar(SPEC_SEP_VAR_A, pts_line_A, 
					yerr   = [abs(pts_line_A-SPEC_POINTS_A_9_ERR_HGH)/np.sqrt(SPEC_POINTS_NMB_A),
							abs(SPEC_POINTS_A_9_ERR_HGH-pts_line_A)/np.sqrt(SPEC_POINTS_NMB_A)], #yerr = [E_V1[j][0:],E_V2[j][0:]],
					#fmt   = LINES[6][lines],
					fmt    = 'o',
					zorder = 4,
					color  = color2bused,elinewidth = 1.5, capsize = 5.5,
					markeredgecolor=color2bused, markerfacecolor = None,markeredgewidth=0.5,ms=10)
			elif bst_err_plt_sym == False and (plt_log_axs == 'y' or plt_log_axs == 'both'):
				plt.errorbar(SPEC_SEP_VAR_A, pts_line_A, 
					#yerr   = [((abs(pts_line_A-SPEC_POINTS_A_9_ERR_LOW)/np.sqrt(SPEC_POINTS_NMB_A))/pts_line_A)*0.434,
							#((abs(SPEC_POINTS_A_9_ERR_HGH-pts_line_A)/np.sqrt(SPEC_POINTS_NMB_A))/pts_line_A)*0.434], 
					yerr   = [abs(pts_line_A-SPEC_POINTS_A_9_ERR_LOW)/np.sqrt(SPEC_POINTS_NMB_A),
							abs(SPEC_POINTS_A_9_ERR_HGH-pts_line_A)/np.sqrt(SPEC_POINTS_NMB_A)], #yerr = [E_V1[j][0:],E_V2[j][0:]],
					#fmt   = LINES[6][lines],
					fmt    = 'o',
					zorder = 4,
					color  = color2bused,elinewidth = 1.5, capsize = 5.5,
					markeredgecolor=color2bused, markerfacecolor = None,markeredgewidth=0.5,ms=10)
			elif bst_err_plt_sym ==True and (plt_log_axs == 'y' or plt_log_axs == 'both'):
				print
				print len(SPEC_SEP_VAR_A),len(pts_line_A)
				print len(pts_line_A),len(SPEC_POINTS_A_9_ERR_HGH),len(SPEC_POINTS_NMB_A)
				print len(pts_line_A),len(SPEC_POINTS_A_9_ERR_LOW),len(SPEC_POINTS_NMB_A)
				print len(SPEC_POINTS_A_SNR0)
				print
				plt.errorbar(SPEC_SEP_VAR_A, pts_line_A, 
					#yerr   = [((abs(pts_line_A-SPEC_POINTS_A_9_ERR_HGH)/np.sqrt(SPEC_POINTS_NMB_A))/pts_line_A)*0.434,
							#((abs(SPEC_POINTS_A_9_ERR_HGH-pts_line_A)/np.sqrt(SPEC_POINTS_NMB_A))/pts_line_A)*0.434], 
					yerr   = [abs(pts_line_A-SPEC_POINTS_A_9_ERR_HGH)/np.sqrt(SPEC_POINTS_NMB_A),
							abs(SPEC_POINTS_A_9_ERR_HGH-pts_line_A)/np.sqrt(SPEC_POINTS_NMB_A)], #yerr = [E_V1[j][0:],E_V2[j][0:]],
					#fmt   = LINES[6][lines],
					fmt    = 'o',
					zorder = 4,
					color  = color2bused,elinewidth = 1.5, capsize = 5.5,
					markeredgecolor=color2bused, markerfacecolor = None,markeredgewidth=0.5,ms=10)			
			else:
				pass
			if add_snr_vls == True:
				[ax110.annotate(str(sbs_snr_vle), 					# this is the text
								(SPEC_SEP_VAR_A[sbs_idx],pts_line_A[sbs_idx]),	# this is the point to label
								textcoords="offset points", 		# how to position the text
								xytext=(2,6), 						# distance from text to points (x,y)
								color='red',						#
								family='serif',                     # 
								fontsize = 12,						#
								ha='center') 						# horizontal alignment can be left, right or center
				for sbs_idx,sbs_snr_vle in enumerate(SPEC_POINTS_A_SNR0)]

			else:
				pass			
		elif mlt_stk_fct == 'both' and bst_err_plt == False:
			pts_line_M = SPEC_POINTS_M_9
			pts_line_M = pts_line_M
			pts_line_A = SPEC_POINTS_A_9
			pts_line_A = pts_line_A
			color2bused1 = 'blue'
			color2bused2 = 'red'
			print
			print colored('Plot values (SEP-BIN):','yellow')
			print SPEC_SEP_VAR
			print colored('Plot values (EW-MED):','yellow')
			print pts_line_M
			print colored('Plot values (EW-AVG):','yellow')
			print pts_line_A
			print
			print colored('Number of galaxies per bin:','yellow') 
			print SPEC_POINTS_NMB
			print SPEC_POINTS_NMB_A
			print SPEC_POINTS_NMB_M						
			print colored('Number of galaxies per bin (SQR):','yellow') 
			print np.sqrt(SPEC_POINTS_NMB)
			print np.sqrt(SPEC_POINTS_NMB_A)
			print np.sqrt(SPEC_POINTS_NMB_M)						
			print
			print colored('SNR Individual Line (Median): ','yellow')
			print SPEC_POINTS_M_SNR
			print
			print colored('SNR Individual Line (Average): ','yellow')
			print SPEC_POINTS_A_SNR
			print
			print
			print colored('Plot values (SEP-BIN):','yellow')
			print SPEC_SEP_VAR,len(SPEC_SEP_VAR)
			print SPEC_SEP_VAR_M,len(SPEC_SEP_VAR_M)
			print SPEC_SEP_VAR_A,len(SPEC_SEP_VAR_A)
			print colored('Plot values (EW-MED):','yellow')
			print pts_line_M,len(pts_line_M)
			print colored('Plot values (EW-AVG):','yellow')
			print pts_line_A,len(pts_line_A)
			print
			print colored('Number of galaxies per bin:','yellow') 
			print SPEC_POINTS_NMB,len(SPEC_POINTS_NMB)
			print SPEC_POINTS_NMB2,len(SPEC_POINTS_NMB2)
			print SPEC_POINTS_NMB_A,len(SPEC_POINTS_NMB_A)
			print SPEC_POINTS_NMB2_A,len(SPEC_POINTS_NMB2_A)
			print SPEC_POINTS_NMB_M,len(SPEC_POINTS_NMB_M)
			print SPEC_POINTS_NMB2_M,len(SPEC_POINTS_NMB2_M)
			print colored('Number of galaxies per bin (SQR):','yellow') 
			print np.sqrt(SPEC_POINTS_NMB_A),np.sqrt(SPEC_POINTS_NMB_M)
			print np.sqrt(SPEC_POINTS_NMB2_A),np.sqrt(SPEC_POINTS_NMB2_M)
			print	
			print colored('SNR Individual Line (Median): ','yellow')
			print SPEC_POINTS_M_SNR0,len(SPEC_POINTS_M_SNR0)
			print SPEC_POINTS_M_SNR,len(SPEC_POINTS_M_SNR)
			print SPEC_POINTS_M_SNR2,len(SPEC_POINTS_M_SNR2)
			print SPEC_POINTS_M_SNR3,len(SPEC_POINTS_M_SNR3)
			print SPEC_POINTS_M_SNR4,len(SPEC_POINTS_M_SNR4)
			print SPEC_POINTS_M_SNR5,len(SPEC_POINTS_M_SNR5)												
			print
			print colored('SNR Individual Line (Average): ','yellow')
			print SPEC_POINTS_A_SNR0,len(SPEC_POINTS_A_SNR0)
			print SPEC_POINTS_A_SNR,len(SPEC_POINTS_A_SNR)
			print SPEC_POINTS_A_SNR2,len(SPEC_POINTS_A_SNR2)
			print SPEC_POINTS_A_SNR3,len(SPEC_POINTS_A_SNR3)
			print SPEC_POINTS_A_SNR4,len(SPEC_POINTS_A_SNR4)
			print SPEC_POINTS_A_SNR5,len(SPEC_POINTS_A_SNR5)												
			print											
			plt.plot(SPEC_SEP_VAR_M,pts_line_M,
						#marker = LINES[6][lines],
						marker = 'o',
						color  = color2bused1,markersize=10,
						markerfacecolor = 'None',
						zorder = 5,
						label  = LINES[4][lines]  +
						' ('+ str(LINES[0][lines])+
						r'$\AA$'+') '+'med '      +
						 "\n"  + 'SNR-A   : '  + str(SPEC_POINTS_M_SNR)  +
						 "\n"  + 'SNR-C   : '  + str(SPEC_POINTS_M_SNR2) +
						 "\n"  + 'N: '    + str(SPEC_POINTS_NMB)    +
						 "\n"  + 'N: '    + str(SPEC_POINTS_NMB3),
						ls='-.')
			plt.plot(SPEC_SEP_VAR_A,pts_line_A,
						#marker = LINES[6][lines],
						marker = 'o',
						color  = color2bused2,markersize=10,
						zorder = 5,
						label  = LINES[4][lines]  +
						' ('+ str(LINES[0][lines])+
						r'$\AA$'+') '+'avg '      +
						 "\n"  + 'SNR-A   : '  + str(SPEC_POINTS_A_SNR)  +
						 "\n"  + 'SNR-C   : '  + str(SPEC_POINTS_A_SNR2) +
						 "\n"  + 'N: '    + str(SPEC_POINTS_NMB)    +
						 "\n"  + 'N: '    + str(SPEC_POINTS_NMB3),
						ls='-')			
			if add_snr_vls == True:
				[ax110.annotate(str(sbs_snr_vle), 					# this is the text
								(SPEC_SEP_VAR_M[sbs_idx],pts_line_M[sbs_idx]),	# this is the point to label
								textcoords="offset points", 		# how to position the text
								xytext=(2,6), 						# distance from text to points (x,y)
								color='blue',						#
								family='serif',                     #
								fontsize = 12,						#
								ha='center') 						# horizontal alignment can be left, right or center
				for sbs_idx,sbs_snr_vle in enumerate(SPEC_POINTS_M_SNR0)]
				[ax110.annotate(str(sbs_snr_vle), 					# this is the text
								(SPEC_SEP_VAR_A[sbs_idx],pts_line_A[sbs_idx]),	# this is the point to label
								textcoords="offset points", 		# how to position the text
								xytext=(2,6), 						# distance from text to points (x,y)
								color='red',						#
								family='serif',                     #
								fontsize = 12,						#
								ha='center') 						# horizontal alignment can be left, right or center
				for sbs_idx,sbs_snr_vle in enumerate(SPEC_POINTS_A_SNR0)]

			else:
				pass			
		elif mlt_stk_fct == 'both' and bst_err_plt == True:
			pts_line_M = SPEC_POINTS_M_9
			pts_line_M = pts_line_M
			pts_line_A = SPEC_POINTS_A_9
			pts_line_A = pts_line_A
			color2bused1 = 'blue'
			color2bused2 = 'red'
			print
			print colored('Plot values (SEP-BIN):','yellow')
			print len(SPEC_SEP_VAR),SPEC_SEP_VAR
			print len(SPEC_SEP_VAR_M),SPEC_SEP_VAR_M
			print len(SPEC_SEP_VAR_A),SPEC_SEP_VAR_A
			print colored('Plot values (EW-MED):','yellow')
			print len(pts_line_M),pts_line_M
			print colored('Plot values (EW-AVG):','yellow')
			print len(pts_line_A),pts_line_A
			print
			print colored('Errors for Average values:','yellow')
			print len(pts_line_A),pts_line_A
			print len(SPEC_POINTS_A_9_ERR_LOW),SPEC_POINTS_A_9_ERR_LOW
			print len(SPEC_POINTS_A_9_ERR_LOW),SPEC_POINTS_A_9_ERR_LOW
			print len(np.sqrt(SPEC_POINTS_A_9_ERR_LOW)),np.sqrt(SPEC_POINTS_A_9_ERR_LOW)
			print len(np.sqrt(SPEC_POINTS_A_9_ERR_HGH)),np.sqrt(SPEC_POINTS_A_9_ERR_HGH)
			print
			print colored('Errors for Median values:','yellow')
			print len(pts_line_M),pts_line_M
			print len(SPEC_POINTS_M_9_ERR_LOW),SPEC_POINTS_M_9_ERR_LOW
			print len(SPEC_POINTS_M_9_ERR_HGH),SPEC_POINTS_M_9_ERR_HGH
			print len(np.sqrt(SPEC_POINTS_M_9_ERR_LOW)),np.sqrt(SPEC_POINTS_M_9_ERR_LOW)
			print len(np.sqrt(SPEC_POINTS_M_9_ERR_HGH)),np.sqrt(SPEC_POINTS_M_9_ERR_HGH)
			print
			print colored('Number of galaxies per bin ALL:','yellow') 
			print len(SPEC_POINTS_NMB),SPEC_POINTS_NMB
			print len(SPEC_POINTS_NMB2),SPEC_POINTS_NMB2
			print colored('Number of galaxies per bin AVG:','yellow') 
			print len(SPEC_POINTS_NMB_A),SPEC_POINTS_NMB_A
			print len(SPEC_POINTS_NMB2_A),SPEC_POINTS_NMB2_A
			print colored('Number of galaxies per bin MED:','yellow') 
			print len(SPEC_POINTS_NMB_M),SPEC_POINTS_NMB_M
			print len(SPEC_POINTS_NMB2_M),SPEC_POINTS_NMB2_M
			print colored('Number of galaxies per bin (SQR-AVG):','yellow') 
			print len(np.sqrt(SPEC_POINTS_NMB_A)),np.sqrt(SPEC_POINTS_NMB_A)
			print len(np.sqrt(SPEC_POINTS_NMB2_A)),np.sqrt(SPEC_POINTS_NMB2_A)
			print colored('Number of galaxies per bin (SQR-MED):','yellow') 
			print len(np.sqrt(SPEC_POINTS_NMB_M)),np.sqrt(SPEC_POINTS_NMB_M)
			print len(np.sqrt(SPEC_POINTS_NMB2_M)),np.sqrt(SPEC_POINTS_NMB2_M)
			print
			print colored('SNR Individual Line (Median): ','yellow')
			print '******: ',len(SPEC_POINTS_M_SNR0),SPEC_POINTS_M_SNR0
			print 'UB-ALL: ',len(SPEC_POINTS_M_SNR),SPEC_POINTS_M_SNR
			print 'UB-CNT: ',len(SPEC_POINTS_M_SNR2),SPEC_POINTS_M_SNR2
			print 'UB-FIT: ',len(SPEC_POINTS_M_SNR3),SPEC_POINTS_M_SNR3
			print 'UB-PLT: ',len(SPEC_POINTS_M_SNR4),SPEC_POINTS_M_SNR4
			print 'BN-MED: ',len(SPEC_POINTS_M_SNR5),SPEC_POINTS_M_SNR5
			print
			print colored('SNR Individual Line (Average): ','yellow')
			print '******: ',len(SPEC_POINTS_A_SNR0),SPEC_POINTS_A_SNR0
			print 'UB-ALL: ',len(SPEC_POINTS_A_SNR),SPEC_POINTS_A_SNR
			print 'UB-CNT: ',len(SPEC_POINTS_A_SNR2),SPEC_POINTS_A_SNR2
			print 'UB-FIT: ',len(SPEC_POINTS_A_SNR3),SPEC_POINTS_A_SNR3
			print 'UB-PLT: ',len(SPEC_POINTS_A_SNR4),SPEC_POINTS_A_SNR4
			print 'BN-MED: ',len(SPEC_POINTS_A_SNR5),SPEC_POINTS_A_SNR5
			print
			print colored('Confidence Intervals (Median): ','yellow')
			print len(pts_line_M),pts_line_M
			print len(SPEC_POINTS_M_9_ERR_LOW),SPEC_POINTS_M_9_ERR_LOW
			print len(SPEC_POINTS_M_9_ERR_HGH),SPEC_POINTS_M_9_ERR_HGH
			print len(SPEC_POINTS_NMB_M),SPEC_POINTS_NMB_M
			print
			print colored('Confidence Intervals (Average): ','yellow')
			print len(pts_line_A),pts_line_A
			print len(SPEC_POINTS_A_9_ERR_LOW),SPEC_POINTS_A_9_ERR_LOW
			print len(SPEC_POINTS_A_9_ERR_HGH),SPEC_POINTS_A_9_ERR_HGH
			print len(SPEC_POINTS_NMB_A),SPEC_POINTS_NMB_A
			print
			print colored('Errors for Average values considering sample size (N):','yellow')
			print abs(pts_line_A-(SPEC_POINTS_A_9_ERR_LOW))/np.sqrt(SPEC_POINTS_NMB_A)
			print colored('Errors for Median values considering sample size (N):','yellow')
			print abs((SPEC_POINTS_M_9_ERR_HGH)-pts_line_M)/np.sqrt(SPEC_POINTS_NMB_M)
			print
			plt.plot(SPEC_SEP_VAR_M,pts_line_M,
						#marker = LINES[6][lines],
						marker = 'o',
						color  = color2bused1,markersize=10,
						markerfacecolor = 'None',
						zorder = 5,
						label  = LINES[4][lines]   +
						' ('+ str(LINES[0][lines]) +
						r'$\AA$' + ') '+'med '     +
						 "\n"  + 'SNR-A   : '  + str(SPEC_POINTS_M_SNR)  +
						 "\n"  + 'SNR-C   : '  + str(SPEC_POINTS_M_SNR2) +
						 "\n"  + 'N: '    + str(SPEC_POINTS_NMB)    +
						 "\n"  + 'N: '    + str(SPEC_POINTS_NMB3),
						ls='-.')
			plt.plot(SPEC_SEP_VAR_A,pts_line_A,
						#marker = LINES[6][lines],
						marker = 'o',
						color=color2bused2,markersize=10,
						zorder = 5,
						label  = LINES[4][lines]   +
						' ('+ str(LINES[0][lines]) +
						r'$\AA$' + ') '+'avg '     +
						 "\n"  + 'SNR-A   : '  + str(SPEC_POINTS_A_SNR)  +
						 "\n"  + 'SNR-C   : '  + str(SPEC_POINTS_A_SNR2) +
						 "\n"  + 'N: '    + str(SPEC_POINTS_NMB)    +
						 "\n"  + 'N: '    + str(SPEC_POINTS_NMB3),
						ls='-')			
			if bst_err_plt_sym == False and (plt_log_axs == 'x' or plt_log_axs == None):
				MED_EW_PTS_LOW = abs(pts_line_M-SPEC_POINTS_M_9_ERR_LOW)/np.sqrt(SPEC_POINTS_NMB_M)
				MED_EW_PTS_HGH = abs(SPEC_POINTS_M_9_ERR_HGH-pts_line_M)/np.sqrt(SPEC_POINTS_NMB_M)
				AVG_EW_PTS_LOW = abs(pts_line_A-SPEC_POINTS_A_9_ERR_LOW)/np.sqrt(SPEC_POINTS_NMB_A)
				AVG_EW_PTS_HGH = abs(SPEC_POINTS_A_9_ERR_HGH-pts_line_A)/np.sqrt(SPEC_POINTS_NMB_A)
				plt.errorbar(SPEC_SEP_VAR_M, pts_line_M, 
					#yerr  = [abs(pts_line_M-SPEC_POINTS_M_9_ERR_LOW)/np.sqrt(SPEC_POINTS_NMB_M),
							#abs(SPEC_POINTS_M_9_ERR_HGH-pts_line_M)/np.sqrt(SPEC_POINTS_NMB_M)], 
					yerr  = [MED_EW_PTS_LOW,MED_EW_PTS_HGH],
					#fmt   = LINES[6][lines],
					fmt    = 'o',
					color  = color2bused1,elinewidth = 1.5, capsize = 5.5,
					zorder = 4,
					markeredgecolor=color2bused1, markerfacecolor = 'None',markeredgewidth=0.5,ms=10)
				plt.errorbar(SPEC_SEP_VAR_A, pts_line_A, 
					#yerr  = [abs(pts_line_A-SPEC_POINTS_A_9_ERR_LOW)/np.sqrt(SPEC_POINTS_NMB_A),
							#abs(SPEC_POINTS_A_9_ERR_HGH-pts_line_A)/np.sqrt(SPEC_POINTS_NMB_A)], #yerr = [E_V1[j][0:],E_V2[j][0:]],
					yerr  = [AVG_EW_PTS_LOW,AVG_EW_PTS_HGH],
					#fmt   = LINES[6][lines],
					fmt    = 'o',
					color  = color2bused2,elinewidth = 1.5, capsize = 5.5,
					zorder = 4,
					markeredgecolor=color2bused2, markerfacecolor = None,markeredgewidth=0.5,ms=10)
			elif bst_err_plt_sym ==True and (plt_log_axs == 'x' or plt_log_axs == None):
				print
				print len(SPEC_SEP_VAR_M),len(pts_line_M)
				print len(pts_line_M),len(SPEC_POINTS_M_9_ERR_HGH),len(SPEC_POINTS_NMB_M)
				print len(pts_line_M),len(SPEC_POINTS_M_9_ERR_LOW),len(SPEC_POINTS_NMB_M)
				print len(SPEC_POINTS_M_SNR0)
				print
				print len(SPEC_SEP_VAR_A),len(pts_line_A)
				print len(pts_line_A),len(SPEC_POINTS_A_9_ERR_HGH),len(SPEC_POINTS_NMB_A)
				print len(pts_line_A),len(SPEC_POINTS_A_9_ERR_LOW),len(SPEC_POINTS_NMB_A)
				print len(SPEC_POINTS_A_SNR0)
				print
				MED_EW_PTS_LOW = abs(pts_line_M-SPEC_POINTS_M_9_ERR_HGH)/np.sqrt(SPEC_POINTS_NMB_M)
				MED_EW_PTS_HGH = abs(SPEC_POINTS_M_9_ERR_HGH-pts_line_M)/np.sqrt(SPEC_POINTS_NMB_M)
				AVG_EW_PTS_LOW = abs(pts_line_A-SPEC_POINTS_A_9_ERR_HGH)/np.sqrt(SPEC_POINTS_NMB_A)
				AVG_EW_PTS_HGH = abs(SPEC_POINTS_A_9_ERR_HGH-pts_line_A)/np.sqrt(SPEC_POINTS_NMB_A)				
				plt.errorbar(SPEC_SEP_VAR_M, pts_line_M, 
					#yerr  = [abs(pts_line_M-SPEC_POINTS_M_9_ERR_HGH)/np.sqrt(SPEC_POINTS_NMB_M),
							#abs(SPEC_POINTS_M_9_ERR_HGH-pts_line_M)/np.sqrt(SPEC_POINTS_NMB_M)], #yerr = [E_V1[j][0:],E_V2[j][0:]],
					yerr  = [MED_EW_PTS_LOW,MED_EW_PTS_HGH],
					#fmt   = LINES[6][lines],
					fmt   = 'o',
					color = color2bused1,elinewidth = 1.5, capsize = 5.5,
					zorder = 2,
					markeredgecolor=color2bused1, markerfacecolor = 'None',markeredgewidth=0.5,ms=10)
				plt.errorbar(SPEC_SEP_VAR_A, pts_line_A, 
					#yerr  = [abs(pts_line_A-SPEC_POINTS_A_9_ERR_HGH)/np.sqrt(SPEC_POINTS_NMB_A),
							#abs(SPEC_POINTS_A_9_ERR_HGH-pts_line_A)/np.sqrt(SPEC_POINTS_NMB_A)], #yerr = [E_V1[j][0:],E_V2[j][0:]],
					yerr  = [AVG_EW_PTS_LOW,AVG_EW_PTS_HGH],
					#fmt   = LINES[6][lines],
					fmt   = 'o',
					color = color2bused2,elinewidth = 1.5, capsize = 5.5,
					zorder = 2,
					markeredgecolor=color2bused2, markerfacecolor = None,markeredgewidth=0.5,ms=10)
			elif bst_err_plt_sym == False and (plt_log_axs == 'y' or plt_log_axs == 'both'):
				MED_EW_PTS_LOW = abs(pts_line_M-SPEC_POINTS_M_9_ERR_LOW)/np.sqrt(SPEC_POINTS_NMB_M)
				MED_EW_PTS_HGH = abs(SPEC_POINTS_M_9_ERR_HGH-pts_line_M)/np.sqrt(SPEC_POINTS_NMB_M)
				AVG_EW_PTS_LOW = abs(pts_line_A-SPEC_POINTS_A_9_ERR_LOW)/np.sqrt(SPEC_POINTS_NMB_A)
				AVG_EW_PTS_HGH = abs(SPEC_POINTS_A_9_ERR_HGH-pts_line_A)/np.sqrt(SPEC_POINTS_NMB_A)
				plt.errorbar(SPEC_SEP_VAR_M, pts_line_M, 
					#yerr  = [abs(pts_line_M-SPEC_POINTS_M_9_ERR_LOW)/np.sqrt(SPEC_POINTS_NMB_M),
							#abs(SPEC_POINTS_M_9_ERR_HGH-pts_line_M)/np.sqrt(SPEC_POINTS_NMB_M)], #yerr = [E_V1[j][0:],E_V2[j][0:]],
					#yerr  = [((abs(pts_line_M-SPEC_POINTS_M_9_ERR_LOW)/np.sqrt(SPEC_POINTS_NMB_M))/pts_line_M)*0.434,
							#((abs(SPEC_POINTS_M_9_ERR_HGH-pts_line_M)/np.sqrt(SPEC_POINTS_NMB_M))/pts_line_M)*0.434],
					yerr  = [MED_EW_PTS_LOW,MED_EW_PTS_HGH],
					#fmt   = LINES[6][lines],
					fmt   = 'o',
					color = color2bused1,elinewidth = 1.5, capsize = 5.5,
					zorder = 4,
					markeredgecolor=color2bused1, markerfacecolor = 'None',markeredgewidth=0.5,ms=10)
				plt.errorbar(SPEC_SEP_VAR_A, pts_line_A, 
					#yerr  = [abs(pts_line_A-SPEC_POINTS_A_9_ERR_LOW)/np.sqrt(SPEC_POINTS_NMB_A),abs(SPEC_POINTS_A_9_ERR_HGH-pts_line_A)/np.sqrt(SPEC_POINTS_NMB_A)], #yerr = [E_V1[j][0:],E_V2[j][0:]],
					#yerr  = [((abs(pts_line_A-SPEC_POINTS_A_9_ERR_LOW)/np.sqrt(SPEC_POINTS_NMB_A))/pts_line_A)*0.434,
							#((abs(SPEC_POINTS_A_9_ERR_HGH-pts_line_A)/np.sqrt(SPEC_POINTS_NMB_A))/pts_line_A)*0.434],
					yerr  = [AVG_EW_PTS_LOW,AVG_EW_PTS_HGH],
					#fmt   = LINES[6][lines],
					fmt   = 'o',
					color = color2bused2,elinewidth = 1.5, capsize = 5.5,
					zorder = 4,
					markeredgecolor=color2bused2, markerfacecolor = None,markeredgewidth=0.5,ms=10)
			elif bst_err_plt_sym ==True and (plt_log_axs == 'y' or plt_log_axs == 'both'):
				print
				print len(SPEC_SEP_VAR_M),len(pts_line_M)
				print len(pts_line_M),len(SPEC_POINTS_M_9_ERR_HGH),len(SPEC_POINTS_NMB_M)
				print len(pts_line_M),len(SPEC_POINTS_M_9_ERR_LOW),len(SPEC_POINTS_NMB_M)
				print len(SPEC_POINTS_M_SNR0)
				print
				print len(SPEC_SEP_VAR_A),len(pts_line_A)
				print len(pts_line_A),len(SPEC_POINTS_A_9_ERR_HGH),len(SPEC_POINTS_NMB_A)
				print len(pts_line_A),len(SPEC_POINTS_A_9_ERR_LOW),len(SPEC_POINTS_NMB_A)
				print len(SPEC_POINTS_A_SNR0)
				print
				MED_EW_PTS_LOW = abs(pts_line_M-SPEC_POINTS_M_9_ERR_HGH)/np.sqrt(SPEC_POINTS_NMB_M)
				MED_EW_PTS_HGH = abs(SPEC_POINTS_M_9_ERR_HGH-pts_line_M)/np.sqrt(SPEC_POINTS_NMB_M)
				AVG_EW_PTS_LOW = abs(pts_line_A-SPEC_POINTS_A_9_ERR_HGH)/np.sqrt(SPEC_POINTS_NMB_A)
				AVG_EW_PTS_HGH = abs(SPEC_POINTS_A_9_ERR_HGH-pts_line_A)/np.sqrt(SPEC_POINTS_NMB_A)
				plt.errorbar(SPEC_SEP_VAR_M, pts_line_M, 
					#yerr  = [abs(pts_line_M-SPEC_POINTS_M_9_ERR_HGH)/np.sqrt(SPEC_POINTS_NMB_M),
							#abs(SPEC_POINTS_M_9_ERR_HGH-pts_line_M)/np.sqrt(SPEC_POINTS_NMB_M)], #yerr = [E_V1[j][0:],E_V2[j][0:]],
					#yerr  = [((abs(pts_line_M-SPEC_POINTS_M_9_ERR_HGH)/np.sqrt(SPEC_POINTS_NMB_M))/pts_line_M)*0.434,
							#((abs(SPEC_POINTS_M_9_ERR_HGH-pts_line_M)/np.sqrt(SPEC_POINTS_NMB_M))/pts_line_M)*0.434], #yerr = [E_V1[j][0:],E_V2[j][0:]],
					yerr  = [MED_EW_PTS_LOW,MED_EW_PTS_HGH],
					#fmt   = LINES[6][lines],
					fmt   = 'o',
					color = color2bused1,elinewidth = 1.5, capsize = 5.5,
					zorder = 2,
					markeredgecolor=color2bused1, markerfacecolor = 'None',markeredgewidth=0.5,ms=10)
				plt.errorbar(SPEC_SEP_VAR_A, pts_line_A, 
					#yerr  = [abs(pts_line_A-SPEC_POINTS_A_9_ERR_HGH)/np.sqrt(SPEC_POINTS_NMB_A),
							#abs(SPEC_POINTS_A_9_ERR_HGH-pts_line_A)/np.sqrt(SPEC_POINTS_NMB_A)], #yerr = [E_V1[j][0:],E_V2[j][0:]],
					#yerr  = [((abs(pts_line_A-SPEC_POINTS_A_9_ERR_HGH)/np.sqrt(SPEC_POINTS_NMB_A))/pts_line_A)*0.434,
							#((abs(SPEC_POINTS_A_9_ERR_HGH-pts_line_A)/np.sqrt(SPEC_POINTS_NMB_A))/pts_line_A)*0.434], #yerr = [E_V1[j][0:],E_V2[j][0:]],
					yerr  = [AVG_EW_PTS_LOW,AVG_EW_PTS_HGH],
					#fmt   = LINES[6][lines],
					fmt   = 'o',
					color = color2bused2,elinewidth = 1.5, capsize = 5.5,
					zorder = 2,
					markeredgecolor=color2bused2, markerfacecolor = None,markeredgewidth=0.5,ms=10)
			else:
				print
				print 'Fnc_Srk_Plt.py'
				print 'Line 38903'
				print 				
				quit()
				pass
			if add_snr_vls == True:
				#print [ax110.annotate('['+str(slc_int_fg [interval_range] + '] ' + splt_smpl_unl), (0.05, 0.8 - (subsmpl*0.15)),xytext=((0.15, 0.8 - (subsmpl*0.15))),arrowprops=dict(arrowstyle = '-',fc=colors[subsmpl],ec=colors[subsmpl],relpos=(0.5, 0.5),lw=2.5),xycoords='axes fraction', family = 'serif', fontsize=18, va='center') for subsmpl,interval_range in enumerate(range(lower_shift,len(slc_int_bg)-upper_shift))]
				[ax110.annotate(str(sbs_snr_vle), 					# this is the text
								(SPEC_SEP_VAR_M[sbs_idx],pts_line_M[sbs_idx]),	# this is the point to label
								textcoords="offset points", 		# how to position the text
								xytext=(2,6), 						# distance from text to points (x,y)
								color='blue',						#
								family='serif',                     #
								fontsize = 12,						#
								ha='center') 						# horizontal alignment can be left, right or center
				for sbs_idx,sbs_snr_vle in enumerate(SPEC_POINTS_M_SNR0)]
				[ax110.annotate(str(sbs_snr_vle), 					# this is the text
								(SPEC_SEP_VAR_A[sbs_idx],pts_line_A[sbs_idx]),	# this is the point to label
								textcoords="offset points", 		# how to position the text
								xytext=(2,6), 						# distance from text to points (x,y)
								color='red',						#
								family='serif',                     #
								fontsize = 12,						#
								ha='center') 						# horizontal alignment can be left, right or center
				for sbs_idx,sbs_snr_vle in enumerate(SPEC_POINTS_A_SNR0)]

			else:
				pass
		else:
			pass
		if mlt_stk_fct == 'med' and cln_snr_aux == True: 
			print
			print colored('Plot values (SEP-BIN):','magenta')
			print SPEC_SEP_VAR_M_AUX
			print colored('Plot values (EW-MED):','magenta')
			print SPEC_POINTS_M_9_AUX
			print 										
			print SPEC_SEP_VAR_M_AUX,SPEC_POINTS_M_9_AUX
			print										
			plt.scatter(SPEC_SEP_VAR_M_AUX,SPEC_POINTS_M_9_AUX,
						marker = 'o',
						color  = 'black',#color2bused2,
						s      = 20,
						zorder = 6)
		elif mlt_stk_fct == 'avg' and cln_snr_aux == True: 
			print
			print colored('Plot values (SEP-BIN):','magenta')
			print SPEC_SEP_VAR_A_AUX
			print colored('Plot values (EW-AVG):','magenta')
			print SPEC_POINTS_A_9_AUX
			print
			print 										
			print SPEC_SEP_VAR_A_AUX,SPEC_POINTS_A_9_AUX
			print										
			plt.scatter(SPEC_SEP_VAR_A_AUX,SPEC_POINTS_A_9_AUX,
						marker = 'o',
						color  = 'black',#color2bused1,
						s      = 20,
						zorder = 6)
		elif mlt_stk_fct == 'both' and cln_snr_aux == True: 
			print
			print colored('Plot values (SEP-BIN):','magenta')
			print SPEC_SEP_VAR_M_AUX
			print SPEC_SEP_VAR_A_AUX
			print colored('Plot values (EW-MED):','magenta')
			print SPEC_POINTS_M_9_AUX
			print colored('Plot values (EW-AVG):','magenta')
			print SPEC_POINTS_A_9_AUX
			print
			print 										
			print SPEC_SEP_VAR_M_AUX,SPEC_POINTS_M_9_AUX
			print SPEC_SEP_VAR_A_AUX,SPEC_POINTS_A_9_AUX
			print										
			plt.scatter(SPEC_SEP_VAR_A_AUX,SPEC_POINTS_A_9_AUX,
						marker = 'o',
						color  = 'black',#color2bused1,
						s      = 20,
						zorder = 6)
			plt.scatter(SPEC_SEP_VAR_M_AUX,SPEC_POINTS_M_9_AUX,
						marker = 'o',
						color  = 'black',#color2bused2,
						s      = 20,
						zorder = 6)
		else:
			pass
		###############################################PLOT EW PROFILE###################################################

		min_rho_x, max_rho_x = ax110.get_xlim()
		min_ewd_x, max_ewd_x = ax110.get_ylim()

		###############################PLT-PTS-TBL###############################
		if fit_fnct == 'gaussM' and ems_lne_ctb == True:
			emm_sfx = '-Emm'
		else:
			emm_sfx = ''
		tbl_format_op2  = 'ascii.fixed_width_two_line'

		if mlt_stk_fct == 'med'  and bst_err_plt == False:
			rtM                        = astropy.table.Table()
			rtM['SPEC_SEP_VAR_M'     + '_' + str(str(LINES[0][lines]))] = SPEC_SEP_VAR_M
			rtM['pts_line_M'         + '_' + str(str(LINES[0][lines]))] = pts_line_M
			rtM['SPEC_POINTS_M_SNR0' + '_' + str(str(LINES[0][lines]))] = SPEC_POINTS_M_SNR0
			rtM['SPEC_POINTS_NMB_M'  + '_' + str(str(LINES[0][lines]))] = SPEC_POINTS_NMB_M


			rtM['MED_EW_PTS_LOW'    + '_' + str(str(LINES[0][lines]))] = MED_EW_PTS_LOW
			rtM['MED_EW_PTS_HGH'    + '_' + str(str(LINES[0][lines]))] = MED_EW_PTS_HGH

			tbl_plt_med = plt_tbl_res + plt_sufix_fnm + '-' + stk_function_file + stk_function + '-' + fit_typ + '-EW-'+ plt_nme_prp +'-ALL'+ '-' + fit_type_m + '_m-' + fit_type_e + emm_sfx + '-' + str(LINES[0][lines]) + '-' + LINES[3][lines] +  '-med.csv'#(str(bs_tbl.split('.csv')[0]) + '-BS_MST_' +str(bs_i) + '.' + tbl_format_opt).split('/')[-1]
			tbl_plt_me2 = plt_tbl_res + plt_sufix_fnm + '-' + stk_function_file + stk_function + '-' + fit_typ + '-EW-'+ plt_nme_prp +'-ALL'+ '-' + fit_type_m + '_m-' + fit_type_e + emm_sfx + '-' + str(LINES[0][lines]) + '-' + LINES[3][lines] +  '-med.dat'#(str(bs_tbl.split('.csv')[0]) + '-BS_MST_' +str(bs_i) + '.' + tbl_format_opt).split('/')[-1]

			rtM.write(tbl_plt_med, format=tbl_format_opt,overwrite=True)
			rtM.write(tbl_plt_me2, format=tbl_format_op2,overwrite=True)

			print
			print 'Results containing Plot Tables galaxies in table: '
			print colored(tbl_plt_med,'green')
			print colored(tbl_plt_me2,'green')
			print
		elif mlt_stk_fct == 'med'  and bst_err_plt == True:
			rtM                        = astropy.table.Table()
			rtM['SPEC_SEP_VAR_M'     + '_' + str(str(LINES[0][lines]))] = SPEC_SEP_VAR_M
			rtM['pts_line_M'         + '_' + str(str(LINES[0][lines]))] = pts_line_M
			rtM['SPEC_POINTS_M_SNR0' + '_' + str(str(LINES[0][lines]))] = SPEC_POINTS_M_SNR0
			rtM['SPEC_POINTS_NMB_M'  + '_' + str(str(LINES[0][lines]))] = SPEC_POINTS_NMB_M


			rtM['MED_EW_PTS_LOW'    + '_' + str(str(LINES[0][lines]))] = MED_EW_PTS_LOW
			rtM['MED_EW_PTS_HGH'    + '_' + str(str(LINES[0][lines]))] = MED_EW_PTS_HGH

			tbl_plt_med = plt_tbl_res + plt_sufix_fnm + '-' + stk_function_file + stk_function + '-' + fit_typ + '-EW-'+ plt_nme_prp +'-ALL'+ '-' + fit_type_m + '_m-' + fit_type_e + emm_sfx + '-' + str(LINES[0][lines]) + '-' + LINES[3][lines] +  '-med.csv'#(str(bs_tbl.split('.csv')[0]) + '-BS_MST_' +str(bs_i) + '.' + tbl_format_opt).split('/')[-1]
			tbl_plt_me2 = plt_tbl_res + plt_sufix_fnm + '-' + stk_function_file + stk_function + '-' + fit_typ + '-EW-'+ plt_nme_prp +'-ALL'+ '-' + fit_type_m + '_m-' + fit_type_e + emm_sfx + '-' + str(LINES[0][lines]) + '-' + LINES[3][lines] +  '-med.dat'#(str(bs_tbl.split('.csv')[0]) + '-BS_MST_' +str(bs_i) + '.' + tbl_format_opt).split('/')[-1]

			rtM.write(tbl_plt_med, format=tbl_format_opt,overwrite=True)
			rtM.write(tbl_plt_me2, format=tbl_format_op2,overwrite=True)

			print
			print 'Results containing Plot Tables galaxies in table: '
			print colored(tbl_plt_med,'green')
			print colored(tbl_plt_me2,'green')
			print
		elif mlt_stk_fct == 'avg'  and bst_err_plt == False:
			rtA                        = astropy.table.Table()
			rtA['SPEC_SEP_VAR_A'     + '_' + str(str(LINES[0][lines]))] = SPEC_SEP_VAR_A
			rtA['pts_line_A'         + '_' + str(str(LINES[0][lines]))] = pts_line_A
			rtA['SPEC_POINTS_A_SNR0' + '_' + str(str(LINES[0][lines]))] = SPEC_POINTS_A_SNR0
			rtA['SPEC_POINTS_NMB_A'  + '_' + str(str(LINES[0][lines]))] = SPEC_POINTS_NMB_A

			tbl_plt_avg = plt_tbl_res + plt_sufix_fnm + '-' + stk_function_file + stk_function + '-' + fit_typ + '-EW-'+ plt_nme_prp +'-ALL'+ '-' + fit_type_m + '_m-' + fit_type_e + emm_sfx + '-' + str(LINES[0][lines]) + '-' + LINES[3][lines] +  '-avg.csv'#(str(bs_tbl.split('.csv')[0]) + '-BS_MST_' +str(bs_i) + '.' + tbl_format_opt).split('/')[-1]
			tbl_plt_av2 = plt_tbl_res + plt_sufix_fnm + '-' + stk_function_file + stk_function + '-' + fit_typ + '-EW-'+ plt_nme_prp +'-ALL'+ '-' + fit_type_m + '_m-' + fit_type_e + emm_sfx + '-' + str(LINES[0][lines]) + '-' + LINES[3][lines] +  '-avg.dat'#(str(bs_tbl.split('.csv')[0]) + '-BS_MST_' +str(bs_i) + '.' + tbl_format_opt).split('/')[-1]

			rtA.write(tbl_plt_avg, format=tbl_format_opt,overwrite=True)
			rtA.write(tbl_plt_av2, format=tbl_format_op2,overwrite=True)

			print
			print 'Results containing Plot Tables galaxies in table: '
			print colored(tbl_plt_med,'green')
			print colored(tbl_plt_avg,'green')
			print colored(tbl_plt_me2,'green')
			print colored(tbl_plt_av2,'green')
			print
		elif mlt_stk_fct == 'avg'  and bst_err_plt == True:
			rtA                        = astropy.table.Table()
			rtA['SPEC_SEP_VAR_A'     + '_' + str(str(LINES[0][lines]))] = SPEC_SEP_VAR_A
			rtA['pts_line_A'         + '_' + str(str(LINES[0][lines]))] = pts_line_A
			rtA['SPEC_POINTS_A_SNR0' + '_' + str(str(LINES[0][lines]))] = SPEC_POINTS_A_SNR0
			rtA['SPEC_POINTS_NMB_A'  + '_' + str(str(LINES[0][lines]))] = SPEC_POINTS_NMB_A

			rtA['AVG_EW_PTS_LOW'    + '_' + str(str(LINES[0][lines]))] = AVG_EW_PTS_LOW
			rtA['AVG_EW_PTS_HGH'    + '_' + str(str(LINES[0][lines]))] = AVG_EW_PTS_HGH

			tbl_plt_avg = plt_tbl_res + plt_sufix_fnm + '-' + stk_function_file + stk_function + '-' + fit_typ + '-EW-'+ plt_nme_prp +'-ALL'+ '-' + fit_type_m + '_m-' + fit_type_e + emm_sfx + '-' + str(LINES[0][lines]) + '-' + LINES[3][lines] +  '-avg.csv'#(str(bs_tbl.split('.csv')[0]) + '-BS_MST_' +str(bs_i) + '.' + tbl_format_opt).split('/')[-1]
			tbl_plt_av2 = plt_tbl_res + plt_sufix_fnm + '-' + stk_function_file + stk_function + '-' + fit_typ + '-EW-'+ plt_nme_prp +'-ALL'+ '-' + fit_type_m + '_m-' + fit_type_e + emm_sfx + '-' + str(LINES[0][lines]) + '-' + LINES[3][lines] +  '-avg.dat'#(str(bs_tbl.split('.csv')[0]) + '-BS_MST_' +str(bs_i) + '.' + tbl_format_opt).split('/')[-1]

			rtA.write(tbl_plt_avg, format=tbl_format_opt,overwrite=True)
			rtA.write(tbl_plt_av2, format=tbl_format_op2,overwrite=True)

			print
			print 'Results containing Plot Tables galaxies in table: '
			print colored(tbl_plt_med,'green')
			print colored(tbl_plt_avg,'green')
			print colored(tbl_plt_me2,'green')
			print colored(tbl_plt_av2,'green')
			print
		elif mlt_stk_fct == 'both' and bst_err_plt == False:
			rtA                        = astropy.table.Table()
			rtA['SPEC_SEP_VAR_A'     + '_' + str(str(LINES[0][lines]))] = SPEC_SEP_VAR_A
			rtA['pts_line_A'         + '_' + str(str(LINES[0][lines]))] = pts_line_A
			rtA['SPEC_POINTS_A_SNR0' + '_' + str(str(LINES[0][lines]))] = SPEC_POINTS_A_SNR0
			rtA['SPEC_POINTS_NMB_A'  + '_' + str(str(LINES[0][lines]))] = SPEC_POINTS_NMB_A

			rtM                        = astropy.table.Table()
			rtM['SPEC_SEP_VAR_M'     + '_' + str(str(LINES[0][lines]))] = SPEC_SEP_VAR_M
			rtM['pts_line_M'         + '_' + str(str(LINES[0][lines]))] = pts_line_M
			rtM['SPEC_POINTS_M_SNR0' + '_' + str(str(LINES[0][lines]))] = SPEC_POINTS_M_SNR0
			rtM['SPEC_POINTS_NMB_M'  + '_' + str(str(LINES[0][lines]))] = SPEC_POINTS_NMB_M

			tbl_plt_med = plt_tbl_res + plt_sufix_fnm + '-' + stk_function_file + stk_function + '-' + fit_typ + '-EW-'+ plt_nme_prp +'-ALL'+ '-' + fit_type_m + '_m-' + fit_type_e + emm_sfx + '-' + str(LINES[0][lines]) + '-' + LINES[3][lines] +  '-med.csv'#(str(bs_tbl.split('.csv')[0]) + '-BS_MST_' +str(bs_i) + '.' + tbl_format_opt).split('/')[-1]
			tbl_plt_avg = plt_tbl_res + plt_sufix_fnm + '-' + stk_function_file + stk_function + '-' + fit_typ + '-EW-'+ plt_nme_prp +'-ALL'+ '-' + fit_type_m + '_m-' + fit_type_e + emm_sfx + '-' + str(LINES[0][lines]) + '-' + LINES[3][lines] +  '-avg.csv'#(str(bs_tbl.split('.csv')[0]) + '-BS_MST_' +str(bs_i) + '.' + tbl_format_opt).split('/')[-1]
			tbl_plt_me2 = plt_tbl_res + plt_sufix_fnm + '-' + stk_function_file + stk_function + '-' + fit_typ + '-EW-'+ plt_nme_prp +'-ALL'+ '-' + fit_type_m + '_m-' + fit_type_e + emm_sfx + '-' + str(LINES[0][lines]) + '-' + LINES[3][lines] +  '-med.dat'#(str(bs_tbl.split('.csv')[0]) + '-BS_MST_' +str(bs_i) + '.' + tbl_format_opt).split('/')[avg-1]
			tbl_plt_av2 = plt_tbl_res + plt_sufix_fnm + '-' + stk_function_file + stk_function + '-' + fit_typ + '-EW-'+ plt_nme_prp +'-ALL'+ '-' + fit_type_m + '_m-' + fit_type_e + emm_sfx + '-' + str(LINES[0][lines]) + '-' + LINES[3][lines] +  '-avg.dat'#(str(bs_tbl.split('.csv')[0]) + '-BS_MST_' +str(bs_i) + '.' + tbl_format_opt).split('/')[-1]

			rtM.write(tbl_plt_med, format=tbl_format_opt,overwrite=True)
			rtA.write(tbl_plt_avg, format=tbl_format_opt,overwrite=True)
			rtM.write(tbl_plt_me2, format=tbl_format_op2,overwrite=True)
			rtA.write(tbl_plt_av2, format=tbl_format_op2,overwrite=True)

			print
			print 'Results containing Plot Tables galaxies in table: '
			print colored(tbl_plt_med,'green')
			print colored(tbl_plt_avg,'green')
			print colored(tbl_plt_me2,'green')
			print colored(tbl_plt_av2,'green')
			print
		elif mlt_stk_fct == 'both' and bst_err_plt == True:
			rtA                        = astropy.table.Table()
			rtA['SPEC_SEP_VAR_A'     + '_' + str(str(LINES[0][lines]))] = np.round(SPEC_SEP_VAR_A,1)
			rtA['pts_line_A'         + '_' + str(str(LINES[0][lines]))] = np.round(pts_line_A,3)
			rtA['AVG_EW_PTS_LOW'     + '_' + str(str(LINES[0][lines]))] = np.round(AVG_EW_PTS_LOW,3)
			rtA['AVG_EW_PTS_HGH'     + '_' + str(str(LINES[0][lines]))] = np.round(AVG_EW_PTS_HGH,3)
			rtA['SPEC_POINTS_A_SNR0' + '_' + str(str(LINES[0][lines]))] = SPEC_POINTS_A_SNR0
			rtA['SPEC_POINTS_NMB_A'  + '_' + str(str(LINES[0][lines]))] = SPEC_POINTS_NMB_A

			rtM                        = astropy.table.Table()
			rtM['SPEC_SEP_VAR_M'     + '_' + str(str(LINES[0][lines]))] = np.round(SPEC_SEP_VAR_M,1)
			rtM['pts_line_M'         + '_' + str(str(LINES[0][lines]))] = np.round(pts_line_M,3)
			rtM['MED_EW_PTS_LOW'     + '_' + str(str(LINES[0][lines]))] = np.round(MED_EW_PTS_LOW,3)
			rtM['MED_EW_PTS_HGH'     + '_' + str(str(LINES[0][lines]))] = np.round(MED_EW_PTS_HGH,3)
			rtM['SPEC_POINTS_M_SNR0' + '_' + str(str(LINES[0][lines]))] = SPEC_POINTS_M_SNR0
			rtM['SPEC_POINTS_NMB_M'  + '_' + str(str(LINES[0][lines]))] = SPEC_POINTS_NMB_M



			tbl_plt_med = plt_tbl_res + plt_sufix_fnm + '-' + stk_function_file + stk_function + '-' + fit_typ + '-EW-'+ plt_nme_prp +'-ALL'+ '-' + fit_type_m + '_m-' + fit_type_e + emm_sfx + '-' + str(LINES[0][lines]) + '-' + LINES[3][lines] +  '-med.csv'#(str(bs_tbl.split('.csv')[0]) + '-BS_MST_' +str(bs_i) + '.' + tbl_format_opt).split('/')[-1]
			tbl_plt_avg = plt_tbl_res + plt_sufix_fnm + '-' + stk_function_file + stk_function + '-' + fit_typ + '-EW-'+ plt_nme_prp +'-ALL'+ '-' + fit_type_m + '_m-' + fit_type_e + emm_sfx + '-' + str(LINES[0][lines]) + '-' + LINES[3][lines] +  '-avg.csv'#(str(bs_tbl.split('.csv')[0]) + '-BS_MST_' +str(bs_i) + '.' + tbl_format_opt).split('/')[-1]
			tbl_plt_me2 = plt_tbl_res + plt_sufix_fnm + '-' + stk_function_file + stk_function + '-' + fit_typ + '-EW-'+ plt_nme_prp +'-ALL'+ '-' + fit_type_m + '_m-' + fit_type_e + emm_sfx + '-' + str(LINES[0][lines]) + '-' + LINES[3][lines] +  '-med.dat'#(str(bs_tbl.split('.csv')[0]) + '-BS_MST_' +str(bs_i) + '.' + tbl_format_opt).split('/')[-1]
			tbl_plt_av2 = plt_tbl_res + plt_sufix_fnm + '-' + stk_function_file + stk_function + '-' + fit_typ + '-EW-'+ plt_nme_prp +'-ALL'+ '-' + fit_type_m + '_m-' + fit_type_e + emm_sfx + '-' + str(LINES[0][lines]) + '-' + LINES[3][lines] +  '-avg.dat'#(str(bs_tbl.split('.csv')[0]) + '-BS_MST_' +str(bs_i) + '.' + tbl_format_opt).split('/')[-1]

			rtM.write(tbl_plt_med, format=tbl_format_opt,overwrite=True)
			rtA.write(tbl_plt_avg, format=tbl_format_opt,overwrite=True)
			rtM.write(tbl_plt_me2, format=tbl_format_op2,overwrite=True)
			rtA.write(tbl_plt_av2, format=tbl_format_op2,overwrite=True)

			print
			print 'Results containing Plot Tables galaxies in table: '
			print colored(tbl_plt_med,'green')
			print colored(tbl_plt_avg,'green')
			print colored(tbl_plt_me2,'green')
			print colored(tbl_plt_av2,'green')
			print
		else:
			pass
		###############################PLT-PTS-TBL###############################

		###############################LIT RESULTS###############################
		if plt_lit_res == True:
			print
			print colored('Plotting Literature Results!','yellow')
			print colored('Line: ','yellow')
			print colored(LINES[4][lines]+' '+str(LINES[0][lines]),'yellow')
			print 
			print colored('From tables:','yellow')
			print colored(std_dir_res + 'EW_Prochaska.csv','green')
			print colored(std_dir_res + 'EW_Bordoloi.csv','green')
			print colored(std_dir_res + 'EW_Borthakur.csv','green')
			print colored(std_dir_res + 'EW_Johnson.csv','green')
			print colored(std_dir_res + 'EW_Liang.csv','green')
			print colored(std_dir_res + 'Werk-Table3-FeIII.csv','green')
			print colored(std_dir_res + 'Werk-Table3-NI.csv','green')
			print colored(std_dir_res + 'Werk-Table3-OI.csv','green')
			print colored(std_dir_res + 'Werk-Table3-Si_II.csv','green')
			print colored(std_dir_res + 'Werk-Table3-CII.csv','green')
			print colored(std_dir_res + 'Werk-Table3-Lya.csv','green')
			print colored(std_dir_res + 'Werk-Table3-NII.csv','green')
			print colored(std_dir_res + 'Werk-Table3-OVI.csv','green')
			print colored(std_dir_res + 'Werk-Table3-Si_III.csv','green')
			print colored(std_dir_res + 'Werk-Table3-CIII.csv','green')
			print colored(std_dir_res + 'Werk-Table3-MgI.csv','green')
			print colored(std_dir_res + 'Werk-Table3-NIII.csv','green')
			print colored(std_dir_res + 'Werk-Table3-SII.csv','green')
			print colored(std_dir_res + 'Werk-Table3-Si-IV.csv','green')
			print colored(std_dir_res + 'Werk-Table3-FeII.csv','green')
			print colored(std_dir_res + 'Werk-Table3-MgII.csv','green')
			print colored(std_dir_res + 'Werk-Table3-NV.csv','green')
			print colored(std_dir_res + 'Werk-Table3-SIII.csv','green')
			print colored(std_dir_res + 'EW_Steidel.csv','green')
			print
			min_rho_x, max_rho_x = ax110.get_xlim()
			min_ewd_x, max_ewd_x = ax110.get_ylim()
			try:
				Steidel_rho    =  Steidel_Res_Plt['rho']
				Steidel_lne_ew =  Steidel_Res_Plt['W_' + str(LINES[4][lines])+'-'+str(LINES[0][lines])]
				INDXS_EW 	   = np.where(Steidel_lne_ew>0)
				Steidel_lne_ew = Steidel_lne_ew[INDXS_EW]
				Steidel_rho    = Steidel_rho[INDXS_EW]
				#INDXS_RHO 	   = np.where(np.logical_and(Steidel_rho>=min_rho_x, Steidel_rho<=max_rho_x))
				#Steidel_lne_ew = Steidel_lne_ew[INDXS_RHO]
				#Steidel_rho    = Steidel_rho[INDXS_RHO]
				plt.scatter(Steidel_rho,Steidel_lne_ew,
							marker = marker_Steidel,
							color  = color_Steidel,
							facecolors = 'none',
							linewidths = 1.25,
							s      = 50,
							alpha  = 1.0,
							zorder = 4)
				plt.plot(Steidel_rho,Steidel_lne_ew,
							marker = marker_Steidel,
							color  = color_Steidel,
							linestyle = ':'
							)				
				print 'Steidel_Res_Plt'
			except  KeyError:
				pass			
			
			try:
				Prochaska_rho    = Prochaska_Res_Plt['rho']
				Prochaska_lne_ew = Prochaska_Res_Plt['W_' + str(LINES[4][lines])+'-'+str(LINES[0][lines])]*1E-3
				INDXS_RHO = np.where(np.logical_and(Prochaska_rho>=min_rho_x, Prochaska_rho<=max_rho_x))
				Prochaska_lne_ew = Prochaska_lne_ew[INDXS_RHO]
				Prochaska_rho    = Prochaska_rho[INDXS_RHO]
				plt.scatter(Prochaska_rho,Prochaska_lne_ew,
							marker = marker_Prochaska,
							color  = color_Prochaska,
							facecolors = 'none',
							linewidths = 1.25,
							s      = 50,
							alpha  = 1.0,
							zorder = 4)
				print 'Prochaska_Res_Plt'
			except KeyError:
				pass			
			try:
				Bordoloi_rho    = Bordoloi_Res_Plt['rho']
				Bordoloi_lne_ew = Bordoloi_Res_Plt['W_' + str(LINES[4][lines])+'-'+str(LINES[0][lines])]*1E-3				
				INDXS_RHO = np.where(np.logical_and(Bordoloi_rho>=min_rho_x, Bordoloi_rho<=max_rho_x))
				Bordoloi_lne_ew = Bordoloi_lne_ew[INDXS_RHO]
				Bordoloi_rho    = Bordoloi_rho[INDXS_RHO]
				plt.scatter(Bordoloi_rho,Bordoloi_lne_ew,
							marker = marker_Bordoloi,
							color  = color_Bordoloi,
							facecolors = 'none',
							linewidths = 1.25,
							s      = 50,
							alpha  = 1.0,
							zorder = 1)
				print 'Bordoloi_Res_Plt'
			except KeyError:
				pass
			try:
				Borthakur_rho    = Borthakur_Res_Plt['rho']
				Borthakur_lne_ew = Borthakur_Res_Plt['W_' + str(LINES[4][lines])+'-'+str(LINES[0][lines])]
				INDXS_RHO = np.where(np.logical_and(Borthakur_rho>=min_rho_x, Borthakur_rho<=max_rho_x))
				Borthakur_lne_ew = Borthakur_lne_ew[INDXS_RHO]
				Borthakur_rho    = Borthakur_rho[INDXS_RHO]
				plt.scatter(Borthakur_rho,Borthakur_lne_ew,
							marker = marker_Borthakur,
							color  = color_Borthakur,
							facecolors = 'none',
							linewidths = 1.25,
							s      = 50,
							alpha  = 1.0,
							zorder = 1)
				print 'Borthakur_Res_Plt'
			except KeyError:
				pass
			'''
			try:
				Johnson_rho    = Johnson_Res_Plt['rho']
				Johnson_lne_ew = Johnson_Res_Plt['W_' + str(LINES[4][lines])+'-'+str(LINES[0][lines])]*1E-3				
				INDXS_RHO = np.where(np.logical_and(Johnson_rho>=min_rho_x, Johnson_rho<=max_rho_x))
				Johnson_lne_ew = Johnson_lne_ew[INDXS_RHO]
				Johnson_rho    = Johnson_rho[INDXS_RHO]
				plt.scatter(Johnson_rho,Johnson_lne_ew,
							marker = marker_Johnson,
							color  = color_Johnson,
							facecolors = 'none',
							linewidths = 1.25,
							s      = 50,
							alpha  = 1.0,
							zorder = 1)
				print 'Johnson_Res_Plt'
			except KeyError:
				pass
			'''
			try:
				Liang_rho    = Liang_Res_Plt['rho']
				Liang_lne_ew = Liang_Res_Plt['W_' + str(LINES[4][lines])+'-'+str(LINES[0][lines])]*1E-3
				INDXS_RHO = np.where(np.logical_and(Liang_rho>=min_rho_x, Liang_rho<=max_rho_x))
				Liang_lne_ew = Liang_lne_ew[INDXS_RHO]
				Liang_rho    = Liang_rho[INDXS_RHO]
				plt.scatter(Liang_rho,Liang_lne_ew,
							marker = marker_Liang,
							color  = color_Liang,
							facecolors = 'none',
							linewidths = 1.25,
							s      = 50,
							alpha  = 1.0,
							zorder = 1)
				print 'Liang_Res_Plt'
			except KeyError:
				pass
			try:
				Werk_Table3_FeIII_rho = Werk_Table3_FeIII_Res_Plt['rho']
				Werk_Table3_FeIII_lne_ew = Werk_Table3_FeIII_Res_Plt['W_' + str(LINES[4][lines]) +'-'+ str(LINES[0][lines])]*1E-3
				INDXS_RHO = np.where(np.logical_and(Werk_Table3_FeIII_rho>=min_rho_x, Werk_Table3_FeIII_rho<=max_rho_x))
				Werk_Table3_FeIII_lne_ew = Werk_Table3_FeIII_lne_ew[INDXS_RHO]
				Werk_Table3_FeIII_rho    = Werk_Table3_FeIII_rho[INDXS_RHO]
				plt.scatter(Werk_Table3_FeIII_rho,Werk_Table3_FeIII_lne_ew,
							marker = marker_Werk,
							color  = color_Werk,
							facecolors = 'none',
							linewidths = 1.25,
							s      = 50,
							alpha  = 1.0,
							zorder = 0)
				print 'Werk_Table3_FeIII_Res_Plt'
			except KeyError:
				pass
			try:
				Werk_Table3_NI_rho = Werk_Table3_NI_Res_Plt['rho']
				Werk_Table3_NI_lne_ew = Werk_Table3_NI_Res_Plt['W_' + str(LINES[4][lines]) +'-'+ str(LINES[0][lines])]*1E-3
				INDXS_RHO = np.where(np.logical_and(Werk_Table3_NI_rho>=min_rho_x, Werk_Table3_NI_rho<=max_rho_x))
				Werk_Table3_NI_lne_ew = Werk_Table3_NI_lne_ew[INDXS_RHO]
				Werk_Table3_NI_rho    = Werk_Table3_NI_rho[INDXS_RHO]
				plt.scatter(Werk_Table3_NI_rho,Werk_Table3_NI_lne_ew,
							marker = marker_Werk,
							color  = color_Werk,
							facecolors = 'none',
							linewidths = 1.25,
							s      = 50,
							alpha  = 1.0,
							zorder = 0)
				print 'Werk_Table3_NI_Res_Plt'
			except KeyError:
				pass
			try:
				Werk_Table3_OI_rho = Werk_Table3_OI_Res_Plt['rho']
				Werk_Table3_OI_lne_ew = Werk_Table3_OI_Res_Plt['W_' + str(LINES[4][lines]) +'-'+ str(LINES[0][lines])]*1E-3
				INDXS_RHO = np.where(np.logical_and(Werk_Table3_OI_rho>=min_rho_x, Werk_Table3_OI_rho<=max_rho_x))
				Werk_Table3_OI_lne_ew = Werk_Table3_OI_lne_ew[INDXS_RHO]
				Werk_Table3_OI_rho    = Werk_Table3_OI_rho[INDXS_RHO]
				plt.scatter(Werk_Table3_OI_rho,Werk_Table3_OI_lne_ew,
							marker = marker_Werk,
							color  = color_Werk,
							facecolors = 'none',
							linewidths = 1.25,
							s      = 50,
							alpha  = 1.0,
							zorder = 0)
				print 'Werk_Table3_OI_Res_Plt'
			except KeyError:
				pass
			try:
				Werk_Table3_Si_II_rho = Werk_Table3_Si_II_Res_Plt['rho']
				Werk_Table3_Si_II_lne_ew = Werk_Table3_Si_II_Res_Plt['W_' + str(LINES[4][lines]) +'-'+ str(LINES[0][lines])]*1E-3
				INDXS_RHO = np.where(np.logical_and(Werk_Table3_Si_II_rho>=min_rho_x, Werk_Table3_Si_II_rho<=max_rho_x))
				Werk_Table3_Si_II_lne_ew = Werk_Table3_Si_II_lne_ew[INDXS_RHO]
				Werk_Table3_Si_II_rho    = Werk_Table3_Si_II_rho[INDXS_RHO]
				plt.scatter(Werk_Table3_Si_II_rho,Werk_Table3_Si_II_lne_ew,
							marker = marker_Werk,
							color  = color_Werk,
							facecolors = 'none',
							linewidths = 1.25,
							s      = 50,
							alpha  = 1.0,
							zorder = 0)
				print 'Werk_Table3_Si_II_Res_Plt'
			except KeyError:
				pass
			try:
				Werk_Table3_CII_rho = Werk_Table3_CII_Res_Plt['rho']
				Werk_Table3_CII_lne_ew = Werk_Table3_CII_Res_Plt['W_' + str(LINES[4][lines]) +'-'+ str(LINES[0][lines])]*1E-3
				INDXS_RHO = np.where(np.logical_and(Werk_Table3_CII_rho>=min_rho_x, Werk_Table3_CII_rho<=max_rho_x))
				Werk_Table3_CII_lne_ew = Werk_Table3_CII_lne_ew[INDXS_RHO]
				Werk_Table3_CII_rho    = Werk_Table3_CII_rho[INDXS_RHO]
				plt.scatter(Werk_Table3_CII_rho,Werk_Table3_CII_lne_ew,
							marker = marker_Werk,
							color  = color_Werk,
							facecolors = 'none',
							linewidths = 1.25,
							s      = 50,
							alpha  = 1.0,
							zorder = 0)
				print 'Werk_Table3_CII_Res_Plt'
			except KeyError:
				pass
			try:
				Werk_Table3_Lya_rho = Werk_Table3_Lya_Res_Plt['rho']
				Werk_Table3_Lya_lne_ew = Werk_Table3_Lya_Res_Plt['W_' + str(LINES[4][lines]) +'-'+ str(LINES[0][lines])]*1E-3
				INDXS_RHO = np.where(np.logical_and(Werk_Table3_Lya_rho>=min_rho_x, Werk_Table3_Lya_rho<=max_rho_x))
				Werk_Table3_Lya_lne_ew = Werk_Table3_Lya_lne_ew[INDXS_RHO]
				Werk_Table3_Lya_rho    = Werk_Table3_Lya_rho[INDXS_RHO]
				plt.scatter(Werk_Table3_Lya_rho,Werk_Table3_Lya_lne_ew,
							marker = marker_Werk,
							color  = color_Werk,
							facecolors = 'none',
							linewidths = 1.25,
							s      = 50,
							alpha  = 1.0,
							zorder = 0)
				print 'Werk_Table3_Lya_Res_Plt'				
			except KeyError:
				pass
			try:
				Werk_Table3_NII_rho = Werk_Table3_NII_Res_Plt['rho']
				Werk_Table3_NII_lne_ew = Werk_Table3_NII_Res_Plt['W_' + str(LINES[4][lines]) +'-'+ str(LINES[0][lines])]*1E-3
				INDXS_RHO = np.where(np.logical_and(Werk_Table3_NII_rho>=min_rho_x, Werk_Table3_NII_rho<=max_rho_x))
				Werk_Table3_NII_lne_ew = Werk_Table3_NII_lne_ew[INDXS_RHO]
				Werk_Table3_NII_rho    = Werk_Table3_NII_rho[INDXS_RHO]
				plt.scatter(Werk_Table3_NII_rho,Werk_Table3_NII_lne_ew,
							marker = marker_Werk,
							color  = color_Werk,
							facecolors = 'none',
							linewidths = 1.25,
							s      = 50,
							alpha  = 1.0,
							zorder = 0)
				print 'Werk_Table3_NII_Res_Plt'
			except KeyError:
				pass
			try:
				Werk_Table3_OVI_rho = Werk_Table3_OVI_Res_Plt['rho']
				Werk_Table3_OVI_lne_ew = Werk_Table3_OVI_Res_Plt['W_' + str(LINES[4][lines]) +'-'+ str(LINES[0][lines])]*1E-3
				INDXS_RHO = np.where(np.logical_and(Werk_Table3_OVI_rho>=min_rho_x, Werk_Table3_OVI_rho<=max_rho_x))
				Werk_Table3_OVI_lne_ew = Werk_Table3_OVI_lne_ew[INDXS_RHO]
				Werk_Table3_OVI_rho    = Werk_Table3_OVI_rho[INDXS_RHO]
				plt.scatter(Werk_Table3_OVI_rho,Werk_Table3_OVI_lne_ew,
							marker = marker_Werk,
							color  = color_Werk,
							facecolors = 'none',
							linewidths = 1.25,
							s      = 50,
							alpha  = 1.0,
							zorder = 0)
				print 'Werk_Table3_OVI_Res_Plt'
			except KeyError:
				pass
			try:
				Werk_Table3_Si_III_rho = Werk_Table3_Si_III_Res_Plt['rho']
				Werk_Table3_Si_III_lne_ew = Werk_Table3_Si_III_Res_Plt['W_' + str(LINES[4][lines]) +'-'+ str(LINES[0][lines])]*1E-3
				INDXS_RHO = np.where(np.logical_and(Werk_Table3_Si_III_rho>=min_rho_x, Werk_Table3_Si_III_rho<=max_rho_x))
				Werk_Table3_Si_III_lne_ew = Werk_Table3_Si_III_lne_ew[INDXS_RHO]
				Werk_Table3_Si_III_rho    = Werk_Table3_Si_III_rho[INDXS_RHO]
				plt.scatter(Werk_Table3_Si_III_rho,Werk_Table3_Si_III_lne_ew,
							marker = marker_Werk,
							color  = color_Werk,
							facecolors = 'none',
							linewidths = 1.25,
							s      = 50,
							alpha  = 1.0,
							zorder = 0)
				print 'Werk_Table3_Si_III_Res_Plt'
			except KeyError:
				pass
			try:
				Werk_Table3_CIII_rho = Werk_Table3_CIII_Res_Plt['rho']
				Werk_Table3_CIII_lne_ew = Werk_Table3_CIII_Res_Plt['W_' + str(LINES[4][lines]) +'-'+ str(LINES[0][lines])]*1E-3
				INDXS_RHO = np.where(np.logical_and(Werk_Table3_CIII_rho>=min_rho_x, Werk_Table3_CIII_rho<=max_rho_x))
				Werk_Table3_CIII_lne_ew = Werk_Table3_CIII_lne_ew[INDXS_RHO]
				Werk_Table3_CIII_rho    = Werk_Table3_CIII_rho[INDXS_RHO]
				plt.scatter(Werk_Table3_CIII_rho,Werk_Table3_CIII_lne_ew,
							marker = marker_Werk,
							color  = color_Werk,
							facecolors = 'none',
							linewidths = 1.25,
							s      = 50,
							alpha  = 1.0,
							zorder = 0)
				print 'Werk_Table3_CIII_Res_Plt'
			except KeyError:
				pass
			try:
				Werk_Table3_MgI_rho = Werk_Table3_MgI_Res_Plt['rho']
				Werk_Table3_MgI_lne_ew = Werk_Table3_MgI_Res_Plt['W_' + str(LINES[4][lines]) +'-'+ str(LINES[0][lines])]*1E-3
				INDXS_RHO = np.where(np.logical_and(Werk_Table3_MgI_rho>=min_rho_x, Werk_Table3_MgI_rho<=max_rho_x))
				Werk_Table3_MgI_lne_ew = Werk_Table3_MgI_lne_ew[INDXS_RHO]
				Werk_Table3_MgI_rho    = Werk_Table3_MgI_rho[INDXS_RHO]
				plt.scatter(Werk_Table3_MgI_rho,Werk_Table3_MgI_lne_ew,
							marker = marker_Werk,
							color  = color_Werk,
							facecolors = 'none',
							linewidths = 1.25,
							s      = 50,
							alpha  = 1.0,
							zorder = 0)
				print 'Werk_Table3_MgI_Res_Plt'
			except KeyError:
				pass
			try:
				Werk_Table3_NIII_rho = Werk_Table3_NIII_Res_Plt['rho']
				Werk_Table3_NIII_lne_ew = Werk_Table3_NIII_Res_Plt['W_' + str(LINES[4][lines]) +'-'+ str(LINES[0][lines])]*1E-3
				INDXS_RHO = np.where(np.logical_and(Werk_Table3_NIII_rho>=min_rho_x, Werk_Table3_NIII_rho<=max_rho_x))
				Werk_Table3_NIII_lne_ew = Werk_Table3_NIII_lne_ew[INDXS_RHO]
				Werk_Table3_NIII_rho    = Werk_Table3_NIII_rho[INDXS_RHO]
				plt.scatter(Werk_Table3_NIII_rho,Werk_Table3_NIII_lne_ew,
							marker = marker_Werk,
							color  = color_Werk,
							facecolors = 'none',
							linewidths = 1.25,
							s      = 50,
							alpha  = 1.0,
							zorder = 0)
				print 'Werk_Table3_NIII_Res_Plt'
			except KeyError:
				pass
			try:
				Werk_Table3_SII_rho = Werk_Table3_SII_Res_Plt['rho']
				Werk_Table3_SII_lne_ew = Werk_Table3_SII_Res_Plt['W_' + str(LINES[4][lines]) +'-'+ str(LINES[0][lines])]*1E-3
				INDXS_RHO = np.where(np.logical_and(Werk_Table3_SII_rho>=min_rho_x, Werk_Table3_SII_rho<=max_rho_x))
				Werk_Table3_SII_lne_ew = Werk_Table3_SII_lne_ew[INDXS_RHO]
				Werk_Table3_SII_rho    = Werk_Table3_SII_rho[INDXS_RHO]
				plt.scatter(Werk_Table3_SII_rho,Werk_Table3_SII_lne_ew,
							marker = marker_Werk,
							color  = color_Werk,
							facecolors = 'none',
							linewidths = 1.25,
							s      = 50,
							alpha  = 1.0,
							zorder = 0)
				print 'Werk_Table3_SII_Res_Plt'
			except KeyError:
				pass
			try:
				Werk_Table3_Si_IV_rho = Werk_Table3_Si_IV_Res_Plt['rho']
				Werk_Table3_Si_IV_lne_ew = Werk_Table3_Si_IV_Res_Plt['W_' + str(LINES[4][lines]) +'-'+ str(LINES[0][lines])]*1E-3
				INDXS_RHO = np.where(np.logical_and(Werk_Table3_Si_IV_rho>=min_rho_x, Werk_Table3_Si_IV_rho<=max_rho_x))
				Werk_Table3_Si_IV_lne_ew = Werk_Table3_Si_IV_lne_ew[INDXS_RHO]
				Werk_Table3_Si_IV_rho    = Werk_Table3_Si_IV_rho[INDXS_RHO]
				plt.scatter(Werk_Table3_Si_IV_rho,Werk_Table3_Si_IV_lne_ew,
							marker = marker_Werk,
							color  = color_Werk,
							facecolors = 'none',
							linewidths = 1.25,
							s      = 50,
							alpha  = 1.0,
							zorder = 0)
				print 'Werk_Table3_Si_IV_Res_Plt'
			except KeyError:
				pass
			try:
				Werk_Table3_FeII_rho = Werk_Table3_FeII_Res_Plt['rho']
				Werk_Table3_FeII_lne_ew = Werk_Table3_FeII_Res_Plt['W_' + str(LINES[4][lines]) +'-'+ str(LINES[0][lines])]*1E-3
				INDXS_RHO = np.where(np.logical_and(Werk_Table3_FeII_rho>=min_rho_x, Werk_Table3_FeII_rho<=max_rho_x))
				Werk_Table3_FeII_lne_ew = Werk_Table3_FeII_lne_ew[INDXS_RHO]
				Werk_Table3_FeII_rho    = Werk_Table3_FeII_rho[INDXS_RHO]
				plt.scatter(Werk_Table3_FeII_rho,Werk_Table3_FeII_lne_ew,
							marker = marker_Werk,
							color  = color_Werk,
							facecolors = 'none',
							linewidths = 1.25,
							s      = 50,
							alpha  = 1.0,
							zorder = 0)
				print 'Werk_Table3_FeII_Res_Plt'
			except KeyError:
				pass
			try:
				Werk_Table3_MgII_rho = Werk_Table3_MgII_Res_Plt['rho']
				Werk_Table3_MgII_lne_ew = Werk_Table3_MgII_Res_Plt['W_' + str(LINES[4][lines]) +'-'+ str(LINES[0][lines])]*1E-3
				INDXS_RHO = np.where(np.logical_and(Werk_Table3_MgII_rho>=min_rho_x, Werk_Table3_MgII_rho<=max_rho_x))
				Werk_Table3_MgII_lne_ew = Werk_Table3_MgII_lne_ew[INDXS_RHO]
				Werk_Table3_MgII_rho    = Werk_Table3_MgII_rho[INDXS_RHO]
				plt.scatter(Werk_Table3_MgII_rho,Werk_Table3_MgII_lne_ew,
							marker = marker_Werk,
							color  = color_Werk,
							facecolors = 'none',
							linewidths = 1.25,
							s      = 50,
							alpha  = 1.0,
							zorder = 0)
				print 'Werk_Table3_MgII_Res_Plt'
			except KeyError:
				pass
			try:
				Werk_Table3_NV_rho = Werk_Table3_NV_Res_Plt['rho']
				Werk_Table3_NV_lne_ew = Werk_Table3_NV_Res_Plt['W_' + str(LINES[4][lines]) +'-'+ str(LINES[0][lines])]*1E-3
				INDXS_RHO = np.where(np.logical_and(Werk_Table3_NV_rho>=min_rho_x, Werk_Table3_NV_rho<=max_rho_x))
				Werk_Table3_NV_lne_ew = Werk_Table3_NV_lne_ew[INDXS_RHO]
				Werk_Table3_NV_rho    = Werk_Table3_NV_rho[INDXS_RHO]
				plt.scatter(Werk_Table3_NV_rho,Werk_Table3_NV_lne_ew,
							marker = marker_Werk,
							color  = color_Werk,
							facecolors = 'none',
							linewidths = 1.25,
							s      = 50,
							alpha  = 1.0,
							zorder = 0)
				print 'Werk_Table3_NV_Res_Plt'
			except KeyError:
				pass
			try:
				Werk_Table3_SIII_rho = Werk_Table3_SIII_Res_Plt['rho']
				Werk_Table3_SIII_lne_ew = Werk_Table3_SIII_Res_Plt['W_' + str(LINES[4][lines]) +'-'+ str(LINES[0][lines])]*1E-3
				INDXS_RHO = np.where(np.logical_and(Werk_Table3_SIII_rho>=min_rho_x, Werk_Table3_SIII_rho<=max_rho_x))
				Werk_Table3_SIII_lne_ew = Werk_Table3_SIII_lne_ew[INDXS_RHO]
				Werk_Table3_SIII_rho    = Werk_Table3_SIII_rho[INDXS_RHO]
				plt.scatter(Werk_Table3_SIII_rho,Werk_Table3_SIII_lne_ew,
							marker = marker_Werk,
							color  = color_Werk,
							facecolors = 'none',
							linewidths = 1.25,
							s      = 50,
							alpha  = 1.0,
							zorder = 0)
				print 'Werk_Table3_SIII_Res_Plt'
			except KeyError:
				pass
		else:
			pass
		###############################LIT RESULTS###############################
		if plt_log_axs == 'both':
			print
			print colored('Logarithmic scale on axis: '+ str(plt_log_axs),'green')
			print
			plt.yscale('log', nonposy='clip')
			plt.xscale('log', nonposx='clip')
			#xticks_values = (10,100)
			##yticks_values = (0.001,0.01,0.1,1,10)
			#ax110.set_xticks(xticks_values)
			#ax110.get_xaxis().set_major_formatter(mpl.ticker.ScalarFormatter())
			##ax110.set_yticks(yticks_values)
			##ax110.get_yaxis().set_major_formatter(mpl.ticker.ScalarFormatter())
			#ax110.ticklabel_format(axis='x',style='plain')
			ax110.yaxis.set_major_formatter(mticker.FormatStrFormatter('%.1f'))
			ax110.xaxis.set_major_formatter(mticker.FormatStrFormatter('%.0f'))
			min_rho_x, max_rho_x = ax110.get_xlim()
			min_ewd_x, max_ewd_x = ax110.get_ylim()			
			if abs(min_ewd_x-max_ewd_x)<0.5 and (min_ewd_x>0.1):
				#ax110.yaxis.set_minor_formatter(mticker.ScalarFormatter())
				ax110.yaxis.set_minor_formatter(mticker.FormatStrFormatter('%.1f'))
				plt.setp(yticklabels, visible=True,family='serif')
			elif abs(min_ewd_x-max_ewd_x)<=0.5 and (min_ewd_x<0.1):
				ax110.yaxis.set_major_locator(mticker.MultipleLocator(0.10))
				ax110.yaxis.set_minor_locator(mticker.MultipleLocator(0.9))
				ax110.yaxis.set_minor_formatter(mticker.FormatStrFormatter('%2f'))
				ax110.yaxis.set_tick_params(which='minor',labelsize=18,direction='in',labelcolor='white',zorder=0)#,bottom=False,top=False,left=False,right=False)
				ax110.yaxis.set_tick_params(which='both',labelsize=18,direction='in',color='black',bottom=True,top=True,left=True,right=True,zorder=1)
			elif 0.5<abs(min_ewd_x-max_ewd_x)<0.9:
				#ax110.yaxis.set_minor_formatter(mticker.FormatStrFormatter('%.2f'))
				ax110.yaxis.set_minor_locator(mticker.MultipleLocator(0.2))
				ax110.yaxis.set_minor_formatter(mticker.FormatStrFormatter('%.1f'))
				plt.setp(yticklabels, visible=True,family='serif')
			else:
				ax110.yaxis.set_minor_formatter(mticker.NullFormatter())
				plt.setp(yticklabels, visible=True,family='serif')		
		elif plt_log_axs == 'y' :
			print
			print colored('Logarithmic scale on axis: '+ str(plt_log_axs),'green')
			print
			print min_ewd_x,max_ewd_x,abs(min_ewd_x-max_ewd_x)
			plt.yscale('log', nonposy='clip')
			#import matplotlib.ticker as mticker
			ax110.yaxis.set_major_formatter(mticker.FormatStrFormatter('%.1f'))
			min_rho_x, max_rho_x = ax110.get_xlim()
			min_ewd_x, max_ewd_x = ax110.get_ylim()			
			if abs(min_ewd_x-max_ewd_x)<0.5 and (min_ewd_x>0.1):
				#ax110.yaxis.set_minor_formatter(mticker.ScalarFormatter())
				ax110.yaxis.set_minor_formatter(mticker.FormatStrFormatter('%.1f'))
				plt.setp(yticklabels, visible=True,family='serif')
			elif abs(min_ewd_x-max_ewd_x)<=0.5 and (min_ewd_x<0.1):
				ax110.yaxis.set_major_locator(mticker.MultipleLocator(0.10))
				ax110.yaxis.set_minor_locator(mticker.MultipleLocator(0.9))
				ax110.yaxis.set_minor_formatter(mticker.FormatStrFormatter('%2f'))
				ax110.yaxis.set_tick_params(which='minor',labelsize=18,direction='in',labelcolor='white',zorder=0)#,bottom=False,top=False,left=False,right=False)
				ax110.yaxis.set_tick_params(which='both',labelsize=18,direction='in',color='black',bottom=True,top=True,left=True,right=True,zorder=1)
			elif 0.5<abs(min_ewd_x-max_ewd_x)<0.9:
				#ax110.yaxis.set_minor_formatter(mticker.FormatStrFormatter('%.2f'))
				ax110.yaxis.set_minor_locator(mticker.MultipleLocator(0.2))
				ax110.yaxis.set_minor_formatter(mticker.FormatStrFormatter('%.1f'))
				plt.setp(yticklabels, visible=True,family='serif')
			else:
				ax110.yaxis.set_minor_formatter(mticker.NullFormatter())
				plt.setp(yticklabels, visible=True,family='serif')
		elif plt_log_axs == 'x' :
			print
			print colored('Logarithmic scale on axis: '+ str(plt_log_axs),'green')
			print
			plt.xscale('log', nonposx='clip')
			ax110.xaxis.set_major_formatter(mticker.FormatStrFormatter('%.0f'))
			plt.setp(xticklabels, visible=True,family='serif')
		elif plt_log_axs == None:
			print
			print colored('NO-Logarithmic scale on axis: '+ str(plt_log_axs),'green')
			print
			ax110.yaxis.set_major_formatter(mticker.FormatStrFormatter('%.1f'))
			ax110.xaxis.set_major_formatter(mticker.FormatStrFormatter('%.1f'))
			plt.setp(xticklabels, visible=True,family='serif')
			plt.setp(yticklabels, visible=True,family='serif')
			pass
		else:
			pass
			ax110.yaxis.set_major_formatter(mticker.FormatStrFormatter('%.1f'))
			ax110.xaxis.set_major_formatter(mticker.FormatStrFormatter('%.0f'))
			plt.setp(yticklabels, visible=True,family='serif')
			plt.setp(xticklabels, visible=True,family='serif')
		###############################AXIS FORMAT###############################

		if plt_inv_xax == True:
			print
			print colored('X-axis inverted!','magenta')
			print
			min_x, max_x = ax110.get_xlim()
			plt.xlim((max_x,min_x))
		else:
			pass

		# build a rectangle in axes coords
		left, width = 0, 0.95
		bottom, height = 0, 0.95
		right = left + width
		top = bottom + height
		if LINES[0][lines] == 1303.2:
			mid = left + 0.30 #
		else:
			mid = ((right - left) / 2) - 0.03
		ax110.text(mid, top, #left, top
					LINES[9][lines] + ' ' + str(LINES[0][lines])#+ ' $\AA$'
					#LINES[3][lines] + ' ' + str(LINES[0][lines]) + ' $\AA$'
					,
					horizontalalignment='left',
					verticalalignment='top',
					fontsize = 20,
					family = 'serif',
					transform=ax110.transAxes)
	#############LINE PER LINE#############

	if fit_fnct == 'gaussM' and ems_lne_ctb == True:
		emm_sfx = '-Emm'
	else:
		emm_sfx = ''
	if dest_dir != None:
		PLOTFILENAME1 = str(dest_dir) + plt_sufix_fnm+'-'+str(lmb_min)+'-'+str(lmb_max)+ '-' + stk_function_file + stk_function + '-' + fit_typ + '-EW-'+ plt_nme_prp +'-ALL'+ '-' + fit_type_m + '_m-' + fit_type_e + emm_sfx +'_e-Grid.pdf'
		PLOTFILENAME2 = str(dest_dir) + plt_sufix_fnm+'-'+str(lmb_min)+'-'+str(lmb_max)+ '-' + stk_function_file + stk_function + '-' + fit_typ + '-EW-'+ plt_nme_prp +'-ALL'+ '-' + fit_type_m + '_m-' + fit_type_e + emm_sfx +'_e-Grid.eps'
	elif dest_dir == None:
		PLOTFILENAME1 = ewr_plt_res + plt_sufix_fnm+'-'+str(lmb_min)+'-'+str(lmb_max)+ '-' + stk_function_file + stk_function + '-' + fit_typ + '-EW-'+ plt_nme_prp +'-ALL'+ '-' + fit_type_m + '_m-' + fit_type_e + emm_sfx +'_e-Grid.pdf'
		PLOTFILENAME2 = ewr_plt_res + plt_sufix_fnm+'-'+str(lmb_min)+'-'+str(lmb_max)+ '-' + stk_function_file + stk_function + '-' + fit_typ + '-EW-'+ plt_nme_prp +'-ALL'+ '-' + fit_type_m + '_m-' + fit_type_e + emm_sfx +'_e-Grid.eps'
	plt.savefig(PLOTFILENAME1)
	if verbose == True:
		print colored('Generated Plot: ' + str(PLOTFILENAME1),'cyan')
	elif verbose ==False:
		pass
	if epssave == True:
		plt.savefig(PLOTFILENAME2, rasterized=True)
		#os.system('open Spectra.eps')
	elif epssave == False:
		pass
	if showplot == True:
		#os.system('open '+str(PLOTFILENAME))
		pass
	elif showplot == False:
		pass	
	plt.close('all')
	################################PLOT ALL LINES################################

def Plot_Idp_EW_Lne_Mlt(int_typ_spl_1,int_typ_spl_2,n_int_spt_1,n_int_spt_2,*args, **kwargs):
	z_glx_Ps        = kwargs.get('z_glx_Ps'    ,0)
	dest_dir        = kwargs.get('dest_dir'    , None)
	verbose         = kwargs.get('verbose'     , False)
	epssave         = kwargs.get('epssave'     , False)
	showplot        = kwargs.get('showplot'    , False) 

	autoaxis_Idp    = kwargs.get('autoaxis_Idp', False)
	#min_y_lim_Idp   = kwargs.get('min_y_lim'   , 0.5)
	#max_y_lim_Idp   = kwargs.get('max_y_lim'   , 1.5)

	lmb_min         = kwargs.get('lmb_min',1200)
	lmb_max         = kwargs.get('lmb_max',1700)

	lmb_min_lim     = lmb_min
	lmb_max_lim     = lmb_max

	upper_shift_1   = kwargs.get('upper_shift_1',0)
	lower_shift_1   = kwargs.get('lower_shift_1',0)
	upper_shift_2   = kwargs.get('upper_shift_2',0)
	lower_shift_2   = kwargs.get('lower_shift_2',0)

	#stk_function_m  = kwargs.get('stk_function_m',False)
	#stk_function_a  = kwargs.get('stk_function_a',False)
	#stk_function_b  = kwargs.get('stk_function_b',False)
	mlt_stk_fct      = kwargs.get('mlt_stk_fct','both')

	#stk_function   = kwargs.get('stk_function','med')

	fit_fnct        = kwargs.get('fit_fnct','gauss')
	dest_dir        = kwargs.get('dest_dir',None)

	stk_function    = kwargs.get('stk_function',' ')

	#frg_ref_plt     = kwargs.get('frg_ref_plt',True)

	bst_err_plt     = kwargs.get('bst_err_plt',False)
	bst_itr_nmb     = kwargs.get('bst_itr_nmb',None)

	fit_type_m      = kwargs.get('fit_type_m','scipy')
	fit_type_e      = kwargs.get('fit_type_e','scipy')
	fit_type_e      = kwargs.get('fit_type_e','lmfit')

	plt_lit_res     = kwargs.get('plt_lit_res',False)
	plt_log_axs     = kwargs.get('plt_log_axs',None)

	plt_inv_xax     = kwargs.get('plt_inv_xax',False)
	skip_fg_ref_ew  = kwargs.get('skip_fg_ref_ew',False)

	#int_typ_spl_1   = kwargs.get('int_typ_spl_1','arcsec')
	#int_typ_spl_2   = kwargs.get('int_typ_spl_2','mass')

	#n_int_spt_1     = kwargs.get('n_int_spt_1',3)
	#n_int_spt_2     = kwargs.get('n_int_spt_2',3)

	#n_int_spt       = kwargs.get('n_int_spt',False)

	max_sep         = kwargs.get('max_sep'         ,23)

	lbl_col_idv     = kwargs.get('lbl_col_idv',True)
	fit_typ         = kwargs.get('fit_typ','lmfit')

	empty_plots     = kwargs.get('empty_plots',1)
	landscape_plt   = kwargs.get('landscape_plt',True)

	add_snr_vls     = kwargs.get('add_snr_vls',True)
	cln_pts_snr     = kwargs.get('cln_pts_snr',True)
	cln_snr_aux     = kwargs.get('cln_snr_aux',False)
	cln_snr_mth     = kwargs.get('cln_snr_mth',3)
	cln_snr_thr     = kwargs.get('cln_snr_thr',3)
	cln_snr_th2     = kwargs.get('cln_snr_th2',2)

	rmv_uft_spc     = kwargs.get('rmv_uft_spc',False)

	if fit_type_m == 'scipy':
		ft_m_sfx = 'A'
	elif fit_type_m == 'lmfit':
		ft_m_sfx = 'L'
	else:
		pass


	print
	print colored('Plotting EW absoprtions dependent on: '+int_typ_spl_1,'yellow')
	print colored('Plotting EW absoprtions dependent on: '+int_typ_spl_2,'yellow')
	print
	if int_typ_spl_1 == 'kpc'  and n_int_spt_1 == 0:#in specfile_glx_f:
		splt_smpl_sfx_f1= 'kpc_F'
		splt_smpl_sfx_1 = '_kpc' 
		splt_smpl_unt_1 = 'kpc'
		splt_smpl_unl_1 = 'kpc'
		plt_nme_prp_1   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv)				
		slc_int_fg_1    = slc_kpc_int_fg[1]
		slc_int_bg_1    = slc_kpc_int_bg[1]		
		xlabel_1        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_1   = 'SKP'
		xticks_values_1 = [5,50, 100, 1500]
		yticks_values_1 = np.arange(0,30,0.5)#[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'kpc'  and n_int_spt_1 == 1:#in specfile_glx_f:
		splt_smpl_sfx_f1= 'kpc_F'
		splt_smpl_sfx_1 = '_kpc' 
		splt_smpl_unt_1 = 'kpc'
		splt_smpl_unl_1 = 'kpc'
		plt_nme_prp_1   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_1)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_1)				
		slc_int_fg_1    = slc_kpc_int_fg[1]
		slc_int_bg_1    = slc_kpc_int_bg[1]
		xlabel_1        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_1   = 'SKP'
		xticks_values_1 = [5,50, 100, 1500]
		yticks_values_1 = np.arange(0,30,0.5)#[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'kpc'  and n_int_spt_1 == 2:#in specfile_glx_f:
		splt_smpl_sfx_f1= 'kpc_F'
		splt_smpl_sfx_1 = '_kpc' 
		splt_smpl_unt_1 = 'kpc'
		splt_smpl_unl_1 = 'kpc'
		plt_nme_prp_1   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_2)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_2)				
		slc_int_fg_1    = slc_kpc_int_fg[1]
		slc_int_bg_1    = slc_kpc_int_bg[1]
		xlabel_1        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_1   = 'SKP'
		xticks_values_1 = [5,50, 100, 1500]
		yticks_values_1 = np.arange(0,30,0.5)#[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'kpc'  and n_int_spt_1 == 3:#in specfile_glx_f:
		splt_smpl_sfx_f1= 'kpc_F'
		splt_smpl_sfx_1 = '_kpc' 
		splt_smpl_unt_1 = 'kpc'
		splt_smpl_unl_1 = 'kpc'
		plt_nme_prp_1   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_3)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_3)				
		slc_int_fg_1    = slc_kpc_int_fg[1]
		slc_int_bg_1    = slc_kpc_int_bg[1]
		xlabel_1        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_1   = 'SKP'
		xticks_values_1 = [5,50, 100, 1500]
		yticks_values_1 = np.arange(0,30,0.5)#[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'kpc'  and n_int_spt_1 == 4:#in specfile_glx_f:
		splt_smpl_sfx_f1= 'kpc_F'
		splt_smpl_sfx_1 = '_kpc' 
		splt_smpl_unt_1 = 'kpc'
		splt_smpl_unl_1 = 'kpc'
		plt_nme_prp_1   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_4)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_4)				
		slc_int_fg_1    = slc_kpc_int_fg[1]
		slc_int_bg_1    = slc_kpc_int_bg[1]
		xlabel_1        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_1   = 'SKP'
		xticks_values_1 = [5,50, 100, 1500]
		yticks_values_1 = np.arange(0,30,0.5)#[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'mass' and n_int_spt_1 == 0:# in specfile_glx_f:
		splt_smpl_sfx_f1= 'mass_F'
		splt_smpl_sfx_1 = '-mass'
		splt_smpl_unt_1 = 'mass'
		splt_smpl_unl_1 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_1   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23)				
		slc_int_fg_1    = slc_mss_int_fg[1]
		slc_int_bg_1    = slc_mss_int_bg[1]
		xlabel_1        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_1   = 'MSF'
		xticks_values_1 = np.arange(1,20,0.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1 = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'mass' and n_int_spt_1 == 1:# in specfile_glx_f:
		splt_smpl_sfx_f1= 'mass_F'
		splt_smpl_sfx_1 = '-mass'
		splt_smpl_unt_1 = 'mass'
		splt_smpl_unl_1 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_1   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_1)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_1)				
		slc_int_fg_1    = slc_mss_int_fg[1]
		slc_int_bg_1    = slc_mss_int_bg[1]
		xlabel_1        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_1   = 'MSF'
		xticks_values_1 = np.arange(1,20,0.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1 = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'mass' and n_int_spt_1 == 2:# in specfile_glx_f:
		splt_smpl_sfx_f1= 'mass_F'
		splt_smpl_sfx_1 = '-mass'
		splt_smpl_unt_1 = 'mass'
		splt_smpl_unl_1 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_1   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_2)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_2)				
		slc_int_fg_1    = slc_mss_int_fg[1]
		slc_int_bg_1    = slc_mss_int_bg[1]
		xlabel_1        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_1   = 'MSF'
		xticks_values_1 = np.arange(1,20,.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1 = np.arange(0,30,.01)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'mass' and n_int_spt_1 == 3:# in specfile_glx_f:
		splt_smpl_sfx_f1= 'mass_F'
		splt_smpl_sfx_1 = '-mass'
		splt_smpl_unt_1 = 'mass'
		splt_smpl_unl_1 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_1   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_3)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_3)				
		slc_int_fg_1    = slc_mss_int_fg[1]
		slc_int_bg_1    = slc_mss_int_bg[1]
		xlabel_1        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_1   = 'MSF'
		xticks_values_1 = np.arange(1,20,0.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1 = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'mass' and n_int_spt_1 == 4:# in specfile_glx_f:
		splt_smpl_sfx_f1= 'mass_F'
		splt_smpl_sfx_1 = '-mass'
		splt_smpl_unt_1 = 'mass'
		splt_smpl_unl_1 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_1   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_4)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_4)				
		slc_int_fg_1    = slc_mss_int_fg[1]
		slc_int_bg_1    = slc_mss_int_bg[1]
		xlabel_1        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_1   = 'MSF'
		xticks_values_1 = np.arange(1,20,0.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1 = np.arange(0,30,0.5)         #[0.1,0.5,1,3]				
	elif int_typ_spl_1 == 'Age'  and n_int_spt_1 == 0:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Age_F'
		splt_smpl_sfx_1  = '-Age' 
		splt_smpl_unt_1  = 'Age'
		splt_smpl_unl_1  = 'Age'
		plt_nme_prp_1    = 'Age'
		slc_age_int_fg_0 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv)
		slc_age_int_bg_0 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv)
		slc_int_fg_1     = slc_age_int_fg_0[1]
		slc_int_bg_1     = slc_age_int_bg_0[1]
		xlabel_1         = 'Age'
		var_prp_hdr_1    = 'AGF'
		xticks_values_1  = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1  = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Age'  and n_int_spt_1 == 1:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Age_F'
		splt_smpl_sfx_1  = '-Age' 
		splt_smpl_unt_1  = 'Age'
		splt_smpl_unl_1  = 'Age'
		plt_nme_prp_1    = 'Age'
		slc_age_int_fg_1 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_1)
		slc_age_int_bg_1 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_1)
		slc_int_fg_1     = slc_age_int_fg_1[1]
		slc_int_bg_1     = slc_age_int_bg_1[1]
		xlabel_1         = 'Age'
		var_prp_hdr_1    = 'AGF'
		xticks_values_1  = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1  = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Age'  and n_int_spt_1 == 2:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Age_F'
		splt_smpl_sfx_1  = '-Age' 
		splt_smpl_unt_1  = 'Age'
		splt_smpl_unl_1  = 'Age'
		plt_nme_prp_1    = 'Age'
		slc_age_int_fg_2 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_2)
		slc_age_int_bg_2 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_2)
		slc_int_fg_1     = slc_age_int_fg_2[1]
		slc_int_bg_1     = slc_age_int_bg_2[1]
		xlabel_1         = 'Age'
		var_prp_hdr_1    = 'AGF'
		xticks_values_1  = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1  = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Age'  and n_int_spt_1 == 3:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Age_F'
		splt_smpl_sfx_1  = '-Age' 
		splt_smpl_unt_1  = 'Age'
		splt_smpl_unl_1  = 'Age'
		plt_nme_prp_1    = 'Age'
		slc_age_int_fg_3 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_3)
		slc_age_int_bg_3 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_3)
		slc_int_fg_1     = slc_age_int_fg_3[1]
		slc_int_bg_1     = slc_age_int_bg_3[1]
		xlabel_1         = 'Age'
		var_prp_hdr_1    = 'AGF'
		xticks_values_1  = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1  = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Age'  and n_int_spt_1 == 4:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Age_F'
		splt_smpl_sfx_1  = '-Age' 
		splt_smpl_unt_1  = 'Age'
		splt_smpl_unl_1  = 'Age'
		plt_nme_prp_1    = 'Age'
		slc_age_int_fg_4 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_4)
		slc_age_int_bg_4 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_4)
		slc_int_fg_1     = slc_age_int_fg_4[1]
		slc_int_bg_1     = slc_age_int_bg_4[1]
		xlabel_1         = 'Age'
		var_prp_hdr_1    = 'AGF'
		xticks_values_1  = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1  = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'SFR'  and n_int_spt_1 == 0:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'SFR_F'
		splt_smpl_sfx_1  = '-SFR' 
		splt_smpl_unt_1  = 'SFR' 
		splt_smpl_unl_1  = 'SFR' 
		plt_nme_prp_1    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv)
		slc_int_fg_1     = slc_sfr_int_fg[1]
		slc_int_bg_1     = slc_sfr_int_bg[1]
		xlabel_1         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_1    = 'SFF'
		xticks_values_1  = np.arange(0,3,0.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'SFR'  and n_int_spt_1 == 1:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'SFR_F'
		splt_smpl_sfx_1  = '-SFR' 
		splt_smpl_unt_1  = 'SFR' 
		splt_smpl_unl_1  = 'SFR' 
		plt_nme_prp_1    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_1)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_1)
		slc_int_fg_1     = slc_sfr_int_fg[1]
		slc_int_bg_1     = slc_sfr_int_bg[1]
		xlabel_1         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_1    = 'SFF'
		xticks_values_1  = np.arange(0,3,0.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'SFR'  and n_int_spt_1 == 2:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'SFR_F'
		splt_smpl_sfx_1  = '-SFR' 
		splt_smpl_unt_1  = 'SFR' 
		splt_smpl_unl_1  = 'SFR' 
		plt_nme_prp_1    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_2)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_2)
		slc_int_fg_1     = slc_sfr_int_fg[1]
		slc_int_bg_1     = slc_sfr_int_bg[1]
		xlabel_1         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_1    = 'SFF'
		xticks_values_1  = np.arange(0,3,0.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'SFR'  and n_int_spt_1 == 3:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'SFR_F'
		splt_smpl_sfx_1  = '-SFR' 
		splt_smpl_unt_1  = 'SFR' 
		splt_smpl_unl_1  = 'SFR' 
		plt_nme_prp_1    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_3)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_3)
		slc_int_fg_1     = slc_sfr_int_fg[1]
		slc_int_bg_1     = slc_sfr_int_bg[1]
		xlabel_1         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_1    = 'SFF'
		xticks_values_1  = np.arange(0,3,0.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'SFR'  and n_int_spt_1 == 4:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'SFR_F'
		splt_smpl_sfx_1  = '-SFR' 
		splt_smpl_unt_1  = 'SFR' 
		splt_smpl_unl_1  = 'SFR' 
		plt_nme_prp_1    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_4)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_4)
		slc_int_fg_1     = slc_sfr_int_fg[1]
		slc_int_bg_1     = slc_sfr_int_bg[1]
		xlabel_1         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_1    = 'SFF'
		xticks_values_1  = np.arange(0,3,0.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sSFR' and n_int_spt_1 == 0:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'sSFR_F'
		splt_smpl_sfx_1  = '-sSFR'
		splt_smpl_unt_1  = 'sSFR'
		splt_smpl_unl_1  = 'sSFR'
		plt_nme_prp_1    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv)
		slc_int_fg_1     = slc_ssf_int_fg[1]
		slc_int_bg_1     = slc_ssf_int_bg[1]
		xlabel_1         = 'sSFR [Gyr]'
		var_prp_hdr_1    = 'sSF'
		xticks_values_1  = np.arange(-20,-1,0.1)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sSFR' and n_int_spt_1 == 1:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'sSFR_F'
		splt_smpl_sfx_1  = '-sSFR'
		splt_smpl_unt_1  = 'sSFR'
		splt_smpl_unl_1  = 'sSFR'
		plt_nme_prp_1    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_1)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_1)
		slc_int_fg_1     = slc_ssf_int_fg[1]
		slc_int_bg_1     = slc_ssf_int_bg[1]
		xlabel_1         = 'sSFR [Gyr]'
		var_prp_hdr_1    = 'sSF'
		xticks_values_1  = np.arange(-20,-1,0.1)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sSFR' and n_int_spt_1 == 2:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'sSFR_F'
		splt_smpl_sfx_1  = '-sSFR'
		splt_smpl_unt_1  = 'sSFR'
		splt_smpl_unl_1  = 'sSFR'
		plt_nme_prp_1    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_2)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_2)
		slc_int_fg_1     = slc_ssf_int_fg[1]
		slc_int_bg_1     = slc_ssf_int_bg[1]
		xlabel_1         = 'sSFR [Gyr]'
		var_prp_hdr_1    = 'sSF'
		xticks_values_1  = np.arange(-20,-1,0.1)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sSFR' and n_int_spt_1 == 3:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'sSFR_F'
		splt_smpl_sfx_1  = '-sSFR'
		splt_smpl_unt_1  = 'sSFR'
		splt_smpl_unl_1  = 'sSFR'
		plt_nme_prp_1    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_3)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_3)
		slc_int_fg_1     = slc_ssf_int_fg[1]
		slc_int_bg_1     = slc_ssf_int_bg[1]
		xlabel_1         = 'sSFR [Gyr]'
		var_prp_hdr_1    = 'sSF'
		xticks_values_1  = np.arange(-20,-1,0.1)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sSFR' and n_int_spt_1 == 4:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'sSFR_F'
		splt_smpl_sfx_1  = '-sSFR'
		splt_smpl_unt_1  = 'sSFR'
		splt_smpl_unl_1  = 'sSFR'
		plt_nme_prp_1    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_4)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_4)
		slc_int_fg_1     = slc_ssf_int_fg[1]
		slc_int_bg_1     = slc_ssf_int_bg[1]
		xlabel_1         = 'sSFR [Gyr]'
		var_prp_hdr_1    = 'sSF'
		xticks_values_1  = np.arange(-20,-1,0.25)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1  = np.arange(0,30,.25)   #[0.1,0.5,1,3]						
	elif int_typ_spl_1 == 'Lnuv' and n_int_spt_1 == 0:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Lnuv_F'
		splt_smpl_sfx_1  = '-Lnuv'
		splt_smpl_unt_1  = 'ergs cm$^{-2}$ s$^{-1}$'
		splt_smpl_unl_1  = 'Lnuv'
		plt_nme_prp_1    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv)
		slc_int_fg_1     = slc_luv_int_fg[1]
		slc_int_bg_1     = slc_luv_int_bg[1]
		xlabel_1         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_1    = 'UVF'
		xticks_values_1  = np.arange(8,14,.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Lnuv' and n_int_spt_1 == 1:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Lnuv_F'
		splt_smpl_sfx_1  = '-Lnuv'
		splt_smpl_unt_1  = 'ergs cm$^{-2}$ s$^{-1}$'
		splt_smpl_unl_1  = 'Lnuv'
		plt_nme_prp_1    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_1)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_1)
		slc_int_fg_1     = slc_luv_int_fg[1]
		slc_int_bg_1     = slc_luv_int_bg[1]
		xlabel_1         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_1    = 'UVF'
		xticks_values_1  = np.arange(8,14,.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Lnuv' and n_int_spt_1 == 2:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Lnuv_F'
		splt_smpl_sfx_1  = '-Lnuv'
		splt_smpl_unt_1  = 'ergs cm$^{-2}$ s$^{-1}$'
		splt_smpl_unl_1  = 'Lnuv'
		plt_nme_prp_1    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_2)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_2)
		slc_int_fg_1     = slc_luv_int_fg[1]
		slc_int_bg_1     = slc_luv_int_bg[1]
		xlabel_1         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_1    = 'UVF'
		xticks_values_1  = np.arange(8,14,.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Lnuv' and n_int_spt_1 == 3:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Lnuv_F'
		splt_smpl_sfx_1  = '-Lnuv'
		splt_smpl_unt_1  = 'ergs cm$^{-2}$ s$^{-1}$'
		splt_smpl_unl_1  = 'Lnuv'
		plt_nme_prp_1    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_3)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_3)
		slc_int_fg_1     = slc_luv_int_fg[1]
		slc_int_bg_1     = slc_luv_int_bg[1]
		xlabel_1         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_1    = 'UVF'
		xticks_values_1  = np.arange(8,14,.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Lnuv' and n_int_spt_1 == 4:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Lnuv_F'
		splt_smpl_sfx_1  = '-Lnuv'
		splt_smpl_unt_1  = 'ergs cm$^{-2}$ s$^{-1}$'
		splt_smpl_unl_1  = 'Lnuv'
		plt_nme_prp_1    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_4)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_4)
		slc_int_fg_1     = slc_luv_int_fg[1]
		slc_int_bg_1     = slc_luv_int_bg[1]
		xlabel_1         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_1    = 'UVF'
		xticks_values_1  = np.arange(8,14,.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 0:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values_1  = [5,50, 100, 150]
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 1:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_1[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_1[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values_1  = [5,50, 100, 150]
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 2:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_2[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_2[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values_1  = [5,50, 100, 150]
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 3:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_3[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_3[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values_1  = [5,50, 100, 150]
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 4:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_4[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_4[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values_1  = [5,50, 100, 150]
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 5:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_5[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_5[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values_1  = [5,50, 100, 150, 200]
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 6:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_6[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_6[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values_1  = [5,50, 100, 150, 200]
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'magi' and n_int_spt_1 == 0:# in specfile_glx:
		splt_smpl_sfx_f1 = 'magi_F'
		splt_smpl_sfx_1  = '_magi'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv)
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'mag$_{i}$'
		var_prp_hdr_1    = 'magi'#'SAS'
		xticks_values_1  = np.arange(-100,100,0.25)
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]				
	elif int_typ_spl_1 == 'magi' and n_int_spt_1 == 1:# in specfile_glx:
		splt_smpl_sfx_f1 = 'magi_F'
		splt_smpl_sfx_1  = '_magi'
		splt_smpl_unt_1  = 'mag'
		splt_smpl_unl_1  = 'mag'
		plt_nme_prp_1    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv)
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'mag$_{i}$'
		var_prp_hdr_1    = 'magi'#'SAS'
		xticks_values_1  = np.arange(-100,100,0.25)
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]				
	elif int_typ_spl_1 == 'magi' and n_int_spt_1 == 2:# in specfile_glx:
		splt_smpl_sfx_f1 = 'magi_F'
		splt_smpl_sfx_1  = '_magi'
		splt_smpl_unt_1  = 'mag'
		splt_smpl_unl_1  = 'mag'
		plt_nme_prp_1    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_2)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_2)
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'mag$_{i}$'
		var_prp_hdr_1    = 'magi'#'SAS'
		xticks_values_1  = np.arange(-100,100,0.25)
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]				
	elif int_typ_spl_1 == 'magi' and n_int_spt_1 == 3:# in specfile_glx:
		splt_smpl_sfx_f1 = 'magi_F'
		splt_smpl_sfx_1  = '_magi'
		splt_smpl_unt_1  = 'mag'
		splt_smpl_unl_1  = 'mag'
		plt_nme_prp_1    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_3)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_3)
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'mag$_{i}$'
		var_prp_hdr_1    = 'magi'#'SAS'
		xticks_values_1  = np.arange(-100,100,0.25)
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]				
	elif int_typ_spl_1 == 'magi' and n_int_spt_1 == 4:# in specfile_glx:
		splt_smpl_sfx_f1 = 'magi_F'
		splt_smpl_sfx_1  = '_magi'
		splt_smpl_unt_1  = 'mag'
		splt_smpl_unl_1  = 'mag'
		plt_nme_prp_1    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_4)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_4)
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'mag$_{i}$'
		var_prp_hdr_1    = 'magi'#'SAS'
		xticks_values_1  = np.arange(-100,100,0.25)
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]				
	elif int_typ_spl_1 == 'phi' and n_int_spt_1 == 0:# in specfile_glx:
		splt_smpl_sfx_f1 = 'PHI'
		splt_smpl_sfx_1  = '-phi'
		splt_smpl_unt_1  = 'deg'
		splt_smpl_unl_1  = 'deg'
		plt_nme_prp_1    = 'PHI'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv)
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr_1    = 'PHI'#'SAS'
		xticks_values_1  = np.arange(-10,100,10) #xticks_values_1  [0,100]
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'phi'  and n_int_spt_1 == 2:# in specfile_glx:
		splt_smpl_sfx_f1 = 'PHI'
		splt_smpl_sfx_1  = '-phi'
		splt_smpl_unt_1  = 'deg'
		splt_smpl_unl_1  = 'deg'
		plt_nme_prp_1    = 'PHI'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv_23_2)			
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr_1    = 'PHI'#'SAS'
		xticks_values_1  = np.arange(-10,100,10) #xticks_values_1  [0,100]
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'phi'  and n_int_spt_1 == 3:# in specfile_glx:
		splt_smpl_sfx_f1 = 'PHI'
		splt_smpl_sfx_1  = '-phi'
		splt_smpl_unt_1  = 'deg'
		splt_smpl_unl_1  = 'deg'
		plt_nme_prp_1    = 'PHI'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv_23_3)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv_23_3)			
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr_1    = 'PHI'#'SAS'
		xticks_values_1  = np.arange(-10,100,10) #xticks_values_1  [0,100]
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]	
	elif int_typ_spl_1 == 'icl_fg' and n_int_spt_1 == 0:# in specfile_glx:
		splt_smpl_sfx_f1 = 'q_F'
		splt_smpl_sfx_1  = '-icl'
		splt_smpl_unt_1  = 'deg'
		splt_smpl_unl_1  = 'deg'
		plt_nme_prp_1    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv)
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$q$'
		var_prp_hdr_1    = 'q'#'SAS'
		xticks_values_1  = np.arange(-1,1,0.1)
		yticks_values_1  = np.arange(0,30,.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'icl_fg' and n_int_spt_1 == 2:# in specfile_glx:
		splt_smpl_sfx_f1 = 'q_F'
		splt_smpl_sfx_1  = '-icl'
		splt_smpl_unt_1  = 'deg'
		splt_smpl_unl_1  = 'deg'
		plt_nme_prp_1    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv_23_2)
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$q$'
		var_prp_hdr_1    = 'q'#'SAS'
		xticks_values_1  = np.arange(-1,1,0.1)
		yticks_values_1  = np.arange(0,30,.5)  #[0.1,0.5,1,3]	
	elif int_typ_spl_1 == 'icl_fg' and n_int_spt_1 == 3:# in specfile_glx:
		splt_smpl_sfx_f1 = 'q_F'
		splt_smpl_sfx_1  = '-icl'
		splt_smpl_unt_1  = 'deg'
		splt_smpl_unl_1  = 'deg'
		plt_nme_prp_1    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv_23_3)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv_23_3)
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$q$'
		var_prp_hdr_1    = 'q'#'SAS'
		xticks_values_1  = np.arange(-1,1,0.1)
		yticks_values_1  = np.arange(0,30,.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'icl_fg' and n_int_spt_1 == 4:# in specfile_glx:
		splt_smpl_sfx_f1 = 'q_F'
		splt_smpl_sfx_1  = '-icl'
		splt_smpl_unt_1  = 'deg'
		splt_smpl_unl_1  = 'deg'
		plt_nme_prp_1    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv_23_4)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv_23_4)			
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$q$'
		var_prp_hdr_1    = 'q'#'SAS'
		xticks_values_1  = np.arange(-1,1,0.1)
		yticks_values_1  = np.arange(0,30,.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'n_sersic_fg' and n_int_spt_1 == 0:# in specfile_glx:
		splt_smpl_sfx_f1 = 'n_F'
		splt_smpl_sfx_1  = '-n_srs'
		splt_smpl_unt_1  = 'n'
		splt_smpl_unl_1  = 'n'
		plt_nme_prp_1    = 'n_srs'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,n_srs_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,n_srs_itv)
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = 'n'
		var_prp_hdr_1    = 'nsr'#'SAS'
		xticks_values_1  = np.arange(-1,3,0.25)
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'n_sersic_fg'  and n_int_spt_1 == 2:# in specfile_glx:
		splt_smpl_sfx_f1 = 'n_F'
		splt_smpl_sfx_1  = '-n_srs'
		splt_smpl_unt_1  = 'n'
		splt_smpl_unl_1  = 'n'
		plt_nme_prp_1    = 'n_srs'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,n_srs_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,n_srs_itv_23_2)			
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = 'n'
		var_prp_hdr_1    = 'nsr'#'SAS'
		xticks_values_1  = np.arange(-1,3,0.25)
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'r_eff_fg' and n_int_spt_1 == 0:# in specfile_glx:
		splt_smpl_sfx_f1 = 're_F'
		splt_smpl_sfx_1  = '-r_eff'
		splt_smpl_unt_1  = 'arcsec'
		splt_smpl_unl_1  = 'arcsec'
		plt_nme_prp_1    = 'r_eff'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv)
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]  
		xlabel_1         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr_1    = 'ref'#'SAS'
		xticks_values_1  = np.arange(-1,50,0.5)
		yticks_values_1  = np.arange(0,30,.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'r_eff_fg'  and n_int_spt_1 == 2:# in specfile_glx:
		splt_smpl_sfx_f1 = 're_F'
		splt_smpl_sfx_1  = '-r_eff'
		splt_smpl_unt_1  = 'arcsec'
		splt_smpl_unl_1  = 'arcsec'
		plt_nme_prp_1    = 'r_eff'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv_23_2)			
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr_1    = 'ref'#'SAS'
		xticks_values_1  = np.arange(-1,50,0.5)
		yticks_values_1  = np.arange(0,30,.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'r_eff_fg'  and n_int_spt_1 == 3:# in specfile_glx:
		splt_smpl_sfx_f1 = 're_F'
		splt_smpl_sfx_1  = '-r_eff'
		splt_smpl_unt_1  = 'arcsec'
		splt_smpl_unl_1  = 'arcsec'
		plt_nme_prp_1    = 'r_eff'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv_23_3)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv_23_3)			
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr_1    = 'ref'#'SAS'
		xticks_values_1  = np.arange(-1,50,0.5)
		yticks_values_1  = np.arange(0,30,.5)  #[0.1,0.5,1,3]					
	else:
		print
		print (colored('Such combination (1st-split) does not exist!','yellow'))
		print (colored('Variable: '+str(int_typ_spl_1)+', # bins: '+str(n_int_spt_1),'yellow'))
		print
		quit()
	####

	if int_typ_spl_2 == 'kpc'  and n_int_spt_2 == 0:#in specfile_glx_f:
		splt_smpl_sfx_f2= 'kpc_F'
		splt_smpl_sfx_2 = '_kpc' 
		splt_smpl_unt_2 = 'kpc'
		splt_smpl_unl_2 = 'kpc'
		plt_nme_prp_2   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv)				
		slc_int_fg_2    = slc_kpc_int_fg[1]
		slc_int_bg_2    = slc_kpc_int_bg[1]		
		xlabel_2        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_2   = 'SKP'
		xticks_values_2 = [5,50, 100, 150]
		yticks_values_2 = np.arange(0,30,0.5)
	elif int_typ_spl_2 == 'kpc'  and n_int_spt_2 == 1:#in specfile_glx_f:
		splt_smpl_sfx_f2= 'kpc_F'
		splt_smpl_sfx_2 = '_kpc' 
		splt_smpl_unt_2 = 'kpc'
		splt_smpl_unl_2 = 'kpc'
		plt_nme_prp_2   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_1)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_1)				
		slc_int_fg_2    = slc_kpc_int_fg[1]
		slc_int_bg_2    = slc_kpc_int_bg[1]
		xlabel_2        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_2   = 'SKP'
		xticks_values_2 = [5,50, 100, 150]
		yticks_values_2 = np.arange(0,30,0.5)
	elif int_typ_spl_2 == 'kpc'  and n_int_spt_2 == 2:#in specfile_glx_f:
		splt_smpl_sfx_f2= 'kpc_F'
		splt_smpl_sfx_2 = '_kpc' 
		splt_smpl_unt_2 = 'kpc'
		splt_smpl_unl_2 = 'kpc'
		plt_nme_prp_2   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_2)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_2)				
		slc_int_fg_2    = slc_kpc_int_fg[1]
		slc_int_bg_2    = slc_kpc_int_bg[1]
		xlabel_2        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_2   = 'SKP'
		xticks_values_2 = [5,50, 100, 150]
		yticks_values_2 = np.arange(0,30,0.5)
	elif int_typ_spl_2 == 'kpc'  and n_int_spt_2 == 3:#in specfile_glx_f:
		splt_smpl_sfx_f2= 'kpc_F'
		splt_smpl_sfx_2 = '_kpc' 
		splt_smpl_unt_2 = 'kpc'
		splt_smpl_unl_2 = 'kpc'
		plt_nme_prp_2   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_3)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_3)				
		slc_int_fg_2    = slc_kpc_int_fg[1]
		slc_int_bg_2    = slc_kpc_int_bg[1]
		xlabel_2        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_2   = 'SKP'
		xticks_values_2 = [5,50, 100, 150]
		yticks_values_2 = np.arange(0,30,0.5)
	elif int_typ_spl_2 == 'kpc'  and n_int_spt_2 == 4:#in specfile_glx_f:
		splt_smpl_sfx_f2= 'kpc_F'
		splt_smpl_sfx_2 = '_kpc' 
		splt_smpl_unt_2 = 'kpc'
		splt_smpl_unl_2 = 'kpc'
		plt_nme_prp_2   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_4)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_4)				
		slc_int_fg_2    = slc_kpc_int_fg[1]
		slc_int_bg_2    = slc_kpc_int_bg[1]
		xlabel_2        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_2   = 'SKP'
		xticks_values_2 = [5,50, 100, 150]
		yticks_values_2 = np.arange(0,30,0.5)
	elif int_typ_spl_2 == 'mass' and n_int_spt_2 == 0:# in specfile_glx_f:
		splt_smpl_sfx_f2= 'mass_F'
		splt_smpl_sfx_2 = '-mass'
		splt_smpl_unt_2 = 'log[M/M$_{\odot}$]'
		splt_smpl_unl_2 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_2   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23)				
		slc_int_fg_2    = slc_mss_int_fg[1]
		slc_int_bg_2    = slc_mss_int_bg[1]
		xlabel_2        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_2   = 'MSF'
		xticks_values_2 = np.arange(1,20,.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2 = np.arange(0,30,0.5)
	elif int_typ_spl_2 == 'mass' and n_int_spt_2 == 1:# in specfile_glx_f:
		splt_smpl_sfx_f2= 'mass_F'
		splt_smpl_sfx_2 = '-mass'
		splt_smpl_unt_2 = 'log[M/M$_{\odot}$]'
		splt_smpl_unl_2 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_2   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_1)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_1)				
		slc_int_fg_2    = slc_mss_int_fg[1]
		slc_int_bg_2    = slc_mss_int_bg[1]
		xlabel_2        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_2   = 'MSF'
		xticks_values_2 = np.arange(1,20,.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2 = np.arange(0,30,0.5)
	elif int_typ_spl_2 == 'mass' and n_int_spt_2 == 2:# in specfile_glx_f:
		splt_smpl_sfx_f2= 'mass_F'
		splt_smpl_sfx_2 = '-mass'
		splt_smpl_unt_2 = 'log[M/M$_{\odot}$]'
		splt_smpl_unl_2 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_2   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_2)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_2)				
		slc_int_fg_2    = slc_mss_int_fg[1]
		slc_int_bg_2    = slc_mss_int_bg[1]
		xlabel_2        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_2   = 'MSF'
		xticks_values_2 = np.arange(1,20,0.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2 = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'mass' and n_int_spt_2 == 3:# in specfile_glx_f:
		splt_smpl_sfx_f2= 'mass_F'
		splt_smpl_sfx_2 = '-mass'
		splt_smpl_unt_2 = 'log[M/M$_{\odot}$]'
		splt_smpl_unl_2 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_2   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_3)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_3)				
		slc_int_fg_2    = slc_mss_int_fg[1]
		slc_int_bg_2    = slc_mss_int_bg[1]
		xlabel_2        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_2   = 'MSF'
		xticks_values_2 = np.arange(1,20,0.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2 = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'mass' and n_int_spt_2 == 4:# in specfile_glx_f:
		splt_smpl_sfx_f2= 'mass_F'
		splt_smpl_sfx_2 = '-mass'
		splt_smpl_unt_2 = 'log[M/M$_{\odot}$]'
		splt_smpl_unl_2 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_2   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_4)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_4)				
		slc_int_fg_2    = slc_mss_int_fg[1]
		slc_int_bg_2    = slc_mss_int_bg[1]
		xlabel_2        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_2   = 'MSF'
		xticks_values_2 = np.arange(1,20,0.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2 = np.arange(0,30,0.5)         #[0.1,0.5,1,3]				
	elif int_typ_spl_2 == 'Age'  and n_int_spt_2 == 0:#in specfile_glx_f:
		splt_smpl_sfx_f2 = '-Age_F'
		splt_smpl_sfx_2  = '-Age' 
		splt_smpl_unt_2  = 'Age'
		splt_smpl_unl_2  = 'Age'
		plt_nme_prp_2    = 'Age'
		slc_age_int_fg_0 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv)
		slc_age_int_bg_0 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv)
		slc_int_fg_2     = slc_age_int_fg_0[1]
		slc_int_bg_2     = slc_age_int_bg_0[1]
		xlabel_2         = 'Age'
		var_prp_hdr_2    = 'AGF'
		xticks_values_2  = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2  = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'Age'  and n_int_spt_2 == 1:#in specfile_glx_f:
		splt_smpl_sfx_f2 = '-Age_F'
		splt_smpl_sfx_2  = '-Age' 
		splt_smpl_unt_2  = 'Age'
		splt_smpl_unl_2  = 'Age'
		plt_nme_prp_2    = 'Age'
		slc_age_int_fg_1 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_1)
		slc_age_int_bg_1 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_1)
		slc_int_fg_2     = slc_age_int_fg_1[1]
		slc_int_bg_2     = slc_age_int_bg_1[1]
		xlabel_2         = 'Age'
		var_prp_hdr_2    = 'AGF'
		xticks_values_2  = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2  = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'Age'  and n_int_spt_2 == 2:#in specfile_glx_f:
		splt_smpl_sfx_f2 = '-Age_F'
		splt_smpl_sfx_2  = '-Age' 
		splt_smpl_unt_2  = 'Age'
		splt_smpl_unl_2  = 'Age'
		plt_nme_prp_2    = 'Age'
		slc_age_int_fg_2 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_2)
		slc_age_int_bg_2 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_2)
		slc_int_fg_2     = slc_age_int_fg_2[1]
		slc_int_bg_2     = slc_age_int_bg_2[1]
		xlabel_2         = 'Age'
		var_prp_hdr_2    = 'AGF'
		xticks_values_2  = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2  = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'Age'  and n_int_spt_2 == 3:#in specfile_glx_f:
		splt_smpl_sfx_f2 = '-Age_F'
		splt_smpl_sfx_2  = '-Age' 
		splt_smpl_unt_2  = 'Age'
		splt_smpl_unl_2  = 'Age'
		plt_nme_prp_2    = 'Age'
		slc_age_int_fg_3 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_3)
		slc_age_int_bg_3 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_3)
		slc_int_fg_2     = slc_age_int_fg_3[1]
		slc_int_bg_2     = slc_age_int_bg_3[1]
		xlabel_2         = 'Age'
		var_prp_hdr_2    = 'AGF'
		xticks_values_2  = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2  = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'Age'  and n_int_spt_2 == 4:#in specfile_glx_f:
		splt_smpl_sfx_f2 = '-Age_F'
		splt_smpl_sfx_2  = '-Age' 
		splt_smpl_unt_2  = 'Age'
		splt_smpl_unl_2  = 'Age'
		plt_nme_prp_2    = 'Age'
		slc_age_int_fg_4 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_4)
		slc_age_int_bg_4 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_4)
		slc_int_fg_2     = slc_age_int_fg_4[1]
		slc_int_bg_2     = slc_age_int_bg_4[1]
		xlabel_2         = 'Age'
		var_prp_hdr_2    = 'AGF'
		xticks_values_2  = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2  = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'SFR'  and n_int_spt_2 == 0:#in specfile_glx_f:
		splt_smpl_sfx_f2 = 'SFR_F'
		splt_smpl_sfx_2  = '-SFR' 
		splt_smpl_unt_2  = 'M$_{\odot}$yr$^{-1}$' 
		splt_smpl_unl_2  = 'SFR' 
		plt_nme_prp_2    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv)
		slc_int_fg_2     = slc_sfr_int_fg[1]
		slc_int_bg_2     = slc_sfr_int_bg[1]
		xlabel_2         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_2    = 'SFF'
		xticks_values_2  = np.arange(0,3,0.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'SFR'  and n_int_spt_2 == 1:#in specfile_glx_f:
		splt_smpl_sfx_f2 = 'SFR_F'
		splt_smpl_sfx_2  = '-SFR' 
		splt_smpl_unt_2  = 'M$_{\odot}$yr$^{-1}$' 
		splt_smpl_unl_2  = 'SFR' 
		plt_nme_prp_2    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_1)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_1)
		slc_int_fg_2     = slc_sfr_int_fg[1]
		slc_int_bg_2     = slc_sfr_int_bg[1]
		xlabel_2         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_2    = 'SFF'
		xticks_values_2  = np.arange(0,3,0.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'SFR'  and n_int_spt_2 == 2:#in specfile_glx_f:
		splt_smpl_sfx_f2 = 'SFR_F'
		splt_smpl_sfx_2  = '-SFR' 
		splt_smpl_unt_2  = 'M$_{\odot}$yr$^{-1}$' 
		splt_smpl_unl_2  = 'SFR' 
		plt_nme_prp_2    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_2)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_2)
		slc_int_fg_2     = slc_sfr_int_fg[1]
		slc_int_bg_2     = slc_sfr_int_bg[1]
		xlabel_2         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_2    = 'SFF'
		xticks_values_2  = np.arange(0,3,0.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'SFR'  and n_int_spt_2 == 3:#in specfile_glx_f:
		splt_smpl_sfx_f2 = 'SFR_F'
		splt_smpl_sfx_2  = '-SFR' 
		splt_smpl_unt_2  = 'M$_{\odot}$yr$^{-1}$' 
		splt_smpl_unl_2  = 'SFR' 
		plt_nme_prp_2    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_3)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_3)
		slc_int_fg_2     = slc_sfr_int_fg[1]
		slc_int_bg_2     = slc_sfr_int_bg[1]
		xlabel_2         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_2    = 'SFF'
		xticks_values_2  = np.arange(0,3,0.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'SFR'  and n_int_spt_2 == 4:#in specfile_glx_f:
		splt_smpl_sfx_f2 = 'SFR_F'
		splt_smpl_sfx_2  = '-SFR' 
		splt_smpl_unt_2  = 'M$_{\odot}$yr$^{-1}$' 
		splt_smpl_unl_2  = 'SFR' 
		plt_nme_prp_2    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_4)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_4)
		slc_int_fg_2     = slc_sfr_int_fg[1]
		slc_int_bg_2     = slc_sfr_int_bg[1]
		xlabel_2         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_2    = 'SFF'
		xticks_values_2  = np.arange(0,3,0.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'sSFR' and n_int_spt_2 == 0:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'sSFR_F'
		splt_smpl_sfx_2  = '-sSFR'
		splt_smpl_unt_2  = 'sSFR'
		splt_smpl_unl_2  = 'sSFR'
		plt_nme_prp_2    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv)
		slc_int_fg_2     = slc_ssf_int_fg[1]
		slc_int_bg_2     = slc_ssf_int_bg[1]
		xlabel_2         = 'sSFR [Gyr]'
		var_prp_hdr_2    = 'sSF'
		xticks_values_2  = np.arange(-20,-1,0.1)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'sSFR' and n_int_spt_2 == 1:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'sSFR_F'
		splt_smpl_sfx_2  = '-sSFR'
		splt_smpl_unt_2  = 'sSFR'
		splt_smpl_unl_2  = 'sSFR'
		plt_nme_prp_2    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_1)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_1)
		slc_int_fg_2     = slc_ssf_int_fg[1]
		slc_int_bg_2     = slc_ssf_int_bg[1]
		xlabel_2         = 'sSFR [Gyr]'
		var_prp_hdr_2    = 'sSF'
		xticks_values_2  = np.arange(-20,-1,0.1)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'sSFR' and n_int_spt_2 == 2:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'sSFR_F'
		splt_smpl_sfx_2  = '-sSFR'
		splt_smpl_unt_2  = 'sSFR'
		splt_smpl_unl_2  = 'sSFR'
		plt_nme_prp_2    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_2)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_2)
		slc_int_fg_2     = slc_ssf_int_fg[1]
		slc_int_bg_2     = slc_ssf_int_bg[1]
		xlabel_2         = 'sSFR [Gyr]'
		var_prp_hdr_2    = 'sSF'
		xticks_values_2  = np.arange(-20,-1,0.1)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'sSFR' and n_int_spt_2 == 3:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'sSFR_F'
		splt_smpl_sfx_2  = '-sSFR'
		splt_smpl_unt_2  = 'sSFR'
		splt_smpl_unl_2  = 'sSFR'
		plt_nme_prp_2    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_3)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_3)
		slc_int_fg_2     = slc_ssf_int_fg[1]
		slc_int_bg_2     = slc_ssf_int_bg[1]
		xlabel_2         = 'sSFR [Gyr]'
		var_prp_hdr_2    = 'sSF'
		xticks_values_2  = np.arange(-20,-1,0.1)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'sSFR' and n_int_spt_2 == 4:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'sSFR_F'
		splt_smpl_sfx_2  = '-sSFR'
		splt_smpl_unt_2  = 'sSFR'
		splt_smpl_unl_2  = 'sSFR'
		plt_nme_prp_2    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_4)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_4)
		slc_int_fg_2     = slc_ssf_int_fg[1]
		slc_int_bg_2     = slc_ssf_int_bg[1]
		xlabel_2         = 'sSFR [Gyr]'
		var_prp_hdr_2    = 'sSF'
		xticks_values_2  = np.arange(-20,-1,0.25)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2  = np.arange(0,30,.25)   #[0.1,0.5,1,3]						
	elif int_typ_spl_2 == 'Lnuv' and n_int_spt_2 == 0:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'Lnuv_F'
		splt_smpl_sfx_2  = '-Lnuv'
		splt_smpl_unt_2  = 'ergs cm$^{-2}$ s$^{-1}$'
		splt_smpl_unl_2  = 'Lnuv'
		plt_nme_prp_2    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv)
		slc_int_fg_2     = slc_luv_int_fg[1]
		slc_int_bg_2     = slc_luv_int_bg[1]
		xlabel_2         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_2    = 'UVF'
		xticks_values_2  = np.arange(8,14,.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'Lnuv' and n_int_spt_2 == 1:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'Lnuv_F'
		splt_smpl_sfx_2  = '-Lnuv'
		splt_smpl_unt_2  = 'ergs cm$^{-2}$ s$^{-1}$'
		splt_smpl_unl_2  = 'Lnuv'
		plt_nme_prp_2    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_1)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_1)
		slc_int_fg_2     = slc_luv_int_fg[1]
		slc_int_bg_2     = slc_luv_int_bg[1]
		xlabel_2         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_2    = 'UVF'
		xticks_values_2  = np.arange(8,14,.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'Lnuv' and n_int_spt_2 == 2:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'Lnuv_F'
		splt_smpl_sfx_2  = '-Lnuv'
		splt_smpl_unt_2  = 'ergs cm$^{-2}$ s$^{-1}$'
		splt_smpl_unl_2  = 'Lnuv'
		plt_nme_prp_2    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_2)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_2)
		slc_int_fg_2     = slc_luv_int_fg[1]
		slc_int_bg_2     = slc_luv_int_bg[1]
		xlabel_2         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_2    = 'UVF'
		xticks_values_2  = np.arange(8,14,.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'Lnuv' and n_int_spt_2 == 3:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'Lnuv_F'
		splt_smpl_sfx_2  = '-Lnuv'
		splt_smpl_unt_2  = 'ergs cm$^{-2}$ s$^{-1}$'
		splt_smpl_unl_2  = 'Lnuv'
		plt_nme_prp_2    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_3)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_3)
		slc_int_fg_2     = slc_luv_int_fg[1]
		slc_int_bg_2     = slc_luv_int_bg[1]
		xlabel_2         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_2    = 'UVF'
		xticks_values_2  = np.arange(8,14,.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'Lnuv' and n_int_spt_2 == 4:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'Lnuv_F'
		splt_smpl_sfx_2  = '-Lnuv'
		splt_smpl_unt_2  = 'ergs cm$^{-2}$ s$^{-1}$'
		splt_smpl_unl_2  = 'Lnuv'
		plt_nme_prp_2    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_4)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_4)
		slc_int_fg_2     = slc_luv_int_fg[1]
		slc_int_bg_2     = slc_luv_int_bg[1]
		xlabel_2         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_2    = 'UVF'
		xticks_values_2  = np.arange(8,14,.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 0:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = 'arcsec'
		splt_smpl_unl_2  = 'arcsec'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
		xticks_values_2  = [5,50, 100, 150]
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 1:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = 'arcsec'
		splt_smpl_unl_2  = 'arcsec'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_1[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_1[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
		xticks_values_2  = [5,50, 100, 150]
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 2:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = 'arcsec'
		splt_smpl_unl_2  = 'arcsec'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_2[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_2[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
		xticks_values_2  = [5,50, 100, 150]
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 3:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = 'arcsec'
		splt_smpl_unl_2  = 'arcsec'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_3[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_3[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
		xticks_values_2  = [5,50, 100, 150]
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 4:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = 'arcsec'
		splt_smpl_unl_2  = 'arcsec'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_4[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_4[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
		xticks_values_2  = [5,50, 100, 150]
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 5:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = 'arcsec'
		splt_smpl_unl_2  = 'arcsec'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_5[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_5[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
		xticks_values_2  = [5,50, 100, 150, 200]
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 6:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = 'arcsec'
		splt_smpl_unl_2  = 'arcsec'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_6[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_6[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
		xticks_values_2  = [5,50, 100, 150, 200]
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_2 == 'magi' and n_int_spt_2 == 0:# in specfile_glx:
		splt_smpl_sfx_f2 = 'magi_F'
		splt_smpl_sfx_2  = '_magi'
		splt_smpl_unt_2  = 'arcsec'
		splt_smpl_unl_2  = 'arcsec'
		plt_nme_prp_2    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv)
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'mag$_{i}$'
		var_prp_hdr_2    = 'magi'#'SAS'
		xticks_values_2  = np.arange(-100,100,0.25)
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]				
	elif int_typ_spl_2 == 'magi' and n_int_spt_2 == 1:# in specfile_glx:
		splt_smpl_sfx_f2 = 'magi_F'
		splt_smpl_sfx_2  = '_magi'
		splt_smpl_unt_2  = 'mag'
		splt_smpl_unl_2  = 'mag'
		plt_nme_prp_2    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv)
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'mag$_{i}$'
		var_prp_hdr_2    = 'magi'#'SAS'
		xticks_values_2  = np.arange(-100,100,0.25)
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]				
	elif int_typ_spl_2 == 'magi' and n_int_spt_2 == 2:# in specfile_glx:
		splt_smpl_sfx_f2 = 'magi_F'
		splt_smpl_sfx_2  = '_magi'
		splt_smpl_unt_2  = 'mag'
		splt_smpl_unl_2  = 'mag'
		plt_nme_prp_2    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_2)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_2)
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'mag$_{i}$'
		var_prp_hdr_2    = 'magi'#'SAS'
		xticks_values_2  = np.arange(-100,100,0.25)
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]				
	elif int_typ_spl_2 == 'magi' and n_int_spt_2 == 3:# in specfile_glx:
		splt_smpl_sfx_f2 = 'magi_F'
		splt_smpl_sfx_2  = '_magi'
		splt_smpl_unt_2  = 'mag'
		splt_smpl_unl_2  = 'mag'
		plt_nme_prp_2    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_3)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_3)
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'mag$_{i}$'
		var_prp_hdr_2    = 'magi'#'SAS'
		xticks_values_2  = np.arange(-100,100,0.25)
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]				
	elif int_typ_spl_2 == 'magi' and n_int_spt_2 == 4:# in specfile_glx:
		splt_smpl_sfx_f2 = 'magi_F'
		splt_smpl_sfx_2  = '_magi'
		splt_smpl_unt_2  = 'mag'
		splt_smpl_unl_2  = 'mag'
		plt_nme_prp_2    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_4)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_4)
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'mag$_{i}$'
		var_prp_hdr_2    = 'magi'#'SAS'
		xticks_values_2  = np.arange(-100,100,0.25)
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]				
	elif int_typ_spl_2 == 'phi' and n_int_spt_2 == 0:# in specfile_glx:
		splt_smpl_sfx_f2 = 'PHI'
		splt_smpl_sfx_2  = '-phi'
		splt_smpl_unt_2  = 'deg'
		splt_smpl_unl_2  = 'deg'
		plt_nme_prp_2    = 'PHI'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv)
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr_2    = 'PHI'#'SAS'
		xticks_values_2  = np.arange(-10,100,10) #xticks_values_1  [0,100]
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_2 == 'phi'  and n_int_spt_2 == 2:# in specfile_glx:
		splt_smpl_sfx_f2 = 'PHI'
		splt_smpl_sfx_2  = '-phi'
		splt_smpl_unt_2  = 'deg'
		splt_smpl_unl_2  = 'deg'
		plt_nme_prp_2    = 'PHI'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv_23_2)			
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr_2    = 'PHI'#'SAS'
		xticks_values_2  = np.arange(-10,100,10) #xticks_values_1  [0,100]
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_2 == 'phi'  and n_int_spt_2 == 3:# in specfile_glx:
		splt_smpl_sfx_f2 = 'PHI'
		splt_smpl_sfx_2  = '-phi'
		splt_smpl_unt_2  = 'deg'
		splt_smpl_unl_2  = 'deg'
		plt_nme_prp_2    = 'PHI'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv_23_3)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv_23_3)			
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr_2    = 'PHI'#'SAS'
		xticks_values_2  = np.arange(-10,100,10) #xticks_values_1  [0,100]
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]	
	elif int_typ_spl_2 == 'icl_fg' and n_int_spt_2 == 0:# in specfile_glx:
		splt_smpl_sfx_f2 = 'q_F'
		splt_smpl_sfx_2  = '-icl'
		splt_smpl_unt_2  = 'deg'
		splt_smpl_unl_2  = 'deg'
		plt_nme_prp_2    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv)
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$q$'
		var_prp_hdr_2    = 'q'#'SAS'
		xticks_values_2  = np.arange(-1,1,0.1)
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_2 == 'icl_fg' and n_int_spt_2 == 2:# in specfile_glx:
		splt_smpl_sfx_f2 = 'q_F'
		splt_smpl_sfx_2  = '-icl'
		splt_smpl_unt_2  = 'deg'
		splt_smpl_unl_2  = 'deg'
		plt_nme_prp_2    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv_23_2)
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$q$'
		var_prp_hdr_2    = 'q'#'SAS'
		xticks_values_2  = np.arange(-1,1,0.1)
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]	
	elif int_typ_spl_2 == 'icl_fg' and n_int_spt_2 == 3:# in specfile_glx:
		splt_smpl_sfx_f2 = 'q_F'
		splt_smpl_sfx_2  = '-icl'
		splt_smpl_unt_2  = 'deg'
		splt_smpl_unl_2  = 'deg'
		plt_nme_prp_2    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv_23_3)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv_23_3)
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$q$'
		var_prp_hdr_2    = 'q'#'SAS'
		xticks_values_2  = np.arange(-1,1,0.1)
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_2 == 'icl_fg' and n_int_spt_2 == 4:# in specfile_glx:
		splt_smpl_sfx_f2 = 'q_F'
		splt_smpl_sfx_2  = '-icl'
		splt_smpl_unt_2  = 'deg'
		splt_smpl_unl_2  = 'deg'
		plt_nme_prp_2    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv_23_4)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv_23_4)			
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$q$'
		var_prp_hdr_2    = 'q'#'SAS'
		xticks_values_2  = np.arange(-1,1,0.1)
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_2 == 'n_sersic_fg' and n_int_spt_2 == 0:# in specfile_glx:
		splt_smpl_sfx_f2 = 'n_F'
		splt_smpl_sfx_2  = '-n_srs'
		splt_smpl_unt_2  = 'n'
		splt_smpl_unl_2  = 'n'
		plt_nme_prp_2    = 'n_srs'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,n_srs_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,n_srs_itv)
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = 'n'
		var_prp_hdr_2    = 'nsr'#'SAS'
		xticks_values_2  = np.arange(-1,3,0.25)
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_2 == 'n_sersic_fg'  and n_int_spt_2 == 2:# in specfile_glx:
		splt_smpl_sfx_f2 = 'n_F'
		splt_smpl_sfx_2  = '-n_srs'
		splt_smpl_unt_2  = 'n'
		splt_smpl_unl_2  = 'n'
		plt_nme_prp_2    = 'n_srs'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,n_srs_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,n_srs_itv_23_2)			
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = 'n'
		var_prp_hdr_2    = 'nsr'#'SAS'
		xticks_values_2  = np.arange(-1,3,0.25)
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_2 == 'r_eff_fg' and n_int_spt_2 == 0:# in specfile_glx:
		splt_smpl_sfx_f2 = 're_F'
		splt_smpl_sfx_2  = '-r_eff'
		splt_smpl_unt_2  = 'arcsec'
		splt_smpl_unl_2  = 'arcsec'
		plt_nme_prp_2    = 'r_eff'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv)
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]  
		xlabel_2         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr_2    = 'ref'#'SAS'
		xticks_values_2  = np.arange(-1,50,0.5)
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_2 == 'r_eff_fg'  and n_int_spt_2 == 2:# in specfile_glx:
		splt_smpl_sfx_f2 = 're_F'
		splt_smpl_sfx_2  = '-r_eff'
		splt_smpl_unt_2  = 'arcsec'
		splt_smpl_unl_2  = 'arcsec'
		plt_nme_prp_2    = 'r_eff'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv_23_2)			
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr_2    = 'ref'#'SAS'
		xticks_values_2  = np.arange(-1,50,0.5)
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_2 == 'r_eff_fg'  and n_int_spt_2 == 3:# in specfile_glx:
		splt_smpl_sfx_f2 = 're_F'
		splt_smpl_sfx_2  = '-r_eff'
		splt_smpl_unt_2  = 'arcsec'
		splt_smpl_unl_2  = 'arcsec'
		plt_nme_prp_2    = 'r_eff'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv_23_3)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv_23_3)			
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr_2    = 'ref'#'SAS'
		xticks_values_2  = np.arange(-1,50,0.5)
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]					
	else:
		print
		print (colored('Such combination (1st-split) does not exist!','yellow'))
		print (colored('Variable: '+str(int_typ_spl_1)+', # bins: '+str(n_int_spt_1),'yellow'))
		print
		quit()
	####
	print
	print slc_int_fg_1
	print slc_int_fg_2
	print lower_shift_1, upper_shift_1
	print lower_shift_2, upper_shift_2
	print
	FILES_M =[]
	FILES_A =[]


	'''
	if frg_ref_plt == True:
		for element,a in  enumerate(itertools.product(range(len(slc_int_fg_1)-1,len(slc_int_fg_1)),range(lower_shift_2,len(slc_int_fg_2)-upper_shift_2))):	
			index_int_1 = a[0]
			index_int_2 = a[1]
			print element,slc_int_fg_1[index_int_1],slc_int_fg_2[index_int_2]
			ini_fg_spc_m  = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-' + splt_smpl_sfx_f1 +'-'+str(slc_int_fg_1[index_int_1]) +'-ss-' + splt_smpl_sfx_f2 +'-'+str(slc_int_fg_2[index_int_2]) + '-stk-med'+str(stk_function)+'.fits'
			ini_fg_spc_a  = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-' + splt_smpl_sfx_f1 +'-'+str(slc_int_fg_1[index_int_1]) +'-ss-' + splt_smpl_sfx_f2 +'-'+str(slc_int_fg_2[index_int_2]) + '-stk-avg'+str(stk_function)+'.fits'
			print
			print ini_fg_spc_m
			print ini_fg_spc_a
			print

			#FILES_M.append(ini_fg_spc_m)
			#FILES_A.append(ini_fg_spc_a)
	elif frg_ref_plt == False:
		pass
	print 'zfsdfsd'
	print
	'''


	for element,a in  enumerate(itertools.product(range(lower_shift_1,len(slc_int_fg_1)-upper_shift_1),range(lower_shift_2,len(slc_int_fg_2)-upper_shift_2))):
		#print element,a
		index_int_1 = a[0]
		index_int_2 = a[1]
		print element,slc_int_fg_1[index_int_1],slc_int_fg_2[index_int_2]
		ini_fg_spc_m  = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-' + splt_smpl_sfx_f1 +'-'+str(slc_int_fg_1[index_int_1]) +'-ss-' + splt_smpl_sfx_f2 +'-'+str(slc_int_fg_2[index_int_2]) + '-stk-med'+str(stk_function)+'.fits'
		ini_fg_spc_a  = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-' + splt_smpl_sfx_f1 +'-'+str(slc_int_fg_1[index_int_1]) +'-ss-' + splt_smpl_sfx_f2 +'-'+str(slc_int_fg_2[index_int_2]) + '-stk-avg'+str(stk_function)+'.fits'
		ini_bg_spc_m  = res_stk_res + 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-' + splt_smpl_sfx_f1 +'-'+str(slc_int_fg_1[index_int_1]) +'-ss-' + splt_smpl_sfx_f2 +'-'+str(slc_int_fg_2[index_int_2]) + '-stk-med'+str(stk_function)+'.fits'
		ini_bg_spc_a  = res_stk_res + 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-' + splt_smpl_sfx_f1 +'-'+str(slc_int_fg_1[index_int_1]) +'-ss-' + splt_smpl_sfx_f2 +'-'+str(slc_int_fg_2[index_int_2]) + '-stk-avg'+str(stk_function)+'.fits'


		print
		print ini_fg_spc_m
		print ini_fg_spc_a
		print
		print ini_bg_spc_m
		print ini_bg_spc_a
		FILES_M.append(ini_bg_spc_m)
		FILES_A.append(ini_bg_spc_a)

	####


	print
	print colored('Intervals to be plotted: ','yellow')
	print colored('Indices : '+str(range(lower_shift_1,len(slc_int_bg_1)-upper_shift_1)),'yellow')
	print colored('Indices : '+str(range(lower_shift_2,len(slc_int_bg_2)-upper_shift_2)),'yellow')
	print
	#for interval_range in range(lower_shift,len(slc_int_bg)-upper_shift):
		#print colored('Interval: ' + str(interval_range) + ': ' + str(slc_int_fg[interval_range]),'yellow')
		#cur_spc_1 = res_stk_res + specfile_glx_b + str(slc_int_fg[interval_range]) + '-stk-med'+str(stk_function)+'.fits'
		#cur_spc_2 = res_stk_res + specfile_glx_b + str(slc_int_fg[interval_range]) + '-stk-avg'+str(stk_function)+'.fits'
		#FILES_M.append(cur_spc_1)
		#FILES_A.append(cur_spc_2)
		#
	#if 'Fg' in specfile_glx_b[2]:
		#glx_type = 'Fg'
		#clr_plt  = 'red'
	#elif 'Bg' in specfile_glx_b[2]:
		#glx_type = 'Bg'
		#clr_plt  = 'blue'
		#
	if mlt_stk_fct == 'med':#stk_function_m == True:
		stk_function_file = 'med-c'
		
	elif mlt_stk_fct == 'avg':#stk_function_a == True:
		stk_function_file = 'avg-c'
		
	elif mlt_stk_fct == 'both':#stk_function_b == True:
		stk_function_file = 'med-avg'

	print
	print colored('EW from spectra files: ','yellow')
	if mlt_stk_fct == 'med':#stk_function_m == True :
		pass
		print
		print colored("\n".join([FILE for FILE in FILES_M]),'blue')
		print
	elif mlt_stk_fct == 'avg':#stk_function_a == True :
		pass
		print colored("\n".join([FILE for FILE in FILES_A]),'red')
		print
		print
	elif mlt_stk_fct == 'both':#stk_function_b	== True:
		pass
		print
		print colored("\n".join([FILE for FILE in FILES_M]),'blue')
		print
		print colored("\n".join([FILE for FILE in FILES_A]),'red')
		print
		print
	else:
		pass

	print colored('Reshaping filename array.','yellow')
	print colored('Split by: ' + int_typ_spl_1 + ' in # bins: ' +str(n_int_spt_1) ,'yellow')
	print colored("\n".join([str(FILE) for FILE in slc_int_fg_1]),'yellow')
	print
	print colored('Split by: ' + int_typ_spl_2 + ' in # bins: ' +str(n_int_spt_2) ,'yellow')
	print colored("\n".join([str(FILE) for FILE in slc_int_fg_2[lower_shift_2:(len(slc_int_fg_2)-upper_shift_2)]]),'yellow')
	print
	print colored('EW from spectra files: ','yellow')
	if mlt_stk_fct == 'med':#stk_function_m == True :
		FILES_M_AUX = np.reshape(FILES_M, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
		B_FLAG = (FILES_M_AUX[0][0].split('ss-zf_B-')[1]).rsplit('-ss-zf_F-')[0]
		F_FLAG = (FILES_M_AUX[0][0].split('ss-zf_F-')[1]).rsplit('-ss-'+int_typ_spl_1+'-')[0]
		pass
		SPEC_SEP_VAR = [Header_Get(spec_res_file,var_prp_hdr_2+'_MED') for spec_res_file in FILES_M_AUX[0][:]]
		print
		print colored("\n".join([FILE for FILE in FILES_M]),'blue')
		print

		try:
			plt_sufix_fnm = ((FILES_M_AUX[0][0].split('/')[-1])).rsplit(int_typ_spl_1)[0] + int_typ_spl_1 + '-' + str((n_int_spt_1)) + '-' +int_typ_spl_2 +'-' + str((n_int_spt_2)) #slc_int_fg_1[lower_shift_1] +'-' +slc_int_fg_1[len(slc_int_bg_2[0])-upper_shift_2-1]
			PLOT_TITLE    = 'z_Bg: ' + B_FLAG + ', z_Fg:' + F_FLAG + ', bins: ' +  int_typ_spl_1 + ': ' + str((n_int_spt_1)) + ', ' +int_typ_spl_2 +': ' + str((n_int_spt_2))#+ '-' + str(slc_int_fg_1[1][len(slc_int_bg_2[0])-upper_shift_2-1]) 
		except IndexError:
			plt_sufix_fnm = ((FILES_M_AUX[0][0].split('/')[-1])).rsplit(int_typ_spl_1)[0] + int_typ_spl_1 + '-' + str((n_int_spt_1)) + '-' +int_typ_spl_2 +'-' + str((n_int_spt_2)) #slc_int_fg_1[lower_shift_1] +'-' +slc_int_fg_1[len(slc_int_bg_2)-upper_shift_2-1]
			PLOT_TITLE    = 'z_Bg: ' + B_FLAG + ', z_Fg:' + F_FLAG + ', bins: ' +  int_typ_spl_1 + ': ' + str((n_int_spt_1)) + ', ' +int_typ_spl_2 +': ' + str((n_int_spt_2))#+ '-' + str(slc_int_fg_1[1][len(slc_int_bg_2)-upper_shift_2-1]) 


		print
		print plt_sufix_fnm
		print PLOT_TITLE
		print				
	elif mlt_stk_fct == 'avg':#stk_function_a == True :
		#len(slc_int_fg_2)-upper_shift_2
		FILES_A_AUX = np.reshape(FILES_A, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#n_int_spt_2))
		B_FLAG = (FILES_A_AUX[0][0].split('ss-zf_B-')[1]).rsplit('-ss-zf_F-')[0]
		F_FLAG = (FILES_A_AUX[0][0].split('ss-zf_F-')[1]).rsplit('-ss-'+int_typ_spl_1+'-')[0]				
		pass
		SPEC_SEP_VAR = [Header_Get(spec_res_file,var_prp_hdr_2+'_MED') for spec_res_file in FILES_A_AUX[0][:]]
		print colored("\n".join([FILE for FILE in FILES_A]),'red')
		print
		print

		try:
			plt_sufix_fnm = ((FILES_A_AUX[0][0].split('/')[-1])).rsplit(int_typ_spl_1)[0] + int_typ_spl_1 + '-' + str((n_int_spt_1)) + '-' +int_typ_spl_2 +'-' + str((n_int_spt_2)) #slc_int_fg_1[lower_shift_1] +'-' +slc_int_fg_1[len(slc_int_bg_2[0])-upper_shift_2-1]
			PLOT_TITLE    = 'z_Bg: ' + B_FLAG + ', z_Fg:' + F_FLAG + ', bins: ' +  int_typ_spl_1 + ': ' + str((n_int_spt_1)) + ', ' +int_typ_spl_2 +': ' + str((n_int_spt_2))#+ '-' + str(slc_int_fg_1[1][len(slc_int_bg_2[0])-upper_shift_2-1]) 
		except IndexError:
			plt_sufix_fnm = ((FILES_A_AUX[0][0].split('/')[-1])).rsplit(int_typ_spl_1)[0] + int_typ_spl_1 + '-' + str((n_int_spt_1)) + '-' +int_typ_spl_2 +'-' + str((n_int_spt_2)) #slc_int_fg_1[lower_shift_1] +'-' +slc_int_fg_1[len(slc_int_bg_2)-upper_shift_2-1]
			PLOT_TITLE    = 'z_Bg: ' + B_FLAG + ', z_Fg:' + F_FLAG + ', bins: ' +  int_typ_spl_1 + ': ' + str((n_int_spt_1)) + ', ' +int_typ_spl_2 +': ' + str((n_int_spt_2))#+ '-' + str(slc_int_fg_1[1][len(slc_int_bg_2)-upper_shift_2-1]) 


		print
		print plt_sufix_fnm
		print PLOT_TITLE
		print		
	elif mlt_stk_fct == 'both':#stk_function_b	== True:
		FILES_M_AUX = np.reshape(FILES_M,  (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#n_int_spt_2)) (n_int_spt_1,n_int_spt_2))#lower_shift,len(slc_int_bg)-upper_shift
		FILES_A_AUX = np.reshape(FILES_A,  (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#n_int_spt_2)) (n_int_spt_1,n_int_spt_2))#lower_shift,len(slc_int_bg)-upper_shift
		B_FLAG = (FILES_M_AUX[0][0].split('ss-zf_B-')[1]).rsplit('-ss-zf_F-')[0]
		F_FLAG = (FILES_M_AUX[0][0].split('ss-zf_F-')[1]).rsplit('-ss-'+int_typ_spl_1+'-')[0]				
		pass
		SPEC_SEP_VAR = [Header_Get(spec_res_file,var_prp_hdr_2+'_MED') for spec_res_file in FILES_A_AUX[0][:]]
		print
		print colored("\n".join([FILE for FILE in FILES_M]),'blue')
		print
		print colored("\n".join([FILE for FILE in FILES_A]),'red')
		print
		print
		try:
			plt_sufix_fnm = ((FILES_M_AUX[0][0].split('/')[-1])).rsplit(int_typ_spl_1)[0] + int_typ_spl_1 + '-' + str((n_int_spt_1)) + '-' +int_typ_spl_2 +'-' + str((n_int_spt_2)) #slc_int_fg_1[lower_shift_1] +'-' +slc_int_fg_1[len(slc_int_bg_2[0])-upper_shift_2-1]
			PLOT_TITLE    = 'z_Bg: ' + B_FLAG + ', z_Fg:' + F_FLAG + ', bins: ' +  int_typ_spl_1 + ': ' + str((n_int_spt_1)) + ', ' +int_typ_spl_2 +': ' + str((n_int_spt_2))#+ '-' + str(slc_int_fg_1[1][len(slc_int_bg_2[0])-upper_shift_2-1]) 
		except IndexError:
			plt_sufix_fnm = ((FILES_M_AUX[0][0].split('/')[-1])).rsplit(int_typ_spl_1)[0] + int_typ_spl_1 + '-' + str((n_int_spt_1)) + '-' +int_typ_spl_2 +'-' + str((n_int_spt_2)) #slc_int_fg_1[lower_shift_1] +'-' +slc_int_fg_1[len(slc_int_bg_2)-upper_shift_2-1]
			PLOT_TITLE    = 'z_Bg: ' + B_FLAG + ', z_Fg:' + F_FLAG + ', bins: ' +  int_typ_spl_1 + ': ' + str((n_int_spt_1)) + ', ' +int_typ_spl_2 +': ' + str((n_int_spt_2))#+ '-' + str(slc_int_fg_1[1][len(slc_int_bg_2)-upper_shift_2-1]) 


		print
		print plt_sufix_fnm
		print PLOT_TITLE
		print		
	else:
		pass

	##########

	'''
	print
	print colored('Spectra  : '+str(specfile_glx_f),'yellow')
	print colored('Spectra  : '+str(specfile_glx_b),'yellow')
	print colored('Intervals: '+str(slc_int_fg)	,'yellow')
	print
	print colored('Lower shift: '+str(lower_shift),'yellow')
	print colored('Lower shift: '+str(slc_int_fg[lower_shift]),'yellow')
	print colored('Upper shift: '+str(upper_shift)+','+str(upper_shift-1),'yellow')
	print colored('Upper shift: '+str(slc_int_fg[len(slc_int_bg)-upper_shift-1]),'yellow')
	print
	'''


	print
	print colored('Background Redshift Flag: '+str(B_FLAG),'yellow')
	print colored('Foreground Redshift Flag: '+str(F_FLAG),'yellow')
	print

	#ini_fg_spc_m  = res_stk_res    + specfile_glx_f + str(slc_int_fg[-1]) + '-stk-med'+str(stk_function)+'.fits'
	#ini_fg_spc_a  = res_stk_res    + specfile_glx_f + str(slc_int_fg[-1]) + '-stk-avg'+str(stk_function)+'.fits'
	#plt_sufix_fnm = specfile_glx_b + slc_int_fg[lower_shift] +'-' +slc_int_fg[len(slc_int_bg[0])-upper_shift-1]
	#PLOT_TITLE    = 'z_Bg: ' + B_FLAG + ', z_Fg:' + F_FLAG + ' ' + str(slc_int_fg[1][lower_shift]) + '-' + str(slc_int_fg[1][len(slc_int_bg[0])-upper_shift-1]) 


	##########

	###
	colors = dict(mcolors.BASE_COLORS, **mcolors.CSS4_COLORS)

	# Sort colors by hue, saturation, value and name.
	by_hsv = sorted((tuple(mcolors.rgb_to_hsv(mcolors.to_rgba(color)[:3])), name)
	                for name, color in colors.items())
	sorted_names = [name for hsv, name in by_hsv]

	#print "\n".join([color_new for color_new in sorted_names])
	sorted_names = np.asarray(sorted_names)

	colors = [
			'white','w','snow','whitesmoke',
			'floralwhite','ivory','aliceblue',
			'ghostwhite','lightgoldenrodyellow',
			'moccasin','bisque','cornslik',
			'wheat','navajowhite','beige',
			'lemonchiffon','blanchedalmond','honeydew',
			'palegoldenrod','papayawhip','cornsilk',
			'lightyellow','mintcream',
			'lightcyan']
	for colour in colors:
		sorted_names = Delete_Element_Array(sorted_names,colour)

	n = len(sorted_names)
	ncols = 4
	nrows = n // ncols #+ 1

	array_new_colors = np.empty([ncols,nrows],dtype = 'S20')
	for element,a in  enumerate(itertools.product(range(nrows),range(ncols))):
	    array_new_colors[a[1],a[0]]=sorted_names[element]

	MSK_NTMS=2.5
	index_line_color = -1
	pts_line_ALL_A = []
	pts_line_ALL_M = []
	lbl_line_ALL_A = []
	lbl_line_ALL_M = []

	mrk_line_ALL = []
	clr_line_ALL = []
	
	print
	print colored('Getting Median Values for Subsamples split by: ' + int_typ_spl_2 + '_MED','cyan')
	print colored('From Stacked spectra Header: ' + var_prp_hdr_2+'_MED','cyan')
	print

	#if frg_ref_plt == True:
		#SPEC_SEP_VAR = np.insert(SPEC_SEP_VAR,[0],int(1))
	#elif frg_ref_plt == False:
		#pass
	SPEC_SEP_VAR = np.asarray(SPEC_SEP_VAR)
	SPEC_SEP_VAR_BU = SPEC_SEP_VAR

	LNS_PLT = []
	for index_line,lines in enumerate(range(len(LINES[0]))):		
		if lmb_min < LINES[0][lines]*(1+z_glx_Ps) < lmb_max:
			LNS_PLT.append(LINES[4][lines])
			print
			print colored('Plotting EW Radial Profile for line: '+str(LINES[4][lines]) + ' '+ str(LINES[5][lines]) +  ' '+ str(LINES[3][lines]),'yellow')
			print						
			if mlt_stk_fct == 'med':#stk_function_m == True :
				try: 
					SPEC_POINTS_M_1   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_M]
					SPEC_POINTS_M_2   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_M]
					SPEC_POINTS_M_3   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_M]
					SPEC_POINTS_M_4   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_M]
					SPEC_POINTS_M_5   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_M]
					SPEC_POINTS_M_6   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_M]
					SPEC_POINTS_M_7   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_M]
					SPEC_POINTS_M_8   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_M]
					SPEC_POINTS_M_9   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_M]
					SPEC_POINTS_M_10  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_M]				
					SPEC_POINTS_NMB   = [Header_Get(spec_res_file,'STK_NUM') for spec_res_file in FILES_M]					

					SPEC_POINTS_M_SNR  = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU1'),0) for spec_res_file in FILES_M]
					SPEC_POINTS_M_SNR2 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU2'),0) for spec_res_file in FILES_M]
					SPEC_POINTS_M_SNR3 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU3'),0) for spec_res_file in FILES_M]
					SPEC_POINTS_M_SNR4 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU4'),0) for spec_res_file in FILES_M]
					SPEC_POINTS_M_SNR5 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNB2'),0) for spec_res_file in FILES_M]

					SPEC_POINTS_NMB2   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NHT') for spec_res_file in FILES_M]					
					SPEC_POINTS_NMB3   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NHW') for spec_res_file in FILES_M]					

				except KeyError:
					print
					print colored('Header Error! - L31422','yellow')
					print str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'O'
					print str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'O'
					print str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'O'
					print str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'O'
					print str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'O'
					print str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'C'
					print str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'C'
					print str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'C'
					print str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'C'
					print str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'C'
					print
					print 	'STK_NUM'
					print
					print str(LINES[5][lines])+'_SNU1'
					print str(LINES[5][lines])+'_SNU2'
					print str(LINES[5][lines])+'_SNU4'
					print str(LINES[5][lines])+'_SNB2'
					print
					print str(LINES[5][lines])+'_NHT'
					print str(LINES[5][lines])+'_NHW'
					print
					print colored("\n".join([FILE for FILE in FILES_M]),'yellow')
					print
					SPEC_POINTS_M_1   = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_2   = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_3   = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_4   = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_5   = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_6   = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_7   = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_8   = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_9   = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_10  = np.zeros([len(FILES_M)])

					SPEC_POINTS_NMB   = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_SNR = np.zeros([len(FILES_M)])

					SPEC_POINTS_M_SNR2 = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_SNR3 = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_SNR4 = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_SNR5 = np.zeros([len(FILES_M)])

					SPEC_POINTS_NMB2   = np.zeros([len(FILES_M)])
					SPEC_POINTS_NMB3   = np.zeros([len(FILES_M)])																									
			elif mlt_stk_fct == 'avg':#stk_function_a == True :
				try: 
					SPEC_POINTS_A_1   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_A]
					SPEC_POINTS_A_2   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_A]
					SPEC_POINTS_A_3   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_A]
					SPEC_POINTS_A_4   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_A]
					SPEC_POINTS_A_5   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_A]
					SPEC_POINTS_A_6   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_A]
					SPEC_POINTS_A_7   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_A]
					SPEC_POINTS_A_8   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_A]
					SPEC_POINTS_A_9   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_A]
					SPEC_POINTS_A_10  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_A]
					SPEC_POINTS_NMB   = [Header_Get(spec_res_file,'STK_NUM') for spec_res_file in FILES_A]

					SPEC_POINTS_A_SNR  = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU1'),0) for spec_res_file in FILES_A]
					SPEC_POINTS_A_SNR2 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU2'),0) for spec_res_file in FILES_A]
					SPEC_POINTS_A_SNR3 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU3'),0) for spec_res_file in FILES_A]
					SPEC_POINTS_A_SNR4 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU4'),0) for spec_res_file in FILES_A]
					SPEC_POINTS_A_SNR5 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNB2'),0) for spec_res_file in FILES_A]

					SPEC_POINTS_NMB2   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NHT') for spec_res_file in FILES_A]
					SPEC_POINTS_NMB3   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NHW') for spec_res_file in FILES_A]					

				except KeyError:
					print
					print colored('Header Error! L-31492','yellow')
					print
					print str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'O'
					print str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'O'
					print str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'O'
					print str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'O'
					print str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'O'
					print str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'C'
					print str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'C'
					print str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'C'
					print str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'C'
					print str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'C'
					print
					print 	'STK_NUM'
					print
					print str(LINES[5][lines])+'_SNU1'
					print str(LINES[5][lines])+'_SNU2'
					print str(LINES[5][lines])+'_SNU4'
					print str(LINES[5][lines])+'_SNB2'
					print
					print str(LINES[5][lines])+'_NHT'
					print str(LINES[5][lines])+'_NHW'
					print					
					print colored("\n".join([FILE for FILE in FILES_A]),'yellow')
					print
					SPEC_POINTS_A_1   = np.zeros([len(FILES_A)])
					SPEC_POINTS_A_2   = np.zeros([len(FILES_A)])
					SPEC_POINTS_A_3   = np.zeros([len(FILES_A)])
					SPEC_POINTS_A_4   = np.zeros([len(FILES_A)])
					SPEC_POINTS_A_5   = np.zeros([len(FILES_A)])
					SPEC_POINTS_A_6   = np.zeros([len(FILES_A)])
					SPEC_POINTS_A_7   = np.zeros([len(FILES_A)])
					SPEC_POINTS_A_8   = np.zeros([len(FILES_A)])
					SPEC_POINTS_A_9   = np.zeros([len(FILES_A)])
					SPEC_POINTS_A_10  = np.zeros([len(FILES_A)])

					SPEC_POINTS_NMB   = np.zeros([len(FILES_A)])
					SPEC_POINTS_A_SNR = np.zeros([len(FILES_A)])

					SPEC_POINTS_A_SNR2 = np.zeros([len(FILES_A)])
					SPEC_POINTS_A_SNR3 = np.zeros([len(FILES_A)])
					SPEC_POINTS_A_SNR4 = np.zeros([len(FILES_A)])
					SPEC_POINTS_A_SNR5 = np.zeros([len(FILES_A)])										

					SPEC_POINTS_NMB2   = np.zeros([len(FILES_A)])
					SPEC_POINTS_NMB3   = np.zeros([len(FILES_A)])					
			elif mlt_stk_fct == 'both':#stk_function_b	== True:
				try: 
					SPEC_POINTS_M_1   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_M]
					SPEC_POINTS_M_2   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_M]
					SPEC_POINTS_M_3   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_M]
					SPEC_POINTS_M_4   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_M]
					SPEC_POINTS_M_5   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_M]
					SPEC_POINTS_M_6   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_M]
					SPEC_POINTS_M_7   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_M]
					SPEC_POINTS_M_8   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_M]
					SPEC_POINTS_M_9   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_M]
					SPEC_POINTS_M_10  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_M]				

					SPEC_POINTS_A_1   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_A]
					SPEC_POINTS_A_2   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_A]
					SPEC_POINTS_A_3   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_A]
					SPEC_POINTS_A_4   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_A]
					SPEC_POINTS_A_5   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_A]
					SPEC_POINTS_A_6   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_A]
					SPEC_POINTS_A_7   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_A]
					SPEC_POINTS_A_8   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_A]
					SPEC_POINTS_A_9   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_A]
					SPEC_POINTS_A_10  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_A]

					SPEC_POINTS_NMB   = [Header_Get(spec_res_file,'STK_NUM') for spec_res_file in FILES_A]
					SPEC_POINTS_A_SNR = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU1'),0) for spec_res_file in FILES_A]
					SPEC_POINTS_M_SNR = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU1'),0) for spec_res_file in FILES_M]

					SPEC_POINTS_A_SNR2 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU2'),0) for spec_res_file in FILES_A]
					SPEC_POINTS_M_SNR2 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU2'),0) for spec_res_file in FILES_M]

					SPEC_POINTS_A_SNR3 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU3'),0) for spec_res_file in FILES_A]
					SPEC_POINTS_M_SNR3 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU3'),0) for spec_res_file in FILES_M]

					SPEC_POINTS_A_SNR4 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU4'),0) for spec_res_file in FILES_A]
					SPEC_POINTS_M_SNR4 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU4'),0) for spec_res_file in FILES_M]

					SPEC_POINTS_A_SNR5 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNB2'),0) for spec_res_file in FILES_A]
					SPEC_POINTS_M_SNR5 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNB2'),0) for spec_res_file in FILES_M]

					SPEC_POINTS_NMB2   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NHT') for spec_res_file in FILES_A]
					SPEC_POINTS_NMB3   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NHW') for spec_res_file in FILES_A]					
				except KeyError:
					print
					print colored('Header Error! - L31582','yellow')
					print str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'O'
					print str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'O'
					print str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'O'
					print str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'O'
					print str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'O'
					print str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'C'
					print str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'C'
					print str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'C'
					print str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'C'
					print str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'C'
					print
					print 	'STK_NUM'
					print
					print str(LINES[5][lines])+'_SNU1'
					print str(LINES[5][lines])+'_SNU2'
					print str(LINES[5][lines])+'_SNU4'
					print str(LINES[5][lines])+'_SNB2'
					print
					print str(LINES[5][lines])+'_NHT'
					print str(LINES[5][lines])+'_NHW'
					print
					print colored("\n".join([FILE for FILE in FILES_M]),'yellow')
					print
					print colored("\n".join([FILE for FILE in FILES_A]),'yellow')
					print
					SPEC_POINTS_M_1   = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_2   = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_3   = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_4   = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_5   = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_6   = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_7   = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_8   = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_9   = np.zeros([len(FILES_M)])
					SPEC_POINTS_M_10  = np.zeros([len(FILES_M)])

					SPEC_POINTS_A_1   = np.zeros([len(FILES_A)])
					SPEC_POINTS_A_2   = np.zeros([len(FILES_A)])
					SPEC_POINTS_A_3   = np.zeros([len(FILES_A)])
					SPEC_POINTS_A_4   = np.zeros([len(FILES_A)])
					SPEC_POINTS_A_5   = np.zeros([len(FILES_A)])
					SPEC_POINTS_A_6   = np.zeros([len(FILES_A)])
					SPEC_POINTS_A_7   = np.zeros([len(FILES_A)])
					SPEC_POINTS_A_8   = np.zeros([len(FILES_A)])
					SPEC_POINTS_A_9   = np.zeros([len(FILES_A)])
					SPEC_POINTS_A_10  = np.zeros([len(FILES_A)])

					SPEC_POINTS_NMB   = np.zeros([len(FILES_M)])
					SPEC_POINTS_A_SNR = np.zeros([len(FILES_A)])
					SPEC_POINTS_M_SNR = np.zeros([len(FILES_M)])

					SPEC_POINTS_A_SNR2 = np.zeros([len(FILES_A)])
					SPEC_POINTS_M_SNR2 = np.zeros([len(FILES_M)])

					SPEC_POINTS_A_SNR3 = np.zeros([len(FILES_A)])
					SPEC_POINTS_M_SNR3 = np.zeros([len(FILES_M)])

					SPEC_POINTS_A_SNR4 = np.zeros([len(FILES_A)])
					SPEC_POINTS_M_SNR4 = np.zeros([len(FILES_M)])

					SPEC_POINTS_A_SNR5 = np.zeros([len(FILES_A)])
					SPEC_POINTS_M_SNR5 = np.zeros([len(FILES_M)])

					SPEC_POINTS_NMB2   = np.zeros([len(FILES_A)])
					SPEC_POINTS_NMB3   = np.zeros([len(FILES_M)])

			lmb_min_lim_line_ft = LINES[0][lines] - MSK_NTMS*LINES[1][lines]
			lmb_max_lim_line_ft = LINES[0][lines] + MSK_NTMS*LINES[1][lines]
			lmb_min_lim_line    = LINES[0][lines]*(1+z_glx_Ps) - LINES[2][lines]#- 20#LINES[2][lines] - 10
			lmb_max_lim_line    = LINES[0][lines]*(1+z_glx_Ps) + LINES[2][lines]#+ 20#LINES[2][lines] + 10

			###############################################TABLE ERRORS FROM BOOTSTRAP####################################################
			if bst_err_plt == True:
				TBL_BS_STT_M =[]
				TBL_BS_STT_A =[]

				ini_fg_tbl_m  = stt_bst_tbl    + specfile_glx_f + str(slc_int_fg[-1]) +'-BS-'+ str(bst_itr_nmb) + '-stk-med'+str(stk_function)+'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gauss.csv'
				ini_fg_tbl_a  = stt_bst_tbl    + specfile_glx_f + str(slc_int_fg[-1]) +'-BS-'+ str(bst_itr_nmb) + '-stk-avg'+str(stk_function)+'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gauss.csv'
				#plt_sufix_fnm = specfile_glx_b + slc_int_fg[lower_shift] +'-' +slc_int_fg[len(slc_int_bg[0])-upper_shift-1]

				if frg_ref_plt == True:		
					TBL_BS_STT_M.append(ini_fg_tbl_m)
					TBL_BS_STT_A.append(ini_fg_tbl_a)
				elif frg_ref_plt == False:
					pass

				for interval_range in range(lower_shift,len(slc_int_bg)-upper_shift):
					cur_tbl_bs_stt_1 = stt_bst_tbl + specfile_glx_b + str(slc_int_fg[interval_range]) +'-BS-'+ str(bst_itr_nmb) + '-stk-med' +stk_function +'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gauss.csv'
					cur_tbl_bs_stt_2 = stt_bst_tbl + specfile_glx_b + str(slc_int_fg[interval_range]) +'-BS-'+ str(bst_itr_nmb) + '-stk-avg' +stk_function +'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gauss.csv'
					TBL_BS_STT_M.append(cur_tbl_bs_stt_1)
					TBL_BS_STT_A.append(cur_tbl_bs_stt_2)
				print 
				print colored('BS Errors from tables:','yellow')
				print
				print colored("\n".join([TABLE for TABLE in TBL_BS_STT_M]),'blue')
				print
				print colored("\n".join([TABLE for TABLE in TBL_BS_STT_A]),'red')
				print

				SPEC_POINTS_M_9_ERR=[]
				SPEC_POINTS_A_9_ERR=[]
				SPEC_POINTS_M_9_ERR.append((np.asarray([Confident_Intervals(tbl_cdf_file,tbl_format_ipt,cdf2bobt_lne=str(LINES[3][lines]),cdf_2b_rtrn='1sgm',rmv_uft_spc=rmv_uft_spc) for tbl_cdf_file in TBL_BS_STT_M])))
				SPEC_POINTS_A_9_ERR.append((np.asarray([Confident_Intervals(tbl_cdf_file,tbl_format_ipt,cdf2bobt_lne=str(LINES[3][lines]),cdf_2b_rtrn='1sgm',rmv_uft_spc=rmv_uft_spc) for tbl_cdf_file in TBL_BS_STT_A])))
				SPEC_POINTS_M_9_ERR = np.asarray(SPEC_POINTS_M_9_ERR).reshape(4,2)
				SPEC_POINTS_A_9_ERR = np.asarray(SPEC_POINTS_A_9_ERR).reshape(4,2)
				SPEC_POINTS_M_9_ERR_LOW = SPEC_POINTS_M_9_ERR[:,0]
				SPEC_POINTS_M_9_ERR_HGH = SPEC_POINTS_M_9_ERR[:,1]
				SPEC_POINTS_A_9_ERR_LOW = SPEC_POINTS_A_9_ERR[:,0]
				SPEC_POINTS_A_9_ERR_HGH = SPEC_POINTS_A_9_ERR[:,1]
			elif bst_err_plt == False:
				pass
			###############################################TABLE ERRORS FROM BOOTSTRAP###################################################

			###############################PLOT PER LINE###############################
			fxsize=11
			fysize=8
			f = plt.figure(num=None, figsize=(fxsize, fysize), dpi=180, facecolor='w',
				edgecolor='k')
			plt.subplots_adjust(
				left 	= (30/25.4)/fxsize,            #-26 bigger  22-def
				bottom 	= (24/25.4)/fysize,            #-20 bigger  19-def
				right 	= 1 - (8/25.4)/fxsize,         #-4  bigger  2-def
				top 	= 1 - (4/25.4)/fysize)         #            4-def
			plt.subplots_adjust(hspace=0)#,wspace=0)
			#f.suptitle('An overall title', size=20)
			gs0 = gridspec.GridSpec(1, 1)
			##########################################SPEC-1###################################

			gs11 = gridspec.GridSpecFromSubplotSpec(1, 1, subplot_spec=gs0[0])
				
			ax110 = plt.Subplot(f, gs11[0,0])
			f.add_subplot(ax110)

			ax110.set_rasterization_zorder(1)
			plt.autoscale(enable=True , axis='y', tight=False)
			plt.autoscale(enable=True , axis='x', tight=False)
			ax110.xaxis.set_tick_params(labelsize=26)
			ax110.yaxis.set_tick_params(labelsize=26)
			#ax110.set_title(PLOT_TITLE)
			xticklabels = ax110.get_xticklabels()
			plt.setp(xticklabels, visible=True,family='serif')
			yticklabels = ax110.get_yticklabels()
			plt.setp(yticklabels, visible=True,family='serif')

			ax110.yaxis.set_tick_params(which='both',labelsize=26,direction='in',color='black',bottom=True,top=True,left=True,right=True)
			ax110.xaxis.set_tick_params(which='both',labelsize=26,direction='in',color='black',bottom=True,top=True,left=True,right=True)

			#minorLocator_x   = plt.MultipleLocator(10)
			#majorLocator_x   = plt.MultipleLocator(100)
			minorLocator_y   = plt.MultipleLocator(0.5)
			majorLocator_y   = plt.MultipleLocator(1.0)
			#ax110.xaxis.set_minor_locator(minorLocator_x)
			#ax110.xaxis.set_major_locator(majorLocator_x)
			ax110.yaxis.set_minor_locator(minorLocator_y)
			ax110.yaxis.set_major_locator(majorLocator_y)

			plt.tick_params(which='both' , width=0.7)
			plt.tick_params(which='major', length=5)
			plt.tick_params(which='minor', length=2)
			ax110.minorticks_on()

			if plt_log_axs == 'both':
				print
				print colored('Logarithmic scale on axis: '+ str(plt_log_axs),'green')
				print
				plt.yscale('log', nonposy='clip')
				plt.xscale('log', nonposx='clip')
			elif plt_log_axs == 'y':
				print
				print colored('Logarithmic scale on axis: '+ str(plt_log_axs),'green')
				print
				plt.yscale('log', nonposy='clip')
			elif plt_log_axs == 'x':
				print
				print colored('Logarithmic scale on axis: '+ str(plt_log_axs),'green')
				print
				plt.xscale('log', nonposx='clip')
			elif plt_log_axs == None:
				print
				print colored('Logarithmic scale on axis: '+ str(plt_log_axs),'green')
				print
				pass
			else:
				pass

			ax110.set_xticks(xticks_values_2)
			ax110.get_xaxis().set_major_formatter(mpl.ticker.ScalarFormatter())
			ax110.set_yticks(yticks_values_2)
			ax110.get_yaxis().set_major_formatter(mpl.ticker.ScalarFormatter())
			#plt.grid(True, which='both')
			plt.xlabel(xlabel_2 ,fontsize=28, family = 'serif')
			plt.ylabel('Rest Equivalent Width W$_0$ ($\AA$)',fontsize=28, family = 'serif')

			x_s = [1.003,31,63,103]

			if skip_fg_ref_ew == True and mlt_stk_fct == 'med' and bst_err_plt == False:#stk_function_m==True
				print
				print colored('Omitting FG EW value in the PLOT!','yellow')
				print
				SPEC_POINTS_M_9 = SPEC_POINTS_M_9[1:]
				SPEC_SEP_VAR    = SPEC_SEP_VAR_BU[1:]
			elif skip_fg_ref_ew == True and mlt_stk_fct == 'avg' and bst_err_plt == False:#stk_function_a==True
				print
				print colored('Omitting FG EW value in the PLOT!','yellow')
				print
				SPEC_POINTS_A_9 = SPEC_POINTS_A_9[1:]
				SPEC_SEP_VAR    = SPEC_SEP_VAR_BU[1:]
			elif skip_fg_ref_ew == True and mlt_stk_fct == 'both' and bst_err_plt == False:#stk_function_b==True
				print
				print colored('Omitting FG EW value in the PLOT!','yellow')
				print
				SPEC_POINTS_M_9 = SPEC_POINTS_M_9[1:]
				SPEC_POINTS_A_9 = SPEC_POINTS_A_9[1:]
				SPEC_POINTS_M_9 = np.reshape(SPEC_POINTS_M_9,(n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#n_int_spt_2)) (n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_A_9 = np.reshape(SPEC_POINTS_A_9,(n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#n_int_spt_2)) (n_int_spt_1,n_int_spt_2))
				SPEC_SEP_VAR    = SPEC_SEP_VAR_BU[1:]
			elif skip_fg_ref_ew == True and mlt_stk_fct == 'med' and bst_err_plt == True:#stk_function_m==True
				print
				print colored('Omitting FG EW value in the PLOT!','yellow')
				print
				SPEC_POINTS_M_9         = SPEC_POINTS_M_9[1:]
				SPEC_POINTS_M_9_ERR_LOW = SPEC_POINTS_M_9_ERR_LOW[1:]
				SPEC_POINTS_M_9_ERR_HGH = SPEC_POINTS_M_9_ERR_HGH[1:]
				SPEC_POINTS_NMB         = SPEC_POINTS_NMB[1:]
				SPEC_SEP_VAR            = SPEC_SEP_VAR_BU[1:]
				SPEC_POINTS_A_SNR       = SPEC_POINTS_A_SNR[1:]

				SPEC_POINTS_A_SNR2      = SPEC_POINTS_A_SNR2[1:]
				SPEC_POINTS_A_SNR3      = SPEC_POINTS_A_SNR3[1:]
				SPEC_POINTS_A_SNR4      = SPEC_POINTS_A_SNR4[1:]
				SPEC_POINTS_A_SNR5      = SPEC_POINTS_A_SNR5[1:]

				SPEC_POINTS_NMB2        = SPEC_POINTS_NMB2[1:]
				SPEC_POINTS_NMB3        = SPEC_POINTS_NMB3[1:]								
			elif skip_fg_ref_ew == True and mlt_stk_fct == 'avg' and bst_err_plt == True:#stk_function_a==True
				print
				print colored('Omitting FG EW & EW_Error value in the PLOT!','yellow')
				print
				SPEC_POINTS_A_9 = SPEC_POINTS_A_9[1:]
				SPEC_POINTS_A_9_ERR_LOW = SPEC_POINTS_A_9_ERR_LOW[1:]
				SPEC_POINTS_A_9_ERR_HGH = SPEC_POINTS_A_9_ERR_HGH[1:]
				SPEC_POINTS_NMB         = SPEC_POINTS_NMB[1:]
				SPEC_SEP_VAR            = SPEC_SEP_VAR_BU[1:]
				SPEC_POINTS_A_SNR       = SPEC_POINTS_A_SNR[1:]

				SPEC_POINTS_A_SNR2      = SPEC_POINTS_A_SNR2[1:]
				SPEC_POINTS_A_SNR3      = SPEC_POINTS_A_SNR3[1:]
				SPEC_POINTS_A_SNR4      = SPEC_POINTS_A_SNR4[1:]
				SPEC_POINTS_A_SNR5      = SPEC_POINTS_A_SNR5[1:]

				SPEC_POINTS_NMB2        = SPEC_POINTS_NMB2[1:]
				SPEC_POINTS_NMB3        = SPEC_POINTS_NMB3[1:]
			elif skip_fg_ref_ew == True and mlt_stk_fct == 'both' and bst_err_plt == True:#stk_function_b==True
				print
				print colored('Omitting FG EW & EW_Error value in the PLOT!','yellow')
				print
				SPEC_POINTS_M_9 = SPEC_POINTS_M_9[1:]
				SPEC_POINTS_A_9 = SPEC_POINTS_A_9[1:]
				SPEC_POINTS_A_9_ERR_LOW = SPEC_POINTS_A_9_ERR_LOW[1:]
				SPEC_POINTS_A_9_ERR_HGH = SPEC_POINTS_A_9_ERR_HGH[1:]
				SPEC_POINTS_M_9_ERR_LOW = SPEC_POINTS_M_9_ERR_LOW[1:]
				SPEC_POINTS_M_9_ERR_HGH = SPEC_POINTS_M_9_ERR_HGH[1:]
				SPEC_POINTS_NMB         = SPEC_POINTS_NMB[1:]
				SPEC_SEP_VAR            = SPEC_SEP_VAR_BU[1:]
				SPEC_POINTS_A_SNR       = SPEC_POINTS_A_SNR[1:]

				SPEC_POINTS_A_SNR2      = SPEC_POINTS_A_SNR2[1:]
				SPEC_POINTS_A_SNR3      = SPEC_POINTS_A_SNR3[1:]
				SPEC_POINTS_A_SNR4      = SPEC_POINTS_A_SNR4[1:]
				SPEC_POINTS_A_SNR5      = SPEC_POINTS_A_SNR5[1:]

				SPEC_POINTS_NMB2        = SPEC_POINTS_NMB2[1:]
				SPEC_POINTS_NMB3        = SPEC_POINTS_NMB3[1:]								
			elif skip_fg_ref_ew == False and mlt_stk_fct == 'med' and bst_err_plt == False:#stk_function_m==True
				print
				print colored('Not Omitting FG EW value in the PLOT!','yellow')
				print
				#SPEC_POINTS_M_9 = SPEC_POINTS_M_9[1:]
				#SPEC_SEP_VAR    = SPEC_SEP_VAR_BU[1:]
				SPEC_POINTS_M_9   = np.reshape(SPEC_POINTS_M_9, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#n_int_spt_2)) (n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_NMB   = np.reshape(SPEC_POINTS_NMB, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_M_SNR = np.reshape(SPEC_POINTS_M_SNR, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))

				SPEC_POINTS_M_SNR2 = np.reshape(SPEC_POINTS_M_SNR2, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_M_SNR3 = np.reshape(SPEC_POINTS_M_SNR3, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_M_SNR4 = np.reshape(SPEC_POINTS_M_SNR4, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_M_SNR5 = np.reshape(SPEC_POINTS_M_SNR5, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))

				SPEC_POINTS_NMB2   = np.reshape(SPEC_POINTS_NMB2, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_NMB3   = np.reshape(SPEC_POINTS_NMB3, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))								
			elif skip_fg_ref_ew == False and mlt_stk_fct == 'avg' and bst_err_plt == False:#stk_function_a==True
				print
				print colored('Not Omitting FG EW value in the PLOT!','yellow')
				print
				SPEC_POINTS_A_9   = np.reshape(SPEC_POINTS_A_9, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#n_int_spt_2))
				SPEC_POINTS_NMB   = np.reshape(SPEC_POINTS_NMB, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_A_SNR =  np.reshape(SPEC_POINTS_A_SNR, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))

				SPEC_POINTS_A_SNR2 =  np.reshape(SPEC_POINTS_A_SNR2, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_A_SNR3 =  np.reshape(SPEC_POINTS_A_SNR3, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_A_SNR4 =  np.reshape(SPEC_POINTS_A_SNR4, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_A_SNR5 =  np.reshape(SPEC_POINTS_A_SNR5, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))

				SPEC_POINTS_NMB2   = np.reshape(SPEC_POINTS_NMB2, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_NMB3   = np.reshape(SPEC_POINTS_NMB3, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
			elif skip_fg_ref_ew == False and mlt_stk_fct == 'both' and bst_err_plt == False:#stk_function_b==True
				print
				print colored('Not Omitting FG EW value in the PLOT!','yellow')
				print	
				SPEC_POINTS_M_9   = np.reshape(SPEC_POINTS_M_9, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#n_int_spt_2)) (n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_A_9   = np.reshape(SPEC_POINTS_A_9, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#n_int_spt_2)) (n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_NMB   = np.reshape(SPEC_POINTS_NMB, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_A_SNR = np.reshape(SPEC_POINTS_A_SNR, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_M_SNR = np.reshape(SPEC_POINTS_M_SNR, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))

				SPEC_POINTS_A_SNR2 = np.reshape(SPEC_POINTS_A_SNR2, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_M_SNR2 = np.reshape(SPEC_POINTS_M_SNR2, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))

				SPEC_POINTS_A_SNR3 = np.reshape(SPEC_POINTS_A_SNR3, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_M_SNR3 = np.reshape(SPEC_POINTS_M_SNR3, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))

				SPEC_POINTS_A_SNR4 = np.reshape(SPEC_POINTS_A_SNR4, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_M_SNR4 = np.reshape(SPEC_POINTS_M_SNR4, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))

				SPEC_POINTS_A_SNR5 = np.reshape(SPEC_POINTS_A_SNR5, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_M_SNR5 = np.reshape(SPEC_POINTS_M_SNR5, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))

				SPEC_POINTS_NMB2   = np.reshape(SPEC_POINTS_NMB2, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_NMB3   = np.reshape(SPEC_POINTS_NMB3, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))				
			elif skip_fg_ref_ew == False and mlt_stk_fct == 'med' and bst_err_plt == True:#stk_function_m==True
				print
				print colored('Omitting FG EW value in the PLOT!','yellow')
				print
				#SPEC_POINTS_M_9         = SPEC_POINTS_M_9[1:]
				#SPEC_POINTS_M_9_ERR_LOW = SPEC_POINTS_M_9_ERR_LOW[1:]
				#SPEC_POINTS_M_9_ERR_HGH = SPEC_POINTS_M_9_ERR_HGH[1:]
				#SPEC_POINTS_NMB         = SPEC_POINTS_NMB[1:]
				#SPEC_SEP_VAR            = SPEC_SEP_VAR_BU[1:]
				SPEC_POINTS_M_9   = np.reshape(SPEC_POINTS_M_9, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#n_int_spt_2))(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_NMB   = np.reshape(SPEC_POINTS_NMB, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_M_SNR = np.reshape(SPEC_POINTS_M_SNR, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))

				SPEC_POINTS_M_SNR2 = np.reshape(SPEC_POINTS_M_SNR2, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_M_SNR3 = np.reshape(SPEC_POINTS_M_SNR3, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_M_SNR4 = np.reshape(SPEC_POINTS_M_SNR4, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_M_SNR5 = np.reshape(SPEC_POINTS_M_SNR5, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))

				SPEC_POINTS_NMB2   = np.reshape(SPEC_POINTS_NMB2, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_NMB3   = np.reshape(SPEC_POINTS_NMB3, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))								
			elif skip_fg_ref_ew == False and mlt_stk_fct == 'avg' and bst_err_plt == True:#stk_function_a==True
				print
				print colored('Omitting FG EW & EW_Error value in the PLOT!','yellow')
				print
				#SPEC_POINTS_A_9         = SPEC_POINTS_A_9[1:]
				#SPEC_POINTS_A_9_ERR_LOW = SPEC_POINTS_A_9_ERR_LOW[1:]
				#SPEC_POINTS_A_9_ERR_HGH = SPEC_POINTS_A_9_ERR_HGH[1:]
				#SPEC_POINTS_NMB         = SPEC_POINTS_NMB[1:]
				#SPEC_SEP_VAR            = SPEC_SEP_VAR_BU[1:]
				SPEC_POINTS_A_9   = np.reshape(SPEC_POINTS_A_9, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#n_int_spt_2)) (n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_NMB   = np.reshape(SPEC_POINTS_NMB, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))				
				SPEC_POINTS_A_SNR = np.reshape(SPEC_POINTS_A_SNR, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))

				SPEC_POINTS_A_SNR2 = np.reshape(SPEC_POINTS_A_SNR2, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_A_SNR3 = np.reshape(SPEC_POINTS_A_SNR3, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_A_SNR4 = np.reshape(SPEC_POINTS_A_SNR4, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_A_SNR5 = np.reshape(SPEC_POINTS_A_SNR5, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))

				SPEC_POINTS_NMB2   = np.reshape(SPEC_POINTS_NMB2, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))				
				SPEC_POINTS_NMB3   = np.reshape(SPEC_POINTS_NMB3, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))																				
			elif skip_fg_ref_ew == False and mlt_stk_fct == 'both' and bst_err_plt == True:#stk_function_b==True
				print
				print colored('Omitting FG EW & EW_Error value in the PLOT!','yellow')
				print
				#SPEC_POINTS_M_9         = SPEC_POINTS_M_9[1:]
				#SPEC_POINTS_A_9         = SPEC_POINTS_A_9[1:]
				#SPEC_POINTS_A_9_ERR_LOW = SPEC_POINTS_A_9_ERR_LOW[1:]
				#SPEC_POINTS_A_9_ERR_HGH = SPEC_POINTS_A_9_ERR_HGH[1:]
				#SPEC_POINTS_M_9_ERR_LOW = SPEC_POINTS_M_9_ERR_LOW[1:]
				#SPEC_POINTS_M_9_ERR_HGH = SPEC_POINTS_M_9_ERR_HGH[1:]
				#SPEC_POINTS_NMB         = SPEC_POINTS_NMB[1:]
				#SPEC_SEP_VAR            = SPEC_SEP_VAR_BU[1:]
				SPEC_POINTS_M_9   = np.reshape(SPEC_POINTS_M_9, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#n_int_spt_2)) (n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_NMB   = np.reshape(SPEC_POINTS_NMB, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))				
				SPEC_POINTS_M_SNR = np.reshape(SPEC_POINTS_M_SNR, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))

				SPEC_POINTS_M_SNR2 = np.reshape(SPEC_POINTS_M_SNR2, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_M_SNR3 = np.reshape(SPEC_POINTS_M_SNR3, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_M_SNR4 = np.reshape(SPEC_POINTS_M_SNR4, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_M_SNR5 = np.reshape(SPEC_POINTS_M_SNR5, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))

				SPEC_POINTS_NMB2   = np.reshape(SPEC_POINTS_NMB2, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))				
				SPEC_POINTS_NMB3   = np.reshape(SPEC_POINTS_NMB3, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))				
			else:
				pass

			index_line_color = index_line_color +1 
			color2bused      = array_new_colors[0][index_line_color]
			xplotlimit       = max(SPEC_SEP_VAR)+(.10*max(SPEC_SEP_VAR))
			markers          = ['*','P','o'] #X $\lambda$

			if mlt_stk_fct == 'med' and bst_err_plt == False:#stk_function_m == True
				pts_line_M = SPEC_POINTS_M_9
				pts_line_M = pts_line_M#np.log10(pts_line_M)
				color2bused = 'blue'
				print
				print colored('Plotting Median Values (NO ERRORS)!','yellow')
				print
				for j_indx,bin_element in enumerate(zip(pts_line_M,SPEC_POINTS_NMB)):
					print str(j_indx+1) + ': ' + int_typ_spl_1 +': ['+str(slc_int_fg_1[j_indx]) +  '] '
					print int_typ_spl_2
					print SPEC_SEP_VAR
					print int_typ_spl_2+'-EW'
					print bin_element[0]
					print				
					plt.plot(SPEC_SEP_VAR,bin_element[0],
								marker = markers[j_indx],
								color  = color2bused,markersize=20,
								label  = LINES[4][lines]+' '+'med, ' +
								"\n" +
								int_typ_spl_1 +': ['+str(slc_int_fg_1[j_indx]) +  '] ' +splt_smpl_unt_1+
								"\n" +
								' N='+str(np.sum(bin_element[1])) + ', '+str(bin_element[1]) +
								"\n" +
								' SNR (A)   : ' + str(np.round(SPEC_POINTS_M_SNR,2))  +
								"\n" +
								' SNR (C)   : ' + str(np.round(SPEC_POINTS_M_SNR2,2)) +
								"\n" +
								' SNR (P)   : ' + str(np.round(SPEC_POINTS_M_SNR4,2)) +
								"\n" +
								' SNR (BM) : ' + str(np.round(SPEC_POINTS_M_SNR5,2)),
								ls='-')
					pts_line_ALL_M.append(bin_element[0])
					lbl_line_ALL_M.append(LINES[4][lines]+' '+'med '+color2bused)
					mrk_line_ALL.append(LINES[6][lines])
					clr_line_ALL.append(color2bused)
			elif mlt_stk_fct == 'med' and bst_err_plt == True:#stk_function_m == True
				pts_line_M = SPEC_POINTS_M_9
				pts_line_M = pts_line_M#np.log10(pts_line_M)
				color2bused = 'blue'
				print
				print colored('Plotting Median Values!','yellow')
				print
				for j_indx,bin_element in enumerate(zip(pts_line_A,SPEC_POINTS_NMB)):
					print str(j_indx+1) + ': ' + int_typ_spl_1 +': ['+str(slc_int_fg_1[j_indx]) +  '] '
					print int_typ_spl_2
					print SPEC_SEP_VAR
					print int_typ_spl_2+'-EW'
					print bin_element[0]
					print				
					plt.plot(SPEC_SEP_VAR,bin_element[0],
								marker = markers[j_indx],
								color  = color2bused,markersize=20,
								label  = LINES[4][lines]+' '+'med, ' +
								int_typ_spl_1 +': ['+str(slc_int_fg_1[j_indx]) +  '] ' + splt_smpl_unt_1 +
								"\n" +
								' N='+str(np.sum(bin_element[1])) + ', '+str(bin_element[1]) +
								"\n" +
								' SNR (A)   : ' + str(np.round(SPEC_POINTS_M_SNR,2))  +
								"\n" +
								' SNR (C)   : ' + str(np.round(SPEC_POINTS_M_SNR2,2)) +
								"\n" +
								' SNR (P)   : ' + str(np.round(SPEC_POINTS_M_SNR4,2)) +
								"\n" +
								' SNR (BM) : ' + str(np.round(SPEC_POINTS_M_SNR5,2)),																
								ls='-')
					pts_line_ALL_M.append(bin_element[0])
					lbl_line_ALL_M.append(LINES[4][lines]+' '+'med '+color2bused)
					mrk_line_ALL.append(LINES[6][lines])
					clr_line_ALL.append(color2bused)								
					plt.errorbar(SPEC_SEP_VAR, pts_line_M, 
						yerr = [abs(pts_line_M-SPEC_POINTS_M_9_ERR_LOW)/np.sqrt(SPEC_POINTS_NMB),abs(SPEC_POINTS_M_9_ERR_HGH-pts_line_M)/np.sqrt(SPEC_POINTS_NMB)], #yerr = [E_V1[j][0:],E_V2[j][0:]],
						fmt=LINES[6][lines],color=color2bused1,elinewidth = 1.5, capsize = 5.5,
						markeredgecolor=color2bused1, markerfacecolor = None,markeredgewidth=0.5,ms=20)
			elif mlt_stk_fct == 'avg' and bst_err_plt == False:#stk_function_a == True
				pts_line_A = SPEC_POINTS_A_9
				pts_line_A = pts_line_A
				color2bused = 'red'
				print
				print colored('Plotting Average Values (NO ERRORS)!','yellow')
				print
				for j_indx,bin_element in enumerate(zip(pts_line_A,SPEC_POINTS_NMB)):
					print str(j_indx+1) + ': ' + int_typ_spl_1 +': ['+str(slc_int_fg_1[j_indx]) +  '] '
					print int_typ_spl_2
					print SPEC_SEP_VAR
					print int_typ_spl_2+'-EW'
					print bin_element[0]
					print
					plt.plot(SPEC_SEP_VAR,bin_element[0],
								marker = markers[j_indx],
								color  = color2bused,markersize=20,
								label  = LINES[4][lines]+' '+'avg '+
								int_typ_spl_1 +': ['+str(slc_int_fg_1[j_indx]) +  '] ' +splt_smpl_unt_1+
								"\n" +
								' N='+str(np.sum(bin_element[1])) + ', '+str(bin_element[1]) +
								"\n" +
								' SNR (A)   : ' + str(np.round(SPEC_POINTS_A_SNR,2))   +
								"\n" +
								' SNR (C)   : ' + str(np.round(SPEC_POINTS_A_SNR2,2))  +
								"\n" +
								' SNR (P)   : ' + str(np.round(SPEC_POINTS_A_SNR4,2))  +
								"\n" +
								' SNR (BM) : ' + str(np.round(SPEC_POINTS_A_SNR5,2)),																								
								ls='-.')			
					pts_line_ALL_A.append(bin_element[0])
					lbl_line_ALL_A.append(LINES[4][lines]+' '+'avg '+color2bused)
					mrk_line_ALL.append(LINES[6][lines])
					clr_line_ALL.append(color2bused)
			elif mlt_stk_fct == 'avg' and bst_err_plt == True:#stk_function_a == True
				pts_line_A = SPEC_POINTS_A_9
				pts_line_A = pts_line_A
				color2bused = 'red'
				print
				print colored('Plotting Average Values!','yellow')
				print
				for j_indx,bin_element in enumerate(zip(pts_line_A,SPEC_POINTS_NMB)):
					print str(j_indx+1) + ': ' + int_typ_spl_1 +': ['+str(slc_int_fg_1[j_indx]) +  '] '
					print int_typ_spl_2
					print SPEC_SEP_VAR
					print int_typ_spl_2+'-EW'
					print bin_element[0]
					print bin_element[1]
					print
					plt.plot(SPEC_SEP_VAR,bin_element[0],
								marker = markers[j_indx],
								color  = color2bused,markersize=20,
								label  = LINES[4][lines]+' '+'avg ' +
								int_typ_spl_1 +': ['+str(slc_int_fg_1[j_indx]) +  '] ' +splt_smpl_unt_1+
								"\n" +
								' N='+str(np.sum(bin_element[1])) + ', '+str(bin_element[1]) +
								"\n" +
								' SNR (A)   : ' + str(np.round(SPEC_POINTS_A_SNR,2))  +
								"\n" +
								' SNR (C)   : ' + str(np.round(SPEC_POINTS_A_SNR2,2)) +
								"\n" +
								' SNR (P)   : ' + str(np.round(SPEC_POINTS_A_SNR4,2)) +
								"\n" +
								' SNR (BM) : ' + str(np.round(SPEC_POINTS_A_SNR5,2)),
								ls='-.')			
					pts_line_ALL_A.append(bin_element[0])
					lbl_line_ALL_A.append(LINES[4][lines]+' '+'avg '+color2bused)
					mrk_line_ALL.append(LINES[6][lines])
					clr_line_ALL.append(color2bused)
					plt.errorbar(SPEC_SEP_VAR, pts_line_A, 
						yerr = [abs(pts_line_A-SPEC_POINTS_A_9_ERR_LOW)/np.sqrt(SPEC_POINTS_NMB),abs(SPEC_POINTS_A_9_ERR_HGH-pts_line_A)/SPEC_POINTS_NMB], #yerr = [E_V1[j][0:],E_V2[j][0:]],
						fmt=LINES[6][lines],color=color2bused2,elinewidth = 1.5, capsize = 5.5,
						markeredgecolor=color2bused2, markerfacecolor = None,markeredgewidth=0.5,ms=20)
			elif mlt_stk_fct == 'both' and bst_err_plt == False:#stk_function_b== True 
				pts_line_M = SPEC_POINTS_M_9
				pts_line_M = pts_line_M
				pts_line_A = SPEC_POINTS_A_9
				pts_line_A = pts_line_A
				color2bused1 = 'blue'
				color2bused2 = 'red'
				print
				print colored('Plotting Average & Median Values (NO ERRORS)!','yellow')
				print
				for j_indx,bin_element in enumerate(zip(pts_line_M,pts_line_A,SPEC_POINTS_NMB)):
					print str(j_indx+1) + ': ' + int_typ_spl_1 +': ['+str(slc_int_fg_1[j_indx]) +  '] '
					print int_typ_spl_2
					print SPEC_SEP_VAR
					print int_typ_spl_2+'-EW'
					print bin_element[0]
					print bin_element[1]
					print
					plt.plot(SPEC_SEP_VAR,bin_element[0],
								marker = markers[j_indx],color=color2bused1,markersize=20,
								mfc    = "None",								
								label  = LINES[4][lines]+' '+'med , ' +
								int_typ_spl_1 +': ['+str(slc_int_fg_1[j_indx]) +  '] ' +splt_smpl_unt_1+
								"\n" +
								' N='+str(np.sum(bin_element[2])) + ', '+str(bin_element[2]) +
								"\n" +
								' SNR (A)   : ' + str(np.round(SPEC_POINTS_M_SNR[j_indx],2))   +
								"\n" +
								' SNR (C)   : ' + str(np.round(SPEC_POINTS_M_SNR2[j_indx],2))  +
								"\n" +
								' SNR (P)   : ' + str(np.round(SPEC_POINTS_M_SNR4[j_indx],2))  +
								"\n" +
								' SNR (BM) : ' + str(np.round(SPEC_POINTS_M_SNR5[j_indx],2)),																								
								ls='-')
					plt.plot(SPEC_SEP_VAR,bin_element[1],
								marker = markers[j_indx],color=color2bused2,markersize=20,
								label  = LINES[4][lines]+' '+'avg  , ' +
								int_typ_spl_1 +': ['+str(slc_int_fg_1[j_indx]) + '] ' + splt_smpl_unt_1+
								"\n" +
								' N='+str(np.sum(bin_element[2])) + ', '+str(bin_element[2]) +
								"\n" +
								' SNR (A)   : ' + str(np.round(SPEC_POINTS_A_SNR[j_indx],2))   +
								"\n" +
								' SNR (C)   : ' + str(np.round(SPEC_POINTS_A_SNR2[j_indx],2))  +
								"\n" +
								' SNR (P)   : ' + str(np.round(SPEC_POINTS_A_SNR4[j_indx],2))  +
								"\n" +
								' SNR (BM) : ' + str(np.round(SPEC_POINTS_A_SNR5[j_indx],2)),																								
								ls='-.')			
					pts_line_ALL_A.append(bin_element[0])
					pts_line_ALL_M.append(bin_element[1])
					lbl_line_ALL_A.append(LINES[4][lines]+' '+'avg '+color2bused)
					lbl_line_ALL_M.append(LINES[4][lines]+' '+'med '+color2bused)
					mrk_line_ALL.append(LINES[6][lines])
					clr_line_ALL.append(color2bused)
			elif mlt_stk_fct == 'both' and bst_err_plt == True:#stk_function_b== True 
				pts_line_M = SPEC_POINTS_M_9
				pts_line_M = pts_line_M
				pts_line_A = SPEC_POINTS_A_9
				pts_line_A = pts_line_A
				color2bused1 = 'blue'
				color2bused2 = 'red'
				print
				print colored('Plot values:','yellow')
				print colored('Plot values (SEP-BIN):','yellow')
				print SPEC_SEP_VAR_BU
				print SPEC_SEP_VAR
				print colored('Plot values (EW-MED):','yellow')
				print pts_line_M
				print colored('Plot values (EW-AVG):','yellow')
				print pts_line_A
				print
				print colored('Errors for Average values:','yellow')
				print pts_line_A
				print SPEC_POINTS_A_9_ERR_LOW
				print SPEC_POINTS_A_9_ERR_HGH
				print
				print colored('Errors for Median values:','yellow')
				print pts_line_M
				print SPEC_POINTS_M_9_ERR_LOW
				print SPEC_POINTS_M_9_ERR_HGH
				print
				print colored('Number of galaxies per bin:','yellow') 
				print SPEC_POINTS_NMB
				print colored('Number of galaxies per bin (SQR):','yellow') 
				print np.sqrt(SPEC_POINTS_NMB)
				print
				print colored('Errors for Average values considering sample size (N):','yellow')
				print abs(pts_line_A-(SPEC_POINTS_A_9_ERR_LOW))/np.sqrt(SPEC_POINTS_NMB)
				print colored('Errors for Median values considering sample size (N):','yellow')
				print abs((SPEC_POINTS_A_9_ERR_HGH)-pts_line_A)/np.sqrt(SPEC_POINTS_NMB)
				print
				plt.plot(SPEC_SEP_VAR,pts_line_M,
							marker = LINES[6][lines],color=color2bused1,markersize=20,
							label  = LINES[4][lines]+' '+'med '+
							"\n" +
							int_typ_spl_1 +': ['+str(slc_int_fg_1[j_indx]) +  '] ' +splt_smpl_unt_1 +
							"\n" +
							'SNR (A)   : ' + str(np.round(SPEC_POINTS_M_SNR,2))  +
							"\n" +
							'SNR (C)   : ' + str(np.round(SPEC_POINTS_M_SNR2,2)) +
							"\n" +
							'SNR (P)   : ' + str(np.round(SPEC_POINTS_M_SNR4,2)) +
							"\n" +
							'SNR (BM) : ' + str(np.round(SPEC_POINTS_M_SNR5,2)),
							ls='-')
				plt.plot(SPEC_SEP_VAR,pts_line_A,
							marker = LINES[6][lines],color=color2bused2,markersize=20,
							label  = LINES[4][lines]+' '+'avg '+
							"\n" +
							int_typ_spl_1 +': ['+str(slc_int_fg_1[j_indx]) +  '] ' +splt_smpl_unt_1 +
							"\n" +
							'SNR (A)   : ' + str(np.round(SPEC_POINTS_A_SNR,2))  +
							"\n" +
							'SNR (C)   : ' + str(np.round(SPEC_POINTS_A_SNR2,2)) +
							"\n" +
							'SNR (P)   : ' + str(np.round(SPEC_POINTS_A_SNR4,2)) +
							"\n" +
							'SNR (BM) : ' + str(np.round(SPEC_POINTS_A_SNR5,2)),
							ls='-.')			
				pts_line_ALL_A.append(pts_line_A)
				pts_line_ALL_M.append(pts_line_M)
				lbl_line_ALL_A.append(LINES[4][lines]+' '+'avg '+color2bused)
				lbl_line_ALL_M.append(LINES[4][lines]+' '+'med '+color2bused)
				mrk_line_ALL.append(LINES[6][lines])
				clr_line_ALL.append(color2bused)
				plt.errorbar(SPEC_SEP_VAR, pts_line_M, 
					yerr = [abs(pts_line_M-SPEC_POINTS_M_9_ERR_LOW)/np.sqrt(SPEC_POINTS_NMB),abs(SPEC_POINTS_M_9_ERR_HGH-pts_line_M)/np.sqrt(SPEC_POINTS_NMB)], #yerr = [E_V1[j][0:],E_V2[j][0:]],
					fmt=LINES[6][lines],color=color2bused1,elinewidth = 1.5, capsize = 5.5,
					markeredgecolor=color2bused1, markerfacecolor = None,markeredgewidth=0.5,ms=20)

				plt.errorbar(SPEC_SEP_VAR, pts_line_A, 
					yerr = [abs(pts_line_A-SPEC_POINTS_A_9_ERR_LOW)/np.sqrt(SPEC_POINTS_NMB),abs(SPEC_POINTS_A_9_ERR_HGH-pts_line_A)/SPEC_POINTS_NMB], #yerr = [E_V1[j][0:],E_V2[j][0:]],
					fmt=LINES[6][lines],color=color2bused2,elinewidth = 1.5, capsize = 5.5,
					markeredgecolor=color2bused2, markerfacecolor = None,markeredgewidth=0.5,ms=20)
			else:
				pass
			colors = "bgrcmykw"

			if fit_fnct=='gauss':
				fit_typ = 'G'
				pass
				#GAUSSIAN FIT
			elif fit_fnct=='lorentz':
				fit_typ = 'L'
				pass
				###LORENTZIAN FIT
			elif fit_fnct=='voigt':
				fit_typ = 'V'
				pass
			elif fit_fnct == None:
				pass

			else:
				pass			
			'''
			for index,specfile_glx_b_ref in enumerate(FILES_M):
				glx = Spectra_x_y(specfile_glx_b_ref)
				lambda_glx,inten_glx,crval_glx,cdel1_glx,cd1_glx = glx[0], glx[1], glx[2], glx[3], glx[4]
				mask      = (lambda_glx >= lmb_min_lim_line)    & (lambda_glx <= lmb_max_lim_line)
				mask_ft   = (lambda_glx >= lmb_min_lim_line_ft) & (lambda_glx <= lmb_max_lim_line_ft)
				X0_f2DG    = LINES[0][lines]
				SIGMA_f2DG = LINES[1][lines]
				A_f2DG     = -(1-(min(inten_glx[mask_ft])))

				########################################################LINE-FIT#######################################################

				########################################################LINE-FIT#######################################################
			'''
			lg=plt.legend(loc=0,prop={'size':22})
			lg.draw_frame(False)

			#plt.plot(x_s,Lya_b  ,label='Lya   Steidel+10',ls='-.',color='black'  ,marker='*')
			#plt.plot(x_s,SiII_b ,label='SiII  Steidel+10',ls='-.',color='green'  ,marker='x')
			#plt.plot(x_s,CII_b  ,label='CII   Steidel+10',ls='-.',color='purple' ,marker='2')
			#plt.plot(x_s,SiII_b ,label='SiII  Steidel+10',ls='-.',color='salmon' ,marker='3')	
			#plt.plot(x_s,SiIV_b ,label='SiIV  Steidel+10',ls='-.',color='cyan'   ,marker='>')
			#plt.plot(x_s,CIV_b  ,label='CIV   Steidel+10',ls='-.',color='red'    ,marker='o')
			#plt.plot(x_s,AlII_b ,label='AlII  Steidel+10',ls='-.',color='magenta',marker='p')
			
			#lg1=plt.legend(loc=3,prop={'size':22})
			#lg1.draw_frame(False)

			#plt.xlim([10**-0.2,xplotlimit])
			#xmin, xmax = plt.xlim()
			#plt.xlim((xmin,xmax))
			##plt.ylim([np.log10(0.1),np.log10(10)])
			##ymin, ymax = plt.ylim()
			##plt.ylim((ymin,ymax))
			#min_y, max_y = ax110.get_ylim()

			if plt_inv_xax == True:
				print
				print colored('X-axis inverted!','magenta')
				print
				min_x, max_x = ax110.get_xlim()
				plt.xlim((max_x,min_x))
			else:
				pass

			#################################################################SAVE###########################################################

			if dest_dir != None:
				PLOTFILENAME1 = str(dest_dir) + plt_sufix_fnm+'-'+str(int(LINES[0][lines]))+'-'+str(LINES[4][lines]) + '-' +stk_function_file + stk_function +'-'+fit_typ + '-EW-' +plt_nme_prp_1 + '-' + plt_nme_prp_2 + '-'+fit_type_m + '_m-' + fit_type_e + '_e.pdf'
				PLOTFILENAME2 = str(dest_dir) + plt_sufix_fnm+'-'+str(int(LINES[0][lines]))+'-'+str(LINES[4][lines]) + '-' +stk_function_file + stk_function +'-'+fit_typ + '-EW-' +plt_nme_prp_1 + '-' + plt_nme_prp_2 + '-'+fit_type_m + '_m-' + fit_type_e + '_e.eps'

			elif dest_dir == None:
				PLOTFILENAME1 = ewr_plt_res + plt_sufix_fnm+'-'+str(int(LINES[0][lines]))+'-'+str(LINES[4][lines]) + '-' +stk_function_file + stk_function +'-'+fit_typ + '-EW-' +plt_nme_prp_1 + '-' + plt_nme_prp_2 + '-'+fit_type_m + '_m-' + fit_type_e + '_e.pdf'
				PLOTFILENAME2 = ewr_plt_res + plt_sufix_fnm+'-'+str(int(LINES[0][lines]))+'- '+str(LINES[4][lines]) + '-' +stk_function_file + stk_function +'-'+fit_typ + '-EW-' +plt_nme_prp_1 + '-' + plt_nme_prp_2 + '-'+fit_type_m + '_m-' + fit_type_e + '_e.eps'

			print colored('Generated Plot: ' + str(PLOTFILENAME1),'cyan')
			plt.savefig(PLOTFILENAME1)
			if verbose == True:
				print colored('Generated Plot: ' + str(PLOTFILENAME1),'cyan')
			elif verbose ==False:
				pass
			if epssave == True:
				plt.savefig(PLOTFILENAME2, rasterized=True)
				#os.system('open Spectra.eps')
			elif epssave == False:
				pass
			if showplot == True:
				#os.system('open '+str(PLOTFILENAME))
				pass
			elif showplot == False:
				pass	
			plt.close('all')
			###############################PLOT PER LINE###############################
		elif LINES[0][lines]*(1+z_glx_Ps) > 6700 :
			break

def Plot_Idp_EW_Lne_Mlt_All_Grid(int_typ_spl_1,int_typ_spl_2,n_int_spt_1,n_int_spt_2,*args, **kwargs):
	z_glx_Ps        = kwargs.get('z_glx_Ps'    ,0)
	dest_dir        = kwargs.get('dest_dir'    , None)
	verbose         = kwargs.get('verbose'     , False)
	epssave         = kwargs.get('epssave'     , False)
	showplot        = kwargs.get('showplot'    , False) 

	autoaxis_Idp    = kwargs.get('autoaxis_Idp', False)
	#min_y_lim_Idp   = kwargs.get('min_y_lim'   , 0.5)
	#max_y_lim_Idp   = kwargs.get('max_y_lim'   , 1.5)

	lmb_min         = kwargs.get('lmb_min',1200)
	lmb_max         = kwargs.get('lmb_max',1700)

	lmb_min_lim     = lmb_min
	lmb_max_lim     = lmb_max

	upper_shift_1   = kwargs.get('upper_shift_1',0)
	lower_shift_1   = kwargs.get('lower_shift_1',0)
	upper_shift_2   = kwargs.get('upper_shift_2',0)
	lower_shift_2   = kwargs.get('lower_shift_2',0)

	mlt_stk_fct      = kwargs.get('mlt_stk_fct','both')

	fit_fnct        = kwargs.get('fit_fnct','gauss')
	dest_dir        = kwargs.get('dest_dir',None)

	stk_function    = kwargs.get('stk_function',' ')

	#frg_ref_plt     = kwargs.get('frg_ref_plt',True)

	bst_err_plt     = kwargs.get('bst_err_plt',False)
	bst_itr_nmb     = kwargs.get('bst_itr_nmb',None)

	fit_type_m      = kwargs.get('fit_type_m','scipy')
	fit_type_e      = kwargs.get('fit_type_e','scipy')
	fit_type_e      = kwargs.get('fit_type_e','lmfit')

	plt_lit_res     = kwargs.get('plt_lit_res',False)
	plt_log_axs     = kwargs.get('plt_log_axs',None)

	plt_inv_xax     = kwargs.get('plt_inv_xax',False)
	skip_fg_ref_ew  = kwargs.get('skip_fg_ref_ew',False)

	#int_typ_spl_1   = kwargs.get('int_typ_spl_1','arcsec')
	#int_typ_spl_2   = kwargs.get('int_typ_spl_2','mass')

	#n_int_spt_1     = kwargs.get('n_int_spt_1',3)
	#n_int_spt_2     = kwargs.get('n_int_spt_2',3)

	lbl_col_idv     = kwargs.get('lbl_col_idv',True)
	fit_typ         = kwargs.get('fit_typ','lmfit')

	empty_plots     = kwargs.get('empty_plots',1)
	landscape_plt   = kwargs.get('landscape_plt',True)

	cln_uft_vls     = kwargs.get('cln_uft_vls',False)
	add_snr_vls     = kwargs.get('add_snr_vls',True)
	cln_pts_snr     = kwargs.get('cln_pts_snr',True)
	cln_snr_aux     = kwargs.get('cln_snr_aux',False)
	cln_snr_mth     = kwargs.get('cln_snr_mth',3)
	cln_snr_thr     = kwargs.get('cln_snr_thr',3)
	cln_snr_th2     = kwargs.get('cln_snr_th2',2)

	bst_err_plt_sym = kwargs.get('bst_err_plt_sym',True)

	rmv_uft_spc     = kwargs.get('rmv_uft_spc',False)

	print cln_uft_vls
	print cln_pts_snr
	print cln_snr_mth
	print cln_snr_thr

	if fit_type_m == 'scipy':
		ft_m_sfx = 'A'
	elif fit_type_m == 'lmfit':
		ft_m_sfx = 'L'
	else:
		pass

	print
	print colored('Plotting EW absoprtions dependent on: '+int_typ_spl_1,'yellow')
	print colored('Plotting EW absoprtions dependent on: '+int_typ_spl_2,'yellow')
	print
	if int_typ_spl_1 == 'kpc'  and n_int_spt_1 == 0:#in specfile_glx_f:
		splt_smpl_sfx_f1= 'kpc_F'
		splt_smpl_sfx_1 = '_kpc' 
		splt_smpl_unt_1 = 'kpc'
		splt_smpl_unl_1 = 'kpc'
		plt_nme_prp_1   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv)				
		slc_int_fg_1    = slc_kpc_int_fg[1]
		slc_int_bg_1    = slc_kpc_int_bg[1]		
		xlabel_1        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_1   = 'SKP'
		xticks_values_1 = [5,50, 100, 1500]
		yticks_values_1 = np.arange(0,30,0.5)#[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'kpc'  and n_int_spt_1 == 1:#in specfile_glx_f:
		splt_smpl_sfx_f1= 'kpc_F'
		splt_smpl_sfx_1 = '_kpc' 
		splt_smpl_unt_1 = 'kpc'
		splt_smpl_unl_1 = 'kpc'
		plt_nme_prp_1   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_1)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_1)				
		slc_int_fg_1    = slc_kpc_int_fg[1]
		slc_int_bg_1    = slc_kpc_int_bg[1]
		xlabel_1        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_1   = 'SKP'
		xticks_values_1 = [5,50, 100, 1500]
		yticks_values_1 = np.arange(0,30,0.5)#[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'kpc'  and n_int_spt_1 == 2:#in specfile_glx_f:
		splt_smpl_sfx_f1= 'kpc_F'
		splt_smpl_sfx_1 = '_kpc' 
		splt_smpl_unt_1 = 'kpc'
		splt_smpl_unl_1 = 'kpc'
		plt_nme_prp_1   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_2)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_2)				
		slc_int_fg_1    = slc_kpc_int_fg[1]
		slc_int_bg_1    = slc_kpc_int_bg[1]
		xlabel_1        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_1   = 'SKP'
		xticks_values_1 = [5,50, 100, 1500]
		yticks_values_1 = np.arange(0,30,0.5)#[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'kpc'  and n_int_spt_1 == 3:#in specfile_glx_f:
		splt_smpl_sfx_f1= 'kpc_F'
		splt_smpl_sfx_1 = '_kpc' 
		splt_smpl_unt_1 = 'kpc'
		splt_smpl_unl_1 = 'kpc'
		plt_nme_prp_1   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_3)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_3)				
		slc_int_fg_1    = slc_kpc_int_fg[1]
		slc_int_bg_1    = slc_kpc_int_bg[1]
		xlabel_1        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_1   = 'SKP'
		xticks_values_1 = [5,50, 100, 1500]
		yticks_values_1 = np.arange(0,30,0.5)#[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'kpc'  and n_int_spt_1 == 4:#in specfile_glx_f:
		splt_smpl_sfx_f1= 'kpc_F'
		splt_smpl_sfx_1 = '_kpc' 
		splt_smpl_unt_1 = 'kpc'
		splt_smpl_unl_1 = 'kpc'
		plt_nme_prp_1   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_4)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_4)				
		slc_int_fg_1    = slc_kpc_int_fg[1]
		slc_int_bg_1    = slc_kpc_int_bg[1]
		xlabel_1        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_1   = 'SKP'
		xticks_values_1 = [5,50, 100, 1500]
		yticks_values_1 = np.arange(0,30,0.5)#[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'mass' and n_int_spt_1 == 0:# in specfile_glx_f:
		splt_smpl_sfx_f1= 'mass_F'
		splt_smpl_sfx_1 = '-mass'
		splt_smpl_unt_1 = 'log[M/M$_{\odot}$]'
		splt_smpl_unl_1 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_1   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23)				
		slc_int_fg_1    = slc_mss_int_fg[1]
		slc_int_bg_1    = slc_mss_int_bg[1]
		xlabel_1        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_1   = 'MSF'
		xticks_values_1 = np.arange(1,20,0.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1 = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'mass' and n_int_spt_1 == 1:# in specfile_glx_f:
		splt_smpl_sfx_f1= 'mass_F'
		splt_smpl_sfx_1 = '-mass'
		splt_smpl_unt_1 = 'log[M/M$_{\odot}$]'
		splt_smpl_unl_1 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_1   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_1)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_1)				
		slc_int_fg_1    = slc_mss_int_fg[1]
		slc_int_bg_1    = slc_mss_int_bg[1]
		xlabel_1        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_1   = 'MSF'
		xticks_values_1 = np.arange(1,20,0.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1 = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'mass' and n_int_spt_1 == 2:# in specfile_glx_f:
		splt_smpl_sfx_f1= 'mass_F'
		splt_smpl_sfx_1 = '-mass'
		splt_smpl_unt_1 = 'log[M/M$_{\odot}$]'
		splt_smpl_unl_1 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_1   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_2)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_2)				
		slc_int_fg_1    = slc_mss_int_fg[1]
		slc_int_bg_1    = slc_mss_int_bg[1]
		xlabel_1        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_1   = 'MSF'
		xticks_values_1 = np.arange(1,20,.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1 = np.arange(0,30,.01)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'mass' and n_int_spt_1 == 3:# in specfile_glx_f:
		splt_smpl_sfx_f1= 'mass_F'
		splt_smpl_sfx_1 = '-mass'
		splt_smpl_unt_1 = 'log[M/M$_{\odot}$]'
		splt_smpl_unl_1 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_1   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_3)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_3)				
		slc_int_fg_1    = slc_mss_int_fg[1]
		slc_int_bg_1    = slc_mss_int_bg[1]
		xlabel_1        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_1   = 'MSF'
		xticks_values_1 = np.arange(1,20,0.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1 = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'mass' and n_int_spt_1 == 4:# in specfile_glx_f:
		splt_smpl_sfx_f1= 'mass_F'
		splt_smpl_sfx_1 = '-mass'
		splt_smpl_unt_1 = 'log[M/M$_{\odot}$]'
		splt_smpl_unl_1 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_1   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_4)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_4)				
		slc_int_fg_1    = slc_mss_int_fg[1]
		slc_int_bg_1    = slc_mss_int_bg[1]
		xlabel_1        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_1   = 'MSF'
		xticks_values_1 = np.arange(1,20,0.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1 = np.arange(0,30,0.5)         #[0.1,0.5,1,3]				
	elif int_typ_spl_1 == 'Age'  and n_int_spt_1 == 0:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Age_F'
		splt_smpl_sfx_1  = '-Age' 
		splt_smpl_unt_1  = 'Age'
		splt_smpl_unl_1  = 'Age'
		plt_nme_prp_1    = 'Age'
		slc_age_int_fg_0 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv)
		slc_age_int_bg_0 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv)
		slc_int_fg_1     = slc_age_int_fg_0[1]
		slc_int_bg_1     = slc_age_int_bg_0[1]
		xlabel_1         = 'Age'
		var_prp_hdr_1    = 'AGF'
		xticks_values_1  = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1  = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Age'  and n_int_spt_1 == 1:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Age_F'
		splt_smpl_sfx_1  = '-Age' 
		splt_smpl_unt_1  = 'Age'
		splt_smpl_unl_1  = 'Age'
		plt_nme_prp_1    = 'Age'
		slc_age_int_fg_1 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_1)
		slc_age_int_bg_1 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_1)
		slc_int_fg_1     = slc_age_int_fg_1[1]
		slc_int_bg_1     = slc_age_int_bg_1[1]
		xlabel_1         = 'Age'
		var_prp_hdr_1    = 'AGF'
		xticks_values_1  = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1  = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Age'  and n_int_spt_1 == 2:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Age_F'
		splt_smpl_sfx_1  = '-Age' 
		splt_smpl_unt_1  = 'Age'
		splt_smpl_unl_1  = 'Age'
		plt_nme_prp_1    = 'Age'
		slc_age_int_fg_2 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_2)
		slc_age_int_bg_2 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_2)
		slc_int_fg_1     = slc_age_int_fg_2[1]
		slc_int_bg_1     = slc_age_int_bg_2[1]
		xlabel_1         = 'Age'
		var_prp_hdr_1    = 'AGF'
		xticks_values_1  = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1  = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Age'  and n_int_spt_1 == 3:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Age_F'
		splt_smpl_sfx_1  = '-Age' 
		splt_smpl_unt_1  = 'Age'
		splt_smpl_unl_1  = 'Age'
		plt_nme_prp_1    = 'Age'
		slc_age_int_fg_3 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_3)
		slc_age_int_bg_3 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_3)
		slc_int_fg_1     = slc_age_int_fg_3[1]
		slc_int_bg_1     = slc_age_int_bg_3[1]
		xlabel_1         = 'Age'
		var_prp_hdr_1    = 'AGF'
		xticks_values_1  = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1  = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Age'  and n_int_spt_1 == 4:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Age_F'
		splt_smpl_sfx_1  = '-Age' 
		splt_smpl_unt_1  = 'Age'
		splt_smpl_unl_1  = 'Age'
		plt_nme_prp_1    = 'Age'
		slc_age_int_fg_4 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_4)
		slc_age_int_bg_4 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_4)
		slc_int_fg_1     = slc_age_int_fg_4[1]
		slc_int_bg_1     = slc_age_int_bg_4[1]
		xlabel_1         = 'Age'
		var_prp_hdr_1    = 'AGF'
		xticks_values_1  = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1  = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'SFR'  and n_int_spt_1 == 0:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'SFR_F'
		splt_smpl_sfx_1  = '-SFR' 
		splt_smpl_unt_1  = '[M$_{\odot}$yr$^{-1}$]' 
		splt_smpl_unl_1  = '[M$_{\odot}$yr$^{-1}$]' 
		plt_nme_prp_1    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv)
		slc_int_fg_1     = slc_sfr_int_fg[1]
		slc_int_bg_1     = slc_sfr_int_bg[1]
		xlabel_1         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_1    = 'SFF'
		xticks_values_1  = np.arange(0,3,0.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'SFR'  and n_int_spt_1 == 1:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'SFR_F'
		splt_smpl_sfx_1  = '-SFR' 
		splt_smpl_unt_1  = '[M$_{\odot}$yr$^{-1}$]' 
		splt_smpl_unl_1  = '[M$_{\odot}$yr$^{-1}$]' 
		plt_nme_prp_1    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_1)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_1)
		slc_int_fg_1     = slc_sfr_int_fg[1]
		slc_int_bg_1     = slc_sfr_int_bg[1]
		xlabel_1         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_1    = 'SFF'
		xticks_values_1  = np.arange(0,3,0.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'SFR'  and n_int_spt_1 == 2:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'SFR_F'
		splt_smpl_sfx_1  = '-SFR' 
		splt_smpl_unt_1  = '[M$_{\odot}$yr$^{-1}$]' 
		splt_smpl_unl_1  = '[M$_{\odot}$yr$^{-1}$]' 
		plt_nme_prp_1    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_2)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_2)
		slc_int_fg_1     = slc_sfr_int_fg[1]
		slc_int_bg_1     = slc_sfr_int_bg[1]
		xlabel_1         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_1    = 'SFF'
		xticks_values_1  = np.arange(0,3,0.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'SFR'  and n_int_spt_1 == 3:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'SFR_F'
		splt_smpl_sfx_1  = '-SFR' 
		splt_smpl_unt_1  = '[M$_{\odot}$yr$^{-1}$]' 
		splt_smpl_unl_1  = '[M$_{\odot}$yr$^{-1}$]' 
		plt_nme_prp_1    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_3)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_3)
		slc_int_fg_1     = slc_sfr_int_fg[1]
		slc_int_bg_1     = slc_sfr_int_bg[1]
		xlabel_1         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_1    = 'SFF'
		xticks_values_1  = np.arange(0,3,0.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'SFR'  and n_int_spt_1 == 4:#in specfile_glx_f:
		splt_smpl_sfx_f1 = 'SFR_F'
		splt_smpl_sfx_1  = '-SFR' 
		splt_smpl_unt_1  = '[M$_{\odot}$yr$^{-1}$]' 
		splt_smpl_unl_1  = '[M$_{\odot}$yr$^{-1}$]' 
		plt_nme_prp_1    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_4)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_4)
		slc_int_fg_1     = slc_sfr_int_fg[1]
		slc_int_bg_1     = slc_sfr_int_bg[1]
		xlabel_1         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_1    = 'SFF'
		xticks_values_1  = np.arange(0,3,0.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sSFR' and n_int_spt_1 == 0:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'sSFR_F'
		splt_smpl_sfx_1  = '-sSFR'
		splt_smpl_unt_1  = '[Gyr]'
		splt_smpl_unl_1  = '[Gyr]'
		plt_nme_prp_1    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv)
		slc_int_fg_1     = slc_ssf_int_fg[1]
		slc_int_bg_1     = slc_ssf_int_bg[1]
		xlabel_1         = 'sSFR [Gyr]'
		var_prp_hdr_1    = 'sSF'
		xticks_values_1  = np.arange(-20,-1,0.1)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sSFR' and n_int_spt_1 == 1:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'sSFR_F'
		splt_smpl_sfx_1  = '-sSFR'
		splt_smpl_unt_1  = '[Gyr]'
		splt_smpl_unl_1  = '[Gyr]'
		plt_nme_prp_1    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_1)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_1)
		slc_int_fg_1     = slc_ssf_int_fg[1]
		slc_int_bg_1     = slc_ssf_int_bg[1]
		xlabel_1         = 'sSFR [Gyr]'
		var_prp_hdr_1    = 'sSF'
		xticks_values_1  = np.arange(-20,-1,0.1)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sSFR' and n_int_spt_1 == 2:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'sSFR_F'
		splt_smpl_sfx_1  = '-sSFR'
		splt_smpl_unt_1  = '[Gyr]'
		splt_smpl_unl_1  = '[Gyr]'
		plt_nme_prp_1    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_2)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_2)
		slc_int_fg_1     = slc_ssf_int_fg[1]
		slc_int_bg_1     = slc_ssf_int_bg[1]
		xlabel_1         = 'sSFR [Gyr]'
		var_prp_hdr_1    = 'sSF'
		xticks_values_1  = np.arange(-20,-1,0.1)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sSFR' and n_int_spt_1 == 3:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'sSFR_F'
		splt_smpl_sfx_1  = '-sSFR'
		splt_smpl_unt_1  = '[Gyr]'
		splt_smpl_unl_1  = '[Gyr]'
		plt_nme_prp_1    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_3)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_3)
		slc_int_fg_1     = slc_ssf_int_fg[1]
		slc_int_bg_1     = slc_ssf_int_bg[1]
		xlabel_1         = 'sSFR [Gyr]'
		var_prp_hdr_1    = 'sSF'
		xticks_values_1  = np.arange(-20,-1,0.1)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sSFR' and n_int_spt_1 == 4:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'sSFR_F'
		splt_smpl_sfx_1  = '-sSFR'
		splt_smpl_unt_1  = '[Gyr]'
		splt_smpl_unl_1  = '[Gyr]'
		plt_nme_prp_1    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_4)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_4)
		slc_int_fg_1     = slc_ssf_int_fg[1]
		slc_int_bg_1     = slc_ssf_int_bg[1]
		xlabel_1         = 'sSFR [Gyr]'
		var_prp_hdr_1    = 'sSF'
		xticks_values_1  = np.arange(-20,-1,0.25)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1  = np.arange(0,30,.25)   #[0.1,0.5,1,3]						
	elif int_typ_spl_1 == 'Lnuv' and n_int_spt_1 == 0:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Lnuv_F'
		splt_smpl_sfx_1  = '-Lnuv'
		splt_smpl_unt_1  = 'ergs cm$^{-2}$ s$^{-1}$'
		splt_smpl_unl_1  = 'ergs cm$^{-2}$ s$^{-1}$'
		plt_nme_prp_1    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv)
		slc_int_fg_1     = slc_luv_int_fg[1]
		slc_int_bg_1     = slc_luv_int_bg[1]
		xlabel_1         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_1    = 'UVF'
		xticks_values_1  = np.arange(8,14,.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Lnuv' and n_int_spt_1 == 1:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Lnuv_F'
		splt_smpl_sfx_1  = '-Lnuv'
		splt_smpl_unt_1  = 'ergs cm$^{-2}$ s$^{-1}$'
		splt_smpl_unl_1  = 'ergs cm$^{-2}$ s$^{-1}$'
		plt_nme_prp_1    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_1)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_1)
		slc_int_fg_1     = slc_luv_int_fg[1]
		slc_int_bg_1     = slc_luv_int_bg[1]
		xlabel_1         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_1    = 'UVF'
		xticks_values_1  = np.arange(8,14,.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Lnuv' and n_int_spt_1 == 2:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Lnuv_F'
		splt_smpl_sfx_1  = '-Lnuv'
		splt_smpl_unt_1  = 'ergs cm$^{-2}$ s$^{-1}$'
		splt_smpl_unl_1  = 'ergs cm$^{-2}$ s$^{-1}$'
		plt_nme_prp_1    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_2)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_2)
		slc_int_fg_1     = slc_luv_int_fg[1]
		slc_int_bg_1     = slc_luv_int_bg[1]
		xlabel_1         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_1    = 'UVF'
		xticks_values_1  = np.arange(8,14,.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Lnuv' and n_int_spt_1 == 3:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Lnuv_F'
		splt_smpl_sfx_1  = '-Lnuv'
		splt_smpl_unt_1  = 'ergs cm$^{-2}$ s$^{-1}$'
		splt_smpl_unl_1  = 'ergs cm$^{-2}$ s$^{-1}$'
		plt_nme_prp_1    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_3)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_3)
		slc_int_fg_1     = slc_luv_int_fg[1]
		slc_int_bg_1     = slc_luv_int_bg[1]
		xlabel_1         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_1    = 'UVF'
		xticks_values_1  = np.arange(8,14,.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'Lnuv' and n_int_spt_1 == 4:# in specfile_glx_f:
		splt_smpl_sfx_f1 = 'Lnuv_F'
		splt_smpl_sfx_1  = '-Lnuv'
		splt_smpl_unt_1  = 'ergs cm$^{-2}$ s$^{-1}$'
		splt_smpl_unl_1  = 'ergs cm$^{-2}$ s$^{-1}$'
		plt_nme_prp_1    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_4)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_4)
		slc_int_fg_1     = slc_luv_int_fg[1]
		slc_int_bg_1     = slc_luv_int_bg[1]
		xlabel_1         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_1    = 'UVF'
		xticks_values_1  = np.arange(8,14,.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values_1  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 0:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values_1  = [5,50, 100, 150]
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 1:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_1[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_1[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values_1  = [5,50, 100, 150]
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 2:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_2[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_2[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values_1  = [5,50, 100, 150]
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 3:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_3[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_3[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values_1  = [5,50, 100, 150]
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 4:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_4[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_4[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values_1  = [5,50, 100, 150]
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 5:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_5[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_5[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values_1  = [5,50, 100, 150, 200]
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_1 == 'sep_as' and n_int_spt_1 == 6:
		splt_smpl_sfx_f1 = 'sep_as'
		splt_smpl_sfx_1  = '_as'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_6[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_6[1])
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'Impact Parameter b (kpc)'
		var_prp_hdr_1    = 'SKP'#'SAS'
		xticks_values_1  = [5,50, 100, 150, 200]
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'magi' and n_int_spt_1 == 0:# in specfile_glx:
		splt_smpl_sfx_f1 = 'magi_F'
		splt_smpl_sfx_1  = '_magi'
		splt_smpl_unt_1  = '$^{\\prime\\prime}$'
		splt_smpl_unl_1  = '$^{\\prime\\prime}$'
		plt_nme_prp_1    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv)
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'mag$_{i}$'
		var_prp_hdr_1    = 'magi'#'SAS'
		xticks_values_1  = np.arange(-100,100,0.25)
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]				
	elif int_typ_spl_1 == 'magi' and n_int_spt_1 == 1:# in specfile_glx:
		splt_smpl_sfx_f1 = 'magi_F'
		splt_smpl_sfx_1  = '_magi'
		splt_smpl_unt_1  = 'mag'
		splt_smpl_unl_1  = 'mag'
		plt_nme_prp_1    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv)
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'mag$_{i}$'
		var_prp_hdr_1    = 'magi'#'SAS'
		xticks_values_1  = np.arange(-100,100,0.25)
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]				
	elif int_typ_spl_1 == 'magi' and n_int_spt_1 == 2:# in specfile_glx:
		splt_smpl_sfx_f1 = 'magi_F'
		splt_smpl_sfx_1  = '_magi'
		splt_smpl_unt_1  = 'mag'
		splt_smpl_unl_1  = 'mag'
		plt_nme_prp_1    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_2)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_2)
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'mag$_{i}$'
		var_prp_hdr_1    = 'magi'#'SAS'
		xticks_values_1  = np.arange(-100,100,0.25)
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]				
	elif int_typ_spl_1 == 'magi' and n_int_spt_1 == 3:# in specfile_glx:
		splt_smpl_sfx_f1 = 'magi_F'
		splt_smpl_sfx_1  = '_magi'
		splt_smpl_unt_1  = 'mag'
		splt_smpl_unl_1  = 'mag'
		plt_nme_prp_1    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_3)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_3)
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'mag$_{i}$'
		var_prp_hdr_1    = 'magi'#'SAS'
		xticks_values_1  = np.arange(-100,100,0.25)
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]				
	elif int_typ_spl_1 == 'magi' and n_int_spt_1 == 4:# in specfile_glx:
		splt_smpl_sfx_f1 = 'magi_F'
		splt_smpl_sfx_1  = '_magi'
		splt_smpl_unt_1  = 'mag'
		splt_smpl_unl_1  = 'mag'
		plt_nme_prp_1    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_4)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_4)
		slc_int_fg_1     = slc_sep_int_fg[1]
		slc_int_bg_1     = slc_sep_int_bg[1]
		xlabel_1         = 'mag$_{i}$'
		var_prp_hdr_1    = 'magi'#'SAS'
		xticks_values_1  = np.arange(-100,100,0.25)
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]				
	elif int_typ_spl_1 == 'phi' and n_int_spt_1 == 0:# in specfile_glx:
		splt_smpl_sfx_f1 = 'PHI'
		splt_smpl_sfx_1  = '-phi'
		splt_smpl_unt_1  = 'deg'
		splt_smpl_unl_1  = 'deg'
		plt_nme_prp_1    = 'PHI'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv)
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr_1    = 'PHI'#'SAS'
		xticks_values_1  = np.arange(-10,100,10) #xticks_values_1  [0,100]
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'phi'  and n_int_spt_1 == 2:# in specfile_glx:
		splt_smpl_sfx_f1 = 'PHI'
		splt_smpl_sfx_1  = '-phi'
		splt_smpl_unt_1  = 'deg'
		splt_smpl_unl_1  = 'deg'
		plt_nme_prp_1    = 'PHI'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv_23_2)			
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr_1    = 'PHI'#'SAS'
		xticks_values_1  = np.arange(-10,100,10) #xticks_values_1  [0,100]
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'phi'  and n_int_spt_1 == 3:# in specfile_glx:
		splt_smpl_sfx_f1 = 'PHI'
		splt_smpl_sfx_1  = '-phi'
		splt_smpl_unt_1  = 'deg'
		splt_smpl_unl_1  = 'deg'
		plt_nme_prp_1    = 'PHI'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv_23_3)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv_23_3)			
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr_1    = 'PHI'#'SAS'
		xticks_values_1  = np.arange(-10,100,10) #xticks_values_1  [0,100]
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]	
	elif int_typ_spl_1 == 'icl_fg' and n_int_spt_1 == 0:# in specfile_glx:
		splt_smpl_sfx_f1 = 'q_F'
		splt_smpl_sfx_1  = '-icl'
		splt_smpl_unt_1  = 'deg'
		splt_smpl_unl_1  = 'deg'
		plt_nme_prp_1    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv)
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$q$'
		var_prp_hdr_1    = 'q'#'SAS'
		xticks_values_1  = np.arange(-1,1,0.1)
		yticks_values_1  = np.arange(0,30,.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'icl_fg' and n_int_spt_1 == 2:# in specfile_glx:
		splt_smpl_sfx_f1 = 'q_F'
		splt_smpl_sfx_1  = '-icl'
		splt_smpl_unt_1  = 'deg'
		splt_smpl_unl_1  = 'deg'
		plt_nme_prp_1    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv_23_2)
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$q$'
		var_prp_hdr_1    = 'q'#'SAS'
		xticks_values_1  = np.arange(-1,1,0.1)
		yticks_values_1  = np.arange(0,30,.5)  #[0.1,0.5,1,3]	
	elif int_typ_spl_1 == 'icl_fg' and n_int_spt_1 == 3:# in specfile_glx:
		splt_smpl_sfx_f1 = 'q_F'
		splt_smpl_sfx_1  = '-icl'
		splt_smpl_unt_1  = 'deg'
		splt_smpl_unl_1  = 'deg'
		plt_nme_prp_1    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv_23_3)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv_23_3)
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$q$'
		var_prp_hdr_1    = 'q'#'SAS'
		xticks_values_1  = np.arange(-1,1,0.1)
		yticks_values_1  = np.arange(0,30,.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'icl_fg' and n_int_spt_1 == 4:# in specfile_glx:
		splt_smpl_sfx_f1 = 'q_F'
		splt_smpl_sfx_1  = '-icl'
		splt_smpl_unt_1  = 'deg'
		splt_smpl_unl_1  = 'deg'
		plt_nme_prp_1    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv_23_4)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv_23_4)			
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$q$'
		var_prp_hdr_1    = 'q'#'SAS'
		xticks_values_1  = np.arange(-1,1,0.1)
		yticks_values_1  = np.arange(0,30,.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'n_sersic_fg' and n_int_spt_1 == 0:# in specfile_glx:
		splt_smpl_sfx_f1 = 'n_F'
		splt_smpl_sfx_1  = '-n_srs'
		splt_smpl_unt_1  = 'n'
		splt_smpl_unl_1  = 'n'
		plt_nme_prp_1    = 'n_srs'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,n_srs_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,n_srs_itv)
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = 'n'
		var_prp_hdr_1    = 'nsr'#'SAS'
		xticks_values_1  = np.arange(-1,3,0.25)
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'n_sersic_fg'  and n_int_spt_1 == 2:# in specfile_glx:
		splt_smpl_sfx_f1 = 'n_F'
		splt_smpl_sfx_1  = '-n_srs'
		splt_smpl_unt_1  = 'n'
		splt_smpl_unl_1  = 'n'
		plt_nme_prp_1    = 'n_srs'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,n_srs_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,n_srs_itv_23_2)			
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = 'n'
		var_prp_hdr_1    = 'nsr'#'SAS'
		xticks_values_1  = np.arange(-1,3,0.25)
		yticks_values_1  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'r_eff_fg' and n_int_spt_1 == 0:# in specfile_glx:
		splt_smpl_sfx_f1 = 're_F'
		splt_smpl_sfx_1  = '-r_eff'
		splt_smpl_unt_1  = 'arcsec'
		splt_smpl_unl_1  = 'arcsec'
		plt_nme_prp_1    = 'r_eff'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv)
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]  
		xlabel_1         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr_1    = 'ref'#'SAS'
		xticks_values_1  = np.arange(-1,50,0.5)
		yticks_values_1  = np.arange(0,30,.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'r_eff_fg'  and n_int_spt_1 == 2:# in specfile_glx:
		splt_smpl_sfx_f1 = 're_F'
		splt_smpl_sfx_1  = '-r_eff'
		splt_smpl_unt_1  = 'arcsec'
		splt_smpl_unl_1  = 'arcsec'
		plt_nme_prp_1    = 'r_eff'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv_23_2)			
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr_1    = 'ref'#'SAS'
		xticks_values_1  = np.arange(-1,50,0.5)
		yticks_values_1  = np.arange(0,30,.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_1 == 'r_eff_fg'  and n_int_spt_1 == 3:# in specfile_glx:
		splt_smpl_sfx_f1 = 're_F'
		splt_smpl_sfx_1  = '-r_eff'
		splt_smpl_unt_1  = 'arcsec'
		splt_smpl_unl_1  = 'arcsec'
		plt_nme_prp_1    = 'r_eff'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv_23_3)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv_23_3)			
		slc_int_fg_1     = slc_mss_int_fg[1]
		slc_int_bg_1     = slc_mss_int_bg[1]
		xlabel_1         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr_1    = 'ref'#'SAS'
		xticks_values_1  = np.arange(-1,50,0.5)
		yticks_values_1  = np.arange(0,30,.5)  #[0.1,0.5,1,3]					
	else:
		print
		print (colored('Such combination (1st-split) does not exist!','yellow'))
		print (colored('Variable: '+str(int_typ_spl_1)+', # bins: '+str(n_int_spt_1),'yellow'))
		print
		quit()
	####

	if int_typ_spl_2 == 'kpc'  and n_int_spt_2 == 0:#in specfile_glx_f:
		splt_smpl_sfx_f2= 'kpc_F'
		splt_smpl_sfx_2 = '_kpc' 
		splt_smpl_unt_2 = 'kpc'
		splt_smpl_unl_2 = 'kpc'
		plt_nme_prp_2   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv)				
		slc_int_fg_2    = slc_kpc_int_fg[1]
		slc_int_bg_2    = slc_kpc_int_bg[1]		
		xlabel_2        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_2   = 'SKP'
		xticks_values_2 = [5,50, 100, 150]
		yticks_values_2 = np.arange(0,30,0.5)
	elif int_typ_spl_2 == 'kpc'  and n_int_spt_2 == 1:#in specfile_glx_f:
		splt_smpl_sfx_f2= 'kpc_F'
		splt_smpl_sfx_2 = '_kpc' 
		splt_smpl_unt_2 = 'kpc'
		splt_smpl_unl_2 = 'kpc'
		plt_nme_prp_2   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_1)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_1)				
		slc_int_fg_2    = slc_kpc_int_fg[1]
		slc_int_bg_2    = slc_kpc_int_bg[1]
		xlabel_2        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_2   = 'SKP'
		xticks_values_2 = [5,50, 100, 150]
		yticks_values_2 = np.arange(0,30,0.5)
	elif int_typ_spl_2 == 'kpc'  and n_int_spt_2 == 2:#in specfile_glx_f:
		splt_smpl_sfx_f2= 'kpc_F'
		splt_smpl_sfx_2 = '_kpc' 
		splt_smpl_unt_2 = 'kpc'
		splt_smpl_unl_2 = 'kpc'
		plt_nme_prp_2   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_2)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_2)				
		slc_int_fg_2    = slc_kpc_int_fg[1]
		slc_int_bg_2    = slc_kpc_int_bg[1]
		xlabel_2        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_2   = 'SKP'
		xticks_values_2 = [5,50, 100, 150]
		yticks_values_2 = np.arange(0,30,0.5)
	elif int_typ_spl_2 == 'kpc'  and n_int_spt_2 == 3:#in specfile_glx_f:
		splt_smpl_sfx_f2= 'kpc_F'
		splt_smpl_sfx_2 = '_kpc' 
		splt_smpl_unt_2 = 'kpc'
		splt_smpl_unl_2 = 'kpc'
		plt_nme_prp_2   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_3)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_3)				
		slc_int_fg_2    = slc_kpc_int_fg[1]
		slc_int_bg_2    = slc_kpc_int_bg[1]
		xlabel_2        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_2   = 'SKP'
		xticks_values_2 = [5,50, 100, 150]
		yticks_values_2 = np.arange(0,30,0.5)
	elif int_typ_spl_2 == 'kpc'  and n_int_spt_2 == 4:#in specfile_glx_f:
		splt_smpl_sfx_f2= 'kpc_F'
		splt_smpl_sfx_2 = '_kpc' 
		splt_smpl_unt_2 = 'kpc'
		splt_smpl_unl_2 = 'kpc'
		plt_nme_prp_2   = 'kpc'
		slc_kpc_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,SEP_kpc_itv_4)
		slc_kpc_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SEP_kpc_itv_4)				
		slc_int_fg_2    = slc_kpc_int_fg[1]
		slc_int_bg_2    = slc_kpc_int_bg[1]
		xlabel_2        = 'Impact Parameter $b$ (kpc)'
		var_prp_hdr_2   = 'SKP'
		xticks_values_2 = [5,50, 100, 150]
		yticks_values_2 = np.arange(0,30,0.5)
	elif int_typ_spl_2 == 'mass' and n_int_spt_2 == 0:# in specfile_glx_f:
		splt_smpl_sfx_f2= 'mass_F'
		splt_smpl_sfx_2 = '-mass'
		splt_smpl_unt_2 = 'log[M/M$_{\odot}$]'
		splt_smpl_unl_2 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_2   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23)				
		slc_int_fg_2    = slc_mss_int_fg[1]
		slc_int_bg_2    = slc_mss_int_bg[1]
		xlabel_2        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_2   = 'MSF'
		xticks_values_2 = np.arange(1,20,.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2 = np.arange(0,30,0.5)
	elif int_typ_spl_2 == 'mass' and n_int_spt_2 == 1:# in specfile_glx_f:
		splt_smpl_sfx_f2= 'mass_F'
		splt_smpl_sfx_2 = '-mass'
		splt_smpl_unt_2 = 'log[M/M$_{\odot}$]'
		splt_smpl_unl_2 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_2   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_1)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_1)				
		slc_int_fg_2    = slc_mss_int_fg[1]
		slc_int_bg_2    = slc_mss_int_bg[1]
		xlabel_2        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_2   = 'MSF'
		xticks_values_2 = np.arange(1,20,.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2 = np.arange(0,30,0.5)
	elif int_typ_spl_2 == 'mass' and n_int_spt_2 == 2:# in specfile_glx_f:
		splt_smpl_sfx_f2= 'mass_F'
		splt_smpl_sfx_2 = '-mass'
		splt_smpl_unt_2 = 'log[M/M$_{\odot}$]'
		splt_smpl_unl_2 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_2   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_2)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_2)				
		slc_int_fg_2    = slc_mss_int_fg[1]
		slc_int_bg_2    = slc_mss_int_bg[1]
		xlabel_2        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_2   = 'MSF'
		xticks_values_2 = np.arange(1,20,0.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2 = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'mass' and n_int_spt_2 == 3:# in specfile_glx_f:
		splt_smpl_sfx_f2= 'mass_F'
		splt_smpl_sfx_2 = '-mass'
		splt_smpl_unt_2 = 'log[M/M$_{\odot}$]'
		splt_smpl_unl_2 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_2   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_3)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_3)				
		slc_int_fg_2    = slc_mss_int_fg[1]
		slc_int_bg_2    = slc_mss_int_bg[1]
		xlabel_2        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_2   = 'MSF'
		xticks_values_2 = np.arange(1,20,0.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2 = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'mass' and n_int_spt_2 == 4:# in specfile_glx_f:
		splt_smpl_sfx_f2= 'mass_F'
		splt_smpl_sfx_2 = '-mass'
		splt_smpl_unt_2 = 'log[M/M$_{\odot}$]'
		splt_smpl_unl_2 = 'log[M/M$_{\odot}$]'
		plt_nme_prp_2   = 'Mass'
		slc_mss_int_fg  = Def_Sub_Dirs_Slice_all(frg_ind_plt,mass_itv_23_4)
		slc_mss_int_bg  = Def_Sub_Dirs_Slice_all(bkg_ind_plt,mass_itv_23_4)				
		slc_int_fg_2    = slc_mss_int_fg[1]
		slc_int_bg_2    = slc_mss_int_bg[1]
		xlabel_2        = 'Stellar Mass log[M/M$_{\odot}$]'
		var_prp_hdr_2   = 'MSF'
		xticks_values_2 = np.arange(1,20,0.1)         #[8,9.50,9.72,9.9,14]  #4 bins 45,46,46,44/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2 = np.arange(0,30,0.5)         #[0.1,0.5,1,3]				
	elif int_typ_spl_2 == 'Age'  and n_int_spt_2 == 0:#in specfile_glx_f:
		splt_smpl_sfx_f2 = '-Age_F'
		splt_smpl_sfx_2  = '-Age' 
		splt_smpl_unt_2  = 'Age'
		splt_smpl_unl_2  = 'Age'
		plt_nme_prp_2    = 'Age'
		slc_age_int_fg_0 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv)
		slc_age_int_bg_0 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv)
		slc_int_fg_2     = slc_age_int_fg_0[1]
		slc_int_bg_2     = slc_age_int_bg_0[1]
		xlabel_2         = 'Age'
		var_prp_hdr_2    = 'AGF'
		xticks_values_2  = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2  = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'Age'  and n_int_spt_2 == 1:#in specfile_glx_f:
		splt_smpl_sfx_f2 = '-Age_F'
		splt_smpl_sfx_2  = '-Age' 
		splt_smpl_unt_2  = 'Age'
		splt_smpl_unl_2  = 'Age'
		plt_nme_prp_2    = 'Age'
		slc_age_int_fg_1 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_1)
		slc_age_int_bg_1 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_1)
		slc_int_fg_2     = slc_age_int_fg_1[1]
		slc_int_bg_2     = slc_age_int_bg_1[1]
		xlabel_2         = 'Age'
		var_prp_hdr_2    = 'AGF'
		xticks_values_2  = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2  = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'Age'  and n_int_spt_2 == 2:#in specfile_glx_f:
		splt_smpl_sfx_f2 = '-Age_F'
		splt_smpl_sfx_2  = '-Age' 
		splt_smpl_unt_2  = 'Age'
		splt_smpl_unl_2  = 'Age'
		plt_nme_prp_2    = 'Age'
		slc_age_int_fg_2 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_2)
		slc_age_int_bg_2 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_2)
		slc_int_fg_2     = slc_age_int_fg_2[1]
		slc_int_bg_2     = slc_age_int_bg_2[1]
		xlabel_2         = 'Age'
		var_prp_hdr_2    = 'AGF'
		xticks_values_2  = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2  = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'Age'  and n_int_spt_2 == 3:#in specfile_glx_f:
		splt_smpl_sfx_f2 = '-Age_F'
		splt_smpl_sfx_2  = '-Age' 
		splt_smpl_unt_2  = 'Age'
		splt_smpl_unl_2  = 'Age'
		plt_nme_prp_2    = 'Age'
		slc_age_int_fg_3 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_3)
		slc_age_int_bg_3 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_3)
		slc_int_fg_2     = slc_age_int_fg_3[1]
		slc_int_bg_2     = slc_age_int_bg_3[1]
		xlabel_2         = 'Age'
		var_prp_hdr_2    = 'AGF'
		xticks_values_2  = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2  = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'Age'  and n_int_spt_2 == 4:#in specfile_glx_f:
		splt_smpl_sfx_f2 = '-Age_F'
		splt_smpl_sfx_2  = '-Age' 
		splt_smpl_unt_2  = 'Age'
		splt_smpl_unl_2  = 'Age'
		plt_nme_prp_2    = 'Age'
		slc_age_int_fg_4 = Def_Sub_Dirs_Slice_all(frg_ind_plt,Age_itv_23_4)
		slc_age_int_bg_4 = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Age_itv_23_4)
		slc_int_fg_2     = slc_age_int_fg_4[1]
		slc_int_bg_2     = slc_age_int_bg_4[1]
		xlabel_2         = 'Age'
		var_prp_hdr_2    = 'AGF'
		xticks_values_2  = np.arange(1e8,2.3e9,8E7)   #[0,1.7e8,3.5e8,5.5e8,2.3e9]               #4 bins 62,60,59,42/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2  = np.arange(0,30,0.5)         #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'SFR'  and n_int_spt_2 == 0:#in specfile_glx_f:
		splt_smpl_sfx_f2 = 'SFR_F'
		splt_smpl_sfx_2  = '-SFR' 
		splt_smpl_unt_2  = 'M$_{\odot}$yr$^{-1}$' 
		splt_smpl_unl_2  = 'SFR' 
		plt_nme_prp_2    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv)
		slc_int_fg_2     = slc_sfr_int_fg[1]
		slc_int_bg_2     = slc_sfr_int_bg[1]
		xlabel_2         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_2    = 'SFF'
		xticks_values_2  = np.arange(0,3,0.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'SFR'  and n_int_spt_2 == 1:#in specfile_glx_f:
		splt_smpl_sfx_f2 = 'SFR_F'
		splt_smpl_sfx_2  = '-SFR' 
		splt_smpl_unt_2  = 'M$_{\odot}$yr$^{-1}$' 
		splt_smpl_unl_2  = 'SFR' 
		plt_nme_prp_2    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_1)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_1)
		slc_int_fg_2     = slc_sfr_int_fg[1]
		slc_int_bg_2     = slc_sfr_int_bg[1]
		xlabel_2         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_2    = 'SFF'
		xticks_values_2  = np.arange(0,3,0.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'SFR'  and n_int_spt_2 == 2:#in specfile_glx_f:
		splt_smpl_sfx_f2 = 'SFR_F'
		splt_smpl_sfx_2  = '-SFR' 
		splt_smpl_unt_2  = 'M$_{\odot}$yr$^{-1}$' 
		splt_smpl_unl_2  = 'SFR' 
		plt_nme_prp_2    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_2)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_2)
		slc_int_fg_2     = slc_sfr_int_fg[1]
		slc_int_bg_2     = slc_sfr_int_bg[1]
		xlabel_2         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_2    = 'SFF'
		xticks_values_2  = np.arange(0,3,0.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'SFR'  and n_int_spt_2 == 3:#in specfile_glx_f:
		splt_smpl_sfx_f2 = 'SFR_F'
		splt_smpl_sfx_2  = '-SFR' 
		splt_smpl_unt_2  = 'M$_{\odot}$yr$^{-1}$' 
		splt_smpl_unl_2  = 'SFR' 
		plt_nme_prp_2    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_3)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_3)
		slc_int_fg_2     = slc_sfr_int_fg[1]
		slc_int_bg_2     = slc_sfr_int_bg[1]
		xlabel_2         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_2    = 'SFF'
		xticks_values_2  = np.arange(0,3,0.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'SFR'  and n_int_spt_2 == 4:#in specfile_glx_f:
		splt_smpl_sfx_f2 = 'SFR_F'
		splt_smpl_sfx_2  = '-SFR' 
		splt_smpl_unt_2  = 'M$_{\odot}$yr$^{-1}$' 
		splt_smpl_unl_2  = 'SFR' 
		plt_nme_prp_2    = 'SFR'
		slc_sfr_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,SFR_itv_23_4)
		slc_sfr_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,SFR_itv_23_4)
		slc_int_fg_2     = slc_sfr_int_fg[1]
		slc_int_bg_2     = slc_sfr_int_bg[1]
		xlabel_2         = 'SFR [M$_{\odot}$yr$^{-1}$]'
		var_prp_hdr_2    = 'SFF'
		xticks_values_2  = np.arange(0,3,0.1)  #[0,1.12,1.35,1.7,3.0]                     #4 bins 60,67,54/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'sSFR' and n_int_spt_2 == 0:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'sSFR_F'
		splt_smpl_sfx_2  = '-sSFR'
		splt_smpl_unt_2  = 'sSFR'
		splt_smpl_unl_2  = 'sSFR'
		plt_nme_prp_2    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv)
		slc_int_fg_2     = slc_ssf_int_fg[1]
		slc_int_bg_2     = slc_ssf_int_bg[1]
		xlabel_2         = 'sSFR [Gyr]'
		var_prp_hdr_2    = 'sSF'
		xticks_values_2  = np.arange(-20,-1,0.1)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'sSFR' and n_int_spt_2 == 1:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'sSFR_F'
		splt_smpl_sfx_2  = '-sSFR'
		splt_smpl_unt_2  = 'sSFR'
		splt_smpl_unl_2  = 'sSFR'
		plt_nme_prp_2    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_1)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_1)
		slc_int_fg_2     = slc_ssf_int_fg[1]
		slc_int_bg_2     = slc_ssf_int_bg[1]
		xlabel_2         = 'sSFR [Gyr]'
		var_prp_hdr_2    = 'sSF'
		xticks_values_2  = np.arange(-20,-1,0.1)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'sSFR' and n_int_spt_2 == 2:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'sSFR_F'
		splt_smpl_sfx_2  = '-sSFR'
		splt_smpl_unt_2  = 'sSFR'
		splt_smpl_unl_2  = 'sSFR'
		plt_nme_prp_2    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_2)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_2)
		slc_int_fg_2     = slc_ssf_int_fg[1]
		slc_int_bg_2     = slc_ssf_int_bg[1]
		xlabel_2         = 'sSFR [Gyr]'
		var_prp_hdr_2    = 'sSF'
		xticks_values_2  = np.arange(-20,-1,0.1)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'sSFR' and n_int_spt_2 == 3:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'sSFR_F'
		splt_smpl_sfx_2  = '-sSFR'
		splt_smpl_unt_2  = 'sSFR'
		splt_smpl_unl_2  = 'sSFR'
		plt_nme_prp_2    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_3)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_3)
		slc_int_fg_2     = slc_ssf_int_fg[1]
		slc_int_bg_2     = slc_ssf_int_bg[1]
		xlabel_2         = 'sSFR [Gyr]'
		var_prp_hdr_2    = 'sSF'
		xticks_values_2  = np.arange(-20,-1,0.1)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'sSFR' and n_int_spt_2 == 4:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'sSFR_F'
		splt_smpl_sfx_2  = '-sSFR'
		splt_smpl_unt_2  = 'sSFR'
		splt_smpl_unl_2  = 'sSFR'
		plt_nme_prp_2    = 'sSFR'
		slc_ssf_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,sSFR_itv_23_4)
		slc_ssf_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,sSFR_itv_23_4)
		slc_int_fg_2     = slc_ssf_int_fg[1]
		slc_int_bg_2     = slc_ssf_int_bg[1]
		xlabel_2         = 'sSFR [Gyr]'
		var_prp_hdr_2    = 'sSF'
		xticks_values_2  = np.arange(-20,-1,0.25)#[-13,-8.55,-8.34,-8.06,-6]                #4 bins 45,44,46,45/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2  = np.arange(0,30,.25)   #[0.1,0.5,1,3]						
	elif int_typ_spl_2 == 'Lnuv' and n_int_spt_2 == 0:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'Lnuv_F'
		splt_smpl_sfx_2  = '-Lnuv'
		splt_smpl_unt_2  = 'ergs cm$^{-2}$ s$^{-1}$'
		splt_smpl_unl_2  = 'Lnuv'
		plt_nme_prp_2    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv)
		slc_int_fg_2     = slc_luv_int_fg[1]
		slc_int_bg_2     = slc_luv_int_bg[1]
		xlabel_2         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_2    = 'UVF'
		xticks_values_2  = np.arange(8,14,.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'Lnuv' and n_int_spt_2 == 1:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'Lnuv_F'
		splt_smpl_sfx_2  = '-Lnuv'
		splt_smpl_unt_2  = 'ergs cm$^{-2}$ s$^{-1}$'
		splt_smpl_unl_2  = 'Lnuv'
		plt_nme_prp_2    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_1)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_1)
		slc_int_fg_2     = slc_luv_int_fg[1]
		slc_int_bg_2     = slc_luv_int_bg[1]
		xlabel_2         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_2    = 'UVF'
		xticks_values_2  = np.arange(8,14,.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'Lnuv' and n_int_spt_2 == 2:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'Lnuv_F'
		splt_smpl_sfx_2  = '-Lnuv'
		splt_smpl_unt_2  = 'ergs cm$^{-2}$ s$^{-1}$'
		splt_smpl_unl_2  = 'Lnuv'
		plt_nme_prp_2    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_2)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_2)
		slc_int_fg_2     = slc_luv_int_fg[1]
		slc_int_bg_2     = slc_luv_int_bg[1]
		xlabel_2         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_2    = 'UVF'
		xticks_values_2  = np.arange(8,14,.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'Lnuv' and n_int_spt_2 == 3:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'Lnuv_F'
		splt_smpl_sfx_2  = '-Lnuv'
		splt_smpl_unt_2  = 'ergs cm$^{-2}$ s$^{-1}$'
		splt_smpl_unl_2  = 'Lnuv'
		plt_nme_prp_2    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_3)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_3)
		slc_int_fg_2     = slc_luv_int_fg[1]
		slc_int_bg_2     = slc_luv_int_bg[1]
		xlabel_2         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_2    = 'UVF'
		xticks_values_2  = np.arange(8,14,.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'Lnuv' and n_int_spt_2 == 4:# in specfile_glx_f:
		splt_smpl_sfx_f2 = 'Lnuv_F'
		splt_smpl_sfx_2  = '-Lnuv'
		splt_smpl_unt_2  = 'ergs cm$^{-2}$ s$^{-1}$'
		splt_smpl_unl_2  = 'Lnuv'
		plt_nme_prp_2    = 'Lnuv'
		slc_luv_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,Lnuv_itv_23_4)
		slc_luv_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,Lnuv_itv_23_4)
		slc_int_fg_2     = slc_luv_int_fg[1]
		slc_int_bg_2     = slc_luv_int_bg[1]
		xlabel_2         = 'L$_{\mathrm{NUV}}$'
		var_prp_hdr_2    = 'UVF'
		xticks_values_2  = np.arange(8,14,.1)   #[8,10.01,10.19,10.50,14]                  #4 bins 45,44,45,47/per bin for z_flag 3,4,33,34,43,44
		yticks_values_2  = np.arange(0,30,0.5)   #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 0:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = '$^{\\prime\\prime}$'
		splt_smpl_unl_2  = '$^{\\prime\\prime}$'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
		xticks_values_2  = [5,50, 100, 150]
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 1:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = '$^{\\prime\\prime}$'
		splt_smpl_unl_2  = '$^{\\prime\\prime}$'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_1[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_1[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
		xticks_values_2  = [5,50, 100, 150]
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 2:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = '$^{\\prime\\prime}$'
		splt_smpl_unl_2  = '$^{\\prime\\prime}$'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_2[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_2[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
		xticks_values_2  = [5,50, 100, 150]
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 3:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = '$^{\\prime\\prime}$'
		splt_smpl_unl_2  = '$^{\\prime\\prime}$'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_3[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_3[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
		xticks_values_2  = [5,50, 100, 150]
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 4:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = '$^{\\prime\\prime}$'
		splt_smpl_unl_2  = '$^{\\prime\\prime}$'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_4[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_4[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
		xticks_values_2  = [5,50, 100, 150]
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 5:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = '$^{\\prime\\prime}$'
		splt_smpl_unl_2  = '$^{\\prime\\prime}$'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_5[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_5[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
		xticks_values_2  = [5,50, 100, 150, 200]
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]
	elif int_typ_spl_2 == 'sep_as' and n_int_spt_2 == 6:
		splt_smpl_sfx_f2 = 'sep_as'
		splt_smpl_sfx_2  = '_as'
		splt_smpl_unt_2  = '$^{\\prime\\prime}$'
		splt_smpl_unl_2  = '$^{\\prime\\prime}$'
		plt_nme_prp_2    = 'Radial'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,rad_sep_23_6[1])
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,rad_sep_23_6[1])
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'Impact Parameter b (kpc)'
		var_prp_hdr_2    = 'SKP'#'SAS'
		xticks_values_2  = [5,50, 100, 150, 200]
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_2 == 'magi' and n_int_spt_2 == 0:# in specfile_glx:
		splt_smpl_sfx_f2 = 'magi_F'
		splt_smpl_sfx_2  = '_magi'
		splt_smpl_unt_2  = '$^{\\prime\\prime}$'
		splt_smpl_unl_2  = '$^{\\prime\\prime}$'
		plt_nme_prp_2    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv)
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'mag$_{i}$'
		var_prp_hdr_2    = 'magi'#'SAS'
		xticks_values_2  = np.arange(-100,100,0.25)
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]				
	elif int_typ_spl_2 == 'magi' and n_int_spt_2 == 1:# in specfile_glx:
		splt_smpl_sfx_f2 = 'magi_F'
		splt_smpl_sfx_2  = '_magi'
		splt_smpl_unt_2  = 'mag'
		splt_smpl_unl_2  = 'mag'
		plt_nme_prp_2    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv)
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'mag$_{i}$'
		var_prp_hdr_2    = 'magi'#'SAS'
		xticks_values_2  = np.arange(-100,100,0.25)
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]				
	elif int_typ_spl_2 == 'magi' and n_int_spt_2 == 2:# in specfile_glx:
		splt_smpl_sfx_f2 = 'magi_F'
		splt_smpl_sfx_2  = '_magi'
		splt_smpl_unt_2  = 'mag'
		splt_smpl_unl_2  = 'mag'
		plt_nme_prp_2    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_2)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_2)
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'mag$_{i}$'
		var_prp_hdr_2    = 'magi'#'SAS'
		xticks_values_2  = np.arange(-100,100,0.25)
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]				
	elif int_typ_spl_2 == 'magi' and n_int_spt_2 == 3:# in specfile_glx:
		splt_smpl_sfx_f2 = 'magi_F'
		splt_smpl_sfx_2  = '_magi'
		splt_smpl_unt_2  = 'mag'
		splt_smpl_unl_2  = 'mag'
		plt_nme_prp_2    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_3)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_3)
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'mag$_{i}$'
		var_prp_hdr_2    = 'magi'#'SAS'
		xticks_values_2  = np.arange(-100,100,0.25)
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]				
	elif int_typ_spl_2 == 'magi' and n_int_spt_2 == 4:# in specfile_glx:
		splt_smpl_sfx_f2 = 'magi_F'
		splt_smpl_sfx_2  = '_magi'
		splt_smpl_unt_2  = 'mag'
		splt_smpl_unl_2  = 'mag'
		plt_nme_prp_2    = 'magi'
		slc_sep_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,magi_itv_23_4)
		slc_sep_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,magi_itv_23_4)
		slc_int_fg_2     = slc_sep_int_fg[1]
		slc_int_bg_2     = slc_sep_int_bg[1]
		xlabel_2         = 'mag$_{i}$'
		var_prp_hdr_2    = 'magi'#'SAS'
		xticks_values_2  = np.arange(-100,100,0.25)
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]				
	elif int_typ_spl_2 == 'phi' and n_int_spt_2 == 0:# in specfile_glx:
		splt_smpl_sfx_f2 = 'PHI'
		splt_smpl_sfx_2  = '-phi'
		splt_smpl_unt_2  = 'deg'
		splt_smpl_unl_2  = 'deg'
		plt_nme_prp_2    = 'PHI'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv)
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr_2    = 'PHI'#'SAS'
		xticks_values_2  = np.arange(-10,100,10) #xticks_values_1  [0,100]
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_2 == 'phi'  and n_int_spt_2 == 2:# in specfile_glx:
		splt_smpl_sfx_f2 = 'PHI'
		splt_smpl_sfx_2  = '-phi'
		splt_smpl_unt_2  = 'deg'
		splt_smpl_unl_2  = 'deg'
		plt_nme_prp_2    = 'PHI'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv_23_2)			
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr_2    = 'PHI'#'SAS'
		xticks_values_2  = np.arange(-10,100,10) #xticks_values_1  [0,100]
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_2 == 'phi'  and n_int_spt_2 == 3:# in specfile_glx:
		splt_smpl_sfx_f2 = 'PHI'
		splt_smpl_sfx_2  = '-phi'
		splt_smpl_unt_2  = 'deg'
		splt_smpl_unl_2  = 'deg'
		plt_nme_prp_2    = 'PHI'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,phi_itv_23_3)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,phi_itv_23_3)			
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$\phi$ [$^{\circ}$]'
		var_prp_hdr_2    = 'PHI'#'SAS'
		xticks_values_2  = np.arange(-10,100,10) #xticks_values_1  [0,100]
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]	
	elif int_typ_spl_2 == 'icl_fg' and n_int_spt_2 == 0:# in specfile_glx:
		splt_smpl_sfx_f2 = 'q_F'
		splt_smpl_sfx_2  = '-icl'
		splt_smpl_unt_2  = 'deg'
		splt_smpl_unl_2  = 'deg'
		plt_nme_prp_2    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv)
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$q$'
		var_prp_hdr_2    = 'q'#'SAS'
		xticks_values_2  = np.arange(-1,1,0.1)
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_2 == 'icl_fg' and n_int_spt_2 == 2:# in specfile_glx:
		splt_smpl_sfx_f2 = 'q_F'
		splt_smpl_sfx_2  = '-icl'
		splt_smpl_unt_2  = 'deg'
		splt_smpl_unl_2  = 'deg'
		plt_nme_prp_2    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv_23_2)
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$q$'
		var_prp_hdr_2    = 'q'#'SAS'
		xticks_values_2  = np.arange(-1,1,0.1)
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]	
	elif int_typ_spl_2 == 'icl_fg' and n_int_spt_2 == 3:# in specfile_glx:
		splt_smpl_sfx_f2 = 'q_F'
		splt_smpl_sfx_2  = '-icl'
		splt_smpl_unt_2  = 'deg'
		splt_smpl_unl_2  = 'deg'
		plt_nme_prp_2    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv_23_3)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv_23_3)
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$q$'
		var_prp_hdr_2    = 'q'#'SAS'
		xticks_values_2  = np.arange(-1,1,0.1)
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_2 == 'icl_fg' and n_int_spt_2 == 4:# in specfile_glx:
		splt_smpl_sfx_f2 = 'q_F'
		splt_smpl_sfx_2  = '-icl'
		splt_smpl_unt_2  = 'deg'
		splt_smpl_unl_2  = 'deg'
		plt_nme_prp_2    = 'q'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,icl_itv_23_4)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,icl_itv_23_4)			
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$q$'
		var_prp_hdr_2    = 'q'#'SAS'
		xticks_values_2  = np.arange(-1,1,0.1)
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_2 == 'n_sersic_fg' and n_int_spt_2 == 0:# in specfile_glx:
		splt_smpl_sfx_f2 = 'n_F'
		splt_smpl_sfx_2  = '-n_srs'
		splt_smpl_unt_2  = 'n'
		splt_smpl_unl_2  = 'n'
		plt_nme_prp_2    = 'n_srs'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,n_srs_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,n_srs_itv)
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = 'n'
		var_prp_hdr_2    = 'nsr'#'SAS'
		xticks_values_2  = np.arange(-1,3,0.25)
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_2 == 'n_sersic_fg'  and n_int_spt_2 == 2:# in specfile_glx:
		splt_smpl_sfx_f2 = 'n_F'
		splt_smpl_sfx_2  = '-n_srs'
		splt_smpl_unt_2  = 'n'
		splt_smpl_unl_2  = 'n'
		plt_nme_prp_2    = 'n_srs'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,n_srs_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,n_srs_itv_23_2)			
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = 'n'
		var_prp_hdr_2    = 'nsr'#'SAS'
		xticks_values_2  = np.arange(-1,3,0.25)
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_2 == 'r_eff_fg' and n_int_spt_2 == 0:# in specfile_glx:
		splt_smpl_sfx_f2 = 're_F'
		splt_smpl_sfx_2  = '-r_eff'
		splt_smpl_unt_2  = 'arcsec'
		splt_smpl_unl_2  = 'arcsec'
		plt_nme_prp_2    = 'r_eff'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv)
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]  
		xlabel_2         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr_2    = 'ref'#'SAS'
		xticks_values_2  = np.arange(-1,50,0.5)
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_2 == 'r_eff_fg'  and n_int_spt_2 == 2:# in specfile_glx:
		splt_smpl_sfx_f2 = 're_F'
		splt_smpl_sfx_2  = '-r_eff'
		splt_smpl_unt_2  = 'arcsec'
		splt_smpl_unl_2  = 'arcsec'
		plt_nme_prp_2    = 'r_eff'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv_23_2)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv_23_2)			
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr_2    = 'ref'#'SAS'
		xticks_values_2  = np.arange(-1,50,0.5)
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]		
	elif int_typ_spl_2 == 'r_eff_fg'  and n_int_spt_2 == 3:# in specfile_glx:
		splt_smpl_sfx_f2 = 're_F'
		splt_smpl_sfx_2  = '-r_eff'
		splt_smpl_unt_2  = 'arcsec'
		splt_smpl_unl_2  = 'arcsec'
		plt_nme_prp_2    = 'r_eff'
		slc_mss_int_fg   = Def_Sub_Dirs_Slice_all(frg_ind_plt,r_eff_itv_23_3)
		slc_mss_int_bg   = Def_Sub_Dirs_Slice_all(bkg_ind_plt,r_eff_itv_23_3)			
		slc_int_fg_2     = slc_mss_int_fg[1]
		slc_int_bg_2     = slc_mss_int_bg[1]
		xlabel_2         = '$r_{\mathrm{eff}}$ [kpc]'
		var_prp_hdr_2    = 'ref'#'SAS'
		xticks_values_2  = np.arange(-1,50,0.5)
		yticks_values_2  = np.arange(0,30,0.5)  #[0.1,0.5,1,3]					
	else:
		print
		print (colored('Such combination (1st-split) does not exist!','yellow'))
		print (colored('Variable: '+str(int_typ_spl_1)+', # bins: '+str(n_int_spt_1),'yellow'))
		print
		quit()
	####

	############CHECK NUMBER OF BINS############
	if (lower_shift_1+upper_shift_1)>=len(slc_int_bg_1):
		print
		print colored('Upper and Lower shifts larger than number of bins for: ' + int_typ_spl_1+ '!''yellow')
		print colored('Number of bins       : ' + str(len(slc_int_bg_1)),'yellow')
		print colored('Number of slices     : ' + str(n_int_spt_1),'yellow')
		print colored('Lower & Upper shifts : ' + str(lower_shift_1)+' - '+str(upper_shift_1),'yellow')
		print colored('Check: lower_shift & upper_shift parameters','yellow')
		print
		quit()
	else:
		print
		print colored('Correct lower and upper shifts for bins for: ' + int_typ_spl_1+ '!','yellow')
		print colored('Number of bins       : ' + str(len(slc_int_bg_1)),'yellow')
		print colored('Number of slices     : ' + str(n_int_spt_1),'yellow')
		print colored('Lower & Upper shifts : ' + str(lower_shift_1)+' - '+str(upper_shift_1),'yellow')
		print
		pass


	if (lower_shift_2+upper_shift_2)>len(slc_int_bg_2):
		print
		print colored('Upper and Lower shifts larger than number of bins for ' + int_typ_spl_2+ '!','yellow')
		print colored('Number of bins       : ' + str(len(slc_int_bg_2)),'yellow')
		print colored('Number of slices     : ' + str(n_int_spt_2),'yellow')
		print colored('Lower & Upper shifts : ' + str(lower_shift_2)+' - '+str(upper_shift_2),'yellow')
		print colored('Check: lower_shift & upper_shift parameters','yellow')
		print
		quit()
	else:
		print
		print colored('Correct lower and upper shifts for ' + int_typ_spl_2+ '!','yellow')
		print colored('Number of bins       : ' + str(len(slc_int_bg_2)),'yellow')
		print colored('Number of slices     : ' + str(n_int_spt_2),'yellow')
		print colored('Lower & Upper shifts : ' + str(lower_shift_2)+' - '+str(upper_shift_2),'yellow')
		print
		pass
	############CHECK NUMBER OF BINS############	
	FILES_M =[]
	FILES_A =[]

	for element,a in  enumerate(itertools.product(range(lower_shift_1,len(slc_int_fg_1)-upper_shift_1),range(lower_shift_2,len(slc_int_fg_2)-upper_shift_2))):
		#print element,a
		index_int_1 = a[0]
		index_int_2 = a[1]
		print element,slc_int_fg_1[index_int_1],slc_int_fg_2[index_int_2]
		ini_fg_spc_m  = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-' + splt_smpl_sfx_f1 +'-'+str(slc_int_fg_1[index_int_1]) +'-ss-' + splt_smpl_sfx_f2 +'-'+str(slc_int_fg_2[index_int_2]) + '-stk-med'+str(stk_function)+'.fits'
		ini_fg_spc_a  = res_stk_res + 'P_Fg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-' + splt_smpl_sfx_f1 +'-'+str(slc_int_fg_1[index_int_1]) +'-ss-' + splt_smpl_sfx_f2 +'-'+str(slc_int_fg_2[index_int_2]) + '-stk-avg'+str(stk_function)+'.fits'
		ini_bg_spc_m  = res_stk_res + 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-' + splt_smpl_sfx_f1 +'-'+str(slc_int_fg_1[index_int_1]) +'-ss-' + splt_smpl_sfx_f2 +'-'+str(slc_int_fg_2[index_int_2]) + '-stk-med'+str(stk_function)+'.fits'
		ini_bg_spc_a  = res_stk_res + 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-' + splt_smpl_sfx_f1 +'-'+str(slc_int_fg_1[index_int_1]) +'-ss-' + splt_smpl_sfx_f2 +'-'+str(slc_int_fg_2[index_int_2]) + '-stk-avg'+str(stk_function)+'.fits'


		print
		print ini_fg_spc_m
		print ini_fg_spc_a
		print
		print ini_bg_spc_m
		print ini_bg_spc_a
		FILES_M.append(ini_bg_spc_m)
		FILES_A.append(ini_bg_spc_a)

	####

	print
	print colored('Intervals to be plotted: ','yellow')
	print colored('Indices : '+str(range(lower_shift_1,len(slc_int_bg_1)-upper_shift_1)),'yellow')
	print colored('Indices : '+str(range(lower_shift_2,len(slc_int_bg_2)-upper_shift_2)),'yellow')
	print

	if mlt_stk_fct == 'med':
		stk_function_file = 'med-c'
		
	elif mlt_stk_fct == 'avg':
		stk_function_file = 'avg-c'
		
	elif mlt_stk_fct == 'both':
		stk_function_file = 'med-avg'

	print
	print colored('EW from spectra files: ','yellow')
	if mlt_stk_fct == 'med':#stk_function_m == True :
		pass
		print
		print colored("\n".join([FILE for FILE in FILES_M]),'blue')
		print
	elif mlt_stk_fct == 'avg':#stk_function_a == True :
		pass
		print colored("\n".join([FILE for FILE in FILES_A]),'red')
		print
		print
	elif mlt_stk_fct == 'both':#stk_function_b	== True:
		pass
		print
		print colored("\n".join([FILE for FILE in FILES_M]),'blue')
		print
		print colored("\n".join([FILE for FILE in FILES_A]),'red')
		print
		print
	else:
		pass

	print colored('Reshaping filename array.','yellow')
	print colored('Split by: ' + int_typ_spl_1 + ' in # bins: ' +str(n_int_spt_1) ,'yellow')
	print colored("\n".join([str(FILE) for FILE in slc_int_fg_1]),'yellow')
	print
	print colored('Split by: ' + int_typ_spl_2 + ' in # bins: ' +str(n_int_spt_2) ,'yellow')
	print colored("\n".join([str(FILE) for FILE in slc_int_fg_2[lower_shift_2:(len(slc_int_fg_2)-upper_shift_2)]]),'yellow')
	print
	print colored('EW from spectra files: ','yellow')
	if mlt_stk_fct == 'med':
		FILES_M_AUX = np.reshape(FILES_M, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
		B_FLAG = (FILES_M_AUX[0][0].split('ss-zf_B-')[1]).rsplit('-ss-zf_F-')[0]
		F_FLAG = (FILES_M_AUX[0][0].split('ss-zf_F-')[1]).rsplit('-ss-'+int_typ_spl_1+'-')[0]
		pass
		print
		print colored("\n".join([FILE for FILE in FILES_M]),'blue')
		print

		try:
			plt_sufix_fnm = ((FILES_M_AUX[0][0].split('/')[-1])).rsplit(int_typ_spl_1)[0] + int_typ_spl_1 + '-' + str((n_int_spt_1)) + '-' +int_typ_spl_2 +'-' + str((n_int_spt_2)) #slc_int_fg_1[lower_shift_1] +'-' +slc_int_fg_1[len(slc_int_bg_2[0])-upper_shift_2-1]
			PLOT_TITLE    = 'z_Bg: ' + B_FLAG + ', z_Fg:' + F_FLAG + ', bins: ' +  int_typ_spl_1 + ': ' + str((n_int_spt_1)) + ', ' +int_typ_spl_2 +': ' + str((n_int_spt_2))#+ '-' + str(slc_int_fg_1[1][len(slc_int_bg_2[0])-upper_shift_2-1]) 
		except IndexError:
			plt_sufix_fnm = ((FILES_M_AUX[0][0].split('/')[-1])).rsplit(int_typ_spl_1)[0] + int_typ_spl_1 + '-' + str((n_int_spt_1)) + '-' +int_typ_spl_2 +'-' + str((n_int_spt_2)) #slc_int_fg_1[lower_shift_1] +'-' +slc_int_fg_1[len(slc_int_bg_2)-upper_shift_2-1]
			PLOT_TITLE    = 'z_Bg: ' + B_FLAG + ', z_Fg:' + F_FLAG + ', bins: ' +  int_typ_spl_1 + ': ' + str((n_int_spt_1)) + ', ' +int_typ_spl_2 +': ' + str((n_int_spt_2))#+ '-' + str(slc_int_fg_1[1][len(slc_int_bg_2)-upper_shift_2-1]) 


		print
		print plt_sufix_fnm
		print PLOT_TITLE
		print				
	elif mlt_stk_fct == 'avg':
		FILES_A_AUX = np.reshape(FILES_A, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#n_int_spt_2))
		B_FLAG = (FILES_A_AUX[0][0].split('ss-zf_B-')[1]).rsplit('-ss-zf_F-')[0]
		F_FLAG = (FILES_A_AUX[0][0].split('ss-zf_F-')[1]).rsplit('-ss-'+int_typ_spl_1+'-')[0]				
		pass
		print colored("\n".join([FILE for FILE in FILES_A]),'red')
		print
		print
		try:
			plt_sufix_fnm = ((FILES_A_AUX[0][0].split('/')[-1])).rsplit(int_typ_spl_1)[0] + int_typ_spl_1 + '-' + str((n_int_spt_1)) + '-' +int_typ_spl_2 +'-' + str((n_int_spt_2)) #slc_int_fg_1[lower_shift_1] +'-' +slc_int_fg_1[len(slc_int_bg_2[0])-upper_shift_2-1]
			PLOT_TITLE    = 'z_Bg: ' + B_FLAG + ', z_Fg:' + F_FLAG + ', bins: ' +  int_typ_spl_1 + ': ' + str((n_int_spt_1)) + ', ' +int_typ_spl_2 +': ' + str((n_int_spt_2))#+ '-' + str(slc_int_fg_1[1][len(slc_int_bg_2[0])-upper_shift_2-1]) 
		except IndexError:
			plt_sufix_fnm = ((FILES_A_AUX[0][0].split('/')[-1])).rsplit(int_typ_spl_1)[0] + int_typ_spl_1 + '-' + str((n_int_spt_1)) + '-' +int_typ_spl_2 +'-' + str((n_int_spt_2)) #slc_int_fg_1[lower_shift_1] +'-' +slc_int_fg_1[len(slc_int_bg_2)-upper_shift_2-1]
			PLOT_TITLE    = 'z_Bg: ' + B_FLAG + ', z_Fg:' + F_FLAG + ', bins: ' +  int_typ_spl_1 + ': ' + str((n_int_spt_1)) + ', ' +int_typ_spl_2 +': ' + str((n_int_spt_2))#+ '-' + str(slc_int_fg_1[1][len(slc_int_bg_2)-upper_shift_2-1]) 
		print
		print plt_sufix_fnm
		print PLOT_TITLE
		print		
	elif mlt_stk_fct == 'both':
		FILES_M_AUX = np.reshape(FILES_M,  (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#n_int_spt_2)) (n_int_spt_1,n_int_spt_2))#lower_shift,len(slc_int_bg)-upper_shift
		FILES_A_AUX = np.reshape(FILES_A,  (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#n_int_spt_2)) (n_int_spt_1,n_int_spt_2))#lower_shift,len(slc_int_bg)-upper_shift
		B_FLAG = (FILES_M_AUX[0][0].split('ss-zf_B-')[1]).rsplit('-ss-zf_F-')[0]
		F_FLAG = (FILES_M_AUX[0][0].split('ss-zf_F-')[1]).rsplit('-ss-'+int_typ_spl_1+'-')[0]				
		pass
		print
		print colored("\n".join([FILE for FILE in FILES_M]),'blue')
		print
		print colored("\n".join([FILE for FILE in FILES_A]),'red')
		print
		print
		try:
			plt_sufix_fnm = ((FILES_M_AUX[0][0].split('/')[-1])).rsplit(int_typ_spl_1)[0] + int_typ_spl_1 + '-' + str((n_int_spt_1)) + '-' +int_typ_spl_2 +'-' + str((n_int_spt_2)) #slc_int_fg_1[lower_shift_1] +'-' +slc_int_fg_1[len(slc_int_bg_2[0])-upper_shift_2-1]
			PLOT_TITLE    = 'z_Bg: ' + B_FLAG + ', z_Fg:' + F_FLAG + ', bins: ' +  int_typ_spl_1 + ': ' + str((n_int_spt_1)) + ', ' +int_typ_spl_2 +': ' + str((n_int_spt_2))#+ '-' + str(slc_int_fg_1[1][len(slc_int_bg_2[0])-upper_shift_2-1]) 
		except IndexError:
			plt_sufix_fnm = ((FILES_M_AUX[0][0].split('/')[-1])).rsplit(int_typ_spl_1)[0] + int_typ_spl_1 + '-' + str((n_int_spt_1)) + '-' +int_typ_spl_2 +'-' + str((n_int_spt_2)) #slc_int_fg_1[lower_shift_1] +'-' +slc_int_fg_1[len(slc_int_bg_2)-upper_shift_2-1]
			PLOT_TITLE    = 'z_Bg: ' + B_FLAG + ', z_Fg:' + F_FLAG + ', bins: ' +  int_typ_spl_1 + ': ' + str((n_int_spt_1)) + ', ' +int_typ_spl_2 +': ' + str((n_int_spt_2))#+ '-' + str(slc_int_fg_1[1][len(slc_int_bg_2)-upper_shift_2-1]) 
		print
		print plt_sufix_fnm
		print PLOT_TITLE
		print		
	else:
		pass

	print
	print colored('Background Redshift Flag: '+str(B_FLAG),'yellow')
	print colored('Foreground Redshift Flag: '+str(F_FLAG),'yellow')
	print

	MSK_NTMS=2.5
	index_line_color = -1
	pts_line_ALL_A = []
	pts_line_ALL_M = []
	lbl_line_ALL_A = []
	lbl_line_ALL_M = []

	mrk_line_ALL = []
	clr_line_ALL = []


	LINES_NEW = np.asarray(LINES[0][:]*(1+z_glx_Ps))
	INDXS_NEW = np.where(np.logical_and(LINES_NEW>=lmb_min, LINES_NEW<=lmb_max))
	LENIN_NEW  =len(INDXS_NEW[0])

	print
	print len(INDXS_NEW[0])
	print
	if lbl_col_idv == True:
		i=1
		while (len(INDXS_NEW[0]) / i) != empty_plots:
			print 'while',i, (len(INDXS_NEW[0]) / i )
			i +=1
		nmb_cols = i
	elif lbl_col_idv == False:
		nmb_cols = 4
		nmb_cols   = kwargs.get('nmb_cols',4)

	nmb_rows = LENIN_NEW/nmb_cols
	nmb_rows = int(np.ceil(float(LENIN_NEW)/float(nmb_cols)))
	print
	print colored('Number of cols & rows : ' + str(nmb_cols)+','+str(nmb_rows),'yellow')
	print colored('Total number of panels: ' + str(nmb_cols*nmb_rows),'yellow')
	print colored('Total number of lines : ' + str(len(INDXS_NEW[0])),'yellow')
	print colored('Total empty panels    : ' + str(abs(len(INDXS_NEW[0])-nmb_cols*nmb_rows)),'yellow')
	print colored('Total empty plots     : ' + str(empty_plots),'yellow')
	print
	print colored('Getting Median Values for Subsamples split by: ' + int_typ_spl_2 + '_MED','cyan')
	print colored('From Stacked spectra Header: ' + var_prp_hdr_2+'_MED','cyan')
	print

	if landscape_plt == True:
		fxsize=11*1.5            #16 *nmb_cols
		fysize=8#*nmb_rows       #16 *nmb_rows
	else:
		fysize=11*1.5            #16 *nmb_cols
		fxsize=8#*nmb_rows       #16 *nmb_rows
	f = plt.figure(num=None, figsize=(fxsize, fysize), dpi=180, facecolor='w',
		edgecolor='k')
	plt.subplots_adjust(
		left 	= (34/25.4)/fxsize,     #22-def --> 26 bigger
		bottom 	= (30/25.4)/fysize,     #19-def --> 20 bigger
		right 	= 1 - (8/25.4)/fxsize,  # 2-def --> 6  bigger
		top 	= 1 - (4/25.4)/fysize)  # 4-def --> 8  bigger
	plt.subplots_adjust(hspace=0.18,wspace=0.30)

	f.add_subplot(111, frameon=False)
	#plt.frameon=False
	plt.tick_params(labelcolor='none', top=False, bottom=False, left=False, right=False)
	plt.xlabel(xlabel_2       ,labelpad=25,fontsize=38, family = 'serif', ha='center')
	#plt.ylabel('Rest Equivalent Width W$_0$ ($\AA$)',labelpad=25,fontsize=38, va='center', rotation='vertical')
	plt.ylabel('W$_0$ ($\AA$)',labelpad=45,fontsize=38, family = 'serif', va='center', rotation='vertical')

	gs0 = gridspec.GridSpec(nmb_rows,nmb_cols)
	MSK_NTMS     = 2.5
	MSK_NTMS_PLT = 1.5

	colors = "rgbcmykw"
	markers_mpl   = ['o', '*', 's'] #['o', '*', 's']
	markers_uni_e = [u'\u25CB' , u'\u2606',u'\u25A1']#E
	markers_uni_f = [u'\u25CF' , u'\u2605',u'\u25A0']#F

	if lbl_col_idv == True or (lbl_col_idv == False and nmb_cols==2):
		from matplotlib.lines import Line2D
		pass
		print -empty_plots-1
		print -empty_plots
		print -empty_plots+1
		#quit()


		ax110 = plt.Subplot(f, gs0[-empty_plots-1])
		f.add_subplot(ax110)
		ax110.axis('off')

		ax120 = plt.Subplot(f, gs0[-empty_plots])
		f.add_subplot(ax120)
		ax120.axis('off')
		[ax120.annotate('['+str(slc_int_fg_2 [interval_range] + '] ' + splt_smpl_unt_2), (0.05, 0.8 - (subsmpl*0.15)),xytext=((0.15, 0.8 - (subsmpl*0.15))),
						arrowprops=dict(arrowstyle = '-',fc='k',ec='k',relpos=(0.5, 0.5),lw=2.5),
						xycoords='axes fraction', fontsize=18, va='center') for subsmpl,interval_range in enumerate(range(lower_shift_2,len(slc_int_bg_2)-upper_shift_2))]

		ax130 = plt.Subplot(f, gs0[-empty_plots+1])
		f.add_subplot(ax130)
		ax130.axis('off')

		#25CB EMPTY  CIRCLE UNICODE
		#25CF FILLED CIRCLE UNICODE
		if mlt_stk_fct == 'avg'and cln_snr_aux == False:
			[ax110.annotate(markers_uni_f[subsmpl]+'['+str(slc_int_fg_1 [interval_range] + '] ' + splt_smpl_unt_1), (0.05, 0.8 - (subsmpl*0.15)),xytext=((0.15, 0.8 - (subsmpl*0.15))),
							#arrowprops=dict(arrowstyle = '-',fc='k',ec='k',relpos=(0.5, 0.5),lw=2.5),
							xycoords='axes fraction', fontsize=18, family='serif', va='center') for subsmpl,interval_range in enumerate(range(lower_shift_1,len(slc_int_bg_1)-upper_shift_1))]
			ax130.annotate(u'\u25CF' + ' avg', (0.15, 0.8 - (0.15)),xytext=((0.25, 0.8 - (0.15))),color = 'red'  ,
							#arrowprops=dict(arrowstyle = '-' ,fc='red' ,ec='r',relpos=(0.5, 0.5),lw=2.5,ls='-' ),
							xycoords='axes fraction', fontsize=18, family='serif', va='center')
		elif mlt_stk_fct == 'med'and cln_snr_aux == False:
			[ax110.annotate(markers_uni_e[subsmpl]+'['+str(slc_int_fg_1 [interval_range] + '] ' + splt_smpl_unt_1), (0.05, 0.8 - (subsmpl*0.15)),xytext=((0.15, 0.8 - (subsmpl*0.15))),
							#arrowprops=dict(arrowstyle = '-',fc='k',ec='k',relpos=(0.5, 0.5),lw=2.5),
							xycoords='axes fraction', fontsize=18, family='serif', va='center') for subsmpl,interval_range in enumerate(range(lower_shift_1,len(slc_int_bg_1)-upper_shift_1))]
			ax130.annotate(u'\u25CB' + ' med', (0.15, 0.8 - (0.35)),xytext=((0.25, 0.8 - (0.35))),color = 'blue' ,
							#arrowprops=dict(arrowstyle = '-' ,fc='blue',ec='b',relpos=(0.5, 0.5),lw=2.5,ls='-.'),
							xycoords='axes fraction', fontsize=18, family='serif', va='center')
		elif mlt_stk_fct == 'both'and cln_snr_aux == False:
			[ax110.annotate(markers_uni_f[subsmpl]+ '-' + markers_uni_e[subsmpl] +'['+str(slc_int_fg_1 [interval_range] + '] ' + splt_smpl_unt_1), (0.05, 0.8 - (subsmpl*0.15)),xytext=((0.15, 0.8 - (subsmpl*0.15))),
							#arrowprops=dict(arrowstyle = '-',fc='k',ec='k',relpos=(0.5, 0.5),lw=2.5),
							xycoords='axes fraction', fontsize=18, family='serif', va='center') for subsmpl,interval_range in enumerate(range(lower_shift_1,len(slc_int_bg_1)-upper_shift_1))]
			ax130.annotate(u'\u25CF' + ' avg', (0.15, 0.8 - (0.15)),xytext=((0.25, 0.8 - (0.15))),color = 'red'  ,
							#arrowprops=dict(arrowstyle = '-' ,fc='red' ,ec='r',relpos=(0.5, 0.5),lw=2.5,ls='-' ),
							xycoords='axes fraction', fontsize=18, family='serif', va='center')
			ax130.annotate(u'\u25CB' + ' med', (0.15, 0.8 - (0.35)),xytext=((0.25, 0.8 - (0.35))),color = 'blue' ,
							#arrowprops=dict(arrowstyle = '-' ,fc='blue',ec='b',relpos=(0.5, 0.5),lw=2.5,ls='-.'),
							xycoords='axes fraction', fontsize=18, family='serif', va='center')

		elif mlt_stk_fct == 'avg'and cln_snr_aux == True:
			[ax110.annotate(markers_uni_f[subsmpl]+'['+str(slc_int_fg_1 [interval_range] + '] ' + splt_smpl_unt_1), (0.05, 0.8 - (subsmpl*0.15)),xytext=((0.15, 0.8 - (subsmpl*0.15))),
							#arrowprops=dict(arrowstyle = '-',fc='k',ec='k',relpos=(0.5, 0.5),lw=2.5),
							xycoords='axes fraction', fontsize=18, family='serif', va='center') for subsmpl,interval_range in enumerate(range(lower_shift_1,len(slc_int_bg_1)-upper_shift_1))]
			ax130.annotate(u'\u25CF' + ' avg', (0.15, 0.8 - (0*0.15)),xytext=((0.05, 0.8 - (0*0.15))),color = 'red'  ,
							#arrowprops=dict(arrowstyle = '-' ,fc='red' ,ec='r',relpos=(0.5, 0.5),lw=2.5,ls='-' ),
							xycoords='axes fraction', fontsize=18, family='serif', va='center')
		elif mlt_stk_fct == 'med'and cln_snr_aux == True:
			[ax110.annotate(markers_uni_e[subsmpl]+'['+str(slc_int_fg_1 [interval_range] + '] ' + splt_smpl_unt_1), (0.05, 0.8 - (subsmpl*0.15)),xytext=((0.15, 0.8 - (subsmpl*0.15))),
							#arrowprops=dict(arrowstyle = '-',fc='k',ec='k',relpos=(0.5, 0.5),lw=2.5),
							xycoords='axes fraction', fontsize=18, family='serif', va='center') for subsmpl,interval_range in enumerate(range(lower_shift_1,len(slc_int_bg_1)-upper_shift_1))]
			ax130.annotate(u'\u25CB' + ' med', (0.15, 0.8 - (0*0.15)),xytext=((0.05, 0.8 - (0*0.15))),color = 'blue' ,
							#arrowprops=dict(arrowstyle = '-' ,fc='blue',ec='b',relpos=(0.5, 0.5),lw=2.5,ls='-.'),
							xycoords='axes fraction', fontsize=18, family='serif', va='center')
		elif mlt_stk_fct == 'both'and cln_snr_aux == True:
			[ax110.annotate(markers_uni_f[subsmpl] + '-' + markers_uni_e[subsmpl] +'['+str(slc_int_fg_1 [interval_range] + '] ' + splt_smpl_unt_1), (0.05, 0.8 - (subsmpl*0.15)),xytext=((0.05, 0.8 - (subsmpl*0.15))),
							#arrowprops=dict(arrowstyle = '-',fc='k',ec='k',relpos=(0.5, 0.5),lw=2.5),
							xycoords='axes fraction', fontsize=18, family='serif', va='center') for subsmpl,interval_range in enumerate(range(lower_shift_1,len(slc_int_bg_1)-upper_shift_1))]
			[ax130.annotate(markers_uni_f[subsmpl] + '-' + markers_uni_f[subsmpl+1] + ' avg', (0.15, 0.8 - (0.15)),xytext=((0.05 + (subsmpl*0.05), 0.8 - (subsmpl*0.15))),color = 'red'  ,
							#arrowprops=dict(arrowstyle = '-' ,fc='red' ,ec='r',relpos=(0.5, 0.5),lw=2.5,ls='-' ),
							xycoords='axes fraction', fontsize=18, family='serif', va='center') for subsmpl,interval_range in enumerate(range(lower_shift_1,len(slc_int_bg_1)-upper_shift_1-1))]
			[ax130.annotate(markers_uni_e[subsmpl] + '-' + markers_uni_e[subsmpl+1] + ' med', (0.15, 0.8 - (0.15)),xytext=((0.05 + (subsmpl*0.05), 0.65 - (subsmpl*0.15))),color = 'blue' ,
							#arrowprops=dict(arrowstyle = '-' ,fc='blue',ec='b',relpos=(0.5, 0.5),lw=2.5,ls='-.'),
							xycoords='axes fraction', fontsize=18, family='serif', va='center') for subsmpl,interval_range in enumerate(range(lower_shift_1,len(slc_int_bg_1)-upper_shift_1-1))]
			ax130.annotate(u'\u2022' + ' ' + str(cln_snr_thr) + '$\leqslant$ SNR <' + str(cln_snr_th2), (0.15, 0.8 - (0.15)),xytext=((0.05, 0.50)),color = 'black'  ,
							#arrowprops=dict(arrowstyle = '-' ,fc='red' ,ec='r',relpos=(0.5, 0.5),lw=2.5,ls='-' ),
							xycoords='axes fraction', fontsize=18, family='serif', va='center')

		else:
			pass


	elif (lbl_col_idv == False and nmb_cols>2):
		print [f.text(0.60+(subsmpl*0.1), 0.02, '   - ' + '['+str(slc_int_fg [interval_range] + '] '+ splt_smpl_unt)  ,fontsize=24, ha='left',color=colors[subsmpl]) for subsmpl,interval_range in enumerate(range(lower_shift,len(slc_int_bg)-upper_shift))]

	#############LINE PER LINE#############
	for j,lines in enumerate(INDXS_NEW[0]):
		print
		print colored('Getting Median Values for Subsamples split by: ' + int_typ_spl_2 + '_MED','cyan')
		print colored('From Stacked spectra Header: ' + var_prp_hdr_2+'_MED','cyan')
		print

		min_y_ind_spec = []
		max_y_ind_spec = []		
		print
		print colored('Line: ','yellow')
		print colored(LINES[4][lines]+' '+str(LINES[0][lines]),'yellow')
		print
		lmb_min_lim_line_ft = LINES[0][lines] - MSK_NTMS*LINES[1][lines]
		lmb_max_lim_line_ft = LINES[0][lines] + MSK_NTMS*LINES[1][lines]

		lmb_min_lim_line = LINES[0][lines]*(1+z_glx_Ps) - MSK_NTMS_PLT*LINES[2][lines]
		lmb_max_lim_line = LINES[0][lines]*(1+z_glx_Ps) + MSK_NTMS_PLT*LINES[2][lines]
		
		ax110 = plt.Subplot(f, gs0[j])
		f.add_subplot(ax110)

		ax110.set_rasterization_zorder(1)
		plt.autoscale(enable=True, axis='both', tight=False)
		plt.autoscale(enable=True, axis='y', tight=False)
		#ax110.set_title(PLOT_TITLE)
		xticklabels = ax110.get_xticklabels()
		plt.setp(xticklabels, visible=True,family='serif')
		yticklabels = ax110.get_yticklabels()
		plt.setp(yticklabels, visible=True,family='serif')
		ax110.yaxis.set_tick_params(which='both',labelsize=18,direction='in',color='black',bottom=True,top=True,left=True,right=True)
		ax110.xaxis.set_tick_params(which='both',labelsize=18,direction='in',color='black',bottom=True,top=True,left=True,right=True)

		#minorLocator_x   = plt.MultipleLocator(5)
		#majorLocator_x   = plt.MultipleLocator(10)
		###minorLocator_y   = plt.MultipleLocator(0.1)
		###majorLocator_y   = plt.MultipleLocator(0.5)
		#ax110.xaxis.set_minor_locator(minorLocator_x)
		#ax110.xaxis.set_major_locator(majorLocator_x)
		##ax110.yaxis.set_minor_locator(minorLocator_y)
		##ax110.yaxis.set_major_locator(majorLocator_y)
		plt.tick_params(which='both', width=0.7)
		plt.tick_params(which='major', length=5)
		plt.tick_params(which='minor', length=2)
		ax110.minorticks_on()

		ax110.yaxis.set_major_formatter(mticker.FormatStrFormatter('%.2f'))

		#plt.xlabel('$\lambda$',fontsize=28, family = 'serif')
		#plt.ylabel('F$_\lambda$ (ergs/sec/cm$^{2}/\AA$)',fontsize=28, family = 'serif')
		#plt.ylabel('F$_\lambda$',fontsize=28, family = 'serif')
	
		if mlt_stk_fct == 'med':#stk_function_m == True :
			try: 
				SPEC_POINTS_M_1    = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_M]
				SPEC_POINTS_M_2    = [Header_Get(spec_res_file,str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_M]
				SPEC_POINTS_M_3    = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_M]
				SPEC_POINTS_M_4    = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_M]
				SPEC_POINTS_M_5    = [Header_Get(spec_res_file,str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_M]
				SPEC_POINTS_M_6    = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_M]
				SPEC_POINTS_M_7    = [Header_Get(spec_res_file,str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_M]
				SPEC_POINTS_M_8    = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_M]
				SPEC_POINTS_M_9    = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_M]
				SPEC_POINTS_M_10   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_M]				
				SPEC_POINTS_NMB_M  = [Header_Get(spec_res_file,'STK_NUM') for spec_res_file in FILES_M]					

				SPEC_POINTS_M_SNR  = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU1'),0) for spec_res_file in FILES_M]
				SPEC_POINTS_M_SNR2 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU2'),0) for spec_res_file in FILES_M]
				SPEC_POINTS_M_SNR3 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU3'),0) for spec_res_file in FILES_M]
				SPEC_POINTS_M_SNR4 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU4'),0) for spec_res_file in FILES_M]
				SPEC_POINTS_M_SNR5 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNB2'),0) for spec_res_file in FILES_M]

				SPEC_POINTS_NMB2_M = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NHT') for spec_res_file in FILES_M]					
				SPEC_POINTS_NMB3_M = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NHW') for spec_res_file in FILES_M]					

				SPEC_POINTS_M_9    = np.reshape(SPEC_POINTS_M_9  , (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#n_int_spt_2)) (n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_NMB_M  = np.reshape(SPEC_POINTS_NMB_M, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))

				SPEC_POINTS_M_SNR  = np.reshape(SPEC_POINTS_M_SNR , (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_M_SNR2 = np.reshape(SPEC_POINTS_M_SNR2, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_M_SNR3 = np.reshape(SPEC_POINTS_M_SNR3, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_M_SNR4 = np.reshape(SPEC_POINTS_M_SNR4, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_M_SNR5 = np.reshape(SPEC_POINTS_M_SNR5, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))

				SPEC_POINTS_NMB2_M = np.reshape(SPEC_POINTS_NMB2_M, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_NMB3_M = np.reshape(SPEC_POINTS_NMB3_M, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))

				SPEC_SEP_VAR       = [Header_Get(spec_res_file,var_prp_hdr_2+'_MED') for spec_res_file in FILES_M]
				SPEC_SEP_VAR       = np.reshape(SPEC_SEP_VAR, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_SEP_VAR_M     = SPEC_SEP_VAR

				##############CLEANING NON FIT VALUES ##############
				print
				print colored('Deleting Unfitted bins!','yellow')
				print colored('From:','yellow')
				print colored('MED: '+str(SPEC_POINTS_M_9),'yellow')
				print

				indx_msk_uft_med = []
				[indx_msk_uft_med.append(np.where(np.asarray(pts_bin)==999999.99999)[0]) for j_indx_uft,(pts_bin) in enumerate(SPEC_POINTS_M_9)]
				print colored('MED-IDX: ','yellow')
				print colored([uft_bin_indx for uft_bin_indx in indx_msk_uft_med],'yellow')
				print
				print '***'
				print indx_msk_uft_med
				print len(indx_msk_uft_med)
				print '***'
				print

				if cln_uft_vls == True:#len(indx_msk_uft_med)>0 and 
					print colored('Points with FIT values (MED): ' + str(999999.99999) +' :','yellow')

					print colored('MED-IDX: ','yellow')
					print colored([uft_bin_indx for uft_bin_indx in indx_msk_uft_med],'yellow')

					print
					print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_M_9]
					print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_SEP_VAR_M]
					print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_NMB_M]
					print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_NMB2_M]
					print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_NMB3_M]
					print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_M_SNR]
					print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_M_SNR2]
					print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_M_SNR3]
					print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_M_SNR4]
					print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_M_SNR5]
					print

					SPEC_POINTS_M_9    = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_uft_med,SPEC_POINTS_M_9)]
					SPEC_SEP_VAR_M     = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_uft_med,SPEC_SEP_VAR_M)]

					SPEC_POINTS_NMB_M  = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_uft_med,SPEC_POINTS_NMB_M)]
					SPEC_POINTS_NMB2_M = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_uft_med,SPEC_POINTS_NMB2_M)]
					SPEC_POINTS_NMB3_M = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_uft_med,SPEC_POINTS_NMB3_M)]

					#SPEC_POINTS_M_SNR0 = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_uft_med,SPEC_POINTS_M_SNR0)]
					SPEC_POINTS_M_SNR  = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_uft_med,SPEC_POINTS_M_SNR)]

					SPEC_POINTS_M_SNR2 = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_uft_med,SPEC_POINTS_M_SNR2)]
					SPEC_POINTS_M_SNR3 = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_uft_med,SPEC_POINTS_M_SNR3)]
					SPEC_POINTS_M_SNR4 = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_uft_med,SPEC_POINTS_M_SNR4)]
					SPEC_POINTS_M_SNR5 = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_uft_med,SPEC_POINTS_M_SNR5)]

					print
					print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_M_9]
					print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_SEP_VAR_M]
					print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_NMB_M]
					print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_NMB2_M]
					print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_NMB3_M]
					print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_M_SNR]
					print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_M_SNR2]
					print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_M_SNR3]
					print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_M_SNR4]
					print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_M_SNR5]
					print					
				else:
					print colored('No Unfitted Values found (MED)!','yellow')
					print

				SPEC_POINTS_M_9_AUX    = SPEC_POINTS_M_9
				SPEC_SEP_VAR_M_AUX     = SPEC_SEP_VAR_M
				SPEC_POINTS_NMB_M_AUX  = SPEC_POINTS_NMB_M
				SPEC_POINTS_NMB2_M_AUX = SPEC_POINTS_NMB2_M
				SPEC_POINTS_NMB3_M_AUX = SPEC_POINTS_NMB3_M
				SPEC_POINTS_M_SNR_AUX  = SPEC_POINTS_M_SNR
				SPEC_POINTS_M_SNR2_AUX = SPEC_POINTS_M_SNR2
				SPEC_POINTS_M_SNR3_AUX = SPEC_POINTS_M_SNR3
				SPEC_POINTS_M_SNR4_AUX = SPEC_POINTS_M_SNR4
				SPEC_POINTS_M_SNR5_AUX = SPEC_POINTS_M_SNR5

				##############CLEANING NON FIT VALUES ##############
				if cln_snr_mth == 1:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					SPEC_POINTS_M_SNR0     = SPEC_POINTS_M_SNR
					SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR
				elif cln_snr_mth == 2:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					SPEC_POINTS_M_SNR0     = SPEC_POINTS_M_SNR2
					SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR2
				elif cln_snr_mth == 3:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					SPEC_POINTS_M_SNR0     = SPEC_POINTS_M_SNR3
					SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR3
				elif cln_snr_mth == 4:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					SPEC_POINTS_M_SNR0     = SPEC_POINTS_M_SNR4
					SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR4
				else:
					SPEC_POINTS_M_SNR0     = SPEC_POINTS_M_SNR
					SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR
					print
					print colored('SNR method: ' + str(cln_snr_mth) + ' does not exist!','yellow')
					print colored('Assuming SNR method: 1','yellow')
					print
				#############CLEANING LOW SNR EW POINTS#############
				if cln_pts_snr == True:
					indx_msk_snr_med = []

					[indx_msk_snr_med.append(np.where(np.asarray(snr_bin)<cln_snr_thr)[0]) for j_indx_snr,(snr_bin) in enumerate(SPEC_POINTS_M_SNR0)]

					print SPEC_POINTS_M_SNR0
					print SPEC_SEP_VAR_M
					print SPEC_POINTS_M_SNR0
					print indx_msk_snr_med
					print
					print colored('Cleaning points according their SNR!','yellow')
					print colored('From:','yellow')
					print colored('MED: ' + str(SPEC_POINTS_M_SNR0),'yellow')
					print colored('SNR Computation Method : ' + str(cln_snr_mth),'yellow')
					print colored('Threshold value        : ' + str(cln_snr_thr),'yellow')
					print
					print
					print colored('Points with SNR < ' + str(cln_snr_thr) +' :','yellow')
					print colored('MED-IDX: ','yellow')
					print colored([snr_bin_indx for snr_bin_indx in indx_msk_snr_med],'yellow')
					print colored('MED-VAL: ','yellow')
					print colored([pts_med_itr[snr_bin_indx] for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med,SPEC_POINTS_M_SNR0)],'yellow')
					print colored('Corresponding to ' + plt_nme_prp_2 +' points: ','yellow')
					print colored('MED-VAR: ','yellow')
					print colored([pts_med_itr[snr_bin_indx] for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med,SPEC_SEP_VAR_M)],'yellow')
					print

					SPEC_POINTS_M_9    = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med,SPEC_POINTS_M_9)]
					SPEC_SEP_VAR_M     = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med,SPEC_SEP_VAR_M)]

					SPEC_POINTS_NMB_M  = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med,SPEC_POINTS_NMB_M)]
					SPEC_POINTS_NMB2_M = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med,SPEC_POINTS_NMB2_M)]
					SPEC_POINTS_NMB3_M = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med,SPEC_POINTS_NMB3_M)]

					SPEC_POINTS_M_SNR0 = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med,SPEC_POINTS_M_SNR0)]
					SPEC_POINTS_M_SNR  = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med,SPEC_POINTS_M_SNR)]

					SPEC_POINTS_M_SNR2 = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med,SPEC_POINTS_M_SNR2)]
					SPEC_POINTS_M_SNR3 = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med,SPEC_POINTS_M_SNR3)]
					SPEC_POINTS_M_SNR4 = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med,SPEC_POINTS_M_SNR4)]
					SPEC_POINTS_M_SNR5 = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med,SPEC_POINTS_M_SNR5)]
				elif cln_pts_snr == False:
					pass				
				#############CLEANING LOW SNR EW POINTS#############
				#######AUXILIARY MARKERS FOR LOW SNR EW POINTS######
				if cln_snr_aux == True:
					indx_msk_snr_med_aux = []

					[indx_msk_snr_med_aux.append(np.where((cln_snr_thr<=np.asarray(snr_bin)) & (np.asarray(snr_bin)<cln_snr_th2))[0]) for j_indx_snr,(snr_bin) in enumerate(SPEC_POINTS_M_SNR0_AUX)]

					print
					print colored('Cleaning points according their SNR!','cyan')
					print colored('From:','cyan')
					print colored('MED: ' + str(SPEC_POINTS_M_SNR0_AUX),'cyan')
					print colored('SNR Computation Method : ' + str(cln_snr_mth),'cyan')
					print colored('Threshold value        : ' + str(cln_snr_thr),'cyan')
					print colored('Threshold value (AUX)  : ' + str(cln_snr_th2),'cyan')
					print
					print
					print colored(str(cln_snr_thr) + '< Points with SNR < ' + str(cln_snr_th2) +' :','cyan')
					print colored('MED-IDX: ','cyan')
					print colored([snr_bin_indx for snr_bin_indx in indx_msk_snr_med_aux],'cyan')
					print colored('MED-VAL: ','cyan')
					print colored([pts_med_itr[snr_bin_indx] for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med_aux,SPEC_POINTS_M_SNR0_AUX)],'cyan')
					print colored('Corresponding to ' + plt_nme_prp_2 +' points: ','cyan')
					print colored('MED-VAR: ','cyan')
					print colored([pts_med_itr[snr_bin_indx] for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med_aux,SPEC_SEP_VAR_M_AUX)],'cyan')
					print
					
					SPEC_POINTS_M_9_AUX_BIS    = [pts_med_itr[snr_bin_indx] for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med_aux,SPEC_POINTS_M_9_AUX)]
					SPEC_SEP_VAR_M_AUX_BIS     = [pts_med_itr[snr_bin_indx] for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med_aux,SPEC_SEP_VAR_M_AUX)]

					SPEC_POINTS_NMB_M_AUX_BIS  = [pts_med_itr[snr_bin_indx] for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med_aux,SPEC_POINTS_NMB_M_AUX)]
					SPEC_POINTS_NMB2_M_AUX_BIS = [pts_med_itr[snr_bin_indx] for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med_aux,SPEC_POINTS_NMB2_M_AUX)]
					SPEC_POINTS_NMB3_M_AUX_BIS = [pts_med_itr[snr_bin_indx] for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med_aux,SPEC_POINTS_NMB3_M_AUX)]

					SPEC_POINTS_M_SNR0_AUX_BIS = [pts_med_itr[snr_bin_indx] for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med_aux,SPEC_POINTS_M_SNR0_AUX)]
					SPEC_POINTS_M_SNR_AUX_BIS  = [pts_med_itr[snr_bin_indx] for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med_aux,SPEC_POINTS_M_SNR_AUX)]

					SPEC_POINTS_M_SNR2_AUX_BIS = [pts_med_itr[snr_bin_indx] for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med_aux,SPEC_POINTS_M_SNR2_AUX)]
					SPEC_POINTS_M_SNR3_AUX_BIS = [pts_med_itr[snr_bin_indx] for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med_aux,SPEC_POINTS_M_SNR3_AUX)]
					SPEC_POINTS_M_SNR4_AUX_BIS = [pts_med_itr[snr_bin_indx] for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med_aux,SPEC_POINTS_M_SNR4_AUX)]
					SPEC_POINTS_M_SNR5_AUX_BIS = [pts_med_itr[snr_bin_indx] for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med_aux,SPEC_POINTS_M_SNR5_AUX)]
				elif cln_snr_aux == False:
					pass				
				#######AUXILIARY MARKERS FOR LOW SNR EW POINTS######							

				SPEC_POINTS_NMB_M_R  = [np.sqrt(item) for item in SPEC_POINTS_NMB_M] 
				SPEC_POINTS_NMB2_M_R = [np.sqrt(item) for item in SPEC_POINTS_NMB2_M]
				SPEC_POINTS_NMB3_M_R = [np.sqrt(item) for item in SPEC_POINTS_NMB3_M]

				print
				print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_M_9]
				print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_SEP_VAR_M]
				print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_NMB_M]
				print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_NMB2_M]
				print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_NMB3_M]
				print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_NMB_M_R]
				print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_NMB2_M_R]
				print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_NMB3_M_R]
				print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_M_SNR]
				print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_M_SNR2]
				print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_M_SNR3]
				print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_M_SNR4]
				print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_M_SNR5]
				print
			except KeyError:
				print
				print colored('Header Error! - L34619','yellow')
				print str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'C'
				print
				print 	'STK_NUM'
				print
				print str(LINES[5][lines])+'_SNU1'
				print str(LINES[5][lines])+'_SNU2'
				print str(LINES[5][lines])+'_SNU4'
				print str(LINES[5][lines])+'_SNB2'
				print
				print str(LINES[5][lines])+'_NHT'
				print str(LINES[5][lines])+'_NHW'
				print
				print colored("\n".join([FILE for FILE in FILES_M]),'yellow')
				print
				SPEC_POINTS_M_1    = np.zeros([len(FILES_M)])
				SPEC_POINTS_M_2    = np.zeros([len(FILES_M)])
				SPEC_POINTS_M_3    = np.zeros([len(FILES_M)])
				SPEC_POINTS_M_4    = np.zeros([len(FILES_M)])
				SPEC_POINTS_M_5    = np.zeros([len(FILES_M)])
				SPEC_POINTS_M_6    = np.zeros([len(FILES_M)])
				SPEC_POINTS_M_7    = np.zeros([len(FILES_M)])
				SPEC_POINTS_M_8    = np.zeros([len(FILES_M)])
				SPEC_POINTS_M_9    = np.zeros([len(FILES_M)])
				SPEC_POINTS_M_10   = np.zeros([len(FILES_M)])

				SPEC_POINTS_NMB   = np.zeros([len(FILES_M)])
				SPEC_POINTS_M_SNR = np.zeros([len(FILES_M)])

				SPEC_POINTS_M_SNR2 = np.zeros([len(FILES_M)])
				SPEC_POINTS_M_SNR3 = np.zeros([len(FILES_M)])
				SPEC_POINTS_M_SNR4 = np.zeros([len(FILES_M)])
				SPEC_POINTS_M_SNR5 = np.zeros([len(FILES_M)])

				SPEC_POINTS_NMB2   = np.zeros([len(FILES_M)])
				SPEC_POINTS_NMB3   = np.zeros([len(FILES_M)])

				SPEC_POINTS_NMB_M  = SPEC_POINTS_NMB
				SPEC_POINTS_NMB2_M = SPEC_POINTS_NMB2
				SPEC_POINTS_NMB3_M = SPEC_POINTS_NMB3

				SPEC_POINTS_NMB_M_R  = SPEC_POINTS_NMB_M
				SPEC_POINTS_NMB2_M_R = SPEC_POINTS_NMB2_M
				SPEC_POINTS_NMB3_M_R = SPEC_POINTS_NMB3_M
		elif mlt_stk_fct == 'avg':#stk_function_a == True :
			try: 
				SPEC_POINTS_A_1    = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_A]
				SPEC_POINTS_A_2    = [Header_Get(spec_res_file,str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_A]
				SPEC_POINTS_A_3    = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_A]
				SPEC_POINTS_A_4    = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_A]
				SPEC_POINTS_A_5    = [Header_Get(spec_res_file,str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_A]
				SPEC_POINTS_A_6    = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_A]
				SPEC_POINTS_A_7    = [Header_Get(spec_res_file,str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_A]
				SPEC_POINTS_A_8    = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_A]
				SPEC_POINTS_A_9    = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_A]
				SPEC_POINTS_A_10   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_A]

				SPEC_POINTS_NMB    = [Header_Get(spec_res_file,'STK_NUM') for spec_res_file in FILES_A]
				SPEC_POINTS_A_SNR  = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU1'),0) for spec_res_file in FILES_A]

				SPEC_POINTS_A_SNR2 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU2'),0) for spec_res_file in FILES_A]

				SPEC_POINTS_A_SNR3 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU3'),0) for spec_res_file in FILES_A]

				SPEC_POINTS_A_SNR4 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU4'),0) for spec_res_file in FILES_A]

				SPEC_POINTS_A_SNR5 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNB2'),0) for spec_res_file in FILES_A]

				SPEC_POINTS_NMB2   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NHT') for spec_res_file in FILES_A]
				SPEC_POINTS_NMB3   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NHW') for spec_res_file in FILES_A]					

				SPEC_POINTS_NMB_A  = SPEC_POINTS_NMB
				SPEC_POINTS_NMB2_A = SPEC_POINTS_NMB2
				SPEC_POINTS_NMB3_A = SPEC_POINTS_NMB3

				SPEC_POINTS_A_9    = np.reshape(SPEC_POINTS_A_9   , (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#n_int_spt_2)) (n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_NMB_A  = np.reshape(SPEC_POINTS_NMB_A , (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))

				SPEC_POINTS_A_9    = np.reshape(SPEC_POINTS_A_9   , (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#n_int_spt_2)) (n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_NMB_A  = np.reshape(SPEC_POINTS_NMB_A , (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))

				SPEC_POINTS_A_SNR  = np.reshape(SPEC_POINTS_A_SNR , (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_A_SNR2 = np.reshape(SPEC_POINTS_A_SNR2, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_A_SNR3 = np.reshape(SPEC_POINTS_A_SNR3, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_A_SNR4 = np.reshape(SPEC_POINTS_A_SNR4, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_A_SNR5 = np.reshape(SPEC_POINTS_A_SNR5, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))

				SPEC_POINTS_NMB2_A = np.reshape(SPEC_POINTS_NMB2_A, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_NMB3_A = np.reshape(SPEC_POINTS_NMB3_A, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))

				SPEC_SEP_VAR       = [Header_Get(spec_res_file,var_prp_hdr_2+'_AVG') for spec_res_file in FILES_A]
				SPEC_SEP_VAR       = np.reshape(SPEC_SEP_VAR, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_SEP_VAR_A     = SPEC_SEP_VAR

				##############CLEANING NON FIT VALUES ##############
				print
				print colored('Deleting Unfitted bins!','yellow')
				print colored('From:','yellow')
				print colored('AVG: '+str(SPEC_POINTS_A_9),'yellow')
				print

				indx_msk_uft_avg = []
				[indx_msk_uft_avg.append(np.where(np.asarray(pts_bin)==999999.99999)[0]) for j_indx_uft,(pts_bin) in enumerate(SPEC_POINTS_A_9)]
				print
				print colored('AVG-IDX: ','yellow')
				print colored([uft_bin_indx for uft_bin_indx in indx_msk_uft_avg],'yellow')
				print

				if cln_uft_vls == True:#len(indx_msk_uft_med)>0 and 
					print colored('Points with FIT values (AVG): ' + str(999999.99999) +' :','yellow')
					print colored('AVG-IDX: ','yellow')
					print colored([uft_bin_indx for uft_bin_indx in indx_msk_uft_avg],'yellow')

					print
					print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_A_9]
					print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_SEP_VAR_A]
					print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_NMB_A]
					print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_NMB2_A]
					print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_NMB3_A]
					print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_A_SNR]
					print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_A_SNR2]
					print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_A_SNR3]
					print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_A_SNR4]
					print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_A_SNR5]
					print

					SPEC_POINTS_A_9    = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_uft_avg,SPEC_POINTS_A_9)]
					SPEC_SEP_VAR_A     = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_uft_avg,SPEC_SEP_VAR_A)]

					SPEC_POINTS_NMB_A  = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_uft_avg,SPEC_POINTS_NMB_A)]
					SPEC_POINTS_NMB2_A = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_uft_avg,SPEC_POINTS_NMB2_A)]
					SPEC_POINTS_NMB3_A = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_uft_avg,SPEC_POINTS_NMB3_A)]

					#SPEC_POINTS_A_SNR0 = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_uft_avg,SPEC_POINTS_A_SNR0)]
					SPEC_POINTS_A_SNR  = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_uft_avg,SPEC_POINTS_A_SNR)]

					SPEC_POINTS_A_SNR2 = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_uft_avg,SPEC_POINTS_A_SNR2)]
					SPEC_POINTS_A_SNR3 = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_uft_avg,SPEC_POINTS_A_SNR3)]
					SPEC_POINTS_A_SNR4 = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_uft_avg,SPEC_POINTS_A_SNR4)]
					SPEC_POINTS_A_SNR5 = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_uft_avg,SPEC_POINTS_A_SNR5)]

					print
					print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_A_9]
					print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_SEP_VAR_A]
					print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_NMB_A]
					print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_NMB2_A]
					print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_NMB3_A]
					print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_A_SNR]
					print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_A_SNR2]
					print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_A_SNR3]
					print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_A_SNR4]
					print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_A_SNR5]
					print
				else:
					print colored('No Unfitted Values found (AVG)!','yellow')
					print

				SPEC_POINTS_A_9_AUX    = SPEC_POINTS_A_9
				SPEC_SEP_VAR_A_AUX     = SPEC_SEP_VAR_A
				SPEC_POINTS_NMB_A_AUX  = SPEC_POINTS_NMB_A
				SPEC_POINTS_NMB2_A_AUX = SPEC_POINTS_NMB2_A
				SPEC_POINTS_NMB3_A_AUX = SPEC_POINTS_NMB3_A
				SPEC_POINTS_A_SNR_AUX  = SPEC_POINTS_A_SNR
				SPEC_POINTS_A_SNR2_AUX = SPEC_POINTS_A_SNR2
				SPEC_POINTS_A_SNR3_AUX = SPEC_POINTS_A_SNR3
				SPEC_POINTS_A_SNR4_AUX = SPEC_POINTS_A_SNR4
				SPEC_POINTS_A_SNR5_AUX = SPEC_POINTS_A_SNR5
				##############CLEANING NON FIT VALUES ##############
				if cln_snr_mth == 1:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					SPEC_POINTS_A_SNR0     = SPEC_POINTS_A_SNR
					SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR
				elif cln_snr_mth == 2:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					SPEC_POINTS_A_SNR0     = SPEC_POINTS_A_SNR2
					SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR2
				elif cln_snr_mth == 3:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					SPEC_POINTS_A_SNR0     = SPEC_POINTS_A_SNR3
					SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR3
				elif cln_snr_mth == 4:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					SPEC_POINTS_A_SNR0     = SPEC_POINTS_A_SNR4
					SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR4
				else:
					SPEC_POINTS_A_SNR0     = SPEC_POINTS_A_SNR
					SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR
					print
					print colored('SNR method: ' + str(cln_snr_mth) + ' does not exist!','yellow')
					print colored('Assuming SNR method: 1','yellow')
					print
				#############CLEANING LOW SNR EW POINTS#############
				if cln_pts_snr == True:
					indx_msk_snr_avg = []

					[indx_msk_snr_avg.append(np.where(np.asarray(snr_bin)<cln_snr_thr)[0]) for j_indx_snr,(snr_bin) in enumerate(SPEC_POINTS_A_SNR0)]

					print SPEC_POINTS_A_SNR0
					print SPEC_SEP_VAR_A
					print SPEC_POINTS_A_SNR0
					print
					print colored('Cleaning points according their SNR!','yellow')
					print colored('From:','yellow')
					print colored('AVG: ' + str(SPEC_POINTS_A_SNR0),'yellow')
					print colored('SNR Computation Method : ' + str(cln_snr_mth),'yellow')
					print colored('Threshold value        : ' + str(cln_snr_thr),'yellow')
					print
					print
					print colored('Points with SNR < ' + str(cln_snr_thr) +' :','yellow')
					print colored('AVG-IDX: ','yellow')
					print colored([snr_bin_indx for snr_bin_indx in indx_msk_snr_avg],'yellow')
					print colored('AVG-VAL: ','yellow')
					print colored([pts_avg_itr[snr_bin_indx] for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg,SPEC_POINTS_A_SNR0)],'yellow')
					print colored('Corresponding to ' + plt_nme_prp_2 +' points: ','yellow')
					print colored('AVG-VAR: ','yellow')
					print colored([pts_avg_itr[snr_bin_indx] for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg,SPEC_SEP_VAR_A)],'yellow')
					print

					SPEC_POINTS_A_9    = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg,SPEC_POINTS_A_9)]
					SPEC_SEP_VAR_A     = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg,SPEC_SEP_VAR_A)]

					SPEC_POINTS_NMB_A  = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg,SPEC_POINTS_NMB_A)]
					SPEC_POINTS_NMB2_A = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg,SPEC_POINTS_NMB2_A)]
					SPEC_POINTS_NMB3_A = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg,SPEC_POINTS_NMB3_A)]

					SPEC_POINTS_A_SNR0 = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg,SPEC_POINTS_A_SNR0)]
					SPEC_POINTS_A_SNR  = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg,SPEC_POINTS_A_SNR)]

					SPEC_POINTS_A_SNR2 = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg,SPEC_POINTS_A_SNR2)]
					SPEC_POINTS_A_SNR3 = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg,SPEC_POINTS_A_SNR3)]
					SPEC_POINTS_A_SNR4 = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg,SPEC_POINTS_A_SNR4)]
					SPEC_POINTS_A_SNR5 = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg,SPEC_POINTS_A_SNR5)]					
				elif cln_pts_snr == False:
					pass				
				#############CLEANING LOW SNR EW POINTS#############
				#######AUXILIARY MARKERS FOR LOW SNR EW POINTS######
				if cln_snr_aux == True:
					indx_msk_snr_avg_aux = []

					[indx_msk_snr_avg_aux.append(np.where((cln_snr_thr<=np.asarray(snr_bin)) & (np.asarray(snr_bin)<cln_snr_th2))[0]) for j_indx_snr,(snr_bin) in enumerate(SPEC_POINTS_A_SNR0_AUX)]
					
					print
					print colored('Cleaning points according their SNR!','cyan')
					print colored('From:','cyan')
					print colored('AVG: ' + str(SPEC_POINTS_A_SNR0_AUX),'cyan')
					print colored('SNR Computation Method : ' + str(cln_snr_mth),'cyan')
					print colored('Threshold value        : ' + str(cln_snr_thr),'cyan')
					print
					print
					print colored(str(cln_snr_thr) + '< Points with SNR < ' + str(cln_snr_th2) +' :','cyan')
					print colored('AVG-IDX: ','cyan')
					print colored([snr_bin_indx for snr_bin_indx in indx_msk_snr_avg_aux],'cyan')
					print colored('AVG-VAL: ','cyan')
					print colored([pts_avg_itr[snr_bin_indx] for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg_aux,SPEC_POINTS_A_SNR0_AUX)],'cyan')
					print colored('Corresponding to ' + plt_nme_prp_2 +' points: ','cyan')
					print colored('AVG-VAR: ','cyan')
					print colored([pts_avg_itr[snr_bin_indx] for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg_aux,SPEC_SEP_VAR_A_AUX)],'cyan')
					print
					
					SPEC_POINTS_A_9_AUX_BIS    = [pts_avg_itr[snr_bin_indx] for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg_aux,SPEC_POINTS_A_9_AUX)]
					SPEC_SEP_VAR_A_AUX_BIS     = [pts_avg_itr[snr_bin_indx] for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg_aux,SPEC_SEP_VAR_A_AUX)]

					SPEC_POINTS_NMB_A_AUX_BIS  = [pts_avg_itr[snr_bin_indx] for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg_aux,SPEC_POINTS_NMB_A_AUX)]
					SPEC_POINTS_NMB2_A_AUX_BIS = [pts_avg_itr[snr_bin_indx] for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg_aux,SPEC_POINTS_NMB2_A_AUX)]
					SPEC_POINTS_NMB3_A_AUX_BIS = [pts_avg_itr[snr_bin_indx] for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg_aux,SPEC_POINTS_NMB3_A_AUX)]

					SPEC_POINTS_A_SNR0_AUX_BIS = [pts_avg_itr[snr_bin_indx] for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg_aux,SPEC_POINTS_A_SNR0_AUX)]
					SPEC_POINTS_A_SNR_AUX_BIS  = [pts_avg_itr[snr_bin_indx] for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg_aux,SPEC_POINTS_A_SNR_AUX)]

					SPEC_POINTS_A_SNR2_AUX_BIS = [pts_avg_itr[snr_bin_indx] for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg_aux,SPEC_POINTS_A_SNR2_AUX)]
					SPEC_POINTS_A_SNR3_AUX_BIS = [pts_avg_itr[snr_bin_indx] for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg_aux,SPEC_POINTS_A_SNR3_AUX)]
					SPEC_POINTS_A_SNR4_AUX_BIS = [pts_avg_itr[snr_bin_indx] for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg_aux,SPEC_POINTS_A_SNR4_AUX)]
					SPEC_POINTS_A_SNR5_AUX_BIS = [pts_avg_itr[snr_bin_indx] for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg_aux,SPEC_POINTS_A_SNR5_AUX)]
				elif cln_snr_aux == False:
					pass				
				#######AUXILIARY MARKERS FOR LOW SNR EW POINTS######				
				SPEC_POINTS_NMB_A_R  = [np.sqrt(item) for item in SPEC_POINTS_NMB_A]
				SPEC_POINTS_NMB2_A_R = [np.sqrt(item) for item in SPEC_POINTS_NMB2_A]
				SPEC_POINTS_NMB3_A_R = [np.sqrt(item) for item in SPEC_POINTS_NMB3_A]

				print
				print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_A_9]
				print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_SEP_VAR_A]
				print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_NMB_A]
				print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_NMB2_A]
				print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_NMB3_A]
				print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_NMB_A_R]
				print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_NMB2_A_R]
				print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_NMB3_A_R]
				print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_A_SNR]
				print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_A_SNR2]
				print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_A_SNR3]
				print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_A_SNR4]
				print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_A_SNR5]
				print	
				###								
			except KeyError:
				print
				print colored('Header Error! - L34934','yellow')
				print
				print str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'C'
				print
				print 	'STK_NUM'
				print
				print str(LINES[5][lines])+'_SNU1'
				print str(LINES[5][lines])+'_SNU2'
				print str(LINES[5][lines])+'_SNU4'
				print str(LINES[5][lines])+'_SNB2'
				print
				print str(LINES[5][lines])+'_NHT'
				print str(LINES[5][lines])+'_NHW'
				print					
				print colored("\n".join([FILE for FILE in FILES_A]),'yellow')
				print
				SPEC_POINTS_A_1   = np.zeros([len(FILES_A)])
				SPEC_POINTS_A_2   = np.zeros([len(FILES_A)])
				SPEC_POINTS_A_3   = np.zeros([len(FILES_A)])
				SPEC_POINTS_A_4   = np.zeros([len(FILES_A)])
				SPEC_POINTS_A_5   = np.zeros([len(FILES_A)])
				SPEC_POINTS_A_6   = np.zeros([len(FILES_A)])
				SPEC_POINTS_A_7   = np.zeros([len(FILES_A)])
				SPEC_POINTS_A_8   = np.zeros([len(FILES_A)])
				SPEC_POINTS_A_9   = np.zeros([len(FILES_A)])
				SPEC_POINTS_A_10  = np.zeros([len(FILES_A)])

				SPEC_POINTS_NMB   = np.zeros([len(FILES_A)])
				SPEC_POINTS_A_SNR = np.zeros([len(FILES_A)])

				SPEC_POINTS_A_SNR2 = np.zeros([len(FILES_A)])
				SPEC_POINTS_A_SNR3 = np.zeros([len(FILES_A)])
				SPEC_POINTS_A_SNR4 = np.zeros([len(FILES_A)])
				SPEC_POINTS_A_SNR5 = np.zeros([len(FILES_A)])

				SPEC_POINTS_NMB2   = np.zeros([len(FILES_A)])
				SPEC_POINTS_NMB3   = np.zeros([len(FILES_A)])

				SPEC_POINTS_NMB_A  = SPEC_POINTS_NMB
				SPEC_POINTS_NMB2_A = SPEC_POINTS_NMB2
				SPEC_POINTS_NMB3_A = SPEC_POINTS_NMB3

				SPEC_POINTS_NMB_A_R  = SPEC_POINTS_NMB_A
				SPEC_POINTS_NMB2_A_R = SPEC_POINTS_NMB2_A
				SPEC_POINTS_NMB3_A_R = SPEC_POINTS_NMB3_A
		elif mlt_stk_fct == 'both':#stk_function_b	== True:
			try: 
				SPEC_POINTS_M_1   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_M]
				SPEC_POINTS_M_2   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_M]
				SPEC_POINTS_M_3   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_M]
				SPEC_POINTS_M_4   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_M]
				SPEC_POINTS_M_5   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_M]
				SPEC_POINTS_M_6   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_M]
				SPEC_POINTS_M_7   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_M]
				SPEC_POINTS_M_8   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_M]
				SPEC_POINTS_M_9   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_M]
				SPEC_POINTS_M_10  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_M]				

				SPEC_POINTS_A_1   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_A]
				SPEC_POINTS_A_2   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_A]
				SPEC_POINTS_A_3   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_A]
				SPEC_POINTS_A_4   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_A]
				SPEC_POINTS_A_5   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'O') for spec_res_file in FILES_A]
				SPEC_POINTS_A_6   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_A]
				SPEC_POINTS_A_7   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_A]
				SPEC_POINTS_A_8   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_A]
				SPEC_POINTS_A_9   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_A]
				SPEC_POINTS_A_10  = [Header_Get(spec_res_file,str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'C') for spec_res_file in FILES_A]

				SPEC_POINTS_NMB   = [Header_Get(spec_res_file,'STK_NUM') for spec_res_file in FILES_A]
				SPEC_POINTS_A_SNR = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU1'),0) for spec_res_file in FILES_A]
				SPEC_POINTS_M_SNR = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU1'),0) for spec_res_file in FILES_M]

				SPEC_POINTS_A_SNR2 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU2'),0) for spec_res_file in FILES_A]
				SPEC_POINTS_M_SNR2 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU2'),0) for spec_res_file in FILES_M]

				SPEC_POINTS_A_SNR3 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU3'),0) for spec_res_file in FILES_A]
				SPEC_POINTS_M_SNR3 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU3'),0) for spec_res_file in FILES_M]

				SPEC_POINTS_A_SNR4 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU4'),0) for spec_res_file in FILES_A]
				SPEC_POINTS_M_SNR4 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNU4'),0) for spec_res_file in FILES_M]

				SPEC_POINTS_A_SNR5 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNB2'),0) for spec_res_file in FILES_A]
				SPEC_POINTS_M_SNR5 = [np.round(Header_Get(spec_res_file,str(LINES[5][lines])+'_SNB2'),0) for spec_res_file in FILES_M]

				SPEC_POINTS_NMB2   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NHT') for spec_res_file in FILES_A]
				SPEC_POINTS_NMB3   = [Header_Get(spec_res_file,str(LINES[5][lines])+'_NHW') for spec_res_file in FILES_A]					

				SPEC_POINTS_NMB_M  = SPEC_POINTS_NMB
				SPEC_POINTS_NMB2_M = SPEC_POINTS_NMB2
				SPEC_POINTS_NMB3_M = SPEC_POINTS_NMB3

				SPEC_POINTS_NMB_A  = SPEC_POINTS_NMB
				SPEC_POINTS_NMB2_A = SPEC_POINTS_NMB2
				SPEC_POINTS_NMB3_A = SPEC_POINTS_NMB3

				SPEC_POINTS_M_9    = np.reshape(SPEC_POINTS_M_9   , (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#n_int_spt_2)) (n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_NMB_M  = np.reshape(SPEC_POINTS_NMB_M , (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))

				SPEC_POINTS_M_SNR  = np.reshape(SPEC_POINTS_M_SNR , (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_M_SNR2 = np.reshape(SPEC_POINTS_M_SNR2, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_M_SNR3 = np.reshape(SPEC_POINTS_M_SNR3, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_M_SNR4 = np.reshape(SPEC_POINTS_M_SNR4, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_M_SNR5 = np.reshape(SPEC_POINTS_M_SNR5, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))

				SPEC_POINTS_NMB2_M = np.reshape(SPEC_POINTS_NMB2_M, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_NMB3_M = np.reshape(SPEC_POINTS_NMB3_M, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))

				SPEC_SEP_VAR       = [Header_Get(spec_res_file,var_prp_hdr_2+'_MED') for spec_res_file in FILES_M]
				SPEC_SEP_VAR       = np.reshape(SPEC_SEP_VAR      , (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_SEP_VAR_M     = SPEC_SEP_VAR

				SPEC_POINTS_A_9    = np.reshape(SPEC_POINTS_A_9   , (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#n_int_spt_2)) (n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_NMB_A  = np.reshape(SPEC_POINTS_NMB_A , (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))

				SPEC_POINTS_A_SNR  = np.reshape(SPEC_POINTS_A_SNR , (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_A_SNR2 = np.reshape(SPEC_POINTS_A_SNR2, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_A_SNR3 = np.reshape(SPEC_POINTS_A_SNR3, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_A_SNR4 = np.reshape(SPEC_POINTS_A_SNR4, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_A_SNR5 = np.reshape(SPEC_POINTS_A_SNR5, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))

				SPEC_POINTS_NMB2_A = np.reshape(SPEC_POINTS_NMB2_A, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_POINTS_NMB3_A = np.reshape(SPEC_POINTS_NMB3_A, (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))

				SPEC_SEP_VAR       = [Header_Get(spec_res_file,var_prp_hdr_2+'_AVG') for spec_res_file in FILES_A]
				SPEC_SEP_VAR       = np.reshape(SPEC_SEP_VAR, (n_int_spt_1,abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#(n_int_spt_1,n_int_spt_2))
				SPEC_SEP_VAR_A     = SPEC_SEP_VAR

				##############CLEANING NON FIT VALUES ##############
				print
				print colored('Deleting Unfitted bins!','yellow')
				print colored('From:','yellow')
				print colored('MED: '+str(SPEC_POINTS_M_9),'yellow')
				print colored('AVG: '+str(SPEC_POINTS_A_9),'yellow')
				print

				indx_msk_uft_med = []
				indx_msk_uft_avg = []
				[indx_msk_uft_med.append(np.where(np.asarray(pts_bin)==999999.99999)[0]) for j_indx_uft,(pts_bin) in enumerate(SPEC_POINTS_M_9)]
				[indx_msk_uft_avg.append(np.where(np.asarray(pts_bin)==999999.99999)[0]) for j_indx_uft,(pts_bin) in enumerate(SPEC_POINTS_A_9)]
				print colored('MED-IDX: ','yellow')
				print colored([uft_bin_indx for uft_bin_indx in indx_msk_uft_med],'yellow')
				print
				print colored('AVG-IDX: ','yellow')
				print colored([uft_bin_indx for uft_bin_indx in indx_msk_uft_avg],'yellow')
				print

				if cln_uft_vls == True:#len(indx_msk_uft_med)>0 and 
					print colored('Points with FIT values (MED): ' + str(999999.99999) +' :','yellow')

					print colored('MED-IDX: ','yellow')
					print colored([uft_bin_indx for uft_bin_indx in indx_msk_uft_med],'yellow')

					print
					print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_M_9]
					print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_SEP_VAR_M]
					print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_NMB_M]
					print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_NMB2_M]
					print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_NMB3_M]
					print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_M_SNR]
					print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_M_SNR2]
					print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_M_SNR3]
					print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_M_SNR4]
					print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_M_SNR5]
					print

					SPEC_POINTS_M_9    = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_uft_med,SPEC_POINTS_M_9)]
					SPEC_SEP_VAR_M     = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_uft_med,SPEC_SEP_VAR_M)]

					SPEC_POINTS_NMB_M  = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_uft_med,SPEC_POINTS_NMB_M)]
					SPEC_POINTS_NMB2_M = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_uft_med,SPEC_POINTS_NMB2_M)]
					SPEC_POINTS_NMB3_M = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_uft_med,SPEC_POINTS_NMB3_M)]

					#SPEC_POINTS_M_SNR0 = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_uft_med,SPEC_POINTS_M_SNR0)]
					SPEC_POINTS_M_SNR  = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_uft_med,SPEC_POINTS_M_SNR)]

					SPEC_POINTS_M_SNR2 = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_uft_med,SPEC_POINTS_M_SNR2)]
					SPEC_POINTS_M_SNR3 = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_uft_med,SPEC_POINTS_M_SNR3)]
					SPEC_POINTS_M_SNR4 = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_uft_med,SPEC_POINTS_M_SNR4)]
					SPEC_POINTS_M_SNR5 = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_uft_med,SPEC_POINTS_M_SNR5)]

					print
					print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_M_9]
					print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_SEP_VAR_M]
					print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_NMB_M]
					print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_NMB2_M]
					print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_NMB3_M]
					print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_M_SNR]
					print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_M_SNR2]
					print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_M_SNR3]
					print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_M_SNR4]
					print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_M_SNR5]
					print


					print colored('Points with FIT values (AVG): ' + str(999999.99999) +' :','yellow')
					print colored('AVG-IDX: ','yellow')
					print colored([uft_bin_indx for uft_bin_indx in indx_msk_uft_avg],'yellow')

					print
					print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_A_9]
					print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_SEP_VAR_A]
					print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_NMB_A]
					print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_NMB2_A]
					print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_NMB3_A]
					print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_A_SNR]
					print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_A_SNR2]
					print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_A_SNR3]
					print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_A_SNR4]
					print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_A_SNR5]
					print

					SPEC_POINTS_A_9    = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_uft_avg,SPEC_POINTS_A_9)]
					SPEC_SEP_VAR_A     = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_uft_avg,SPEC_SEP_VAR_A)]

					SPEC_POINTS_NMB_A  = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_uft_avg,SPEC_POINTS_NMB_A)]
					SPEC_POINTS_NMB2_A = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_uft_avg,SPEC_POINTS_NMB2_A)]
					SPEC_POINTS_NMB3_A = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_uft_avg,SPEC_POINTS_NMB3_A)]

					#SPEC_POINTS_A_SNR0 = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_uft_avg,SPEC_POINTS_A_SNR0)]
					SPEC_POINTS_A_SNR  = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_uft_avg,SPEC_POINTS_A_SNR)]

					SPEC_POINTS_A_SNR2 = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_uft_avg,SPEC_POINTS_A_SNR2)]
					SPEC_POINTS_A_SNR3 = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_uft_avg,SPEC_POINTS_A_SNR3)]
					SPEC_POINTS_A_SNR4 = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_uft_avg,SPEC_POINTS_A_SNR4)]
					SPEC_POINTS_A_SNR5 = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_uft_avg,SPEC_POINTS_A_SNR5)]

					print
					print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_A_9]
					print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_SEP_VAR_A]
					print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_NMB_A]
					print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_NMB2_A]
					print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_NMB3_A]
					print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_A_SNR]
					print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_A_SNR2]
					print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_A_SNR3]
					print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_A_SNR4]
					print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_A_SNR5]
					print
				else:
					print colored('No Unfitted Values found (MED)!','yellow')
					print colored('No Unfitted Values found (AVG)!','yellow')
					print

				SPEC_POINTS_M_9_AUX    = SPEC_POINTS_M_9
				SPEC_SEP_VAR_M_AUX     = SPEC_SEP_VAR_M
				SPEC_POINTS_NMB_M_AUX  = SPEC_POINTS_NMB_M
				SPEC_POINTS_NMB2_M_AUX = SPEC_POINTS_NMB2_M
				SPEC_POINTS_NMB3_M_AUX = SPEC_POINTS_NMB3_M
				SPEC_POINTS_M_SNR_AUX  = SPEC_POINTS_M_SNR
				SPEC_POINTS_M_SNR2_AUX = SPEC_POINTS_M_SNR2
				SPEC_POINTS_M_SNR3_AUX = SPEC_POINTS_M_SNR3
				SPEC_POINTS_M_SNR4_AUX = SPEC_POINTS_M_SNR4
				SPEC_POINTS_M_SNR5_AUX = SPEC_POINTS_M_SNR5

				SPEC_POINTS_A_9_AUX    = SPEC_POINTS_A_9
				SPEC_SEP_VAR_A_AUX     = SPEC_SEP_VAR_A
				SPEC_POINTS_NMB_A_AUX  = SPEC_POINTS_NMB_A
				SPEC_POINTS_NMB2_A_AUX = SPEC_POINTS_NMB2_A
				SPEC_POINTS_NMB3_A_AUX = SPEC_POINTS_NMB3_A
				SPEC_POINTS_A_SNR_AUX  = SPEC_POINTS_A_SNR
				SPEC_POINTS_A_SNR2_AUX = SPEC_POINTS_A_SNR2
				SPEC_POINTS_A_SNR3_AUX = SPEC_POINTS_A_SNR3
				SPEC_POINTS_A_SNR4_AUX = SPEC_POINTS_A_SNR4
				SPEC_POINTS_A_SNR5_AUX = SPEC_POINTS_A_SNR5
				##############CLEANING NON FIT VALUES ##############
				if cln_snr_mth == 1:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					pass
					SPEC_POINTS_M_SNR0     = SPEC_POINTS_M_SNR
					SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR
					SPEC_POINTS_A_SNR0     = SPEC_POINTS_A_SNR
					SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR
				elif cln_snr_mth == 2:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					pass
					SPEC_POINTS_M_SNR0     = SPEC_POINTS_M_SNR2
					SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR2
					SPEC_POINTS_A_SNR0     = SPEC_POINTS_A_SNR2
					SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR2
				elif cln_snr_mth == 3:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					pass
					SPEC_POINTS_M_SNR0     = SPEC_POINTS_M_SNR3
					SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR3
					SPEC_POINTS_A_SNR0     = SPEC_POINTS_A_SNR3
					SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR3
				elif cln_snr_mth == 4:
					print
					print colored('SNR method: ' + str(cln_snr_mth),'yellow')
					print
					pass
					SPEC_POINTS_M_SNR0     = SPEC_POINTS_M_SNR4
					SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR4
					SPEC_POINTS_A_SNR0     = SPEC_POINTS_A_SNR4
					SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR4
				else:
					SPEC_POINTS_M_SNR0     = SPEC_POINTS_M_SNR
					SPEC_POINTS_M_SNR0_AUX = SPEC_POINTS_M_SNR
					SPEC_POINTS_A_SNR0     = SPEC_POINTS_A_SNR
					SPEC_POINTS_A_SNR0_AUX = SPEC_POINTS_A_SNR
					print
					print colored('SNR method: ' + str(cln_snr_mth) + ' does not exist!','yellow')
					print colored('Assuming SNR method: 1','yellow')
					print
				#############CLEANING LOW SNR EW POINTS#############
				if cln_pts_snr == True:
					indx_msk_snr_med = []
					indx_msk_snr_avg = []

					[indx_msk_snr_med.append(np.where(np.asarray(snr_bin)<cln_snr_thr)[0]) for j_indx_snr,(snr_bin) in enumerate(SPEC_POINTS_M_SNR0)]
					[indx_msk_snr_avg.append(np.where(np.asarray(snr_bin)<cln_snr_thr)[0]) for j_indx_snr,(snr_bin) in enumerate(SPEC_POINTS_A_SNR0)]

					print SPEC_POINTS_M_SNR0
					print SPEC_SEP_VAR_M
					print SPEC_POINTS_M_SNR0
					print indx_msk_snr_med
					print
					print colored('Cleaning points according their SNR!','yellow')
					print colored('From:','yellow')
					print colored('MED: ' + str(SPEC_POINTS_M_SNR0),'yellow')
					print colored('SNR Computation Method : ' + str(cln_snr_mth),'yellow')
					print colored('Threshold value        : ' + str(cln_snr_thr),'yellow')
					print
					print
					print colored('Points with SNR < ' + str(cln_snr_thr) +' :','yellow')
					print colored('MED-IDX: ','yellow')
					print colored([snr_bin_indx for snr_bin_indx in indx_msk_snr_med],'yellow')
					print colored('MED-VAL: ','yellow')
					print colored([pts_med_itr[snr_bin_indx] for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med,SPEC_POINTS_M_SNR0)],'yellow')
					print colored('Corresponding to ' + plt_nme_prp_2 +' points: ','yellow')
					print colored('MED-VAR: ','yellow')
					print colored([pts_med_itr[snr_bin_indx] for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med,SPEC_SEP_VAR_M)],'yellow')
					print

					SPEC_POINTS_M_9    = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med,SPEC_POINTS_M_9)]
					SPEC_SEP_VAR_M     = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med,SPEC_SEP_VAR_M)]

					SPEC_POINTS_NMB_M  = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med,SPEC_POINTS_NMB_M)]
					SPEC_POINTS_NMB2_M = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med,SPEC_POINTS_NMB2_M)]
					SPEC_POINTS_NMB3_M = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med,SPEC_POINTS_NMB3_M)]

					SPEC_POINTS_M_SNR0 = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med,SPEC_POINTS_M_SNR0)]
					SPEC_POINTS_M_SNR  = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med,SPEC_POINTS_M_SNR)]

					SPEC_POINTS_M_SNR2 = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med,SPEC_POINTS_M_SNR2)]
					SPEC_POINTS_M_SNR3 = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med,SPEC_POINTS_M_SNR3)]
					SPEC_POINTS_M_SNR4 = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med,SPEC_POINTS_M_SNR4)]
					SPEC_POINTS_M_SNR5 = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med,SPEC_POINTS_M_SNR5)]

					print SPEC_POINTS_A_SNR0
					print SPEC_SEP_VAR_A
					print SPEC_POINTS_A_SNR0
					print indx_msk_snr_med
					print
					print colored('Cleaning points according their SNR!','yellow')
					print colored('From:','yellow')
					print colored('AVG: ' + str(SPEC_POINTS_A_SNR0),'yellow')
					print colored('SNR Computation Method : ' + str(cln_snr_mth),'yellow')
					print colored('Threshold value        : ' + str(cln_snr_thr),'yellow')
					print
					print
					print colored('Points with SNR < ' + str(cln_snr_thr) +' :','yellow')
					print colored('AVG-IDX: ','yellow')
					print colored([snr_bin_indx for snr_bin_indx in indx_msk_snr_avg],'yellow')
					print colored('AVG-VAL: ','yellow')
					print colored([pts_avg_itr[snr_bin_indx] for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg,SPEC_POINTS_A_SNR0)],'yellow')
					print colored('Corresponding to ' + plt_nme_prp_2 +' points: ','yellow')
					print colored('AVG-VAR: ','yellow')
					print colored([pts_avg_itr[snr_bin_indx] for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg,SPEC_SEP_VAR_A)],'yellow')
					print

					SPEC_POINTS_A_9    = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg,SPEC_POINTS_A_9)]
					SPEC_SEP_VAR_A     = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg,SPEC_SEP_VAR_A)]

					SPEC_POINTS_NMB_A  = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg,SPEC_POINTS_NMB_A)]
					SPEC_POINTS_NMB2_A = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg,SPEC_POINTS_NMB2_A)]
					SPEC_POINTS_NMB3_A = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg,SPEC_POINTS_NMB3_A)]

					SPEC_POINTS_A_SNR0 = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg,SPEC_POINTS_A_SNR0)]
					SPEC_POINTS_A_SNR  = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg,SPEC_POINTS_A_SNR)]

					SPEC_POINTS_A_SNR2 = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg,SPEC_POINTS_A_SNR2)]
					SPEC_POINTS_A_SNR3 = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg,SPEC_POINTS_A_SNR3)]
					SPEC_POINTS_A_SNR4 = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg,SPEC_POINTS_A_SNR4)]
					SPEC_POINTS_A_SNR5 = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg,SPEC_POINTS_A_SNR5)]					
				elif cln_pts_snr == False:
					pass				
				#############CLEANING LOW SNR EW POINTS#############
				#######AUXILIARY MARKERS FOR LOW SNR EW POINTS######
				if cln_snr_aux == True:
					indx_msk_snr_med_aux = []
					indx_msk_snr_avg_aux = []

					[indx_msk_snr_med_aux.append(np.where((cln_snr_thr<=np.asarray(snr_bin)) & (np.asarray(snr_bin)<cln_snr_th2))[0]) for j_indx_snr,(snr_bin) in enumerate(SPEC_POINTS_M_SNR0_AUX)]
					[indx_msk_snr_avg_aux.append(np.where((cln_snr_thr<=np.asarray(snr_bin)) & (np.asarray(snr_bin)<cln_snr_th2))[0]) for j_indx_snr,(snr_bin) in enumerate(SPEC_POINTS_A_SNR0_AUX)]

					print
					print colored('Cleaning points according their SNR!','cyan')
					print colored('From:','cyan')
					print colored('MED: ' + str(SPEC_POINTS_M_SNR0_AUX),'cyan')
					print colored('SNR Computation Method : ' + str(cln_snr_mth),'cyan')
					print colored('Threshold value        : ' + str(cln_snr_thr),'cyan')
					print colored('Threshold value (AUX)  : ' + str(cln_snr_th2),'cyan')
					print
					print
					print colored(str(cln_snr_thr) + '< Points with SNR < ' + str(cln_snr_th2) +' :','cyan')
					print colored('MED-IDX: ','cyan')
					print colored([snr_bin_indx for snr_bin_indx in indx_msk_snr_med_aux],'cyan')
					print colored('MED-VAL: ','cyan')
					print colored([pts_med_itr[snr_bin_indx] for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med_aux,SPEC_POINTS_M_SNR0_AUX)],'cyan')
					print colored('Corresponding to ' + plt_nme_prp_2 +' points: ','cyan')
					print colored('MED-VAR: ','cyan')
					print colored([pts_med_itr[snr_bin_indx] for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med_aux,SPEC_SEP_VAR_M_AUX)],'cyan')
					print
					
					SPEC_POINTS_M_9_AUX_BIS    = [pts_med_itr[snr_bin_indx] for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med_aux,SPEC_POINTS_M_9_AUX)]
					SPEC_SEP_VAR_M_AUX_BIS     = [pts_med_itr[snr_bin_indx] for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med_aux,SPEC_SEP_VAR_M_AUX)]

					SPEC_POINTS_NMB_M_AUX_BIS  = [pts_med_itr[snr_bin_indx] for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med_aux,SPEC_POINTS_NMB_M_AUX)]
					SPEC_POINTS_NMB2_M_AUX_BIS = [pts_med_itr[snr_bin_indx] for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med_aux,SPEC_POINTS_NMB2_M_AUX)]
					SPEC_POINTS_NMB3_M_AUX_BIS = [pts_med_itr[snr_bin_indx] for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med_aux,SPEC_POINTS_NMB3_M_AUX)]

					SPEC_POINTS_M_SNR0_AUX_BIS = [pts_med_itr[snr_bin_indx] for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med_aux,SPEC_POINTS_M_SNR0_AUX)]
					SPEC_POINTS_M_SNR_AUX_BIS  = [pts_med_itr[snr_bin_indx] for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med_aux,SPEC_POINTS_M_SNR_AUX)]

					SPEC_POINTS_M_SNR2_AUX_BIS = [pts_med_itr[snr_bin_indx] for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med_aux,SPEC_POINTS_M_SNR2_AUX)]
					SPEC_POINTS_M_SNR3_AUX_BIS = [pts_med_itr[snr_bin_indx] for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med_aux,SPEC_POINTS_M_SNR3_AUX)]
					SPEC_POINTS_M_SNR4_AUX_BIS = [pts_med_itr[snr_bin_indx] for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med_aux,SPEC_POINTS_M_SNR4_AUX)]
					SPEC_POINTS_M_SNR5_AUX_BIS = [pts_med_itr[snr_bin_indx] for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med_aux,SPEC_POINTS_M_SNR5_AUX)]
					
					print
					print colored('Cleaning points according their SNR!','cyan')
					print colored('From:','cyan')
					print colored('AVG: ' + str(SPEC_POINTS_A_SNR0_AUX),'cyan')
					print colored('SNR Computation Method : ' + str(cln_snr_mth),'cyan')
					print colored('Threshold value        : ' + str(cln_snr_thr),'cyan')
					print
					print
					print colored(str(cln_snr_thr) + '< Points with SNR < ' + str(cln_snr_th2) +' :','cyan')
					print colored('AVG-IDX: ','cyan')
					print colored([snr_bin_indx for snr_bin_indx in indx_msk_snr_avg_aux],'cyan')
					print colored('AVG-VAL: ','cyan')
					print colored([pts_avg_itr[snr_bin_indx] for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg_aux,SPEC_POINTS_A_SNR0_AUX)],'cyan')
					print colored('Corresponding to ' + plt_nme_prp_2 +' points: ','cyan')
					print colored('AVG-VAR: ','cyan')
					print colored([pts_avg_itr[snr_bin_indx] for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg_aux,SPEC_SEP_VAR_A_AUX)],'cyan')
					print
					
					SPEC_POINTS_A_9_AUX_BIS    = [pts_avg_itr[snr_bin_indx] for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg_aux,SPEC_POINTS_A_9_AUX)]
					SPEC_SEP_VAR_A_AUX_BIS     = [pts_avg_itr[snr_bin_indx] for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg_aux,SPEC_SEP_VAR_A_AUX)]

					SPEC_POINTS_NMB_A_AUX_BIS  = [pts_avg_itr[snr_bin_indx] for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg_aux,SPEC_POINTS_NMB_A_AUX)]
					SPEC_POINTS_NMB2_A_AUX_BIS = [pts_avg_itr[snr_bin_indx] for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg_aux,SPEC_POINTS_NMB2_A_AUX)]
					SPEC_POINTS_NMB3_A_AUX_BIS = [pts_avg_itr[snr_bin_indx] for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg_aux,SPEC_POINTS_NMB3_A_AUX)]

					SPEC_POINTS_A_SNR0_AUX_BIS = [pts_avg_itr[snr_bin_indx] for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg_aux,SPEC_POINTS_A_SNR0_AUX)]
					SPEC_POINTS_A_SNR_AUX_BIS  = [pts_avg_itr[snr_bin_indx] for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg_aux,SPEC_POINTS_A_SNR_AUX)]

					SPEC_POINTS_A_SNR2_AUX_BIS = [pts_avg_itr[snr_bin_indx] for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg_aux,SPEC_POINTS_A_SNR2_AUX)]
					SPEC_POINTS_A_SNR3_AUX_BIS = [pts_avg_itr[snr_bin_indx] for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg_aux,SPEC_POINTS_A_SNR3_AUX)]
					SPEC_POINTS_A_SNR4_AUX_BIS = [pts_avg_itr[snr_bin_indx] for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg_aux,SPEC_POINTS_A_SNR4_AUX)]
					SPEC_POINTS_A_SNR5_AUX_BIS = [pts_avg_itr[snr_bin_indx] for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg_aux,SPEC_POINTS_A_SNR5_AUX)]
				elif cln_snr_aux == False:
					pass				
				#######AUXILIARY MARKERS FOR LOW SNR EW POINTS######

				SPEC_POINTS_NMB_M_R  = [np.sqrt(item) for item in SPEC_POINTS_NMB_M]
				SPEC_POINTS_NMB2_M_R = [np.sqrt(item) for item in SPEC_POINTS_NMB2_M]
				SPEC_POINTS_NMB3_M_R = [np.sqrt(item) for item in SPEC_POINTS_NMB3_M]
				SPEC_POINTS_NMB_A_R  = [np.sqrt(item) for item in SPEC_POINTS_NMB_A]
				SPEC_POINTS_NMB2_A_R = [np.sqrt(item) for item in SPEC_POINTS_NMB2_A]
				SPEC_POINTS_NMB3_A_R = [np.sqrt(item) for item in SPEC_POINTS_NMB3_A]

				print
				print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_M_9]
				print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_SEP_VAR_M]
				print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_NMB_M]
				print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_NMB2_M]
				print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_NMB3_M]
				print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_NMB_M_R]
				print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_NMB2_M_R]
				print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_NMB3_M_R]
				print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_M_SNR]
				print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_M_SNR2]
				print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_M_SNR3]
				print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_M_SNR4]
				print [str(len(pts_med_itr)) + '-' + str(pts_med_itr) for pts_med_itr in SPEC_POINTS_M_SNR5]
				print

				print
				print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_A_9]
				print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_SEP_VAR_A]
				print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_NMB_A]
				print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_NMB2_A]
				print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_NMB3_A]
				print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_NMB_A_R]
				print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_NMB2_A_R]
				print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_NMB3_A_R]
				print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_A_SNR]
				print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_A_SNR2]
				print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_A_SNR3]
				print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_A_SNR4]
				print [str(len(pts_avg_itr)) + '-' + str(pts_avg_itr) for pts_avg_itr in SPEC_POINTS_A_SNR5]
				print					
			except KeyError:
				print
				print colored('Header Error! - L35456','yellow')
				print str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'O'
				print str(LINES[5][lines])+'_CG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_AG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_FG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_WG' +str(ft_m_sfx)+'C'
				print str(LINES[5][lines])+'_EG' +str(ft_m_sfx)+'C'
				print
				print 	'STK_NUM'
				print
				print str(LINES[5][lines])+'_SNU1'
				print str(LINES[5][lines])+'_SNU2'
				print str(LINES[5][lines])+'_SNU4'
				print str(LINES[5][lines])+'_SNB2'
				print
				print str(LINES[5][lines])+'_NHT'
				print str(LINES[5][lines])+'_NHW'
				print
				print colored("\n".join([FILE for FILE in FILES_M]),'yellow')
				print
				print colored("\n".join([FILE for FILE in FILES_A]),'yellow')
				print
				SPEC_POINTS_M_1   = np.zeros([len(FILES_M)])
				SPEC_POINTS_M_2   = np.zeros([len(FILES_M)])
				SPEC_POINTS_M_3   = np.zeros([len(FILES_M)])
				SPEC_POINTS_M_4   = np.zeros([len(FILES_M)])
				SPEC_POINTS_M_5   = np.zeros([len(FILES_M)])
				SPEC_POINTS_M_6   = np.zeros([len(FILES_M)])
				SPEC_POINTS_M_7   = np.zeros([len(FILES_M)])
				SPEC_POINTS_M_8   = np.zeros([len(FILES_M)])
				SPEC_POINTS_M_9   = np.zeros([len(FILES_M)])
				SPEC_POINTS_M_10  = np.zeros([len(FILES_M)])

				SPEC_POINTS_A_1   = np.zeros([len(FILES_A)])
				SPEC_POINTS_A_2   = np.zeros([len(FILES_A)])
				SPEC_POINTS_A_3   = np.zeros([len(FILES_A)])
				SPEC_POINTS_A_4   = np.zeros([len(FILES_A)])
				SPEC_POINTS_A_5   = np.zeros([len(FILES_A)])
				SPEC_POINTS_A_6   = np.zeros([len(FILES_A)])
				SPEC_POINTS_A_7   = np.zeros([len(FILES_A)])
				SPEC_POINTS_A_8   = np.zeros([len(FILES_A)])
				SPEC_POINTS_A_9   = np.zeros([len(FILES_A)])
				SPEC_POINTS_A_10  = np.zeros([len(FILES_A)])

				SPEC_POINTS_NMB   = np.zeros([len(FILES_M)])
				SPEC_POINTS_A_SNR = np.zeros([len(FILES_A)])
				SPEC_POINTS_M_SNR = np.zeros([len(FILES_M)])

				SPEC_POINTS_A_SNR2 = np.zeros([len(FILES_A)])
				SPEC_POINTS_M_SNR2 = np.zeros([len(FILES_M)])

				SPEC_POINTS_A_SNR3 = np.zeros([len(FILES_A)])
				SPEC_POINTS_M_SNR3 = np.zeros([len(FILES_M)])

				SPEC_POINTS_A_SNR4 = np.zeros([len(FILES_A)])
				SPEC_POINTS_M_SNR4 = np.zeros([len(FILES_M)])

				SPEC_POINTS_A_SNR5 = np.zeros([len(FILES_A)])
				SPEC_POINTS_M_SNR5 = np.zeros([len(FILES_M)])

				SPEC_POINTS_NMB2   = np.zeros([len(FILES_A)])
				SPEC_POINTS_NMB3   = np.zeros([len(FILES_M)])

				SPEC_POINTS_NMB_A  = SPEC_POINTS_NMB
				SPEC_POINTS_NMB2_A = SPEC_POINTS_NMB2
				SPEC_POINTS_NMB3_A = SPEC_POINTS_NMB3

				SPEC_POINTS_NMB_A  = SPEC_POINTS_NMB_A
				SPEC_POINTS_NMB2_A = SPEC_POINTS_NMB2_A
				SPEC_POINTS_NMB3_A = SPEC_POINTS_NMB3_A

				SPEC_POINTS_NMB_M  = SPEC_POINTS_NMB
				SPEC_POINTS_NMB2_M = SPEC_POINTS_NMB2
				SPEC_POINTS_NMB3_M = SPEC_POINTS_NMB3

				SPEC_POINTS_NMB_M  = SPEC_POINTS_NMB_M
				SPEC_POINTS_NMB2_M = SPEC_POINTS_NMB2_M
				SPEC_POINTS_NMB3_M = SPEC_POINTS_NMB3_M

				SPEC_POINTS_A_SNR  = np.zeros([len(FILES_A)])#_BG
				SPEC_POINTS_M_SNR  = np.zeros([len(FILES_M)])#_BG
				SPEC_POINTS_A_SNR2 = np.zeros([len(FILES_A)])#_BG
				SPEC_POINTS_M_SNR2 = np.zeros([len(FILES_M)])#_BG
				SPEC_POINTS_A_SNR3 = np.zeros([len(FILES_A)])#_BG
				SPEC_POINTS_M_SNR3 = np.zeros([len(FILES_M)])#_BG
				SPEC_POINTS_A_SNR4 = np.zeros([len(FILES_A)])#_BG
				SPEC_POINTS_M_SNR4 = np.zeros([len(FILES_M)])#_BG
				SPEC_POINTS_A_SNR5 = np.zeros([len(FILES_A)])#_BG
				SPEC_POINTS_M_SNR5 = np.zeros([len(FILES_M)])#_BG
				SPEC_POINTS_NMB2   = np.zeros([len(FILES_A)])#_BG
				SPEC_POINTS_NMB3   = np.zeros([len(FILES_A)])#_BG

		lmb_min_lim_line_ft = LINES[0][lines] - MSK_NTMS*LINES[1][lines]
		lmb_max_lim_line_ft = LINES[0][lines] + MSK_NTMS*LINES[1][lines]
		lmb_min_lim_line    = LINES[0][lines]*(1+z_glx_Ps) - LINES[2][lines]#- 20#LINES[2][lines] - 10
		lmb_max_lim_line    = LINES[0][lines]*(1+z_glx_Ps) + LINES[2][lines]#+ 20#LINES[2][lines] + 10

		###############################################TABLE ERRORS FROM BOOTSTRAP####################################################
		if bst_err_plt == True and mlt_stk_fct == 'both':
			TBL_BS_STT_M =[]
			TBL_BS_STT_A =[]


			ini_fg_tbl_m  = stt_bst_tbl + (FILES_M[0].split('/')[-1]).split('-stk')[0]+'-BS-'+ str(bst_itr_nmb) + '-stk-med'+str(stk_function)+'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gauss.csv'
			ini_fg_tbl_a  = stt_bst_tbl + (FILES_A[0].split('/')[-1]).split('-stk')[0]+'-BS-'+ str(bst_itr_nmb) + '-stk-avg'+str(stk_function)+'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gauss.csv'

			##########ITERATE THROUGH VAR-1 & VAR-2 BINS##########
			for element,a in  enumerate(itertools.product(range(lower_shift_1,len(slc_int_fg_1)-upper_shift_1),range(lower_shift_2,len(slc_int_fg_2)-upper_shift_2))):
				#print element,a
				index_int_1 = a[0]
				index_int_2 = a[1]
				print element,slc_int_fg_1[index_int_1],slc_int_fg_2[index_int_2]
				cur_tbl_bs_stt_m  = stt_bst_tbl + 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-' + splt_smpl_sfx_f1 +'-'+str(slc_int_fg_1[index_int_1]) +'-ss-' + splt_smpl_sfx_f2 +'-'+str(slc_int_fg_2[index_int_2]) +'-BS-'+ str(bst_itr_nmb) + '-stk-med'+str(stk_function)+'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gauss.csv'
				cur_tbl_bs_stt_a  = stt_bst_tbl + 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-' + splt_smpl_sfx_f1 +'-'+str(slc_int_fg_1[index_int_1]) +'-ss-' + splt_smpl_sfx_f2 +'-'+str(slc_int_fg_2[index_int_2]) +'-BS-'+ str(bst_itr_nmb) + '-stk-avg'+str(stk_function)+'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gauss.csv'

				TBL_BS_STT_M.append(cur_tbl_bs_stt_m)
				TBL_BS_STT_A.append(cur_tbl_bs_stt_a)

				print
				print cur_tbl_bs_stt_m
				print cur_tbl_bs_stt_a
				print
			##########ITERATE THROUGH VAR-1 & VAR-2 BINS##########
			print 
			print colored('BS Errors from tables:','yellow')
			print
			print colored("\n".join([TABLE for TABLE in TBL_BS_STT_M]),'blue')
			print
			print colored("\n".join([TABLE for TABLE in TBL_BS_STT_A]),'red')
			print

			SPEC_POINTS_M_9_ERR=[]
			SPEC_POINTS_A_9_ERR=[]
			SPEC_POINTS_M_9_ERR.append((np.asarray([Confident_Intervals(tbl_cdf_file,tbl_format_ipt,cdf2bobt_lne=str(LINES[3][lines]),cdf_2b_rtrn='1sgm',rmv_uft_spc=rmv_uft_spc) for tbl_cdf_file in TBL_BS_STT_M])))
			print '1-M****'
			print SPEC_POINTS_M_9_ERR
			print
			SPEC_POINTS_A_9_ERR.append((np.asarray([Confident_Intervals(tbl_cdf_file,tbl_format_ipt,cdf2bobt_lne=str(LINES[3][lines]),cdf_2b_rtrn='1sgm',rmv_uft_spc=rmv_uft_spc) for tbl_cdf_file in TBL_BS_STT_A])))
			print '1-A****'
			print SPEC_POINTS_A_9_ERR
			print

			SPEC_POINTS_M_9_ERR = np.squeeze(SPEC_POINTS_M_9_ERR,axis=2)
			print '2-M****'
			print SPEC_POINTS_M_9_ERR
			print
			SPEC_POINTS_A_9_ERR = np.squeeze(SPEC_POINTS_A_9_ERR,axis=2)
			print '2-A****'
			print SPEC_POINTS_A_9_ERR
			print			

			SPEC_POINTS_M_9_ERR_LOW = [SPEC_POINTS_M_9_ERR[item_err][0] for item_err in range(len(SPEC_POINTS_M_9_ERR))]
			SPEC_POINTS_M_9_ERR_HGH = [SPEC_POINTS_M_9_ERR[item_err][1] for item_err in range(len(SPEC_POINTS_M_9_ERR))]
			print '3-M****'
			print SPEC_POINTS_M_9_ERR_LOW
			print SPEC_POINTS_M_9_ERR_HGH
			SPEC_POINTS_A_9_ERR_LOW = [SPEC_POINTS_A_9_ERR[item_err][0] for item_err in range(len(SPEC_POINTS_A_9_ERR))]
			SPEC_POINTS_A_9_ERR_HGH = [SPEC_POINTS_A_9_ERR[item_err][1] for item_err in range(len(SPEC_POINTS_A_9_ERR))]
			print '3-A****'
			print SPEC_POINTS_A_9_ERR_LOW
			print SPEC_POINTS_A_9_ERR_HGH

			SPEC_POINTS_M_9_ERR_LOW = np.asarray(SPEC_POINTS_M_9_ERR_LOW)
			SPEC_POINTS_M_9_ERR_HGH = np.asarray(SPEC_POINTS_M_9_ERR_HGH)
			SPEC_POINTS_A_9_ERR_LOW = np.asarray(SPEC_POINTS_A_9_ERR_LOW)
			SPEC_POINTS_A_9_ERR_HGH = np.asarray(SPEC_POINTS_A_9_ERR_HGH)

			SPEC_POINTS_M_9_ERR_LOW = np.reshape(SPEC_POINTS_M_9_ERR_LOW  , (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#n_int_spt_2)) (n_int_spt_1,n_int_spt_2))
			SPEC_POINTS_M_9_ERR_HGH = np.reshape(SPEC_POINTS_M_9_ERR_HGH  , (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#n_int_spt_2)) (n_int_spt_1,n_int_spt_2))
			print '4-M****'
			print SPEC_POINTS_M_9_ERR_LOW
			print SPEC_POINTS_M_9_ERR_HGH
			SPEC_POINTS_A_9_ERR_LOW = np.reshape(SPEC_POINTS_A_9_ERR_LOW  , (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#n_int_spt_2)) (n_int_spt_1,n_int_spt_2))
			SPEC_POINTS_A_9_ERR_HGH = np.reshape(SPEC_POINTS_A_9_ERR_HGH  , (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#n_int_spt_2)) (n_int_spt_1,n_int_spt_2))
			print '4-A****'
			print SPEC_POINTS_A_9_ERR_LOW
			print SPEC_POINTS_A_9_ERR_HGH			

			####CLEANING NON FIT VALUES & LOW SNR EW POINTS####

			if cln_uft_vls == True:#len(indx_msk_uft_med)>0 and 
				print colored('Points with FIT values (MED): ' + str(999999.99999) +' :','yellow')
				print colored('MED-IDX: ','yellow')
				print colored([uft_bin_indx for uft_bin_indx in indx_msk_uft_avg],'yellow')

				SPEC_POINTS_M_9_ERR_LOW = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_uft_med,SPEC_POINTS_M_9_ERR_LOW)]
				SPEC_POINTS_M_9_ERR_HGH = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_uft_med,SPEC_POINTS_M_9_ERR_HGH)]

				print colored('Points with FIT values (AVG): ' + str(999999.99999) +' :','yellow')
				print colored('AVG-IDX: ','yellow')
				print colored([uft_bin_indx for uft_bin_indx in indx_msk_uft_avg],'yellow')

				SPEC_POINTS_A_9_ERR_LOW = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_uft_avg,SPEC_POINTS_A_9_ERR_LOW)]
				SPEC_POINTS_A_9_ERR_HGH = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_uft_avg,SPEC_POINTS_A_9_ERR_HGH)]


			else:
				print colored('No Unfitted Values found (MED)!','yellow')
				print colored('No Unfitted Values found (AVG)!','yellow')
				print

			if cln_pts_snr == True:
				print
				print colored('Cleaning points according their SNR!','yellow')
				print colored('BS CI values','yellow')
				print

				indx_msk_snr_med
				indx_msk_snr_avg

				SPEC_POINTS_M_9_ERR_LOW = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med,SPEC_POINTS_M_9_ERR_LOW)]
				SPEC_POINTS_M_9_ERR_HGH = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med,SPEC_POINTS_M_9_ERR_HGH)]
				print '5-M****'
				print indx_msk_snr_med
				print SPEC_POINTS_M_9_ERR_LOW
				print SPEC_POINTS_M_9_ERR_HGH
				SPEC_POINTS_A_9_ERR_LOW = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg,SPEC_POINTS_A_9_ERR_LOW)]
				SPEC_POINTS_A_9_ERR_HGH = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg,SPEC_POINTS_A_9_ERR_HGH)]
				print '5-A****'
				print indx_msk_snr_avg
				print SPEC_POINTS_A_9_ERR_LOW
				print SPEC_POINTS_A_9_ERR_HGH

			elif cln_pts_snr == False:
				pass				
			####CLEANING NON FIT VALUES & LOW SNR EW POINTS####
		elif bst_err_plt == True and mlt_stk_fct == 'med':
			TBL_BS_STT_M =[]

			ini_fg_tbl_m  = stt_bst_tbl + (FILES_M[0].split('/')[-1]).split('-stk')[0]+'-BS-'+ str(bst_itr_nmb) + '-stk-med'+str(stk_function)+'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gauss.csv'

			##########ITERATE THROUGH VAR-1 & VAR-2 BINS##########
			for element,a in  enumerate(itertools.product(range(lower_shift_1,len(slc_int_fg_1)-upper_shift_1),range(lower_shift_2,len(slc_int_fg_2)-upper_shift_2))):
				#print element,a
				index_int_1 = a[0]
				index_int_2 = a[1]
				print element,slc_int_fg_1[index_int_1],slc_int_fg_2[index_int_2]
				cur_tbl_bs_stt_m  = stt_bst_tbl + 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-' + splt_smpl_sfx_f1 +'-'+str(slc_int_fg_1[index_int_1]) +'-ss-' + splt_smpl_sfx_f2 +'-'+str(slc_int_fg_2[index_int_2]) +'-BS-'+ str(bst_itr_nmb) + '-stk-med'+str(stk_function)+'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gauss.csv'
				TBL_BS_STT_M.append(cur_tbl_bs_stt_m)
				print
				print cur_tbl_bs_stt_m
				print
			##########ITERATE THROUGH VAR-1 & VAR-2 BINS##########
			print 
			print colored('BS Errors from tables:','yellow')
			print
			print colored("\n".join([TABLE for TABLE in TBL_BS_STT_M]),'blue')
			print

			SPEC_POINTS_M_9_ERR=[]
			SPEC_POINTS_M_9_ERR.append((np.asarray([Confident_Intervals(tbl_cdf_file,tbl_format_ipt,cdf2bobt_lne=str(LINES[3][lines]),cdf_2b_rtrn='1sgm',rmv_uft_spc=rmv_uft_spc) for tbl_cdf_file in TBL_BS_STT_M])))
			print '1-M****'
			print SPEC_POINTS_M_9_ERR
			print

			SPEC_POINTS_M_9_ERR = np.squeeze(SPEC_POINTS_M_9_ERR,axis=2)
			print '2-M****'
			print SPEC_POINTS_M_9_ERR
			print

			SPEC_POINTS_M_9_ERR_LOW = [SPEC_POINTS_M_9_ERR[item_err][0] for item_err in range(len(SPEC_POINTS_M_9_ERR))]
			SPEC_POINTS_M_9_ERR_HGH = [SPEC_POINTS_M_9_ERR[item_err][1] for item_err in range(len(SPEC_POINTS_M_9_ERR))]
			print '3-M****'
			print SPEC_POINTS_M_9_ERR_LOW
			print SPEC_POINTS_M_9_ERR_HGH

			SPEC_POINTS_M_9_ERR_LOW = np.asarray(SPEC_POINTS_M_9_ERR_LOW)
			SPEC_POINTS_M_9_ERR_HGH = np.asarray(SPEC_POINTS_M_9_ERR_HGH)

			SPEC_POINTS_M_9_ERR_LOW = np.reshape(SPEC_POINTS_M_9_ERR_LOW  , (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#n_int_spt_2)) (n_int_spt_1,n_int_spt_2))
			SPEC_POINTS_M_9_ERR_HGH = np.reshape(SPEC_POINTS_M_9_ERR_HGH  , (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#n_int_spt_2)) (n_int_spt_1,n_int_spt_2))
			print '4-M****'
			print SPEC_POINTS_M_9_ERR_LOW
			print SPEC_POINTS_M_9_ERR_HGH

			####CLEANING NON FIT VALUES & LOW SNR EW POINTS####

			if cln_uft_vls == True:#len(indx_msk_uft_med)>0 and 
				print colored('Points with FIT values (MED): ' + str(999999.99999) +' :','yellow')
				print colored('MED-IDX: ','yellow')
				print colored([uft_bin_indx for uft_bin_indx in indx_msk_uft_med],'yellow')

				SPEC_POINTS_M_9_ERR_LOW = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_uft_med,SPEC_POINTS_M_9_ERR_LOW)]
				SPEC_POINTS_M_9_ERR_HGH = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_uft_med,SPEC_POINTS_M_9_ERR_HGH)]

			else:
				print colored('No Unfitted Values found (MED)!','yellow')
				print

			if cln_pts_snr == True:
				print
				print colored('Cleaning points according their SNR!','yellow')
				print colored('BS CI values','yellow')
				print
				SPEC_POINTS_M_9_ERR_LOW = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med,SPEC_POINTS_M_9_ERR_LOW)]
				SPEC_POINTS_M_9_ERR_HGH = [np.delete(pts_med_itr,snr_bin_indx) for snr_bin_indx,pts_med_itr in zip(indx_msk_snr_med,SPEC_POINTS_M_9_ERR_HGH)]
				print '5-M****'
				print indx_msk_snr_med
				print SPEC_POINTS_M_9_ERR_LOW
				print SPEC_POINTS_M_9_ERR_HGH
			elif cln_pts_snr == False:
				pass				
			####CLEANING NON FIT VALUES & LOW SNR EW POINTS####
		elif bst_err_plt == True and mlt_stk_fct == 'avg':
			TBL_BS_STT_A =[]

			ini_fg_tbl_a  = stt_bst_tbl + (FILES_A[0].split('/')[-1]).split('-stk')[0]+'-BS-'+ str(bst_itr_nmb) + '-stk-avg'+str(stk_function)+'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gauss.csv'

			##########ITERATE THROUGH VAR-1 & VAR-2 BINS##########
			for element,a in  enumerate(itertools.product(range(lower_shift_1,len(slc_int_fg_1)-upper_shift_1),range(lower_shift_2,len(slc_int_fg_2)-upper_shift_2))):
				#print element,a
				index_int_1 = a[0]
				index_int_2 = a[1]
				print element,slc_int_fg_1[index_int_1],slc_int_fg_2[index_int_2]
				cur_tbl_bs_stt_a  = stt_bst_tbl + 'P_Bg_' + CAT_PARENT + '_'+str(rad_sep[0][0]) + '-' +str(rad_sep[0][1]) + sfx_tbl_ext_opt +'-ss-zf_B-' + str(z_flag_itv_bg[0])+'-'+str(z_flag_itv_bg[-1]) +'-ss-zf_F-' + str(z_flag_itv_fg[0])+'-'+str(z_flag_itv_fg[-1]) +'-ss-' + splt_smpl_sfx_f1 +'-'+str(slc_int_fg_1[index_int_1]) +'-ss-' + splt_smpl_sfx_f2 +'-'+str(slc_int_fg_2[index_int_2]) +'-BS-'+ str(bst_itr_nmb) + '-stk-avg'+str(stk_function)+'-stt-LNE-FIT-'+str(LINES[3][lines])+'-'+fit_type_e+'-gauss.csv'
				TBL_BS_STT_A.append(cur_tbl_bs_stt_a)
				print
				print cur_tbl_bs_stt_a
				print
			##########ITERATE THROUGH VAR-1 & VAR-2 BINS##########
			print 
			print colored('BS Errors from tables:','yellow')
			print
			print colored("\n".join([TABLE for TABLE in TBL_BS_STT_A]),'red')
			print


			SPEC_POINTS_A_9_ERR=[]
			SPEC_POINTS_A_9_ERR.append((np.asarray([Confident_Intervals(tbl_cdf_file,tbl_format_ipt,cdf2bobt_lne=str(LINES[3][lines]),cdf_2b_rtrn='1sgm',rmv_uft_spc=rmv_uft_spc) for tbl_cdf_file in TBL_BS_STT_A])))
			print '1-A****'
			print SPEC_POINTS_A_9_ERR
			print
			SPEC_POINTS_A_9_ERR = np.squeeze(SPEC_POINTS_A_9_ERR,axis=2)
			print '2-A****'
			print SPEC_POINTS_A_9_ERR
			print			

			SPEC_POINTS_A_9_ERR_LOW = [SPEC_POINTS_A_9_ERR[item_err][0] for item_err in range(len(SPEC_POINTS_A_9_ERR))]
			SPEC_POINTS_A_9_ERR_HGH = [SPEC_POINTS_A_9_ERR[item_err][1] for item_err in range(len(SPEC_POINTS_A_9_ERR))]
			print '3-A****'
			print SPEC_POINTS_A_9_ERR_LOW
			print SPEC_POINTS_A_9_ERR_HGH

			SPEC_POINTS_A_9_ERR_LOW = np.asarray(SPEC_POINTS_A_9_ERR_LOW)
			SPEC_POINTS_A_9_ERR_HGH = np.asarray(SPEC_POINTS_A_9_ERR_HGH)

			SPEC_POINTS_A_9_ERR_LOW = np.reshape(SPEC_POINTS_A_9_ERR_LOW  , (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#n_int_spt_2)) (n_int_spt_1,n_int_spt_2))
			SPEC_POINTS_A_9_ERR_HGH = np.reshape(SPEC_POINTS_A_9_ERR_HGH  , (abs(lower_shift_1-(len(slc_int_fg_1)-upper_shift_1)),abs(lower_shift_2-(len(slc_int_fg_2)-upper_shift_2))))#n_int_spt_2)) (n_int_spt_1,n_int_spt_2))
			print '4-A****'
			print SPEC_POINTS_A_9_ERR_LOW
			print SPEC_POINTS_A_9_ERR_HGH			

			####CLEANING NON FIT VALUES & LOW SNR EW POINTS####

			if cln_uft_vls == True:#len(indx_msk_uft_med)>0 and 
				print colored('Points with FIT values (AVG): ' + str(999999.99999) +' :','yellow')
				print colored('AVG-IDX: ','yellow')
				print colored([uft_bin_indx for uft_bin_indx in indx_msk_uft_avg],'yellow')

				SPEC_POINTS_A_9_ERR_LOW = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_uft_avg,SPEC_POINTS_A_9_ERR_LOW)]
				SPEC_POINTS_A_9_ERR_HGH = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_uft_avg,SPEC_POINTS_A_9_ERR_HGH)]

			else:
				print colored('No Unfitted Values found (AVG)!','yellow')
				print
		
			if cln_pts_snr == True:
				print
				print colored('Cleaning points according their SNR!','yellow')
				print colored('BS CI values','yellow')
				print
				SPEC_POINTS_A_9_ERR_LOW = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg,SPEC_POINTS_A_9_ERR_LOW)]
				SPEC_POINTS_A_9_ERR_HGH = [np.delete(pts_avg_itr,snr_bin_indx) for snr_bin_indx,pts_avg_itr in zip(indx_msk_snr_avg,SPEC_POINTS_A_9_ERR_HGH)]
				print '5-A****'
				print indx_msk_snr_avg
				print SPEC_POINTS_A_9_ERR_LOW
				print SPEC_POINTS_A_9_ERR_HGH
			elif cln_pts_snr == False:
				pass				
			####CLEANING NON FIT VALUES & LOW SNR EW POINTS####
		elif bst_err_plt == False:
			pass
		###############################################TABLE ERRORS FROM BOOTSTRAP###################################################

		###############################PLOT PER LINE###############################
		if plt_log_axs == 'both':
			print
			print colored('Logarithmic scale on axis: '+ str(plt_log_axs),'green')
			print
			plt.yscale('log', nonposy='clip')
			plt.xscale('log', nonposx='clip')
		elif plt_log_axs == 'y':
			print
			print colored('Logarithmic scale on axis: '+ str(plt_log_axs),'green')
			print
			plt.yscale('log', nonposy='clip')
		elif plt_log_axs == 'x':
			print
			print colored('Logarithmic scale on axis: '+ str(plt_log_axs),'green')
			print
			plt.xscale('log', nonposx='clip')
		elif plt_log_axs == None:
			print
			print colored('Logarithmic scale on axis: '+ str(plt_log_axs),'green')
			print
			pass
		else:
			pass

		#ax110.set_xticks(xticks_values)
		#ax110.get_xaxis().set_major_formatter(mpl.ticker.ScalarFormatter())
		#ax110.set_yticks(yticks_values)
		#ax110.get_yaxis().set_major_formatter(mpl.ticker.ScalarFormatter())
		##plt.grid(True, which='both')
		##plt.xlabel(xlabel,fontsize=28, family = 'serif')
		##plt.ylabel('Rest Equivalent Width W$_0$ ($\AA$)',fontsize=28, family = 'serif')
		##plt.xlabel(xlabel  ,fontsize=28, family = 'serif')
		##plt.ylabel('Rest Equivalent Width W$_0$ ($\AA$)',fontsize=28, family = 'serif')

		x_s = [1.003,31,63,103]

		index_line_color = index_line_color +1 
		#color2bused = array_new_colors[0][index_line_color]
		#xplotlimit = max(SPEC_SEP_VAR[0])+(.10*max(SPEC_SEP_VAR[0]))
		if mlt_stk_fct == 'med'  and bst_err_plt == False:
			pts_line_M = SPEC_POINTS_M_9
			pts_line_M = pts_line_M#np.log10(pts_line_M)
			color2bused = 'blue'
			print
			print colored('Plot values (SEP-BIN):','yellow')
			print SPEC_SEP_VAR,len(SPEC_SEP_VAR)
			print colored('Plot values (EW-MED):','yellow')
			print pts_line_M,len(pts_line_M)
			print
			print colored('Plot values (SEP-BIN):','yellow')
			print 'T: ',(len(SPEC_SEP_VAR)),SPEC_SEP_VAR
			print 'M: ',(len(SPEC_SEP_VAR_M)),SPEC_SEP_VAR_M
			print colored('Plot values (EW-MED):','yellow')
			print 'M: ',(len(pts_line_M)),pts_line_M
			print
			print colored('Number of galaxies per bin:','yellow') 
			print 'M: ',(len(SPEC_POINTS_NMB_M),SPEC_POINTS_NMB_M)
			print colored('Number of galaxies per bin (SQR):','yellow') 
			print 'M: ',(len(SPEC_POINTS_NMB_M_R),SPEC_POINTS_NMB_M_R)
			print
			print colored('SNR Individual Line (Median): ','yellow')
			print SPEC_POINTS_M_SNR
			print
			print colored('Number of galaxies per bin:','yellow') 
			print 'M: ',(len(SPEC_POINTS_NMB_M)),SPEC_POINTS_NMB_M
			print 'M: ',(len(SPEC_POINTS_NMB2_M)),SPEC_POINTS_NMB2_M
			print colored('Number of galaxies per bin (SQR):','yellow') 
			print 'M: ',(len(SPEC_POINTS_NMB_M_R)),SPEC_POINTS_NMB_M_R
			print 'M: ',(len(SPEC_POINTS_NMB2_M_R)),SPEC_POINTS_NMB2_M_R
			print
			print colored('SNR Individual Line (Median): ','yellow')
			print '******: ',len(SPEC_POINTS_M_SNR0),SPEC_POINTS_M_SNR0
			print 'UB-ALL: ',len(SPEC_POINTS_M_SNR),SPEC_POINTS_M_SNR
			print 'UB-CNT: ',len(SPEC_POINTS_M_SNR2),SPEC_POINTS_M_SNR2
			print 'UB-FIT: ',len(SPEC_POINTS_M_SNR3),SPEC_POINTS_M_SNR3
			print 'UB-PLT: ',len(SPEC_POINTS_M_SNR4),SPEC_POINTS_M_SNR4
			print 'BN-MED: ',len(SPEC_POINTS_M_SNR5),SPEC_POINTS_M_SNR5
			print
			print "\n".join([str(x) + str(y) for x,y in zip(SPEC_SEP_VAR_M,pts_line_M)])
			print
			for j_indx,(bin_var,ew_var) in enumerate(zip(SPEC_SEP_VAR_M,pts_line_M)):
				plt.plot(bin_var,ew_var,
							#marker = LINES[6][lines],
							marker = markers_mpl[j_indx],#'o',
							color=color2bused,markersize=12,
							markerfacecolor = 'None',
							label  = LINES[4][lines]  + 
							' ('+ str(LINES[0][lines])+
							 r'$\AA$' + ') '+'med '   +
							 "\n"  + 'SNR-A   : '   + str(SPEC_POINTS_M_SNR)  +
							 "\n"  + 'SNR-C   : '   + str(SPEC_POINTS_M_SNR2) +
							 #"\n"  + 'SNR-P   : '   + str(SPEC_POINTS_M_SNR3) +
							 #"\n"  + 'SNR-BM: '  + str(SPEC_POINTS_M_SNR4) +
							 "\n"  + 'N: '    + str(SPEC_POINTS_NMB_M)    +
							 #"\n"  + 'N: '    + str(SPEC_POINTS_NMB2)   +
							 "\n"  + 'N: '    + str(SPEC_POINTS_NMB3_M),
							 ls='-.')

				if add_snr_vls == True:
					[ax110.annotate(str(sbs_snr_vle), 					# this is the text
									(bin_var[sbs_idx],ew_var[sbs_idx]),	# this is the point to label
									textcoords="offset points", 		# how to position the text
									xytext=(2,6), 						# distance from text to points (x,y)
									color='blue',						#
									fontsize = 12,						#
									ha='center') 						# horizontal alignment can be left, right or center
					for sbs_idx,sbs_snr_vle in enumerate(SPEC_POINTS_M_SNR0[j_indx])]
				else:
					pass
			pts_line_ALL_M.append(pts_line_M)
			lbl_line_ALL_M.append(LINES[4][lines]+ ' ('+ str(LINES[0][lines])+ r'$\AA$' + ') ' + 'med ' + color2bused)
			mrk_line_ALL.append(LINES[6][lines])
			clr_line_ALL.append(color2bused)
		elif mlt_stk_fct == 'med'  and bst_err_plt == True:
			pts_line_M = SPEC_POINTS_M_9
			pts_line_M = pts_line_M
			color2bused1 = 'blue'
			color2bused2 = 'red'
			print
			print colored('Plot values (SEP-BIN):','yellow')
			print SPEC_SEP_VAR,len(SPEC_SEP_VAR)
			print colored('Plot values (EW-MED):','yellow')
			print pts_line_M,len(pts_line_M)
			print
			print colored('Plot values (SEP-BIN):','yellow')
			print 'T: ',(len(SPEC_SEP_VAR)),SPEC_SEP_VAR
			print 'M: ',(len(SPEC_SEP_VAR_M)),SPEC_SEP_VAR_M
			print colored('Plot values (EW-MED):','yellow')
			print 'M: ',(len(pts_line_M)),pts_line_M
			print
			print colored('Errors for Median values:','yellow')
			print 'P: ',(len(pts_line_M),pts_line_M)
			print 'M: ',(len(SPEC_POINTS_M_9_ERR_LOW)),SPEC_POINTS_M_9_ERR_LOW
			print 'M: ',(len(SPEC_POINTS_M_9_ERR_HGH)),SPEC_POINTS_M_9_ERR_HGH
			print
			print colored('Number of galaxies per bin:','yellow') 
			#print 'T: ',(len(SPEC_POINTS_NMB),SPEC_POINTS_NMB)
			print 'M: ',(len(SPEC_POINTS_NMB_M),SPEC_POINTS_NMB_M)
			print colored('Number of galaxies per bin (SQR):','yellow') 
			print 'M: ',(len(SPEC_POINTS_NMB_M_R),SPEC_POINTS_NMB_M_R)
			print
			print colored('SNR Individual Line (Median): ','yellow')
			print SPEC_POINTS_M_SNR
			print
			print colored('Number of galaxies per bin:','yellow') 
			#print 'T: ',(len(SPEC_POINTS_NMB)),SPEC_POINTS_NMB
			#print 'T: ',(len(SPEC_POINTS_NMB2)),SPEC_POINTS_NMB2
			print 'M: ',(len(SPEC_POINTS_NMB_M)),SPEC_POINTS_NMB_M
			print 'M: ',(len(SPEC_POINTS_NMB2_M)),SPEC_POINTS_NMB2_M
			print colored('Number of galaxies per bin (SQR):','yellow') 
			print 'M: ',(len(SPEC_POINTS_NMB_M_R)),SPEC_POINTS_NMB_M_R
			print 'M: ',(len(SPEC_POINTS_NMB2_M_R)),SPEC_POINTS_NMB2_M_R
			print
			print colored('SNR Individual Line (Median): ','yellow')
			print '******: ',len(SPEC_POINTS_M_SNR0),SPEC_POINTS_M_SNR0
			print 'UB-ALL: ',len(SPEC_POINTS_M_SNR),SPEC_POINTS_M_SNR
			print 'UB-CNT: ',len(SPEC_POINTS_M_SNR2),SPEC_POINTS_M_SNR2
			print 'UB-FIT: ',len(SPEC_POINTS_M_SNR3),SPEC_POINTS_M_SNR3
			print 'UB-PLT: ',len(SPEC_POINTS_M_SNR4),SPEC_POINTS_M_SNR4
			print 'BN-MED: ',len(SPEC_POINTS_M_SNR5),SPEC_POINTS_M_SNR5
			print
			print
			print colored('Confidence Intervals (Median): ','yellow')
			print len(pts_line_M),pts_line_M
			print 'L: ',len(SPEC_POINTS_M_9_ERR_LOW),SPEC_POINTS_M_9_ERR_LOW
			print 'H: ',len(SPEC_POINTS_M_9_ERR_HGH),SPEC_POINTS_M_9_ERR_HGH
			print len(SPEC_POINTS_NMB_M),SPEC_POINTS_NMB_M
			print
			print colored('Errors for Median values considering sample size (N):','yellow')
			print 'L: ',abs(np.asarray(pts_line_M)-(np.asarray(SPEC_POINTS_M_9_ERR_LOW)))/(SPEC_POINTS_NMB_M_R)
			print 'H: ',abs(np.asarray(pts_line_M)-(np.asarray(SPEC_POINTS_M_9_ERR_HGH)))/(SPEC_POINTS_NMB_M_R)
			print
			print "\n".join([str(x) + str(y) for x,y in zip(SPEC_SEP_VAR_M,pts_line_M)])
			print
			for j_indx,(bin_var,ew_var) in enumerate(zip(SPEC_SEP_VAR_M,pts_line_M)):
				plt.plot(bin_var,ew_var,
							#marker = LINES[6][lines],
							marker = markers_mpl[j_indx],#'o',
							color=color2bused1,markersize=12,
							markerfacecolor = 'None',
							zorder = 1,
							label  = LINES[4][lines]  + 
							' ('+ str(LINES[0][lines])+
							 r'$\AA$' + ') '+'med '   +
							 "\n"  + 'SNR-A   : '   + str(SPEC_POINTS_M_SNR)  +
							 "\n"  + 'SNR-C   : '   + str(SPEC_POINTS_M_SNR2) +
							 #"\n"  + 'SNR-P   : '   + str(SPEC_POINTS_M_SNR3) +
							 #"\n"  + 'SNR-BM: '  + str(SPEC_POINTS_M_SNR4) +
							 "\n"  + 'N: '    + str(SPEC_POINTS_NMB_M)    +
							 #"\n"  + 'N: '    + str(SPEC_POINTS_NMB2)   +
							 "\n"  + 'N: '    + str(SPEC_POINTS_NMB3_M),
							 ls='-.')
				if add_snr_vls == True:
					[ax110.annotate(str(sbs_snr_vle), 					# this is the text
									(bin_var[sbs_idx],ew_var[sbs_idx]),	# this is the point to label
									textcoords="offset points", 		# how to position the text
									xytext=(2,6), 						# distance from text to points (x,y)
									color='blue',						#
									family='serif',                     #
									fontsize = 12,						#
									ha='center') 						# horizontal alignment can be left, right or center
					for sbs_idx,sbs_snr_vle in enumerate(SPEC_POINTS_M_SNR0[j_indx])]
				else:
					pass
			if bst_err_plt_sym == False:
				for j_indx,(bin_var,ew_var,ew_var_err_l,ew_var_err_h,pts_nmb_avg) in enumerate(zip(SPEC_SEP_VAR_M,pts_line_M,SPEC_POINTS_M_9_ERR_LOW,SPEC_POINTS_M_9_ERR_HGH,SPEC_POINTS_NMB_M)):
					plt.errorbar(bin_var, ew_var, 
						yerr  = [abs(np.asarray(ew_var)-np.asarray(ew_var_err_l))/np.sqrt(np.asarray(pts_nmb_avg)),abs(np.asarray(ew_var_err_h)-np.asarray(ew_var))/np.sqrt(np.asarray(pts_nmb_avg))],
						#fmt   = LINES[6][lines],
						zorder = 2,
						fmt   = markers_mpl[j_indx],#'o',
						color = color2bused1,elinewidth = 1.5, capsize = 5.5,
						markeredgecolor=color2bused1, markerfacecolor = 'white',markeredgewidth=0.5,ms=12)
			elif bst_err_plt_sym ==True:
				print
				print len(SPEC_SEP_VAR_M),SPEC_SEP_VAR_M
				print len(pts_line_M),pts_line_M
				print len(pts_line_M),pts_line_M
				print len(SPEC_POINTS_M_9_ERR_HGH),SPEC_POINTS_M_9_ERR_HGH
				print len(SPEC_POINTS_NMB_M),SPEC_POINTS_NMB_M
				print len(pts_line_M),pts_line_M
				print len(SPEC_POINTS_M_9_ERR_LOW),SPEC_POINTS_M_9_ERR_LOW
				print len(SPEC_POINTS_NMB_M),SPEC_POINTS_NMB_M
				print len(SPEC_POINTS_M_SNR0),SPEC_POINTS_M_SNR0
				print
				for j_indx,(bin_var,ew_var,ew_var_err_h,pts_nmb_avg) in enumerate(zip(SPEC_SEP_VAR_M,pts_line_M,SPEC_POINTS_M_9_ERR_HGH,SPEC_POINTS_NMB_M)):
					plt.errorbar(bin_var, ew_var, 
						yerr  = [abs(np.asarray(ew_var)-np.asarray(ew_var_err_h))/np.sqrt(np.asarray(pts_nmb_avg)),abs(np.asarray(ew_var_err_h)-np.asarray(ew_var))/np.sqrt(np.asarray(pts_nmb_avg))],
						#fmt   = LINES[6][lines],
						zorder = 2,
						fmt   = markers_mpl[j_indx],#'o',
						color = color2bused1,elinewidth = 1.5, capsize = 5.5,
						markeredgecolor=color2bused1, markerfacecolor = 'white',markeredgewidth=0.5,ms=12)		
		elif mlt_stk_fct == 'avg'  and bst_err_plt == False:
			pts_line_A = SPEC_POINTS_A_9
			pts_line_A = pts_line_A
			color2bused = 'red'
			print
			print colored('Plot values (SEP-BIN):','yellow')
			print SPEC_SEP_VAR,len(SPEC_SEP_VAR)
			print colored('Plot values (EW-AVG):','yellow')
			print pts_line_A,len(pts_line_A)
			print
			print colored('Plot values (SEP-BIN):','yellow')
			print 'T: ',(len(SPEC_SEP_VAR)),SPEC_SEP_VAR
			print 'A: ',(len(SPEC_SEP_VAR_A)),SPEC_SEP_VAR_A
			print colored('Plot values (EW-AVG):','yellow')
			print 'A: ',(len(pts_line_A)),pts_line_A
			print
			print colored('Number of galaxies per bin:','yellow') 
			print 'A: ',(len(SPEC_POINTS_NMB_A),SPEC_POINTS_NMB_A)
			print colored('Number of galaxies per bin (SQR):','yellow') 
			print 'A: ',(len(SPEC_POINTS_NMB_A_R),SPEC_POINTS_NMB_A_R)
			print
			print colored('SNR Individual Line (Average): ','yellow')
			print SPEC_POINTS_A_SNR
			print
			print colored('Number of galaxies per bin:','yellow') 
			print 'A: ',(len(SPEC_POINTS_NMB_A)),SPEC_POINTS_NMB_A
			print 'A: ',(len(SPEC_POINTS_NMB2_A)),SPEC_POINTS_NMB2_A
			print colored('Number of galaxies per bin (SQR):','yellow') 
			print 'A: ',(len(SPEC_POINTS_NMB_A_R)),SPEC_POINTS_NMB_A_R
			print 'A: ',(len(SPEC_POINTS_NMB2_A_R)),SPEC_POINTS_NMB2_A_R
			print
			print colored('SNR Individual Line (Average): ','yellow')
			print '******: ',len(SPEC_POINTS_A_SNR0),SPEC_POINTS_A_SNR0
			print 'UB-ALL: ',len(SPEC_POINTS_A_SNR),SPEC_POINTS_A_SNR
			print 'UB-CNT: ',len(SPEC_POINTS_A_SNR2),SPEC_POINTS_A_SNR2
			print 'UB-FIT: ',len(SPEC_POINTS_A_SNR3),SPEC_POINTS_A_SNR3
			print 'UB-PLT: ',len(SPEC_POINTS_A_SNR4),SPEC_POINTS_A_SNR4
			print 'BN-MED: ',len(SPEC_POINTS_A_SNR5),SPEC_POINTS_A_SNR5
			print
			print "\n".join([str(x) + str(y) for x,y in zip(SPEC_SEP_VAR_A,pts_line_A)])
			print
			for j_indx,(bin_var,ew_var) in enumerate(zip(SPEC_SEP_VAR_A,pts_line_A)):
				plt.plot(bin_var,ew_var,
							#marker = LINES[6][lines],
							marker = markers_mpl[j_indx],#'o',
							color=color2bused,markersize=12,
							zorder = 1,
							#markerfacecolor = 'None',
							label  = LINES[4][lines]  + 
							' ('+ str(LINES[0][lines])+
							 r'$\AA$' + ') '+'med '   +
							 "\n"  + 'SNR-A   : '   + str(SPEC_POINTS_A_SNR)  +
							 "\n"  + 'SNR-C   : '   + str(SPEC_POINTS_A_SNR2) +
							 "\n"  + 'N: '    + str(SPEC_POINTS_NMB_A)    +
							 "\n"  + 'N: '    + str(SPEC_POINTS_NMB3_A),
							 ls='-.')

				if add_snr_vls == True:
					[ax110.annotate(str(sbs_snr_vle), 					# this is the text
									(bin_var[sbs_idx],ew_var[sbs_idx]),	# this is the point to label
									textcoords="offset points", 		# how to position the text
									xytext=(2,6), 						# distance from text to points (x,y)
									color='red',						#
									family='serif',                     #
									fontsize = 12,						#
									ha='center') 						# horizontal alignment can be left, right or center
					for sbs_idx,sbs_snr_vle in enumerate(SPEC_POINTS_A_SNR0[j_indx])]
				else:
					pass

			pts_line_ALL_A.append(pts_line_A)
			lbl_line_ALL_A.append(LINES[4][lines]+' ('+ str(LINES[0][lines])+r'$\AA$'+') '+'avg '+color2bused)
			mrk_line_ALL.append(LINES[6][lines])
			clr_line_ALL.append(color2bused)			
		elif mlt_stk_fct == 'avg'  and bst_err_plt == True:
			pts_line_A = SPEC_POINTS_A_9
			pts_line_A = pts_line_A
			color2bused1 = 'blue'
			color2bused2 = 'red'
			print
			print colored('Plot values (SEP-BIN):','yellow')
			print SPEC_SEP_VAR,len(SPEC_SEP_VAR)
			print colored('Plot values (EW-AVG):','yellow')
			print pts_line_A,len(pts_line_A)
			print
			print colored('Plot values (SEP-BIN):','yellow')
			print 'T: ',(len(SPEC_SEP_VAR)),SPEC_SEP_VAR
			print 'A: ',(len(SPEC_SEP_VAR_A)),SPEC_SEP_VAR_A
			print colored('Plot values (EW-AVG):','yellow')
			print 'A: ',(len(pts_line_A)),pts_line_A
			print
			print colored('Errors for Average values:','yellow')
			print 'P: ',(len(pts_line_A),pts_line_A)
			print 'A: ',(len(SPEC_POINTS_A_9_ERR_LOW)),SPEC_POINTS_A_9_ERR_LOW
			print 'A: ',(len(SPEC_POINTS_A_9_ERR_LOW)),SPEC_POINTS_A_9_ERR_LOW
			print
			print colored('Number of galaxies per bin:','yellow') 
			print 'A: ',(len(SPEC_POINTS_NMB_A),SPEC_POINTS_NMB_A)
			print colored('Number of galaxies per bin (SQR):','yellow') 
			print 'A: ',(len(SPEC_POINTS_NMB_A_R),SPEC_POINTS_NMB_A_R)
			print
			print colored('SNR Individual Line (Average): ','yellow')
			print SPEC_POINTS_A_SNR
			print
			print colored('Number of galaxies per bin:','yellow') 
			print 'A: ',(len(SPEC_POINTS_NMB_A)),SPEC_POINTS_NMB_A
			print 'A: ',(len(SPEC_POINTS_NMB2_A)),SPEC_POINTS_NMB2_A
			print colored('Number of galaxies per bin (SQR):','yellow') 
			print 'A: ',(len(SPEC_POINTS_NMB_A_R)),SPEC_POINTS_NMB_A_R
			print 'A: ',(len(SPEC_POINTS_NMB2_A_R)),SPEC_POINTS_NMB2_A_R
			print
			print colored('SNR Individual Line (Average): ','yellow')
			print '******: ',len(SPEC_POINTS_A_SNR0),SPEC_POINTS_A_SNR0
			print 'UB-ALL: ',len(SPEC_POINTS_A_SNR),SPEC_POINTS_A_SNR
			print 'UB-CNT: ',len(SPEC_POINTS_A_SNR2),SPEC_POINTS_A_SNR2
			print 'UB-FIT: ',len(SPEC_POINTS_A_SNR3),SPEC_POINTS_A_SNR3
			print 'UB-PLT: ',len(SPEC_POINTS_A_SNR4),SPEC_POINTS_A_SNR4
			print 'BN-MED: ',len(SPEC_POINTS_A_SNR5),SPEC_POINTS_A_SNR5
			print
			print colored('Confidence Intervals (Average): ','yellow')
			print len(pts_line_A),pts_line_A
			print 'L: ',len(SPEC_POINTS_A_9_ERR_LOW),SPEC_POINTS_A_9_ERR_LOW
			print 'H: ',len(SPEC_POINTS_A_9_ERR_HGH),SPEC_POINTS_A_9_ERR_HGH
			print len(SPEC_POINTS_NMB_A),SPEC_POINTS_NMB_A
			print
			print colored('Errors for Average values considering sample size (N):','yellow')
			print 'L: ',abs(np.asarray(pts_line_A)-(np.asarray(SPEC_POINTS_A_9_ERR_LOW)))/(SPEC_POINTS_NMB_A_R)
			print 'H: ',abs(np.asarray(pts_line_A)-(np.asarray(SPEC_POINTS_A_9_ERR_HGH)))/(SPEC_POINTS_NMB_A_R)
			print
			print "\n".join([str(x) + str(y) for x,y in zip(SPEC_SEP_VAR_A,pts_line_A)])
			print
			for j_indx,(bin_var,ew_var) in enumerate(zip(SPEC_SEP_VAR_A,pts_line_A)):
				plt.plot(bin_var,ew_var,
							#marker = LINES[6][lines],
							marker = markers_mpl[j_indx],#'o',
							color=color2bused2,markersize=12,
							zorder = 1,
							#markerfacecolor = 'None',
							label  = LINES[4][lines]  + 
							' ('+ str(LINES[0][lines])+
							 r'$\AA$' + ') '+'med '   +
							 "\n"  + 'SNR-A   : '   + str(SPEC_POINTS_A_SNR)  +
							 "\n"  + 'SNR-C   : '   + str(SPEC_POINTS_A_SNR2) +
							 "\n"  + 'N: '    + str(SPEC_POINTS_NMB_A)    +
							 "\n"  + 'N: '    + str(SPEC_POINTS_NMB3_A),
							 ls='-.')

				if add_snr_vls == True:
					[ax110.annotate(str(sbs_snr_vle), 					# this is the text
									(bin_var[sbs_idx],ew_var[sbs_idx]),	# this is the point to label
									textcoords="offset points", 		# how to position the text
									xytext=(2,6), 						# distance from text to points (x,y)
									color='red',						#
									family='serif',                     #
									fontsize = 12,						#
									ha='center') 						# horizontal alignment can be left, right or center
					for sbs_idx,sbs_snr_vle in enumerate(SPEC_POINTS_A_SNR0[j_indx])]
				else:
					pass					
			if bst_err_plt_sym == False:
				for j_indx,(bin_var,ew_var,ew_var_err_l,ew_var_err_h,pts_nmb_avg) in enumerate(zip(SPEC_SEP_VAR_A,pts_line_A,SPEC_POINTS_A_9_ERR_LOW,SPEC_POINTS_A_9_ERR_HGH,SPEC_POINTS_NMB_A)):
					plt.errorbar(bin_var, ew_var, 
						yerr   = [abs(np.asarray(ew_var)-np.asarray(ew_var_err_l))/np.sqrt(np.asarray(pts_nmb_avg)),abs(np.asarray(ew_var_err_h)-np.asarray(ew_var))/np.sqrt(np.asarray(pts_nmb_avg))],
						#fmt   = LINES[6][lines],
						fmt    = markers_mpl[j_indx],#'o',
						zorder = 2,
						color  = color2bused2,elinewidth = 1.5, capsize = 5.5,
						markeredgecolor=color2bused2, markerfacecolor = None,markeredgewidth=0.5,ms=12)
			elif bst_err_plt_sym ==True:
				print
				print len(SPEC_POINTS_A_SNR0),SPEC_POINTS_A_SNR0
				print
				print len(SPEC_SEP_VAR_A),SPEC_SEP_VAR_A
				print len(pts_line_A),pts_line_A
				print len(SPEC_POINTS_A_9_ERR_HGH),SPEC_POINTS_A_9_ERR_HGH
				print len(SPEC_POINTS_NMB_A),SPEC_POINTS_NMB_A
				print
				print len(SPEC_SEP_VAR_A),SPEC_SEP_VAR_A				
				print len(pts_line_A),pts_line_A
				print len(SPEC_POINTS_A_9_ERR_LOW),SPEC_POINTS_A_9_ERR_LOW
				print len(SPEC_POINTS_NMB_A),SPEC_POINTS_NMB_A
				
				print
				for j_indx,(bin_var,ew_var,ew_var_err_h,pts_nmb_avg) in enumerate(zip(SPEC_SEP_VAR_A,pts_line_A,SPEC_POINTS_A_9_ERR_HGH,SPEC_POINTS_NMB_A)):
					plt.errorbar(bin_var, ew_var, 
						yerr   = [abs(np.asarray(ew_var)-np.asarray(ew_var_err_h))/np.sqrt(np.asarray(pts_nmb_avg)),abs(np.asarray(ew_var_err_h)-np.asarray(ew_var))/np.sqrt(np.asarray(pts_nmb_avg))],
						#fmt   = LINES[6][lines],
						fmt    = markers_mpl[j_indx],
						zorder = 2,
						color  = color2bused2,elinewidth = 1.5, capsize = 5.5,
						markeredgecolor=color2bused2, markerfacecolor = None,markeredgewidth=0.5,ms=12)
		elif mlt_stk_fct == 'both' and bst_err_plt == False: 
			pts_line_M = SPEC_POINTS_M_9
			pts_line_M = pts_line_M
			pts_line_A = SPEC_POINTS_A_9
			pts_line_A = pts_line_A
			color2bused1 = 'blue'
			color2bused2 = 'red'
			print
			print colored('Plot values (SEP-BIN):','yellow')
			print SPEC_SEP_VAR,len(SPEC_SEP_VAR)
			print colored('Plot values (EW-MED):','yellow')
			print pts_line_M,len(pts_line_M)
			print colored('Plot values (EW-AVG):','yellow')
			print pts_line_A,len(pts_line_A)
			print
			print colored('Plot values (SEP-BIN):','yellow')
			print 'T: ',(len(SPEC_SEP_VAR)),SPEC_SEP_VAR
			print 'M: ',(len(SPEC_SEP_VAR_M)),SPEC_SEP_VAR_M
			print 'A: ',(len(SPEC_SEP_VAR_A)),SPEC_SEP_VAR_A
			print colored('Plot values (EW-MED):','yellow')
			print 'M: ',(len(pts_line_M)),pts_line_M
			print colored('Plot values (EW-AVG):','yellow')
			print 'A: ',(len(pts_line_A)),pts_line_A
			print
			print colored('Number of galaxies per bin:','yellow') 
			print 'T: ',(len(SPEC_POINTS_NMB),SPEC_POINTS_NMB)
			print 'A: ',(len(SPEC_POINTS_NMB_A),SPEC_POINTS_NMB_A)
			print 'M: ',(len(SPEC_POINTS_NMB_M),SPEC_POINTS_NMB_M)
			print colored('Number of galaxies per bin (SQR):','yellow') 
			print 'A: ',(len(SPEC_POINTS_NMB_A_R),SPEC_POINTS_NMB_A_R)
			print 'M: ',(len(SPEC_POINTS_NMB_M_R),SPEC_POINTS_NMB_M_R)
			print
			print colored('SNR Individual Line (Median): ','yellow')
			print SPEC_POINTS_M_SNR
			print
			print colored('SNR Individual Line (Average): ','yellow')
			print SPEC_POINTS_A_SNR
			print
			print colored('Number of galaxies per bin:','yellow') 
			print 'T: ',(len(SPEC_POINTS_NMB)),SPEC_POINTS_NMB
			print 'T: ',(len(SPEC_POINTS_NMB2)),SPEC_POINTS_NMB2
			print 'A: ',(len(SPEC_POINTS_NMB_A)),SPEC_POINTS_NMB_A
			print 'A: ',(len(SPEC_POINTS_NMB2_A)),SPEC_POINTS_NMB2_A
			print 'M: ',(len(SPEC_POINTS_NMB_M)),SPEC_POINTS_NMB_M
			print 'M: ',(len(SPEC_POINTS_NMB2_M)),SPEC_POINTS_NMB2_M
			print colored('Number of galaxies per bin (SQR):','yellow') 
			print 'A: ',(len(SPEC_POINTS_NMB_A_R)),SPEC_POINTS_NMB_A_R
			print 'A: ',(len(SPEC_POINTS_NMB2_A_R)),SPEC_POINTS_NMB2_A_R
			print 'M: ',(len(SPEC_POINTS_NMB_M_R)),SPEC_POINTS_NMB_M_R
			print 'M: ',(len(SPEC_POINTS_NMB2_M_R)),SPEC_POINTS_NMB2_M_R
			print
			print colored('SNR Individual Line (Median): ','yellow')
			print '******: ',len(SPEC_POINTS_M_SNR0),SPEC_POINTS_M_SNR0
			print 'UB-ALL: ',len(SPEC_POINTS_M_SNR),SPEC_POINTS_M_SNR
			print 'UB-CNT: ',len(SPEC_POINTS_M_SNR2),SPEC_POINTS_M_SNR2
			print 'UB-FIT: ',len(SPEC_POINTS_M_SNR3),SPEC_POINTS_M_SNR3
			print 'UB-PLT: ',len(SPEC_POINTS_M_SNR4),SPEC_POINTS_M_SNR4
			print 'BN-MED: ',len(SPEC_POINTS_M_SNR5),SPEC_POINTS_M_SNR5
			print
			print colored('SNR Individual Line (Average): ','yellow')
			print '******: ',len(SPEC_POINTS_A_SNR0),SPEC_POINTS_A_SNR0
			print 'UB-ALL: ',len(SPEC_POINTS_A_SNR),SPEC_POINTS_A_SNR
			print 'UB-CNT: ',len(SPEC_POINTS_A_SNR2),SPEC_POINTS_A_SNR2
			print 'UB-FIT: ',len(SPEC_POINTS_A_SNR3),SPEC_POINTS_A_SNR3
			print 'UB-PLT: ',len(SPEC_POINTS_A_SNR4),SPEC_POINTS_A_SNR4
			print 'BN-MED: ',len(SPEC_POINTS_A_SNR5),SPEC_POINTS_A_SNR5
			print
			print 'MED:'
			print "\n".join([str(x) + str(y) for x,y in zip(SPEC_SEP_VAR_M,pts_line_M)])
			print 'AVG:'
			print "\n".join([str(x) + str(y) for x,y in zip(SPEC_SEP_VAR_A,pts_line_A)])
			print
			for j_indx,(bin_var,ew_var) in enumerate(zip(SPEC_SEP_VAR_M,pts_line_M)):
				plt.plot(bin_var,ew_var,
							#marker = LINES[6][lines],
							marker = markers_mpl[j_indx],#'o',
							color  = color2bused1,markersize=12,
							markerfacecolor = 'None',
							zorder = 1,
							label  = LINES[4][lines]  + 
							' ('+ str(LINES[0][lines])+
							 r'$\AA$' + ') '+'med '   +
							 "\n"  + 'SNR-A   : '   + str(SPEC_POINTS_M_SNR)  +
							 "\n"  + 'SNR-C   : '   + str(SPEC_POINTS_M_SNR2) +
							 "\n"  + 'N: '    + str(SPEC_POINTS_NMB_M)    +
							 "\n"  + 'N: '    + str(SPEC_POINTS_NMB3_M),
							 ls='-.')

				if add_snr_vls == True:
					[ax110.annotate(str(sbs_snr_vle), 					# this is the text
									(bin_var[sbs_idx],ew_var[sbs_idx]),	# this is the point to label
									textcoords="offset points", 		# how to position the text
									xytext=(2,6), 						# distance from text to points (x,y)
									color='blue',						#
									family='serif',                     #
									fontsize = 12,						#
									ha='center') 						# horizontal alignment can be left, right or center
					for sbs_idx,sbs_snr_vle in enumerate(SPEC_POINTS_M_SNR0[j_indx])]
				else:
					pass

			for j_indx,(bin_var,ew_var) in enumerate(zip(SPEC_SEP_VAR_A,pts_line_A)):
				plt.plot(bin_var,ew_var,
							#marker = LINES[6][lines],
							marker = markers_mpl[j_indx],#'o',
							color=color2bused2,markersize=12,
							#markerfacecolor = 'None',
							zorder = 1,
							label  = LINES[4][lines]  + 
							' ('+ str(LINES[0][lines])+
							 r'$\AA$' + ') '+'med '   +
							 "\n"  + 'SNR-A   : '   + str(SPEC_POINTS_A_SNR)  +
							 "\n"  + 'SNR-C   : '   + str(SPEC_POINTS_A_SNR2) +
							 "\n"  + 'N: '    + str(SPEC_POINTS_NMB_A)    +
							 "\n"  + 'N: '    + str(SPEC_POINTS_NMB3_A),
							 ls='-.')

				if add_snr_vls == True:
					[ax110.annotate(str(sbs_snr_vle), 					# this is the text
									(bin_var[sbs_idx],ew_var[sbs_idx]),	# this is the point to label
									textcoords="offset points", 		# how to position the text
									xytext=(2,6), 						# distance from text to points (x,y)
									color='red',						#
									family='serif',                     #
									fontsize = 12,						#
									ha='center') 						# horizontal alignment can be left, right or center
					for sbs_idx,sbs_snr_vle in enumerate(SPEC_POINTS_A_SNR0[j_indx])]
				else:
					pass					
		elif mlt_stk_fct == 'both' and bst_err_plt == True:
			pts_line_M = SPEC_POINTS_M_9
			pts_line_M = pts_line_M
			pts_line_A = SPEC_POINTS_A_9
			pts_line_A = pts_line_A
			color2bused1 = 'blue'
			color2bused2 = 'red'
			print
			print colored('Plot values (SEP-BIN):','yellow')
			print SPEC_SEP_VAR,len(SPEC_SEP_VAR)
			print colored('Plot values (EW-MED):','yellow')
			print pts_line_M,len(pts_line_M)
			print colored('Plot values (EW-AVG):','yellow')
			print pts_line_A,len(pts_line_A)
			print
			print colored('Plot values (SEP-BIN):','yellow')
			print 'T: ',(len(SPEC_SEP_VAR)),SPEC_SEP_VAR
			print 'M: ',(len(SPEC_SEP_VAR_M)),SPEC_SEP_VAR_M
			print 'A: ',(len(SPEC_SEP_VAR_A)),SPEC_SEP_VAR_A
			print colored('Plot values (EW-MED):','yellow')
			print 'M: ',(len(pts_line_M)),pts_line_M
			print colored('Plot values (EW-AVG):','yellow')
			print 'A: ',(len(pts_line_A)),pts_line_A
			print
			print colored('Errors for Average values:','yellow')
			print 'P: ',(len(pts_line_A),pts_line_A)
			print 'A: ',(len(SPEC_POINTS_A_9_ERR_LOW)),SPEC_POINTS_A_9_ERR_LOW
			print 'A: ',(len(SPEC_POINTS_A_9_ERR_LOW)),SPEC_POINTS_A_9_ERR_LOW
			print
			print colored('Errors for Median values:','yellow')
			print 'P: ',(len(pts_line_M),pts_line_M)
			print 'M: ',(len(SPEC_POINTS_M_9_ERR_LOW)),SPEC_POINTS_M_9_ERR_LOW
			print 'M: ',(len(SPEC_POINTS_M_9_ERR_HGH)),SPEC_POINTS_M_9_ERR_HGH
			print
			print colored('Number of galaxies per bin:','yellow') 
			print 'T: ',(len(SPEC_POINTS_NMB),SPEC_POINTS_NMB)
			print 'A: ',(len(SPEC_POINTS_NMB_A),SPEC_POINTS_NMB_A)
			print 'M: ',(len(SPEC_POINTS_NMB_M),SPEC_POINTS_NMB_M)
			print colored('Number of galaxies per bin (SQR):','yellow') 
			print 'A: ',(len(SPEC_POINTS_NMB_A_R),SPEC_POINTS_NMB_A_R)
			print 'M: ',(len(SPEC_POINTS_NMB_M_R),SPEC_POINTS_NMB_M_R)
			print
			print colored('SNR Individual Line (Median): ','yellow')
			print SPEC_POINTS_M_SNR
			print
			print colored('SNR Individual Line (Average): ','yellow')
			print SPEC_POINTS_A_SNR
			print
			print colored('Number of galaxies per bin:','yellow') 
			print 'T: ',(len(SPEC_POINTS_NMB)),SPEC_POINTS_NMB
			print 'T: ',(len(SPEC_POINTS_NMB2)),SPEC_POINTS_NMB2
			print 'A: ',(len(SPEC_POINTS_NMB_A)),SPEC_POINTS_NMB_A
			print 'A: ',(len(SPEC_POINTS_NMB2_A)),SPEC_POINTS_NMB2_A
			print 'M: ',(len(SPEC_POINTS_NMB_M)),SPEC_POINTS_NMB_M
			print 'M: ',(len(SPEC_POINTS_NMB2_M)),SPEC_POINTS_NMB2_M
			print colored('Number of galaxies per bin (SQR):','yellow') 
			print 'A: ',(len(SPEC_POINTS_NMB_A_R)),SPEC_POINTS_NMB_A_R
			print 'A: ',(len(SPEC_POINTS_NMB2_A_R)),SPEC_POINTS_NMB2_A_R
			print 'M: ',(len(SPEC_POINTS_NMB_M_R)),SPEC_POINTS_NMB_M_R
			print 'M: ',(len(SPEC_POINTS_NMB2_M_R)),SPEC_POINTS_NMB2_M_R
			print
			print colored('SNR Individual Line (Median): ','yellow')
			print '******: ',len(SPEC_POINTS_M_SNR0),SPEC_POINTS_M_SNR0
			print 'UB-ALL: ',len(SPEC_POINTS_M_SNR),SPEC_POINTS_M_SNR
			print 'UB-CNT: ',len(SPEC_POINTS_M_SNR2),SPEC_POINTS_M_SNR2
			print 'UB-FIT: ',len(SPEC_POINTS_M_SNR3),SPEC_POINTS_M_SNR3
			print 'UB-PLT: ',len(SPEC_POINTS_M_SNR4),SPEC_POINTS_M_SNR4
			print 'BN-MED: ',len(SPEC_POINTS_M_SNR5),SPEC_POINTS_M_SNR5
			print
			print colored('SNR Individual Line (Average): ','yellow')
			print '******: ',len(SPEC_POINTS_A_SNR0),SPEC_POINTS_A_SNR0
			print 'UB-ALL: ',len(SPEC_POINTS_A_SNR),SPEC_POINTS_A_SNR
			print 'UB-CNT: ',len(SPEC_POINTS_A_SNR2),SPEC_POINTS_A_SNR2
			print 'UB-FIT: ',len(SPEC_POINTS_A_SNR3),SPEC_POINTS_A_SNR3
			print 'UB-PLT: ',len(SPEC_POINTS_A_SNR4),SPEC_POINTS_A_SNR4
			print 'BN-MED: ',len(SPEC_POINTS_A_SNR5),SPEC_POINTS_A_SNR5
			print
			print colored('Confidence Intervals (Median): ','yellow')
			print len(pts_line_M),pts_line_M
			print 'L: ',len(SPEC_POINTS_M_9_ERR_LOW),SPEC_POINTS_M_9_ERR_LOW
			print 'H: ',len(SPEC_POINTS_M_9_ERR_HGH),SPEC_POINTS_M_9_ERR_HGH
			print len(SPEC_POINTS_NMB_M),SPEC_POINTS_NMB_M
			print
			print colored('Confidence Intervals (Average): ','yellow')
			print len(pts_line_A),pts_line_A
			print 'L: ',len(SPEC_POINTS_A_9_ERR_LOW),SPEC_POINTS_A_9_ERR_LOW
			print 'H: ',len(SPEC_POINTS_A_9_ERR_HGH),SPEC_POINTS_A_9_ERR_HGH
			print len(SPEC_POINTS_NMB_A),SPEC_POINTS_NMB_A
			print
			print colored('Errors for Average values considering sample size (N):','yellow')
			print 'L: ',abs(np.asarray(pts_line_A)-(np.asarray(SPEC_POINTS_A_9_ERR_LOW)))/(SPEC_POINTS_NMB_A_R)
			print 'H: ',abs(np.asarray(pts_line_A)-(np.asarray(SPEC_POINTS_A_9_ERR_HGH)))/(SPEC_POINTS_NMB_A_R)
			print colored('Errors for Median values considering sample size (N):','yellow')
			print 'L: ',abs(np.asarray(pts_line_M)-(np.asarray(SPEC_POINTS_M_9_ERR_LOW)))/(SPEC_POINTS_NMB_M_R)
			print 'H: ',abs(np.asarray(pts_line_M)-(np.asarray(SPEC_POINTS_M_9_ERR_HGH)))/(SPEC_POINTS_NMB_M_R)
			print
			print
			print 'MED:'
			print "\n".join([str(x) + str(y) for x,y in zip(SPEC_SEP_VAR_M,pts_line_M)])
			print 'AVG:'
			print "\n".join([str(x) + str(y) for x,y in zip(SPEC_SEP_VAR_A,pts_line_A)])
			print
			for j_indx,(bin_var,ew_var) in enumerate(zip(SPEC_SEP_VAR_M,pts_line_M)):
				plt.plot(bin_var,ew_var,
							#marker = LINES[6][lines],
							marker = markers_mpl[j_indx],#'o',
							color  =color2bused1,markersize=10,
							markerfacecolor = 'None',
							zorder = 1,
							label  = LINES[4][lines]  + 
							' ('+ str(LINES[0][lines])+
							 r'$\AA$' + ') '+'med '   +
							 "\n"  + 'SNR-A   : '   + str(SPEC_POINTS_M_SNR)  +
							 "\n"  + 'SNR-C   : '   + str(SPEC_POINTS_M_SNR2) +
							 "\n"  + 'N: '    + str(SPEC_POINTS_NMB_M)    +
							 "\n"  + 'N: '    + str(SPEC_POINTS_NMB3_M),
							 ls='-.')
				if add_snr_vls == True:
					[ax110.annotate(str(sbs_snr_vle), 					# this is the text
									(bin_var[sbs_idx],ew_var[sbs_idx]),	# this is the point to label
									textcoords="offset points", 		# how to position the text
									xytext=(2,6), 						# distance from text to points (x,y)
									color='blue',						#
									family='serif',                     #
									fontsize = 12,						#
									ha='center') 						# horizontal alignment can be left, right or center
					for sbs_idx,sbs_snr_vle in enumerate(SPEC_POINTS_M_SNR0[j_indx])]
				else:
					pass
			for j_indx,(bin_var,ew_var) in enumerate(zip(SPEC_SEP_VAR_A,pts_line_A)):
				plt.plot(bin_var,ew_var,
							#marker = LINES[6][lines],
							marker = markers_mpl[j_indx],#'o',
							color=color2bused2,markersize=10,
							#markerfacecolor = 'None',
							zorder = 1,
							label  = LINES[4][lines]  + 
							' ('+ str(LINES[0][lines])+
							 r'$\AA$' + ') '+'med '   +
							 "\n"  + 'SNR-A   : '   + str(SPEC_POINTS_A_SNR)  +
							 "\n"  + 'SNR-C   : '   + str(SPEC_POINTS_A_SNR2) +
							 "\n"  + 'N: '    + str(SPEC_POINTS_NMB_A)    +
							 "\n"  + 'N: '    + str(SPEC_POINTS_NMB3_A),
							 ls='solid')

				if add_snr_vls == True:
					[ax110.annotate(str(sbs_snr_vle), 					# this is the text
									(bin_var[sbs_idx],ew_var[sbs_idx]),	# this is the point to label
									textcoords="offset points", 		# how to position the text
									xytext=(2,6), 						# distance from text to points (x,y)
									color='red',						#
									family='serif',                     #
									fontsize = 12,						#
									ha='center') 						# horizontal alignment can be left, right or center
					for sbs_idx,sbs_snr_vle in enumerate(SPEC_POINTS_A_SNR0[j_indx])]
				else:
					pass					
			if bst_err_plt_sym == False:
				for j_indx,(bin_var,ew_var,ew_var_err_l,ew_var_err_h,pts_nmb_avg) in enumerate(zip(SPEC_SEP_VAR_A,pts_line_A,SPEC_POINTS_A_9_ERR_LOW,SPEC_POINTS_A_9_ERR_HGH,SPEC_POINTS_NMB_A)):
					plt.errorbar(bin_var, ew_var, 
						yerr   = [abs(np.asarray(ew_var)-np.asarray(ew_var_err_l))/np.sqrt(np.asarray(pts_nmb_avg)),abs(np.asarray(ew_var_err_h)-np.asarray(ew_var))/np.sqrt(np.asarray(pts_nmb_avg))],
						#fmt   = LINES[6][lines],
						fmt    = markers_mpl[j_indx],#'o',
						zorder = 2,
						color  = color2bused2,elinewidth = 1.5, capsize = 5.5,
						markeredgecolor=color2bused2, markerfacecolor = None,markeredgewidth=0.5,ms=10)
				for j_indx,(bin_var,ew_var,ew_var_err_l,ew_var_err_h,pts_nmb_avg) in enumerate(zip(SPEC_SEP_VAR_M,pts_line_M,SPEC_POINTS_M_9_ERR_LOW,SPEC_POINTS_M_9_ERR_HGH,SPEC_POINTS_NMB_M)):
					plt.errorbar(bin_var, ew_var, 
						yerr   = [abs(np.asarray(ew_var)-np.asarray(ew_var_err_l))/np.sqrt(np.asarray(pts_nmb_avg)),abs(np.asarray(ew_var_err_h)-np.asarray(ew_var))/np.sqrt(np.asarray(pts_nmb_avg))],
						#fmt   = LINES[6][lines],
						fmt    = markers_mpl[j_indx],#'o',
						zorder = 2,
						color  = color2bused1,elinewidth = 1.5, capsize = 5.5,
						markeredgecolor=color2bused1, markerfacecolor = 'white',markeredgewidth=0.5,ms=10)
			elif bst_err_plt_sym ==True:
				print
				print 'MED: '
				print len(SPEC_POINTS_M_SNR0),SPEC_POINTS_M_SNR0
				print
				print 'MED-H: '
				print len(SPEC_SEP_VAR_M),SPEC_SEP_VAR_M
				print len(pts_line_M),pts_line_M
				print len(SPEC_POINTS_M_9_ERR_HGH),SPEC_POINTS_M_9_ERR_HGH
				print len(SPEC_POINTS_NMB_M),SPEC_POINTS_NMB_M
				print
				print 'MED-L: '
				print len(SPEC_SEP_VAR_M),SPEC_SEP_VAR_M
				print len(pts_line_M),pts_line_M
				print len(SPEC_POINTS_M_9_ERR_LOW),SPEC_POINTS_M_9_ERR_LOW
				print len(SPEC_POINTS_NMB_M),SPEC_POINTS_NMB_M
				print
				print 'AVG: '				
				print len(SPEC_POINTS_A_SNR0),SPEC_POINTS_M_SNR0
				print
				print 'AVG-H: '				
				print len(SPEC_SEP_VAR_A),SPEC_SEP_VAR_A
				print len(pts_line_A),pts_line_A
				print len(SPEC_POINTS_A_9_ERR_HGH),SPEC_POINTS_A_9_ERR_HGH
				print len(SPEC_POINTS_NMB_A),SPEC_POINTS_NMB_A
				print
				print 'AVG-L: '				
				print len(SPEC_SEP_VAR_A),SPEC_SEP_VAR_A
				print len(pts_line_A),pts_line_A
				print len(SPEC_POINTS_A_9_ERR_LOW),SPEC_POINTS_A_9_ERR_LOW
				print len(SPEC_POINTS_NMB_A),SPEC_POINTS_NMB_A
				print
				for j_indx,(bin_var,ew_var,ew_var_err_h,pts_nmb_avg) in enumerate(zip(SPEC_SEP_VAR_A,pts_line_A,SPEC_POINTS_A_9_ERR_HGH,SPEC_POINTS_NMB_A)):
					plt.errorbar(bin_var, ew_var, 
						yerr   = [abs(np.asarray(ew_var)-np.asarray(ew_var_err_h))/np.sqrt(np.asarray(pts_nmb_avg)),abs(np.asarray(ew_var_err_h)-np.asarray(ew_var))/np.sqrt(np.asarray(pts_nmb_avg))],
						#fmt    = LINES[6][lines],
						fmt    = markers_mpl[j_indx],#'o',
						color  = color2bused2,elinewidth = 1.5, capsize = 5.5,
						zorder = 2,
						markeredgecolor=color2bused2, markerfacecolor = None,markeredgewidth=0.5,ms=10)

				for j_indx,(bin_var,ew_var,ew_var_err_h,pts_nmb_avg) in enumerate(zip(SPEC_SEP_VAR_M,pts_line_M,SPEC_POINTS_M_9_ERR_HGH,SPEC_POINTS_NMB_M)):
					plt.errorbar(bin_var, ew_var, 
						yerr   = [abs(np.asarray(ew_var)-np.asarray(ew_var_err_h))/np.sqrt(np.asarray(pts_nmb_avg)),abs(np.asarray(ew_var_err_h)-np.asarray(ew_var))/np.sqrt(np.asarray(pts_nmb_avg))],
						#fmt    = LINES[6][lines],
						fmt    = markers_mpl[j_indx],#'o',
						color  = color2bused1,elinewidth = 1.5, capsize = 5.5,
						zorder = 2,
						markeredgecolor=color2bused1, markerfacecolor = 'white',markeredgewidth=0.5,ms=10)
		else:
			pass

		if mlt_stk_fct == 'med' and cln_snr_aux == True:
			print
			print colored('Plot values (SEP-BIN):','cyan')
			print colored('Plot values (EW-MED):','cyan')
			print "\n".join([str(x) + str(y) for x,y in zip(SPEC_SEP_VAR_M_AUX_BIS,SPEC_POINTS_M_9_AUX_BIS)])
			print
			print "\n".join([str(pnt_snr) for pnt_snr in SPEC_POINTS_M_SNR0_AUX_BIS])
			print "\n".join([str(pnt_snr) for pnt_snr in SPEC_POINTS_M_SNR_AUX_BIS])
			print "\n".join([str(pnt_snr) for pnt_snr in SPEC_POINTS_M_SNR2_AUX_BIS])
			print "\n".join([str(pnt_snr) for pnt_snr in SPEC_POINTS_M_SNR3_AUX_BIS])
			print "\n".join([str(pnt_snr) for pnt_snr in SPEC_POINTS_M_SNR4_AUX_BIS])
			print "\n".join([str(pnt_snr) for pnt_snr in SPEC_POINTS_M_SNR5_AUX_BIS])
			print
			for j_indx,(bin_var,ew_var) in enumerate(zip(SPEC_SEP_VAR_M_AUX_BIS,SPEC_POINTS_M_9_AUX_BIS)):
				plt.scatter(bin_var,ew_var,
							marker = '.',
							color='black',
							s=20,
							zorder=3)
		elif mlt_stk_fct == 'avg' and cln_snr_aux == True:
			print
			print colored('Plot values (SEP-BIN):','cyan')
			print colored('Plot values (EW-AVG):','cyan')
			print "\n".join([str(x) + str(y) for x,y in zip(SPEC_SEP_VAR_A_AUX_BIS,SPEC_POINTS_A_9_AUX_BIS)])
			print
			print "\n".join([str(x) + str(y) for x,y in zip(SPEC_SEP_VAR_A_AUX_BIS,SPEC_POINTS_A_9_AUX_BIS)])
			print "\n".join([str(pnt_snr) for pnt_snr in SPEC_POINTS_A_SNR0_AUX_BIS])
			print "\n".join([str(pnt_snr) for pnt_snr in SPEC_POINTS_A_SNR_AUX_BIS])
			print "\n".join([str(pnt_snr) for pnt_snr in SPEC_POINTS_A_SNR2_AUX_BIS])
			print "\n".join([str(pnt_snr) for pnt_snr in SPEC_POINTS_A_SNR3_AUX_BIS])
			print "\n".join([str(pnt_snr) for pnt_snr in SPEC_POINTS_A_SNR4_AUX_BIS])
			print "\n".join([str(pnt_snr) for pnt_snr in SPEC_POINTS_A_SNR5_AUX_BIS])
			print			
			for j_indx,(bin_var,ew_var) in enumerate(zip(SPEC_SEP_VAR_A_AUX_BIS,SPEC_POINTS_A_9_AUX_BIS)):
				plt.scatter(bin_var,ew_var,
							marker = '.',
							color='black',
							s=20,
							zorder=3)
		elif mlt_stk_fct == 'both' and cln_snr_aux == True:
			print
			print colored('Plot values (SEP-BIN):','cyan')
			print colored('Plot values (EW-MED):','cyan')
			print "\n".join([str(x) + str(y) for x,y in zip(SPEC_SEP_VAR_M_AUX_BIS,SPEC_POINTS_M_9_AUX_BIS)])
			print
			print "\n".join([str(pnt_snr) for pnt_snr in SPEC_POINTS_M_SNR0_AUX_BIS])
			print "\n".join([str(pnt_snr) for pnt_snr in SPEC_POINTS_M_SNR_AUX_BIS])
			print "\n".join([str(pnt_snr) for pnt_snr in SPEC_POINTS_M_SNR2_AUX_BIS])
			print "\n".join([str(pnt_snr) for pnt_snr in SPEC_POINTS_M_SNR3_AUX_BIS])
			print "\n".join([str(pnt_snr) for pnt_snr in SPEC_POINTS_M_SNR4_AUX_BIS])
			print "\n".join([str(pnt_snr) for pnt_snr in SPEC_POINTS_M_SNR5_AUX_BIS])
			print
			for j_indx,(bin_var,ew_var) in enumerate(zip(SPEC_SEP_VAR_M_AUX_BIS,SPEC_POINTS_M_9_AUX_BIS)):
				plt.scatter(bin_var,ew_var,
							marker = '.',
							color='black',
							s=20,
							zorder=3)
			print
			print colored('Plot values (SEP-BIN):','cyan')
			print colored('Plot values (EW-AVG):','cyan')
			print "\n".join([str(x) + str(y) for x,y in zip(SPEC_SEP_VAR_A_AUX_BIS,SPEC_POINTS_A_9_AUX_BIS)])
			print
			print "\n".join([str(x) + str(y) for x,y in zip(SPEC_SEP_VAR_A_AUX_BIS,SPEC_POINTS_A_9_AUX_BIS)])
			print "\n".join([str(pnt_snr) for pnt_snr in SPEC_POINTS_A_SNR0_AUX_BIS])
			print "\n".join([str(pnt_snr) for pnt_snr in SPEC_POINTS_A_SNR_AUX_BIS])
			print "\n".join([str(pnt_snr) for pnt_snr in SPEC_POINTS_A_SNR2_AUX_BIS])
			print "\n".join([str(pnt_snr) for pnt_snr in SPEC_POINTS_A_SNR3_AUX_BIS])
			print "\n".join([str(pnt_snr) for pnt_snr in SPEC_POINTS_A_SNR4_AUX_BIS])
			print "\n".join([str(pnt_snr) for pnt_snr in SPEC_POINTS_A_SNR5_AUX_BIS])
			print			
			for j_indx,(bin_var,ew_var) in enumerate(zip(SPEC_SEP_VAR_A_AUX_BIS,SPEC_POINTS_A_9_AUX_BIS)):
				plt.scatter(bin_var,ew_var,
							marker = '.',
							color='black',
							s=20,
							zorder=3)
		else:
			pass
		#lg=plt.legend(loc=0,prop={'size':8})
		#lg.draw_frame(False)

		#plt.plot(x_s,Lya_b  ,label='Lya   Steidel+10',ls='-.',color='black'  ,marker='*')
		#plt.plot(x_s,SiII_b ,label='SiII  Steidel+10',ls='-.',color='green'  ,marker='x')
		#plt.plot(x_s,CII_b  ,label='CII   Steidel+10',ls='-.',color='purple' ,marker='2')
		#plt.plot(x_s,SiII_b ,label='SiII  Steidel+10',ls='-.',color='salmon' ,marker='3')	
		#plt.plot(x_s,SiIV_b ,label='SiIV  Steidel+10',ls='-.',color='cyan'   ,marker='>')
		#plt.plot(x_s,CIV_b  ,label='CIV   Steidel+10',ls='-.',color='red'    ,marker='o')
		#plt.plot(x_s,AlII_b ,label='AlII  Steidel+10',ls='-.',color='magenta',marker='p')
		
		#lg1=plt.legend(loc=3,prop={'size':22})
		#lg1.draw_frame(False)

		#plt.xlim([10**-0.2,xplotlimit])
		#xmin, xmax = plt.xlim()
		#plt.xlim((xmin,xmax))
		##plt.ylim([np.log10(0.1),np.log10(10)])
		##ymin, ymax = plt.ylim()
		##plt.ylim((ymin,ymax))
		#min_y, max_y = ax110.get_ylim()

		if plt_inv_xax == True:
			print
			print colored('X-axis inverted!','magenta')
			print
			min_x, max_x = ax110.get_xlim()
			plt.xlim((max_x,min_x))
		else:
			pass

		#####
		#autoaxis_SSL  = kwargs.get('autoaxis_SSL'  , False)
		#min_y_lim_SSL = kwargs.get('min_y_lim_SSL' , 0.5)
		#max_y_lim_SSL = kwargs.get('max_y_lim_SSL' , 1.5)

		#lmb_min_lim   = lmb_min
		#lmb_max_lim   = lmb_max
		#plt.xlim([lmb_min_lim_line,lmb_max_lim_line])
		#xmin, xmax = plt.xlim()
		#plt.xlim((xmin,xmax))
		# build a rectangle in axes coords
		left, width = 0, 0.95
		bottom, height = 0, 0.95
		right = left + width
		top = bottom + height
		ax110.text(left, top, 
					LINES[9][lines] + ' ' + str(LINES[0][lines])#+ ' $\AA$'
					#LINES[3][lines] + ' ' + str(LINES[0][lines]) + ' $\AA$'
					,
					horizontalalignment='left',
					verticalalignment='top',
					fontsize = 20,
					transform=ax110.transAxes)
		#####

		'''
		if autoaxis_SSL == True:
			min_y, max_y = ax110.get_ylim()
			min_y =  min_y_lim_SSL
			max_y =  max_y_lim_SSL

			min_dif = abs(1-bn.nanmin(min_y_ind_spec))
			max_dif = abs(1-bn.nanmax(max_y_ind_spec))
			abs_dif = max(min_dif,max_dif)
			min_y   = 1 - abs_dif - (abs_dif*1)#0.05
			max_y   = 1 + abs_dif + (abs_dif*1)#0.05

			plt.ylim([min_y,max_y])
			ymin, ymax = plt.ylim()
			plt.ylim((ymin,ymax))
		elif autoaxis_SSL == False:
			pass
		'''

		#################################################################SAVE###########################################################
		'''
		if dest_dir != None:
			PLOTFILENAME1 = str(dest_dir) + plt_sufix_fnm+'-'+str(int(LINES[0][lines]))+'-'+str(LINES[4][lines]) + '-' +stk_function_file + stk_function +'-'+fit_typ + '-EW-' +plt_nme_prp + '-' + fit_type_m + '_m-' + fit_type_e + '_e.pdf'
			PLOTFILENAME2 = str(dest_dir) + plt_sufix_fnm+'-'+str(int(LINES[0][lines]))+'-'+str(LINES[4][lines]) + '-' +stk_function_file + stk_function +'-'+fit_typ + '-EW-' +plt_nme_prp + '-' + fit_type_m + '_m-' + fit_type_e + '_e.eps'

		elif dest_dir == None:
			PLOTFILENAME1 = ewr_plt_res + plt_sufix_fnm+'-'+str(int(LINES[0][lines]))+'-'+str(LINES[4][lines]) + '-' +stk_function_file + stk_function +'-'+fit_typ + '-EW-' +plt_nme_prp + '-' + fit_type_m + '_m-' + fit_type_e + '_e.pdf'
			PLOTFILENAME2 = ewr_plt_res + plt_sufix_fnm+'-'+str(int(LINES[0][lines]))+'-'+str(LINES[4][lines]) + '-' +stk_function_file + stk_function +'-'+fit_typ + '-EW-' +plt_nme_prp + '-' + fit_type_m + '_m-' + fit_type_e + '_e.eps'
		'''
		###############################PLOT PER LINE###############################
	#############LINE PER LINE#############
	if dest_dir != None:
		PLOTFILENAME1 = str(dest_dir) + plt_sufix_fnm+'-'+str(lmb_min)+'-'+str(lmb_max)+ '-' + stk_function_file + stk_function + '-' + fit_typ + '-EW-'+ plt_nme_prp_1 + '-' + plt_nme_prp_2 +'-ALL'+ '-' + fit_type_m + '_m-' + fit_type_e + '_e-Grid-MltBin.pdf'
		PLOTFILENAME2 = str(dest_dir) + plt_sufix_fnm+'-'+str(lmb_min)+'-'+str(lmb_max)+ '-' + stk_function_file + stk_function + '-' + fit_typ + '-EW-'+ plt_nme_prp_1 + '-' + plt_nme_prp_2 +'-ALL'+ '-' + fit_type_m + '_m-' + fit_type_e + '_e-Grid-MltBin.eps'
	elif dest_dir == None:
		PLOTFILENAME1 = ewr_plt_res + plt_sufix_fnm+'-'+str(lmb_min)+'-'+str(lmb_max)+ '-' + stk_function_file + stk_function + '-' + fit_typ + '-EW-'+ plt_nme_prp_1 + '-' + plt_nme_prp_2 +'-ALL'+ '-' + fit_type_m + '_m-' + fit_type_e + '_e-Grid-MltBin.pdf'
		PLOTFILENAME2 = ewr_plt_res + plt_sufix_fnm+'-'+str(lmb_min)+'-'+str(lmb_max)+ '-' + stk_function_file + stk_function + '-' + fit_typ + '-EW-'+ plt_nme_prp_1 + '-' + plt_nme_prp_2 +'-ALL'+ '-' + fit_type_m + '_m-' + fit_type_e + '_e-Grid-MltBin.eps'
	plt.savefig(PLOTFILENAME1)
	if verbose == True:
		print colored('Generated Plot: ' + str(PLOTFILENAME1),'cyan')
	elif verbose ==False:
		pass
	if epssave == True:
		plt.savefig(PLOTFILENAME2, rasterized=True)
		#os.system('open Spectra.eps')
	elif epssave == False:
		pass
	if showplot == True:
		#os.system('open '+str(PLOTFILENAME))
		pass
	elif showplot == False:
		pass	
	plt.close('all')
	################################PLOT ALL LINES################################

def Plot_Histogram_Cols(Redshift_bin_mlt_func,Var2_mlt_func,*args, **kwargs):
	dest_dir       = kwargs.get('dest_dir' ,None)
	autoaxis       = kwargs.get('autoaxis' ,True)
	verbose        = kwargs.get('verbose'  , False)
	epssave        = kwargs.get('epssave'  , False)
	showplot       = kwargs.get('showplot' , False) 
	amplitude      = kwargs.get('amplitude',1)
	mean           = kwargs.get('mean'     ,0)
	stddev         = kwargs.get('stddev'   ,1)

	markers_plt_mlt_func    = kwargs.get('markers_plt_mlt_func',1)
	colors_plt_mlt_func     = kwargs.get('colors_plt_mlt_func' ,1)
	labels_plt_mlt_func     = kwargs.get('labels_plt_mlt_func' ,1)
	lines_plt_mlt_func      = kwargs.get('lines_plt_mlt_func' ,1)

	linectrnm      = kwargs.get('linectrnm',None)
	linectrfr      = kwargs.get('linectrfr',None)

	variable_x_MLT = kwargs.get('variable_x_MLT','z')
	variable_y     = kwargs.get('variable_y','Luminosity')
	plt_ofn_sfx    = kwargs.get('plt_ofn_sfx','')
	plt_ofn_pfx    = kwargs.get('plt_ofn_pfx',variable_x_MLT)

	logscale       = kwargs.get('logscale',None)
	errorbars      = kwargs.get('errorbars',False)
	#E_Z1_mlt_func  = kwargs.get('E_Z1_mlt_func',None)
	#E_Z2_mlt_func  = kwargs.get('E_Z2_mlt_func',None)
	#E_V1_mlt_func  = kwargs.get('E_V1_mlt_func',None)
	#E_V2_mlt_func  = kwargs.get('E_V2_mlt_func',None)

	plt_lit_res    = kwargs.get('plt_lit_res',False)
	plt_lit_tbl    = kwargs.get('plt_lit_tbl',None)

	plt_ind_res    = kwargs.get('plt_ind_res',False)
	plt_ind_tbl    = kwargs.get('plt_ind_tbl',None)
	variable_x_ind = kwargs.get('variable_x_ind','z')
	variable_x_lit = kwargs.get('variable_x_lit','z')
	#line_ratio     = kwargs.get('line_ratio',False)

	autoscale_plot = kwargs.get('autoscale_plot',True)

	redshift_dist  = kwargs.get('redshift_dist',False)

	prt_cat_ref    = kwargs.get('prt_cat_ref',False)

	cat_ref_hst    = kwargs.get('cat_ref_hst',False)
	z_cat_ref      = kwargs.get('z_cat_ref',None)
	v_cat_ref      = kwargs.get('v_cat_ref',None)
	'''
	if line_ratio == False:
		line_lbl   = kwargs.get('line_lbl',line)
		line_lbl_a = '^{' + line_lbl.split('CO',1)[0] + '}CO'
		LR         = ''
		PLOT_TITLE = str(line_lbl) + variable_y
	elif line_ratio == True and variable_y == 'Flux':
		line_lbl   = kwargs.get('line_lbl','12_13CO')
		line_ratio1 = kwargs.get('line_ratio1','12CO')
		line_ratio2 = kwargs.get('line_ratio2','13CO')
		if line_ratio1 == '12CO' and line_ratio2 == '13CO':
			line_lbl_a = 'S($^{12}$CO)/S($^{13}$CO)'
		elif line_ratio1 == '13CO' and line_ratio2 == '18CO':
			line_lbl_a = 'S($^{13}$CO)/(C$^{18}$O)'
		elif line_ratio1 == '12CO' and line_ratio2 == '18CO':
			line_lbl_a = 'S($^{12}$CO)/S(C$^{18}$O)'
		PLOT_TITLE = line_lbl + variable_y
		LR         = 'R'
	elif line_ratio == True and variable_y == 'Luminosity':
		line_lbl    = kwargs.get('line_lbl','12_13CO')
		line_ratio1 = kwargs.get('line_ratio1','12CO')
		line_ratio2 = kwargs.get('line_ratio2','13CO')
		line_nmbr_labl1 = line_ratio1.split('CO',1)[0]
		line_nmbr_labl2 = line_ratio2.split('CO',1)[0]		
		if line_ratio1 == '12CO' and line_ratio2 == '13CO':
			line_lbl_a = '$L^{\prime}$($^{12}$CO)/$L^{\prime}$($^{13}$CO)'
		elif line_ratio1 == '13CO' and line_ratio2 == '18CO':
			line_lbl_a = '$L^{\prime}$($^{13}$CO)/$L^{\prime}$(C$^{18}$O)'
		elif line_ratio1 == '12CO' and line_ratio2 == '18CO':
			line_lbl_a = '$L^{\prime}$($^{12}$CO)/$L^{\prime}$(C$^{18}$O)'
		PLOT_TITLE  = line_lbl + variable_y
		LR          = 'R'
	'''
	if dest_dir != None and redshift_dist == False:
		PLOTFILENAME = str(dest_dir)  + '/' + 'MultiPrp-' + 'Histogram-VUDS-'+ plt_ofn_sfx +'Rows.pdf'
	elif dest_dir == None and redshift_dist == False:
		PLOTFILENAME = plt_dir_res    + '/' + 'MultiPrp-' + 'Histogram-VUDS-'+ plt_ofn_sfx +'Rows.pdf'
	elif dest_dir != None and redshift_dist == True:
		PLOTFILENAME = str(dest_dir)  + '/' + 'MultiPrp-' + 'Histogram'+'-Redshift-'+ line_lbl + LR + plt_ofn_sfx +'Rows.pdf'
	elif dest_dir == None and redshift_dist == True:
		PLOTFILENAME = plt_dir_res    + '/' + 'MultiPrp-' + 'Histogram'+'-Redshift-'+ line_lbl + LR + plt_ofn_sfx +'Rows.pdf'

	INDXS_NEW  = len(Redshift_bin_mlt_func)
	nmb_cols   = kwargs.get('nmb_cols',2)
	nmb_rows   = int(np.ceil(float(INDXS_NEW)/float(nmb_cols)))
	nrows_arry = np.arange(nmb_rows)
	ncols_arry = np.arange(nmb_cols)
	print
	print INDXS_NEW 
	print nmb_cols
	print nmb_rows
	print
	print 'plt_lit_res',plt_lit_res
	print 'plt_ind_res',plt_ind_res
	print

	fxsize=11*2  #16
	fysize=8*nmb_rows     #16
	f = plt.figure(num=None, figsize=(fxsize, fysize), dpi=180, facecolor='w',
		edgecolor='k')
	plt.subplots_adjust(
		left 	= (36/25.4)/fxsize,     #22-def --> 26 bigger
		bottom 	= (26/25.4)/fysize,     #19-def --> 20 bigger
		right 	= 1 - (6/25.4)/fxsize,  # 2-def --> 6  bigger
		top 	= 1 - (4/25.4)/fysize)  # 4-def --> 8  bigger
	plt.subplots_adjust(hspace=0.2,wspace=0.50)

	gs0 = gridspec.GridSpec(nmb_rows,nmb_cols)
	MSK_NTMS=2.5

	for jwk,(x_plt,y_plt) in enumerate(itertools.product(nrows_arry,ncols_arry)):
		subsample = jwk
		if jwk < len(Redshift_bin_mlt_func):

			##########################################SPEC-1###################################
			ax110 = plt.Subplot(f, gs0[x_plt,y_plt])
			f.add_subplot(ax110)

			ax110.set_rasterization_zorder(1)
			plt.autoscale(enable=True, axis='both', tight=False)
			ax110.xaxis.set_tick_params(labelsize=26)
			ax110.yaxis.set_tick_params(labelsize=26)
			#ax110.set_title(PLOT_TITLE)
			#ax110.set_title('12CO/13CO' + variable_y)
			#xticklabels = ax110.get_xticklabels()
			#plt.setp(xticklabels, visible=True,family='serif')
			#yticklabels = ax110.get_yticklabels()
			#plt.setp(yticklabels, visible=True,family='serif')

			#ax110.set_xscale('log')
			#ax110.set_yscale('log')

			ax110.xaxis.set_tick_params(which='both',labelsize=26,direction='in',color='black',bottom=True,top=True,left=True,right=True)
			ax110.yaxis.set_tick_params(which='both',labelsize=26,direction='in',color='black',bottom=True,top=True,left=True,right=True)

			###MORPHOLOGY-TICKS-PLOT###
			'''
			if 'Morphology' in Splt_Hdr_Cmt:
				ax110.tick_params(axis='x', which='minor', bottom=False)
				majorLocator_x   = plt.MultipleLocator(1)
				ax110.xaxis.set_major_locator(majorLocator_x)
			else:
				pass
			'''
			###MORPHOLOGY-TICKS-PLOT###

			#if plt_ofn_pfx[subsample] == 'SFR' or plt_ofn_pfx[subsample] == 'SFE':
				##'SFR (M$_{\odot}$yr$^{-1})$'
				##'SFE (Gyr$^{-1}$)'
				#print '$$$'
				#print plt_ofn_pfx[subsample]
				#print '$$$$'
				#plt.xscale('log', nonposx='clip')
				#formatter = mtick.ScalarFormatter()
				#formatter.set_scientific(False)
				#ax110.xaxis.set_major_formatter(formatter)
				#from matplotlib.ticker import StrMethodFormatter
				#ax110.xaxis.set_major_formatter(StrMethodFormatter('{x:,.0f}'))
			#else:
				#pass

			#ax110.ticklabel_format(style='sci',scilimits=(-99,99),axis='y')
			#ax110.yaxis.major.formatter._useMathText = True

			if autoscale_plot == True:
				#minorLocator_x   = plt.MultipleLocator(5)
				#majorLocator_x   = plt.MultipleLocator(1)
				#minorLocator_y   = plt.MultipleLocator(.1)
				#majorLocator_y   = plt.MultipleLocator(1)
				##ax110.xaxis.set_minor_locator(minorLocator_x)
				##ax110.xaxis.set_major_locator(majorLocator_x)
				#ax110.yaxis.set_minor_locator(minorLocator_y)
				#ax110.yaxis.set_major_locator(majorLocator_y)
				plt.tick_params(which='both', width=1.0)
				plt.tick_params(which='major', length=10)
				plt.tick_params(which='minor', length=5)
				ax110.minorticks_on()
			elif autoscale_plot == False:
				#minorLocator_x   = plt.MultipleLocator(5)
				#majorLocator_x   = plt.MultipleLocator(1)
				minorLocator_y   = plt.MultipleLocator(.1)
				majorLocator_y   = plt.MultipleLocator(1)
				#ax110.xaxis.set_minor_locator(minorLocator_x)
				#ax110.xaxis.set_major_locator(majorLocator_x)
				ax110.yaxis.set_minor_locator(minorLocator_y)
				ax110.yaxis.set_major_locator(majorLocator_y)
				plt.tick_params(which='both', width=1.0)
				plt.tick_params(which='major', length=10)
				plt.tick_params(which='minor', length=5)
				ax110.minorticks_on()

			#plt.ylim([5,40])
			#ymin, ymax = plt.ylim()
			#plt.ylim((ymin,ymax))

			variable_x = variable_x_MLT[subsample]#[0]
			if redshift_dist == False:
				plt.xlabel(variable_x,fontsize=28, family = 'serif')
			elif redshift_dist == True:
				plt.xlabel('z-'+variable_x,fontsize=28, family = 'serif')
			plt.ylabel('N',fontsize=28, family = 'serif')
			#if variable_y == 'Flux' and line_ratio==True:
				#plt.ylabel(line_lbl_a,fontsize=28, family = 'serif')
			#elif variable_y == 'Luminosity' and line_ratio==True:
				#plt.ylabel(line_lbl_a,fontsize=28, family = 'serif')
			#elif variable_y == 'Luminosity' and line_ratio==False:
				#plt.ylabel('log $L_{'+line_lbl_a+'}$ [Kkms$^{-1}$pc$^{2}$]',fontsize=28, family = 'serif')
			#elif variable_y == 'Flux' and line_ratio==False:
				#plt.ylabel('S'+'$_{'+line_lbl_a+'}$ (Jy)',fontsize=28, family = 'serif')

			#ax110.set_xscale('log',basex=10)
			#ax110.set_yscale('log',basey=10)

			if logscale == None:
				pass
			elif logscale == 'Z':
				plt.xscale('log', nonposx='clip')#,fontsize=28)
			elif logscale == 'Y':
				plt.yscale('log', nonposy='clip')#,fontsize=28)
				plt.grid(True, which='both')
			elif logscale == 'both':
				plt.xscale('log', nonposx='clip')#,fontsize=28)
				plt.yscale('log', nonposy='clip')#,fontsize=28)

			Redshift_bin = Redshift_bin_mlt_func[subsample]
			Var2         = Var2_mlt_func[subsample]
			colors_plt   = colors_plt_mlt_func[subsample]
			markers_plt  = markers_plt_mlt_func[subsample]
			labels_plt   = labels_plt_mlt_func[subsample]
			lines_plt    = lines_plt_mlt_func[subsample]

			Var2_R       = v_cat_ref[subsample]
			#z_cat_re
			#v_cat_ref			

			print colored('Histogram for: '+str(plt_ofn_pfx[jwk]) + ' # bins: '+ str(len(Var2)),'yellow')

			nbins  = 8
			nbins  = kwargs.get('nbins' ,200)
			n_bins = 5#nbins

			if (plt_ofn_pfx[jwk] == 'SEP_arcsec') and redshift_dist == False:
				n_bins = 4
				n_bins = np.arange(0,23,0.5)#0.2
				#n_bins = len(Var2)-1
				#print n_bins
			elif (plt_ofn_pfx[jwk] == 'magi_F') and redshift_dist == False:
				n_bins = np.arange(22.5,26,0.1)
				#n_bins = len(Var2)-1
				#print n_bins
			elif (plt_ofn_pfx[jwk] == 'mass_F') and redshift_dist == False:
				n_bins = np.arange(8,12,0.1)
				#n_bins = len(Var2)-1
				#print n_bins
			elif (plt_ofn_pfx[jwk] == 'SFR_F') and redshift_dist == False:
				n_bins = np.arange(0.5,3,0.1)
				#n_bins = len(Var2)-1
				#print n_bins
			elif (plt_ofn_pfx[jwk] == 'Lnuv_F') and redshift_dist == False:
				n_bins = np.arange(8.5,12.5,0.25)
				#n_bins = len(Var2)-1
				#print n_bins
			elif (plt_ofn_pfx[jwk] == 'q_F') and redshift_dist == False:
				n_bins = np.arange(0.2,1,0.025)
				#n_bins = len(Var2)-1
				#print n_bins
			elif (plt_ofn_pfx[jwk] == 'PHI_ABS') and redshift_dist == False:
				n_bins = np.arange(0,100,5)
				#n_bins = len(Var2)-1
				#print n_bins
			elif (plt_ofn_pfx[jwk] == 'n_F') and redshift_dist == False:
				n_bins = np.arange(0,3,0.5)
				#n_bins = len(Var2)-1
				#print n_bins
			elif ( plt_ofn_pfx[jwk] == 're_F') and redshift_dist == False:
				n_bins = np.arange(0,8,0.25)
				#n_bins = len(Var2)-1
				#print n_bins
			else:
				pass
			if redshift_dist == False and 'z_F' in plt_ofn_pfx[jwk]:
				#print
				#print 'False'
				#print
				n_z_lne1, bins_z_lne1, patches_z_lne1 = plt.hist(Var2[-1]                      , bins       = n_bins,
															density     = False                , stacked    = False,
															histtype    = 'step'               , cumulative = False,
															log         = False                ,
															edgecolor   = 'black'              , alpha      = 1.0,
															color       = 'black'              ,
															label       = 'All N='+str(len(Var2[-1])),
															linewidth   = 4)
			elif redshift_dist == False and 'z_F' not in plt_ofn_pfx[jwk]:
				#print
				#print 'False'
				#print
				n_z_lne1, bins_z_lne1, patches_z_lne1 = plt.hist(Var2[-1]                      , bins       = n_bins,
															density     = False                , stacked    = True,
															histtype    = 'step'               , cumulative = False,
															log         = False                ,
															edgecolor   = 'black'              , alpha      = 1.0,
															color       = 'black'              ,
															label       = 'All N='+str(len(Var2[-1])),
															linewidth   = 4)
				for bin_item in range(len(Var2)-1):
					#print
					#print bin_item, str(len(Var2[bin_item])), plt_ofn_pfx[jwk]
					#print colors_plt[bin_item]
					#print markers_plt[bin_item]
					#print
					#n_z_lne2, bins_z_lne2, patches_z_lne2 = plt.hist(Var2[bin_item]              , bins       = n_bins, 
																#density   = False                , stacked    = False ,
																#histtype  = 'stepfilled'         , cumulative = False , 
																##edgecolor = colors_plt[bin_item] , 
																#edgecolor = 'white'              ,
																#color     = colors_plt[bin_item] ,
																#linestyle = lines_plt[bin_item]  ,
																###label     = str(bin_item+1) + '  N='+str(len(Var2[bin_item])), 
																#hatch     = markers_plt[bin_item]
																#)#'*')
					pass
			elif redshift_dist == True:
				#print
				#print 'True'
				#print
				#n_z_lne1, bins_z_lne1, patches_z_lne1 = plt.hist(Redshift_bin[0], bins=n_bins, density=False, stacked=False,
															#histtype='step',cumulative=False,edgecolor = 'black',
															#color='black',label='All N='+str(len(Redshift_bin[0])),
															#linewidth=8)
				n_z_lne2, bins_z_lne2, patches_z_lne2 = plt.hist(Redshift_bin[1], 
															bins       = n_bins, 
															density    = False, 
															stacked    = False,
															histtype   = 'stepfilled',
															cumulative = False, 
															edgecolor  = 'white',
															color      = colors_plt[1]  , 
															label      = 'Low  N='+str(len(Redshift_bin[1])), hatch='*',
															alpha      = 0.5)
				n_v_lne1, bins_v_lne1, patches_v_lne1 = plt.hist(Redshift_bin[2], 
															bins       = n_bins, 
															density    = False, 
															stacked    = False,
															histtype   = 'stepfilled',
															cumulative = False, 
															edgecolor  = 'white',
															color      = colors_plt[2] , 
															label      = 'High N='+str(len(Redshift_bin[2])), hatch='o',
															alpha      = 0.5)
			else:
					pass
			if cat_ref_hst == True and redshift_dist == False and (not (plt_ofn_pfx[jwk] in 'SEP_arcsec')) and (not (plt_ofn_pfx[jwk] in 'PHI_ABS')):#'z_F' in plt_ofn_pfx[jwk]:
				#print
				#print 'False'
				#print
				n_z_lne1, bins_z_lne1, patches_z_lne1 = plt.hist(Var2_R[-1]                    , bins       = n_bins,
															density     = False                , stacked    = True,
															histtype    = 'step'               , cumulative = False,
															log         = False                ,
															edgecolor   = 'red'                ,
															color       = 'red'                ,
															label       = 'All N='+str(len(Var2_R[-1])),
															linewidth   = 4)
			else:
				pass

			#plt.plot([], [], ' ', label="D = " + str(D_KS) )
			#plt.plot([], [], ' ', label="p < " + str(p_KS))

			lg=plt.legend(loc=0,prop={'size':21})
			lg.draw_frame(True)



			#plt.xlim([lambda_min,lambda_max])
			#xmin, xmax = plt.xlim()
			#plt.xlim((xmin,xmax))

			if autoaxis == False:
				pass
				#nmin  = int(abs(lambda_min - crval_sp) / cdel1_sp)
				#nmax  = int(abs(lambda_max - crval_sp) / cdel1_sp)
				#min_y = bn.nanmin(wght_times*inten_sp[mask])#min(wght_times*inten_sp[nmin:nmax])
				#max_y = bn.nanmax(wght_times*inten_sp[mask])#max(wght_times*inten_sp[nmin:nmax])
				#plt.ylim([min_y,max_y])
				#ymin, ymax = plt.ylim()
				#plt.ylim((ymin,ymax))
			elif autoaxis == True:
				min_y, max_y = ax110.get_ylim()

			#plt.plot([lambda_min, lambda_max], [1, 1], color='green', lw=1)
			##########################################SAVE#####################################
		elif jwk >= len(Redshift_bin_mlt_func):
			pass
	##
	plt.savefig(PLOTFILENAME)

	if verbose == True:
		print colored('Generated Plot: ' + str(PLOTFILENAME),'cyan')
	elif verbose ==False:
		pass
	if epssave == True:
		plt.savefig('Spectra.eps', rasterized=True)
		#os.system('open Spectra.eps')
	elif epssave == False:
		pass
	if showplot == True:
		#os.system('open '+str(PLOTFILENAME))
		pass
	elif showplot == False:
		pass	
	plt.close('all')

def Plot_Idp_Spc_BS(specfile, specfile_err, bs_i_num,*args, **kwargs):
	z_glx_Ps      = kwargs.get('z_glx_Ps'      ,0)
	dest_dir      = kwargs.get('dest_dir'      , None)
	verbose       = kwargs.get('verbose'       , False)
	epssave       = kwargs.get('epssave'       , False)
	showplot      = kwargs.get('showplot'      , False) 

	autoaxis_Idp  = kwargs.get('autoaxis_Idp'  , True)
	min_y_lim_Idp = kwargs.get('min_y_lim_Idp' , 0.5)
	max_y_lim_Idp = kwargs.get('max_y_lim_Idp' , 1.5)

	aaxs_Idp_ml_y = kwargs.get('aaxs_Idp_ml_y' ,False)

	min_x_lim_Idp = kwargs.get('min_x_lim_Idp' , 1200)
	max_x_lim_Idp = kwargs.get('max_x_lim_Idp' , 1750)

	#cont_plot     = kwargs.get('cont_plot'     , False) 
	#smth_plot     = kwargs.get('smth_plot'     , False) 
	#twin_axis     = kwargs.get('twin_axis'     , False)

	#SNR_LINES     = kwargs.get('SNR_LINES'     , 'med')
	#plt_med       = kwargs.get('plt_med'       , True)
	#plt_avg       = kwargs.get('plt_avg'       , True)
	#plt_avw       = kwargs.get('plt_avw'       , True)
	show_legends  = kwargs.get('show_legends'  , True)
	###

	lmb_min = min_x_lim_Idp#kwargs.get('lmb_min',1200)
	lmb_max = max_x_lim_Idp#kwargs.get('lmb_max',1700)
	
	lmb_min_lim   = lmb_min
	lmb_max_lim   = lmb_max

	nsigma  = kwargs.get('nsigma',1)

	sep_lin_min   = kwargs.get('sep_lin_min',40)

	print
	print colored('Files for BS plotting:','yellow')
	print colored("\n".join([file for file in specfile]),'cyan')
	print
	print colored('CI error files for plotting:','yellow')
	print colored("\n".join([file for file in specfile_err]),'magenta')
	print

	PLOTFILENAME  = res_bst_plt + (str(specfile_err).split('-stk')[0]).split('/')[-1] + '-' + str(lmb_min) + '-' + str(lmb_max)+ '.pdf' #+ '-BS-' + str(bs_iteration_num)
	PLOTFILENAME2 = res_bst_plt + (str(specfile_err).split('-stk')[0]).split('/')[-1] + '-' + str(lmb_min) + '-' + str(lmb_max)+ '.eps' #+ '-BS-' + str(bs_iteration_num)

	lambda_sp,inten_sp,crval_sp,cdel1_sp = Spectra_x_y(specfile[0])[0], Spectra_x_y(specfile[0])[1],Spectra_x_y(specfile[0])[2],Spectra_x_y(specfile[0])[3]
	label_sp = str(specfile[0].split('/')[-1])

	lambda_sp_1,inten_sp_1,crval_sp_1,cdel1_sp_1 = Spectra_x_y(specfile[1])[0], Spectra_x_y(specfile[1])[1],Spectra_x_y(specfile[1])[2],Spectra_x_y(specfile[1])[3]
	label_sp_1 = str((specfile[1].split('.fits',1)[0]).rsplit('-',2)[2]) + ' ('+str(str(Header_Get(specfile[1],'stk_num'))) + ')'#str(specfile[1].split('/')[-1])

	lambda_sp_e_0,inten_sp_e_0,crval_sp_e_0,cdel1_sp_e_0 = Spectra_x_y(specfile_err[0])[0], Spectra_x_y(specfile_err[0])[1],Spectra_x_y(specfile_err[0])[2],Spectra_x_y(specfile_err[0])[3]

	lambda_sp_e_1,inten_sp_e_1,crval_sp_e_1,cdel1_sp_e_1 = Spectra_x_y(specfile_err[1])[0], Spectra_x_y(specfile_err[1])[1],Spectra_x_y(specfile_err[1])[2],Spectra_x_y(specfile_err[1])[3]
	lambda_sp_e_2,inten_sp_e_2,crval_sp_e_2,cdel1_sp_e_2 = Spectra_x_y(specfile_err[2])[0], Spectra_x_y(specfile_err[2])[1],Spectra_x_y(specfile_err[2])[2],Spectra_x_y(specfile_err[2])[3]

	lambda_sp_e_3,inten_sp_e_3,crval_sp_e_3,cdel1_sp_e_3 = Spectra_x_y(specfile_err[3])[0], Spectra_x_y(specfile_err[3])[1],Spectra_x_y(specfile_err[3])[2],Spectra_x_y(specfile_err[3])[3]
	lambda_sp_e_4,inten_sp_e_4,crval_sp_e_4,cdel1_sp_e_4 = Spectra_x_y(specfile_err[4])[0], Spectra_x_y(specfile_err[4])[1],Spectra_x_y(specfile_err[4])[2],Spectra_x_y(specfile_err[4])[3]

	lambda_sp_e_5,inten_sp_e_5,crval_sp_e_5,cdel1_sp_e_5 = Spectra_x_y(specfile_err[5])[0], Spectra_x_y(specfile_err[5])[1],Spectra_x_y(specfile_err[5])[2],Spectra_x_y(specfile_err[5])[3]
	lambda_sp_e_6,inten_sp_e_6,crval_sp_e_6,cdel1_sp_e_6 = Spectra_x_y(specfile_err[6])[0], Spectra_x_y(specfile_err[6])[1],Spectra_x_y(specfile_err[6])[2],Spectra_x_y(specfile_err[6])[3]

	lambda_sp_hst,inten_sp_hst,crval_sp_hst,cdel1_sp_hst = Spectra_x_y(specfile_err[7])[0], Spectra_x_y(specfile_err[7])[1],Spectra_x_y(specfile_err[7])[2],Spectra_x_y(specfile_err[7])[3]

	label_sp_e_0 = 'BS MED' 
	label_sp_e_1 = 'BS-CI 1$\sigma$ (66%)' 
	label_sp_e_3 = 'BS-CI 2$\sigma$ (95%)' 
	label_sp_e_5 = 'BS-CI 3$\sigma$ (99%)' 

	label_sp_hst = 'BS' + ' (N$_{\mathrm{T}}$: '+str(str(Header_Get(specfile_err[7],'stk_num'))) + ')'
	N_GLX = Header_Get(specfile_err[7],'stk_num')

	z_bg_Ps = kwargs.get('z_bg_Ps',0)
	z_fg_Ps = kwargs.get('z_fg_Ps',0)

	fxsize=11
	fysize=8
	f = plt.figure(num=None, figsize=(11, 8), dpi=180, facecolor='w',
		edgecolor='k')
	plt.subplots_adjust(
		left 	= (22/25.4)/fxsize,                   #26 bigger  22-def
		bottom 	= (16/25.4)/fysize,                   #20 bigger  19-def
		right 	= 1 - (8/25.4)/fxsize,                #12 bigger  2-def 
		top 	= 1 - (7/25.4)/fysize)                #14 bigger  4-def
	plt.subplots_adjust(hspace=0)#,wspace=0)


	#f.suptitle('An overall title', size=20)
	gs0 = gridspec.GridSpec(1, 1)

	gs11 = gridspec.GridSpecFromSubplotSpec(4, 1, subplot_spec=gs0[0])

	#############################################################STACK###########################################################
	ax110 = plt.Subplot(f, gs11[0:3,0])
	f.add_subplot(ax110)

	ax110.set_rasterization_zorder(1)
	plt.autoscale(enable=True, axis='y', tight=False)
	ax110.xaxis.set_tick_params(labelsize=16)
	ax110.yaxis.set_tick_params(labelsize=16)
	#ax110.set_title('Teste')
	xticklabels = ax110.get_xticklabels()
	plt.setp(xticklabels, visible=False,family='serif')
	yticklabels = ax110.get_yticklabels()
	plt.setp(yticklabels, visible=True,family='serif')
	ax110.yaxis.set_tick_params(which='both',labelsize=16,direction='in',color='black',bottom=True,top=True,left=True,right=True)
	ax110.xaxis.set_tick_params(which='both',labelsize=16,direction='in',color='black',bottom=True,top=True,left=True,right=True)

	#ax110.yaxis.set_tick_params(which='both',labelsize=16,direction='in',color='black',bottom=True,top=True,left=True,right=True)
	#ax110.xaxis.set_tick_params(which='both',labelsize=16,direction='in',color='black',bottom=True,top=True,left=True,right=True)

	#minorLocator_x   = MultipleLocator(250)
	#majorLocator_x   = MultipleLocator(500)
	#minorLocator_y   = MultipleLocator(0.1)
	#majorLocator_y   = MultipleLocator(0.5)
	#ax110.xaxis.set_minor_locator(minorLocator_x)
	#ax110.xaxis.set_major_locator(majorLocator_x)
	#ax110.yaxis.set_minor_locator(minorLocator_y)
	#ax110.yaxis.set_major_locator(majorLocator_y)
	plt.tick_params(which='both', width=0.7)
	plt.tick_params(which='major', length=5)
	plt.tick_params(which='minor', length=2)
	ax110.minorticks_on()

	plt.xlabel('$\lambda$',fontsize=16, family = 'serif')
	plt.ylabel('F$_\lambda$ (ergs/sec/cm$^{2}/\AA$)',fontsize=16, family = 'serif')

	mask_sp     = (lambda_sp     >= lmb_min_lim) & (lambda_sp    <= lmb_max_lim)
	mask_sp_e_0 = (lambda_sp_e_0 >= lmb_min_lim) & (lambda_sp_e_0 <= lmb_max_lim)

	mask_sp_e_1 = (lambda_sp_e_1 >= lmb_min_lim) & (lambda_sp_e_1 <= lmb_max_lim)
	mask_sp_e_3 = (lambda_sp_e_3 >= lmb_min_lim) & (lambda_sp_e_3 <= lmb_max_lim)
	mask_sp_e_5 = (lambda_sp_e_5 >= lmb_min_lim) & (lambda_sp_e_5 <= lmb_max_lim)

	mask_sp_e_2 = (lambda_sp_e_2 >= lmb_min_lim) & (lambda_sp_e_2 <= lmb_max_lim)
	mask_sp_e_4 = (lambda_sp_e_4 >= lmb_min_lim) & (lambda_sp_e_4 <= lmb_max_lim)
	mask_sp_e_6 = (lambda_sp_e_6 >= lmb_min_lim) & (lambda_sp_e_6 <= lmb_max_lim)

	plt.plot(lambda_sp[mask_sp]        , inten_sp[mask_sp]        , color='black', alpha=1.0, label=label_sp)#,ls='--')
	plt.plot(lambda_sp_e_0[mask_sp_e_0], inten_sp_e_0[mask_sp_e_0], color='gray' , alpha=0.8, label=label_sp_e_0)

	plt.plot(lambda_sp_e_1[mask_sp_e_1], inten_sp_e_1[mask_sp_e_1], color='red'  , alpha=0.5) #label=label_sp_e_1
	plt.plot(lambda_sp_e_3[mask_sp_e_3], inten_sp_e_3[mask_sp_e_3], color='blue' , alpha=0.5) #label=label_sp_e_3
	plt.plot(lambda_sp_e_5[mask_sp_e_5], inten_sp_e_5[mask_sp_e_5], color='green', alpha=0.5) #label=label_sp_e_5

	plt.plot(lambda_sp_e_2[mask_sp_e_2], inten_sp_e_2[mask_sp_e_2], color='red'  , alpha=0.5) #label=label_sp_e_1
	plt.plot(lambda_sp_e_4[mask_sp_e_4], inten_sp_e_4[mask_sp_e_4], color='blue' , alpha=0.5) #label=label_sp_e_3
	plt.plot(lambda_sp_e_6[mask_sp_e_6], inten_sp_e_6[mask_sp_e_6], color='green', alpha=0.5) #label=label_sp_e_5


	#Upper shadow pct 83, 97, 99
	plt.fill_between(lambda_sp_e_0, inten_sp_e_0, inten_sp_e_1,
	alpha=0.2, edgecolor='red', facecolor='red',
	linewidth=0, linestyle='solid', antialiased=True, label = label_sp_e_1)
	plt.fill_between(lambda_sp_e_0, inten_sp_e_1, inten_sp_e_3,
	alpha=0.2, edgecolor='blue', facecolor='blue',
	linewidth=0, linestyle='solid', antialiased=True, label = label_sp_e_3)
	plt.fill_between(lambda_sp_e_0, inten_sp_e_3, inten_sp_e_5,
	alpha=0.2, edgecolor='green', facecolor='green',
	linewidth=0, linestyle='solid', antialiased=True, label = label_sp_e_5)

	#Lower shadow pct 17, 2, 0.5
	plt.fill_between(lambda_sp_e_0, inten_sp_e_0, inten_sp_e_2,
	alpha=0.2, edgecolor='red', facecolor='red',
	linewidth=0, linestyle='solid', antialiased=True)
	plt.fill_between(lambda_sp_e_0, inten_sp_e_2, inten_sp_e_4,
	alpha=0.2, edgecolor='blue', facecolor='blue',
	linewidth=0, linestyle='solid', antialiased=True)
	plt.fill_between(lambda_sp_e_0, inten_sp_e_4, inten_sp_e_6,
	alpha=0.2, edgecolor='green', facecolor='green',
	linewidth=0, linestyle='solid', antialiased=True)

	plt.xlim([lmb_min,lmb_max])
	xmin, xmax = plt.xlim()
	plt.xlim((xmin,xmax))

	if autoaxis_Idp == False and aaxs_Idp_ml_y == False:
		#nmin  = int(min((abs(lmb_min - crval_glx_med) / cdel1_glx_med), (abs(lmb_min - crval_glx_avg) / cdel1_glx_avg)))
		#nmax  = int(max((abs(lmb_max - crval_glx_med) / cdel1_glx_med), (abs(lmb_max - crval_glx_avg) / cdel1_glx_avg)))
		#min_y = min((np.nanmin(inten_glx_med[mask_med])),(np.nanmin(inten_glx_avg[mask_med])))#min((min(inten_glx_med[nmin:nmax])),(min(inten_glx_avg[nmin:nmax])))
		#max_y = max((np.nanmax(inten_glx_med[mask_med])),(np.nanmax(inten_glx_avg[mask_med])))#max((max(inten_glx_med[nmin:nmax])),(max(inten_glx_avg[nmin:nmax])))
		nmin_spc  = int(abs(lmb_min - crval_sp) / cdel1_sp)
		nmax_spc  = int(abs(lmb_max - crval_sp) / cdel1_sp)

		min_y_spc = min(inten_sp[nmin_spc:nmax_spc])
		max_y_spc = max(inten_sp[nmin_spc:nmax_spc])

		nmin_e    = int(abs(lmb_min - crval_sp_e_1) / cdel1_sp_e_1)
		nmax_e    = int(abs(lmb_max - crval_sp_e_1) / cdel1_sp_e_1)

		min_y_e   = min(inten_sp_e_5[nmin_e:nmax_e])
		max_y_e   = max(inten_sp_e_6[nmin_e:nmax_e])

		min_y     = min(min_y_spc,min_y_e)
		max_y     = max(max_y_spc,max_y_e)
	elif autoaxis_Idp == False and aaxs_Idp_ml_y == True:
		min_y =  min_y_lim_Idp
		max_y =  max_y_lim_Idp
	elif autoaxis_Idp == True:
		min_y, max_y = ax110.get_ylim()
		min_y =  min_y_lim_Idp
		max_y =  max_y_lim_Idp

	plt.ylim([min_y,max_y])
	ymin, ymax = plt.ylim()
	plt.ylim((ymin,ymax))

	##############LINE ID-STLYE##############
	linestyle_str = [
	     ('solid', 'solid'),      # Same as (0, ()) or '-'
	     ('dotted', 'dotted'),    # Same as (0, (1, 1)) or '.'
	     ('dashed', 'dashed'),    # Same as '--'
	     ('dashdot', 'dashdot')]  # Same as '-.'

	linestyle_tuple = [
	     ('loosely dotted',        (0, (1, 10))),
	     ('dotted',                (0, (1, 1))),
	     ('densely dotted',        (0, (1, 1))),

	     ('loosely dashed',        (0, (5, 10))),
	     ('dashed',                (0, (5, 5))),
	     ('densely dashed',        (0, (5, 1))),

	     ('loosely dashdotted',    (0, (3, 10, 1, 10))),
	     ('dashdotted',            (0, (3, 5, 1, 5))),
	     ('densely dashdotted',    (0, (3, 1, 1, 1))),

	     ('dashdotdotted',         (0, (3, 5, 1, 5, 1, 5))),
	     ('loosely dashdotdotted', (0, (3, 10, 1, 10, 1, 10))),
	     ('densely dashdotdotted', (0, (3, 1, 1, 1, 1, 1)))]
	##############LINE ID-STLYE##############
	#################LINE ID#################
	prev_loc=0
	for lines in range(len(LINES[0])):
		if LINES[11][lines] == 1:
			#LOW ISM absorption line
			col_lne_idx = 'red'
			stl_lne_idx = 'solid'
		elif LINES[11][lines] == 2:
			#HIGH ISM absorption line
			col_lne_idx = 'green'
			stl_lne_idx = 0, (1, 1)#'dotted'
		elif LINES[11][lines] == 3:
			#Stellar Photospheric Absorption Line
			col_lne_idx = 'cyan'
			stl_lne_idx = 'dashed'
		elif LINES[11][lines] == 4:
			#Nebular Emission Line
			col_lne_idx = 'magenta'
			stl_lne_idx = 'dashdot'
		elif LINES[11][lines] == 5:
			#Interstellar Fine-structure emission lines
			col_lne_idx = 'black'
			stl_lne_idx = (0, (3, 5, 1, 5, 1, 5)) #dashdotdotted
		elif LINES[11][lines] == 6:
			#HI absorption line
			col_lne_idx = 'blue'
			stl_lne_idx = (0, (3, 10, 1, 10, 1, 10)) #loosely dashdotdotted

		#sep_lin_min=40
		if lmb_min < LINES[0][lines]*(1+z_glx_Ps) < lmb_max:
			if ((LINES[9][lines] == LINES[9][lines+1])) and (abs(LINES[0][lines]-LINES[0][lines-1])> sep_lin_min): 
				#print
				#print LINES[9][lines],LINES[9][lines-1],abs(LINES[0][lines]-LINES[0][lines-1]),'D',((LINES[9][lines] == LINES[9][lines+1])) and (abs(LINES[0][lines]-LINES[0][lines-1])> sep_lin_min)
				#print abs(LINES[0][lines]-LINES[0][lines-1]),prev_loc,'D',(abs(LINES[0][lines]-LINES[0][lines-1])<sep_lin_min and prev_loc==1)
				#print
				plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[1,max_y-(max_y*.3)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				ax110.text((LINES[0][lines]*(1+z_glx_Ps)+LINES[0][lines+1]*(1+z_glx_Ps))/2,max_y-(max_y*.3),LINES[9][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='normal',color=col_lne_idx,family='serif')

				#plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y,max_y-(max_y*.3)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				#ax110.text(LINES[0][lines]*(1+z_glx_Ps),max_y-(max_y*.3),LINES[4][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='italic',color=col_lne_idx)
				prev_loc=0
			elif (abs(LINES[0][lines]-LINES[0][lines-1])<(sep_lin_min/1.6) and prev_loc==1): 
				#print
				#print LINES[9][lines],LINES[9][lines-1],abs(LINES[0][lines]-LINES[0][lines-1]),'C',((LINES[9][lines] == LINES[9][lines+1])) and (abs(LINES[0][lines]-LINES[0][lines-1])> sep_lin_min)
				#print abs(LINES[0][lines]-LINES[0][lines-1]),prev_loc,'C',(abs(LINES[0][lines]-LINES[0][lines-1])<sep_lin_min and prev_loc==1)
				#print
				plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[1,max_y-(max_y*.3)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				ax110.text((LINES[0][lines]*(1+z_glx_Ps)+LINES[0][lines+1]*(1+z_glx_Ps))/2,max_y-(max_y*.3),LINES[9][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='normal',color=col_lne_idx,family='serif')

				#plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y,max_y-(max_y*.3)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				#ax110.text(LINES[0][lines]*(1+z_glx_Ps),max_y-(max_y*.3),LINES[4][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='italic',color=col_lne_idx)
				prev_loc=0
			elif (sep_lin_min/1.6)<=(abs(LINES[0][lines]-LINES[0][lines-1])<sep_lin_min and prev_loc==1): 
				#print
				#print LINES[9][lines],LINES[9][lines-1],abs(LINES[0][lines]-LINES[0][lines-1]),'C',((LINES[9][lines] == LINES[9][lines+1])) and (abs(LINES[0][lines]-LINES[0][lines-1])> sep_lin_min)
				#print abs(LINES[0][lines]-LINES[0][lines-1]),prev_loc,'C',(abs(LINES[0][lines]-LINES[0][lines-1])<sep_lin_min and prev_loc==1)
				#print
				plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[1,max_y-(max_y*.3)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				ax110.text((LINES[0][lines]*(1+z_glx_Ps)+LINES[0][lines+1]*(1+z_glx_Ps))/2,max_y-(max_y*.3),LINES[9][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='normal',color=col_lne_idx,family='serif')

				#plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y,max_y-(max_y*.3)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				#ax110.text(LINES[0][lines]*(1+z_glx_Ps),max_y-(max_y*.3),LINES[4][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='italic',color=col_lne_idx)
				prev_loc=0
			elif ((LINES[9][lines] == LINES[9][lines+1])) and (abs(LINES[0][lines]-LINES[0][lines-1])<sep_lin_min and (prev_loc==0)) and (len(LINES[4][lines])<=5):
				#print
				#print LINES[9][lines],LINES[9][lines-1],'B'
				#print
				plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y+(min_y*.30),1],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				ax110.text((LINES[0][lines]*(1+z_glx_Ps)+LINES[0][lines+1]*(1+z_glx_Ps))/2,min_y,LINES[9][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='normal',color=col_lne_idx,family='serif')

				#plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y,max_y-(max_y*.2)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				#ax110.text(LINES[0][lines]*(1+z_glx_Ps),max_y-(max_y*.2),LINES[4][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='italic',color=col_lne_idx)
				prev_loc=1
			elif ((LINES[9][lines] == LINES[9][lines+1])) and (abs(LINES[0][lines]-LINES[0][lines-1])<sep_lin_min and (prev_loc==0)) and (len(LINES[4][lines])>5):
				#print
				#print LINES[9][lines],LINES[9][lines-1],'A'
				#print
				plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y+(min_y*.45),1],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				ax110.text((LINES[0][lines]*(1+z_glx_Ps)+LINES[0][lines+1]*(1+z_glx_Ps))/2,min_y,LINES[9][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='normal',color=col_lne_idx,family='serif')

				#plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y,max_y-(max_y*.2)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				#ax110.text(LINES[0][lines]*(1+z_glx_Ps),max_y-(max_y*.2),LINES[4][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='italic',color=col_lne_idx)
				prev_loc=1
				#
			elif (LINES[9][lines] == LINES[9][lines-1]) and (prev_loc==1) and (len(LINES[4][lines])<=5):
				#print
				#print LINES[9][lines],LINES[9][lines-1],'d'
				#print
				plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y+(min_y*.30),1],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				#plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y,max_y-(max_y*.2)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
			elif (LINES[9][lines] == LINES[9][lines-1]) and (prev_loc==1) and (len(LINES[4][lines])>5):
				#print
				#print LINES[9][lines],LINES[9][lines-1],'c'
				#print
				plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y+(min_y*.45),1],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				#plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y,max_y-(max_y*.2)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)

			elif (LINES[9][lines] == LINES[9][lines-1]) and (prev_loc==0) and (len(LINES[4][lines])<=5):
				#print
				#print LINES[9][lines],LINES[9][lines-1],'b'
				#print
				plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[1,max_y-(max_y*.30)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				#plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y,max_y-(max_y*.3)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
			elif (LINES[9][lines] == LINES[9][lines-1]) and (prev_loc==0) and (len(LINES[4][lines])>5):
				#print
				#print LINES[9][lines],LINES[9][lines-1],'a'
				#print
				plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[1,max_y-(max_y*.30)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				#plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y,max_y-(max_y*.3)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				#
			elif (abs(LINES[0][lines]-LINES[0][lines-1])> sep_lin_min) or (abs(LINES[0][lines]-LINES[0][lines-1])<sep_lin_min and prev_loc==1) and ((LINES[9][lines] != LINES[9][lines-1])):
				#print
				#print LINES[9][lines],LINES[9][lines-1],'1'
				#print
				plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[1,max_y-(max_y*.3)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				ax110.text(LINES[0][lines]*(1+z_glx_Ps),max_y-(max_y*.3),LINES[9][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='normal',color=col_lne_idx,family='serif')

				#plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y,max_y-(max_y*.3)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				#ax110.text(LINES[0][lines]*(1+z_glx_Ps),max_y-(max_y*.3),LINES[4][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='italic',color=col_lne_idx)
				prev_loc=0
			elif (abs(LINES[0][lines]-LINES[0][lines-1])<sep_lin_min and (prev_loc==0)) and ((LINES[9][lines] != LINES[9][lines-1])) and (len(LINES[4][lines])<=5):
				#print
				#print LINES[9][lines],LINES[9][lines-1],'2'
				#print
				plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y+(min_y*.30),1],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				ax110.text(LINES[0][lines]*(1+z_glx_Ps),min_y,LINES[9][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='normal',color=col_lne_idx,family='serif')

				#plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y,max_y-(max_y*.2)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				#ax110.text(LINES[0][lines]*(1+z_glx_Ps),max_y-(max_y*.2),LINES[4][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='italic',color=col_lne_idx)
				prev_loc=1
			elif (abs(LINES[0][lines]-LINES[0][lines-1])<sep_lin_min and (prev_loc==0)) and ((LINES[9][lines] != LINES[9][lines-1])) and (len(LINES[4][lines])>5):
				#print
				#print LINES[9][lines],LINES[9][lines-1],'3'
				#print
				plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y+(min_y*.45),1],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				ax110.text(LINES[0][lines]*(1+z_glx_Ps),min_y,LINES[9][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='normal',color=col_lne_idx,family='serif')
				#plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y,max_y-(max_y*.2)],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
				#ax110.text(LINES[0][lines]*(1+z_glx_Ps),max_y-(max_y*.2),LINES[4][lines],rotation=90,va='bottom',ha='center',fontsize=16,style='italic',color=col_lne_idx)
				prev_loc=1
		elif LINES[0][lines]*(1+z_glx_Ps) > 6700 :
			break
	#################LINE ID#################

	#################LEGEND#################
	if show_legends == True:
		pass
		lg2=plt.legend(loc=1,prop={'size':14})
		lg2.draw_frame(False)
	elif show_legends == False:
		pass
	#################LEGEND#################
	#############################################################STACK###########################################################

	#################################################################HISTO###########################################################
	ax111 = plt.Subplot(f, gs11[3,0])
	f.add_subplot(ax111)

	ax111.set_rasterization_zorder(1)
	plt.autoscale(enable=True, axis='y', tight=False)
	ax111.xaxis.set_tick_params(labelsize=16)
	ax111.yaxis.set_tick_params(labelsize=16)
	#ax111.set_title('Teste')
	xticklabels = ax111.get_xticklabels()
	plt.setp(xticklabels, visible=True,family='serif')
	yticklabels = ax111.get_yticklabels()
	plt.setp(yticklabels, visible=True,family='serif')

	#minorLocator_x   = MultipleLocator(250)
	#majorLocator_x   = MultipleLocator(500)
	#minorLocator_y   = MultipleLocator(0.1)
	#majorLocator_y   = MultipleLocator(0.5)
	#ax111.xaxis.set_minor_locator(minorLocator_x)
	#ax111.xaxis.set_major_locator(majorLocator_x)
	#ax111.yaxis.set_minor_locator(minorLocator_y)
	#ax111.yaxis.set_major_locator(majorLocator_y)
	plt.tick_params(which='both', width=0.7)
	plt.tick_params(which='major', length=5)
	plt.tick_params(which='minor', length=2)
	ax111.minorticks_on()

	plt.xlabel('$\lambda$'         ,fontsize=16, family = 'serif')
	plt.ylabel('N/N$_{\mathrm{T}}$',fontsize=16, family = 'serif')

	ax111.yaxis.set_tick_params(which='both',labelsize=16,direction='in',color='black',bottom=True,top=True,left=True,right=True)
	ax111.xaxis.set_tick_params(which='both',labelsize=16,direction='in',color='black',bottom=True,top=True,left=True,right=True)

	mask_sp_hst  = (lambda_sp_hst >= lmb_min_lim) & (lambda_sp_hst <= lmb_max_lim)

	#plt.plot(lambda_sp_1  , inten_sp_1  , color='black', label=label_sp_1  , ls='-.')
	plt.plot(lambda_sp_hst[mask_sp_hst], inten_sp_hst[mask_sp_hst]/N_GLX, color='black', label=label_sp_hst)

	plt.xlim([lmb_min,lmb_max])
	xmin, xmax = plt.xlim()
	plt.xlim((xmin,xmax))

	if autoaxis_Idp == False :#and ((plt_stk_avw == True) ):
		nmin_spc  = int(abs(lmb_min - crval_sp) / cdel1_sp)
		nmax_spc  = int(abs(lmb_max - crval_sp) / cdel1_sp)

		min_y_spc = min(inten_sp_1[nmin_spc:nmax_spc])
		max_y_spc = max(inten_sp_1[nmin_spc:nmax_spc])

		min_y     = min_y_spc - 1.5 #min(min_y_spc,min_y_e)
		max_y     = max_y_spc + 1.5 #max(max_y_spc,max_y_e)


		nmin_spc  = int(abs(lmb_min - crval_sp_hst) / cdel1_sp_hst)
		nmax_spc  = int(abs(lmb_max - crval_sp_hst) / cdel1_sp_hst)

		min_y_spc = min(inten_sp_hst[nmin_spc:nmax_spc]/N_GLX)
		max_y_spc = max(inten_sp_hst[nmin_spc:nmax_spc]/N_GLX)

		min_y     = min_y_spc - 0.05 #min(min_y_spc,min_y_e)
		max_y     = max_y_spc + 0.05 #max(max_y_spc,max_y_e)

		#nmin  = int(abs(lmb_min - crval_glx_hsw) / cdel1_glx_hsw)
		#nmax  = int(abs(lmb_max - crval_glx_hsw) / cdel1_glx_hsw)
		#min_y = (min(inten_glx_hsw[mask_hsw]/N_GLX_avw)) - 0.05#int(min(inten_glx_hsw[nmin:nmax])) - 0.5
		#max_y = (max(inten_glx_hsw[mask_hsw]/N_GLX_avw)) + 0.05#int(max(inten_glx_hsw[nmin:nmax])) + 0.5

	elif autoaxis_Idp == True:
		min_y, max_y = ax111.get_ylim()
		min_y, max_y = min_y -0.5, max_y+0.5
	plt.ylim([min_y,max_y])
	ymin, ymax = plt.ylim()
	plt.ylim((ymin,ymax))





	#################LINE ID-HISTO#################
	for lines in range(len(LINES[0])):

		if LINES[11][lines] == 1:
			#LOW ISM absorption line
			col_lne_idx = 'red'
			stl_lne_idx = 'solid'
		elif LINES[11][lines] == 2:
			#HIGH ISM absorption line
			col_lne_idx = 'green'
			stl_lne_idx = 'dotted'
		elif LINES[11][lines] == 3:
			#Stellar Photospheric Absorption Line
			col_lne_idx = 'cyan'
			stl_lne_idx ='dashed'
		elif LINES[11][lines] == 4:
			#Nebular Emission Line
			col_lne_idx = 'magenta'
			stl_lne_idx ='dashdot'
		elif LINES[11][lines] == 5:
			#Interstellar Fine-structure emission lines
			col_lne_idx = 'black'
			stl_lne_idx = (0, (3, 5, 1, 5, 1, 5)) #dashdotdotted
		elif LINES[11][lines] == 6:
			#HI absorption line
			col_lne_idx = 'blue'
			stl_lne_idx = (0, (3, 10, 1, 10, 1, 10)) #loosely dashdotdotted
		if lmb_min < LINES[0][lines]*(1+z_glx_Ps) < lmb_max :
			plt.plot([LINES[0][lines]*(1+z_glx_Ps),LINES[0][lines]*(1+z_glx_Ps)],[min_y,max_y],color=col_lne_idx, ls=stl_lne_idx,lw=0.8)
			#ax111.text(LINES[0][lines]*(1+z_glx_Ps),min_y,LINES[4][lines],rotation=90,va='bottom',fontsize=16,style='oblique')
		elif LINES[0][lines]*(1+z_glx_Ps) > 6700 :
			break
	#################LINE ID-HISTO#################

	#################LEGEND#################
	if show_legends == True:
		lg2=plt.legend(loc=1,prop={'size':14})
		lg2.draw_frame(False)
	elif show_legends == False:
		pass
	#################LEGEND#################

	plt.xlim([lmb_min,lmb_max])
	xmin, xmax = plt.xlim()
	plt.xlim((xmin,xmax))
	plt.ylim([min_y,max_y])
	ymin, ymax = plt.ylim()
	plt.ylim((ymin,ymax))

	################################################################SAVE###########################################################

	plt.savefig(PLOTFILENAME)
	verbose  = kwargs.get('verbose', False)
	epssave  = kwargs.get('epssave', False)
	showplot = kwargs.get('showplot', False) 

	print colored('Generated Plot: '+str(PLOTFILENAME),'green')

	if epssave == True:
		plt.savefig('Spectra.eps', rasterized=True)
		#os.system('open Spectra.eps')
	else:
		pass
	if showplot == True:
		#os.system('open '+str(PLOTFILENAME))
		pass
	else:
		pass
	plt.close('all')
####Fnc_Stk_Plt####
